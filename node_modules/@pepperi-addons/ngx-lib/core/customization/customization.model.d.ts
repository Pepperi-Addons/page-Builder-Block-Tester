import { ValidatorFn } from '@angular/forms';
/** Allowed layout options */
export declare type PepLayoutType = 'form' | 'card' | 'table';
/** Allowed style options */
export declare type PepStyleType = 'weak' | 'weak-invert' | 'regular' | 'strong';
/** Allowed style state options */
export declare type PepStyleStateType = 'system' | 'caution' | 'success';
/** Allowed size options */
export declare type PepSizeType = 'xs' | 'sm' | 'md' | 'lg' | 'xl';
/** Allowed horizontal alignment options */
export declare type PepHorizontalAlignment = 'left' | 'center' | 'right';
/** Default horizontal alignment. */
export declare const DEFAULT_HORIZONTAL_ALIGNMENT: PepHorizontalAlignment;
/** Allowed vertical alignment options */
export declare type PepVerticalAlignment = 'top' | 'middle' | 'bottom';
/** Default horizontal alignment. */
export declare const DEFAULT_VERTICAL_ALIGNMENT: PepVerticalAlignment;
export interface IPepOption {
    key: string;
    value: string;
}
interface IPepFieldBaseOptions {
    value?: any;
    formattedValue?: any;
    additionalValue?: string;
    key?: string;
    label?: string;
    accessory?: string;
    mandatory?: boolean;
    readonly?: boolean;
    disabled?: boolean;
    order?: number;
    controlType?: string;
    placeholder?: string;
    hidden?: boolean;
    row?: number;
    rowSpan?: number;
    col?: number;
    colSpan?: number;
    xAlignment?: PepHorizontalAlignment;
    yAlignment?: PepVerticalAlignment;
    maxFieldCharacters?: number;
    minValue?: number;
    maxValue?: number;
    textColor?: string;
    visible?: boolean;
}
export declare class PepFieldBase {
    value: any;
    formattedValue: any;
    additionalValue: string;
    key: string;
    label: string;
    accessory: string;
    mandatory: boolean;
    readonly: boolean;
    disabled: boolean;
    order: number;
    controlType: string;
    placeholder: string;
    hidden: boolean;
    row: number;
    rowSpan: number;
    col: number;
    colSpan: number;
    xAlignment: PepHorizontalAlignment;
    yAlignment: PepVerticalAlignment;
    groupFields: PepFieldBase[];
    maxFieldCharacters: number;
    minValue: number;
    maxValue: number;
    textColor: string;
    visible: boolean;
    constructor(options?: IPepFieldBaseOptions);
    protected getBaseValidators(isCheckbox?: boolean): ValidatorFn[];
    getValidators(): ValidatorFn[];
    update(options: IPepFieldBaseOptions): void;
}
export declare class PepPlaceholderField extends PepFieldBase {
    controlType: string;
    constructor(options?: IPepFieldBaseOptions);
}
export declare class PepSeparatorField extends PepFieldBase {
    controlType: string;
    constructor(options?: IPepFieldBaseOptions);
}
export declare class PepAttachmentField extends PepFieldBase {
    controlType: string;
    constructor(options?: IPepFieldBaseOptions);
}
export declare class PepIndicatorsField extends PepFieldBase {
    controlType: string;
    constructor(options?: IPepFieldBaseOptions);
}
export declare type PepTextboxFieldType = 'text' | 'link' | 'email' | 'phone' | 'duration' | 'int' | 'percentage' | 'currency' | 'real';
interface IPepTextboxFieldOptions extends IPepFieldBaseOptions {
    type?: PepTextboxFieldType;
}
export declare class PepTextboxField extends PepFieldBase {
    controlType: string;
    type: PepTextboxFieldType;
    constructor(options?: IPepTextboxFieldOptions);
    update(options: IPepTextboxFieldOptions): void;
    getValidators(): ValidatorFn[];
}
export declare class PepTextareaField extends PepFieldBase {
    controlType: string;
    constructor(options?: IPepFieldBaseOptions);
}
export declare class PepRichHtmlTextareaField extends PepFieldBase {
    controlType: string;
    constructor(options?: IPepFieldBaseOptions);
}
interface IPepSignatureFieldOptions extends IPepFieldBaseOptions {
    options?: IPepOption[];
}
export declare class PepSignatureField extends PepFieldBase {
    controlType: string;
    options: IPepOption[];
    constructor(options?: IPepSignatureFieldOptions);
}
interface IPepImageFieldOptions extends IPepFieldBaseOptions {
    hasCampaignField?: any;
    indicatorsField?: any;
    menuField?: any;
    options?: IPepOption[];
    sizeLimitMB?: number;
}
export declare class PepImageField extends PepFieldBase {
    controlType: string;
    hasCampaignField: any;
    indicatorsField: any;
    menuField: any;
    options: IPepOption[];
    sizeLimitMB: number;
    constructor(options?: IPepImageFieldOptions);
}
interface IPepImagesFieldOptions extends IPepFieldBaseOptions {
    options?: IPepOption[];
}
export declare class PepImagesField extends PepFieldBase {
    controlType: string;
    options: IPepOption[];
    constructor(options?: IPepImagesFieldOptions);
}
export declare type PepQuantitySelectorFieldType = 'button' | 'packageButton' | 'qs' | 'qsForMatrix';
interface IPepQuantitySelectorFieldOptions extends IPepFieldBaseOptions {
    allowDecimal?: boolean;
    notificationInfo?: any;
    type?: PepQuantitySelectorFieldType;
}
export declare class PepQuantitySelectorField extends PepFieldBase {
    controlType: string;
    allowDecimal: boolean;
    notificationInfo: any;
    updatedDataCount: number;
    type: PepQuantitySelectorFieldType;
    constructor(options?: IPepQuantitySelectorFieldOptions);
    update(options: IPepQuantitySelectorFieldOptions): void;
}
export declare type PepDateFieldType = 'datetime' | 'date';
interface IPepDateFieldOptions extends IPepFieldBaseOptions {
    type?: PepDateFieldType;
}
export declare class PepDateField extends PepFieldBase {
    controlType: string;
    type: PepDateFieldType;
    constructor(options?: IPepDateFieldOptions);
}
export declare type PepCheckboxFieldType = 'checkbox' | 'booleanText';
interface IPepCheckboxFieldOptions extends IPepFieldBaseOptions {
    type?: PepCheckboxFieldType;
}
export declare class PepCheckboxField extends PepFieldBase {
    controlType: string;
    type: PepCheckboxFieldType;
    constructor(options?: IPepCheckboxFieldOptions);
    getValidators(): ValidatorFn[];
}
export declare type PepSelectFieldType = 'select' | 'multi';
interface IPepSelectFieldOptions extends IPepFieldBaseOptions {
    options?: IPepOption[];
    type?: PepSelectFieldType;
}
export declare class PepSelectField extends PepFieldBase {
    controlType: string;
    options: IPepOption[];
    type: PepSelectFieldType;
    constructor(options?: IPepSelectFieldOptions);
    update(options: IPepSelectFieldOptions): void;
}
interface IPepAddressFieldOptions extends IPepFieldBaseOptions {
    groupFields?: PepFieldBase[];
}
export declare class PepAddressField extends PepFieldBase {
    controlType: string;
    groupFields: PepFieldBase[];
    constructor(options?: IPepAddressFieldOptions);
}
export declare type PepInternalButtonFieldType = 'button' | 'reference' | 'listofobjects';
interface IPepInternalButtonFieldOptions extends IPepFieldBaseOptions {
    referenceObjectType?: any;
    referenceObjectSubType?: string;
    referenceObjectInternalType?: string;
    type?: PepInternalButtonFieldType;
}
export declare class PepInternalButtonField extends PepFieldBase {
    controlType: string;
    referenceObjectType: any;
    referenceObjectSubType: string;
    referenceObjectInternalType: string;
    type: PepInternalButtonFieldType;
    constructor(options?: IPepInternalButtonFieldOptions);
}
interface IPepInternalPageFieldOptions extends IPepFieldBaseOptions {
    objectId?: string;
    parentId?: string;
    searchCode?: string;
}
export declare class PepInternalPageField extends PepFieldBase {
    controlType: string;
    objectId: string;
    parentId: string;
    searchCode: string;
    constructor(options?: IPepInternalPageFieldOptions);
}
interface IPepInternalMenuFieldOptions extends IPepFieldBaseOptions {
    options?: IPepOption[];
}
export declare class PepInternalMenuField extends PepFieldBase {
    controlType: string;
    options: IPepOption[];
    constructor(options?: IPepInternalMenuFieldOptions);
}
export interface IPepFieldValueChangeEvent {
    key: string;
    value: string;
    controlType?: string;
}
export interface IPepFieldClickEvent {
    key: string;
    value?: string;
    controlType?: string;
    eventWhich?: any;
    otherData?: any;
}
export {};
