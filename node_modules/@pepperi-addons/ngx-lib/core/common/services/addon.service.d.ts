import { PepSessionService } from './session.service';
import { PepFileService } from './file.service';
import { PepHttpService } from '../../http/services/http.service';
import { PepLoaderService } from '../../http/services/loader.service';
import { Observable } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { MultiTranslateHttpLoader } from 'ngx-translate-multi-http-loader';
import { TranslateService } from '@ngx-translate/core';
export declare class PepAddonService {
    private sessionService;
    private httpService;
    private loaderService;
    private readonly ADDON_ASSETS_PATH_KEY;
    private readonly ADDONS_DICTIONARY_ASSETS_PATH_KEY;
    private readonly ADDON_API_RELATIVE_PATH;
    private readonly ADDON_API_ASYNC_RELATIVE_PATH;
    constructor(sessionService: PepSessionService, httpService: PepHttpService, loaderService: PepLoaderService);
    private getAddonBaseRelativePath;
    getAddonStaticFolder(subAddonUUID?: string): string;
    setAddonStaticFolder(path: string, subAddonUUID?: string): void;
    getAddonApiCall(addonUUID: string, fileName: string, functionName: string, httpOptions?: {}, isAsync?: boolean): Observable<any>;
    postAddonApiCall(addonUUID: string, fileName: string, functionName: string, body?: {}, httpOptions?: {}, isAsync?: boolean): Observable<any>;
    fetch(input: RequestInfo, init?: RequestInit): Promise<Response>;
    static createDefaultMultiTranslateLoader(http: HttpClient, fileService: PepFileService, addonService: PepAddonService, subAddonUUID?: string): MultiTranslateHttpLoader;
    setDefaultTranslateLang(translate: TranslateService, urlLangParam?: string): void;
}
