export interface IPepRgbColor {
    r?: any;
    g?: any;
    b?: any;
}
export interface IPepHslColor {
    h?: any;
    s?: any;
    l?: any;
}
export interface IPepClosestColor {
    color: string;
    lightness: number;
}
export declare class PepColorService {
    readonly FLOAT_REGEX: RegExp;
    readonly THREE_DIGIT_HEX_COLOR_REGEX: RegExp;
    readonly THREE_DIGIT_HEX_COLOR_WITH_HASH_REGEX: RegExp;
    readonly SIX_DIGIT_HEX_COLOR_REGEX: RegExp;
    readonly SIX_DIGIT_HEX_COLOR_WITH_HASH_REGEX: RegExp;
    /**
     * Convert hex string to 6 digits hex string.
     * @param str The string to convert.
     */
    hex2sixDigitHex(str: string): string;
    /**
     * Convert rgb color to 6 digits hex string.
     * @param color The rgb color to convert.
     */
    rgb2sixDigitHex(color: IPepRgbColor): string;
    /**
     * Convert hex string to rgb color.
     * @param str The hex string to convert.
     */
    hex2rgb(str: string): IPepRgbColor;
    rgbString2hsl(str: string): IPepHslColor;
    rgb2hsl({ r, g, b }: IPepRgbColor): IPepHslColor;
    hslString2hsl(str: string): IPepHslColor;
    hsl2rgb({ h, s, l }: IPepHslColor): IPepRgbColor;
    hex2hsl(str: string): IPepHslColor;
    hsl2hex(hsl: IPepHslColor): string;
    relativeLuminance({ r, g, b }: IPepRgbColor): number;
    contrast(str1: string, str2: string): number;
    findClosestAccessibleDarkerColor(adjustableColor: string, otherColor: string, contrastRatio: number): IPepClosestColor;
    findClosestAccessibleLighterColor(adjustableColor: string, otherColor: string, contrastRatio: number): IPepClosestColor;
    findClosestAccessibleColor(adjustableColor: string, otherColor: string, contrastRatio: number): string;
    convertHslToStringHsl(hsl: IPepHslColor): string;
}
