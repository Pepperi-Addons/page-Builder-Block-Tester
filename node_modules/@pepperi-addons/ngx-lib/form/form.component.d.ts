import { OnInit, OnDestroy, KeyValueDiffers, EventEmitter, OnChanges, DoCheck } from '@angular/core';
import { FormGroup, FormBuilder } from '@angular/forms';
import { TranslateService } from '@ngx-translate/core';
import { PepDialogService } from '@pepperi-addons/ngx-lib/dialog';
import { IPepFieldValueChangeEvent, IPepFieldClickEvent, PepLayoutType, FIELD_TYPE, PepCustomizationService, PepLayoutService, UIControl, UIControlField, ObjectsDataRow, ObjectsDataRowCell, PepFieldBase, PepHorizontalAlignment, PepVerticalAlignment, X_ALIGNMENT_TYPE, Y_ALIGNMENT_TYPE, KeyValuePair, IPepOption } from '@pepperi-addons/ngx-lib';
export interface IPepFormFieldValueChangeEvent {
    id: string;
    key: string;
    value: string;
    controlType?: string;
}
export interface IPepFormFieldClickEvent {
    id: string;
    key: string;
    value: any;
    controlType: string;
    fieldType?: FIELD_TYPE;
    idType?: string;
    which?: any;
    editable?: boolean;
    otherData?: any;
}
export declare class PepFormComponent implements OnInit, DoCheck, OnChanges, OnDestroy {
    private dialogService;
    private customizationService;
    private layoutService;
    private fb;
    private translate;
    isReport: boolean;
    layout: UIControl;
    lockEvents: boolean;
    canEditObject: boolean;
    private _data;
    set data(value: ObjectsDataRow);
    get data(): ObjectsDataRow;
    isActive: boolean;
    layoutType: PepLayoutType;
    objectId: string;
    parentId: string;
    searchCode: string;
    showTitle: boolean;
    firstFieldAsLink: boolean;
    checkForChanges: any;
    valueChange: EventEmitter<IPepFormFieldValueChangeEvent>;
    formValidationChange: EventEmitter<boolean>;
    childClick: EventEmitter<any>;
    childChange: EventEmitter<any>;
    fieldClick: EventEmitter<IPepFormFieldClickEvent>;
    isLocked: boolean;
    formGutterSize: any;
    cardGutterSize: any;
    rowHeight: any;
    form: FormGroup;
    differ: any;
    private rows;
    fields: PepFieldBase[];
    columns: number;
    private hasMenuFloatingOnOtherField;
    private menuField;
    private menuDataField;
    private hasCampaignField;
    private hasCampaignDataField;
    private indicatorsField;
    private indicatorsDataField;
    private _shouldReloadForm;
    get shouldReloadForm(): boolean;
    constructor(dialogService: PepDialogService, customizationService: PepCustomizationService, layoutService: PepLayoutService, fb: FormBuilder, differs: KeyValueDiffers, translate: TranslateService);
    convertXAlignToHorizontalAlign(xAlign: X_ALIGNMENT_TYPE): PepHorizontalAlignment;
    convertYAlignToVerticalAlign(yAlign: Y_ALIGNMENT_TYPE): PepVerticalAlignment;
    convertOptionalValues(optionalValues: Array<KeyValuePair<string>>): IPepOption[];
    convertAddressFields(controlField: UIControlField, addressFields: Array<ObjectsDataRowCell>, canEditObject: boolean): PepFieldBase[];
    isMatrixField(apiNameToCheck: string): boolean;
    doesFieldHavaFloatingField(controlField: UIControlField, floatingField: any): boolean;
    getOptionsForCustomField(controlField: UIControlField, dataField: any, canEditObject: boolean): any;
    convertToCustomField(controlField: UIControlField, dataField: any, canEditObject: boolean, menuField: any, hasCampaignField: any, indicatorsField: any, objectId: any, parentId: any, searchCode: any): PepFieldBase;
    getFieldFormattedValue(field: PepFieldBase): string;
    private toControlGroup;
    showFormValidationMessage(): void;
    ngOnInit(): void;
    ngDoCheck(): void;
    ngOnChanges(changes: any): void;
    ngOnDestroy(): void;
    getUiControlFields(): Array<UIControlField>;
    initFieldsStructure(fields: PepFieldBase[], maxRow: number): void;
    setForm(isForUpdate?: boolean): void;
    initForm(): void;
    private updateField;
    updateForm(): void;
    ReloadForm(): void;
    private getFormControlById;
    private setSpecialFields;
    convertCustomFields(controlFields: Array<any>, dataFields: Array<any>): PepFieldBase[];
    onValueChanged(event: IPepFieldValueChangeEvent): void;
    onChildClicked(childClick: any): void;
    onChildChanged(childChange: any): void;
    onFormValidationChanged(formValidationChange: any): void;
    onClick(fieldClickEvent: IPepFieldClickEvent): void;
}
