import { OnInit, OnChanges, EventEmitter, ElementRef, Renderer2, OnDestroy } from '@angular/core';
import { FormGroup, FormBuilder } from '@angular/forms';
import { TranslateService } from '@ngx-translate/core';
import { PepLayoutType, PepCustomizationService, PepHorizontalAlignment, PepTextboxFieldType, PepUtilitiesService } from '@pepperi-addons/ngx-lib';
/**
 * This is a text box input component that can be use to
 *
 * @export
 * @class PepTextboxComponent
 * @implements {OnChanges}
 * @implements {OnInit}
 * @implements {OnDestroy}
 */
export declare class PepTextboxComponent implements OnChanges, OnInit, OnDestroy {
    fb: FormBuilder;
    private customizationService;
    private renderer;
    private element;
    private translate;
    private utilitiesService;
    dataQa: string;
    private _key;
    /**
     * The text box key
     *
     * @memberof PepTextboxComponent
     */
    set key(value: string);
    get key(): string;
    private _value;
    /**
     * The value of the text box.
     *
     * @memberof PepTextboxComponent
     */
    set value(value: string);
    get value(): string;
    private _formattedValue;
    /**
     * The formatted value.
     *
     * @memberof PepTextboxComponent
     */
    set formattedValue(value: string);
    get formattedValue(): string;
    /**
     * The title of the textbox.
     *
     * @memberof PepTextboxComponent
     */
    label: string;
    /**
     * The placeholder (relevant only for children - if parent isn't null).
     *
     * @memberof PepTextboxComponent
     */
    placeholder: string;
    /**
     * The type of the textbox.
     *
     * @type {PepTextboxFieldType}
     * @memberof PepTextboxComponent
     */
    type: PepTextboxFieldType;
    /**
     * If the textbox is mandatory
     *
     * @memberof PepTextboxComponent
     */
    mandatory: boolean;
    /**
     * If the textbox is disabled.
     *
     * @memberof PepTextboxComponent
     */
    disabled: boolean;
    /**
     * If the textbox is readonly
     *
     * @memberof PepTextboxComponent
     */
    readonly: boolean;
    maxFieldCharacters: number;
    textColor: string;
    xAlignment: PepHorizontalAlignment;
    rowSpan: number;
    minValue: number;
    maxValue: number;
    private _visible;
    set visible(visible: boolean);
    get visible(): boolean;
    form: FormGroup;
    isActive: boolean;
    showTitle: boolean;
    renderTitle: boolean;
    renderError: boolean;
    renderSymbol: boolean;
    layoutType: PepLayoutType;
    parentFieldKey: string;
    /**
     * The value change event.
     *
     * @type {EventEmitter<string>}
     * @memberof PepTextboxComponent
     */
    valueChange: EventEmitter<string>;
    formValidationChange: EventEmitter<boolean>;
    input: ElementRef;
    private _calculateFormattedValue;
    get calculateFormattedValue(): boolean;
    controlType: string;
    standAlone: boolean;
    isInEditMode: boolean;
    isInFocus: boolean;
    constructor(fb: FormBuilder, customizationService: PepCustomizationService, renderer: Renderer2, element: ElementRef, translate: TranslateService, utilitiesService: PepUtilitiesService);
    private setFormattedValue;
    private updateFormFieldValue;
    get displayValue(): string;
    private setDefaultForm;
    ngOnInit(): void;
    ngOnChanges(changes: any): void;
    ngOnDestroy(): void;
    onFocus(event: any): void;
    isNumberType(): boolean;
    isValueValid(value: string): boolean;
    isDifferentValue(value: string): boolean;
    onChange(e: any): void;
    onBlur(e: any): void;
    anchorClicked(): void;
    cardTemplateClicked(event: any): void;
}
