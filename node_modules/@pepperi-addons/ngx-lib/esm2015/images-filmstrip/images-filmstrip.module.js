import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { MatCommonModule } from '@angular/material/core';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatDialogModule } from '@angular/material/dialog';
import { MatIconModule } from '@angular/material/icon';
import { PepNgxLibModule } from '@pepperi-addons/ngx-lib';
import { PepFieldTitleModule } from '@pepperi-addons/ngx-lib/field-title';
import { PepIconModule, PepIconRegistry, pepIconSystemEdit, pepIconSystemClose, pepIconArrowRightAlt, pepIconArrowLeftAlt, } from '@pepperi-addons/ngx-lib/icon';
import { PepDialogModule } from '@pepperi-addons/ngx-lib/dialog';
import { GalleryModule } from 'ng-gallery';
import { ImageViewerModule } from '@hallysonh/ngx-imageviewer';
import { PepImagesFilmstripComponent } from './images-filmstrip.component';
export class PepImagesFilmstripModule {
    constructor(pepIconRegistry) {
        this.pepIconRegistry = pepIconRegistry;
        this.pepIconRegistry.registerIcons([
            pepIconSystemEdit,
            pepIconSystemClose,
            pepIconArrowRightAlt,
            pepIconArrowLeftAlt,
        ]);
    }
}
PepImagesFilmstripModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    // Material modules,
                    MatCommonModule,
                    MatFormFieldModule,
                    MatDialogModule,
                    MatIconModule,
                    // External modules
                    GalleryModule,
                    ImageViewerModule,
                    // ImageViewerModule.forRoot({
                    //     btnClass: 'default', // The CSS class(es) that will apply to the buttons
                    //     zoomFactor: 0.1, // The amount that the scale will be increased by
                    //     containerBackgroundColor: 'transparent', // The color to use for the background. This can provided in hex, or rgb(a).
                    //     wheelZoom: true, // If true, the mouse wheel can be used to zoom in
                    //     allowFullscreen: false, // If true, the fullscreen button will be shown, allowing the user to entr fullscreen mode
                    //     btnIcons: {
                    //         // The icon classes that will apply to the buttons. By default, font-awesome is used.
                    //         zoomIn: 'fa fa-plus',
                    //         zoomOut: 'fa fa-minus',
                    //         rotateClockwise: 'fa fa-repeat',
                    //         rotateCounterClockwise: 'fa fa-undo',
                    //         next: 'fa fa-arrow-right',
                    //         prev: 'fa fa-arrow-left',
                    //         fullscreen: 'fa fa-arrows-alt'
                    //     }
                    // }),
                    // ngx-lib modules
                    PepNgxLibModule,
                    PepIconModule,
                    PepFieldTitleModule,
                    PepDialogModule,
                ],
                exports: [PepImagesFilmstripComponent],
                declarations: [PepImagesFilmstripComponent],
            },] }
];
PepImagesFilmstripModule.ctorParameters = () => [
    { type: PepIconRegistry }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2VzLWZpbG1zdHJpcC5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtbGliL2ltYWdlcy1maWxtc3RyaXAvaW1hZ2VzLWZpbG1zdHJpcC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFdkQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzFELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQzFFLE9BQU8sRUFDSCxhQUFhLEVBQ2IsZUFBZSxFQUNmLGlCQUFpQixFQUNqQixrQkFBa0IsRUFDbEIsb0JBQW9CLEVBQ3BCLG1CQUFtQixHQUN0QixNQUFNLDhCQUE4QixDQUFDO0FBQ3RDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUVqRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRS9ELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBd0MzRSxNQUFNLE9BQU8sd0JBQXdCO0lBQ2pDLFlBQW9CLGVBQWdDO1FBQWhDLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUNoRCxJQUFJLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQztZQUMvQixpQkFBaUI7WUFDakIsa0JBQWtCO1lBQ2xCLG9CQUFvQjtZQUNwQixtQkFBbUI7U0FDdEIsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7O1lBOUNKLFFBQVEsU0FBQztnQkFDTixPQUFPLEVBQUU7b0JBQ0wsWUFBWTtvQkFDWixtQkFBbUI7b0JBQ25CLG9CQUFvQjtvQkFDcEIsZUFBZTtvQkFDZixrQkFBa0I7b0JBQ2xCLGVBQWU7b0JBQ2YsYUFBYTtvQkFDYixtQkFBbUI7b0JBQ25CLGFBQWE7b0JBQ2IsaUJBQWlCO29CQUNqQiw4QkFBOEI7b0JBQzlCLCtFQUErRTtvQkFDL0UseUVBQXlFO29CQUN6RSw0SEFBNEg7b0JBQzVILDBFQUEwRTtvQkFDMUUseUhBQXlIO29CQUN6SCxrQkFBa0I7b0JBQ2xCLGdHQUFnRztvQkFDaEcsZ0NBQWdDO29CQUNoQyxrQ0FBa0M7b0JBQ2xDLDJDQUEyQztvQkFDM0MsZ0RBQWdEO29CQUNoRCxxQ0FBcUM7b0JBQ3JDLG9DQUFvQztvQkFDcEMseUNBQXlDO29CQUN6QyxRQUFRO29CQUNSLE1BQU07b0JBQ04sa0JBQWtCO29CQUNsQixlQUFlO29CQUNmLGFBQWE7b0JBQ2IsbUJBQW1CO29CQUNuQixlQUFlO2lCQUNsQjtnQkFDRCxPQUFPLEVBQUUsQ0FBQywyQkFBMkIsQ0FBQztnQkFDdEMsWUFBWSxFQUFFLENBQUMsMkJBQTJCLENBQUM7YUFDOUM7OztZQWxERyxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBSZWFjdGl2ZUZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBNYXRDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9jb3JlJztcbmltcG9ydCB7IE1hdEZvcm1GaWVsZE1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2Zvcm0tZmllbGQnO1xuaW1wb3J0IHsgTWF0RGlhbG9nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvZGlhbG9nJztcbmltcG9ydCB7IE1hdEljb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9pY29uJztcblxuaW1wb3J0IHsgUGVwTmd4TGliTW9kdWxlIH0gZnJvbSAnQHBlcHBlcmktYWRkb25zL25neC1saWInO1xuaW1wb3J0IHsgUGVwRmllbGRUaXRsZU1vZHVsZSB9IGZyb20gJ0BwZXBwZXJpLWFkZG9ucy9uZ3gtbGliL2ZpZWxkLXRpdGxlJztcbmltcG9ydCB7XG4gICAgUGVwSWNvbk1vZHVsZSxcbiAgICBQZXBJY29uUmVnaXN0cnksXG4gICAgcGVwSWNvblN5c3RlbUVkaXQsXG4gICAgcGVwSWNvblN5c3RlbUNsb3NlLFxuICAgIHBlcEljb25BcnJvd1JpZ2h0QWx0LFxuICAgIHBlcEljb25BcnJvd0xlZnRBbHQsXG59IGZyb20gJ0BwZXBwZXJpLWFkZG9ucy9uZ3gtbGliL2ljb24nO1xuaW1wb3J0IHsgUGVwRGlhbG9nTW9kdWxlIH0gZnJvbSAnQHBlcHBlcmktYWRkb25zL25neC1saWIvZGlhbG9nJztcblxuaW1wb3J0IHsgR2FsbGVyeU1vZHVsZSB9IGZyb20gJ25nLWdhbGxlcnknO1xuaW1wb3J0IHsgSW1hZ2VWaWV3ZXJNb2R1bGUgfSBmcm9tICdAaGFsbHlzb25oL25neC1pbWFnZXZpZXdlcic7XG5cbmltcG9ydCB7IFBlcEltYWdlc0ZpbG1zdHJpcENvbXBvbmVudCB9IGZyb20gJy4vaW1hZ2VzLWZpbG1zdHJpcC5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICAgIGltcG9ydHM6IFtcbiAgICAgICAgQ29tbW9uTW9kdWxlLFxuICAgICAgICBSZWFjdGl2ZUZvcm1zTW9kdWxlLFxuICAgICAgICAvLyBNYXRlcmlhbCBtb2R1bGVzLFxuICAgICAgICBNYXRDb21tb25Nb2R1bGUsXG4gICAgICAgIE1hdEZvcm1GaWVsZE1vZHVsZSxcbiAgICAgICAgTWF0RGlhbG9nTW9kdWxlLFxuICAgICAgICBNYXRJY29uTW9kdWxlLFxuICAgICAgICAvLyBFeHRlcm5hbCBtb2R1bGVzXG4gICAgICAgIEdhbGxlcnlNb2R1bGUsXG4gICAgICAgIEltYWdlVmlld2VyTW9kdWxlLFxuICAgICAgICAvLyBJbWFnZVZpZXdlck1vZHVsZS5mb3JSb290KHtcbiAgICAgICAgLy8gICAgIGJ0bkNsYXNzOiAnZGVmYXVsdCcsIC8vIFRoZSBDU1MgY2xhc3MoZXMpIHRoYXQgd2lsbCBhcHBseSB0byB0aGUgYnV0dG9uc1xuICAgICAgICAvLyAgICAgem9vbUZhY3RvcjogMC4xLCAvLyBUaGUgYW1vdW50IHRoYXQgdGhlIHNjYWxlIHdpbGwgYmUgaW5jcmVhc2VkIGJ5XG4gICAgICAgIC8vICAgICBjb250YWluZXJCYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsIC8vIFRoZSBjb2xvciB0byB1c2UgZm9yIHRoZSBiYWNrZ3JvdW5kLiBUaGlzIGNhbiBwcm92aWRlZCBpbiBoZXgsIG9yIHJnYihhKS5cbiAgICAgICAgLy8gICAgIHdoZWVsWm9vbTogdHJ1ZSwgLy8gSWYgdHJ1ZSwgdGhlIG1vdXNlIHdoZWVsIGNhbiBiZSB1c2VkIHRvIHpvb20gaW5cbiAgICAgICAgLy8gICAgIGFsbG93RnVsbHNjcmVlbjogZmFsc2UsIC8vIElmIHRydWUsIHRoZSBmdWxsc2NyZWVuIGJ1dHRvbiB3aWxsIGJlIHNob3duLCBhbGxvd2luZyB0aGUgdXNlciB0byBlbnRyIGZ1bGxzY3JlZW4gbW9kZVxuICAgICAgICAvLyAgICAgYnRuSWNvbnM6IHtcbiAgICAgICAgLy8gICAgICAgICAvLyBUaGUgaWNvbiBjbGFzc2VzIHRoYXQgd2lsbCBhcHBseSB0byB0aGUgYnV0dG9ucy4gQnkgZGVmYXVsdCwgZm9udC1hd2Vzb21lIGlzIHVzZWQuXG4gICAgICAgIC8vICAgICAgICAgem9vbUluOiAnZmEgZmEtcGx1cycsXG4gICAgICAgIC8vICAgICAgICAgem9vbU91dDogJ2ZhIGZhLW1pbnVzJyxcbiAgICAgICAgLy8gICAgICAgICByb3RhdGVDbG9ja3dpc2U6ICdmYSBmYS1yZXBlYXQnLFxuICAgICAgICAvLyAgICAgICAgIHJvdGF0ZUNvdW50ZXJDbG9ja3dpc2U6ICdmYSBmYS11bmRvJyxcbiAgICAgICAgLy8gICAgICAgICBuZXh0OiAnZmEgZmEtYXJyb3ctcmlnaHQnLFxuICAgICAgICAvLyAgICAgICAgIHByZXY6ICdmYSBmYS1hcnJvdy1sZWZ0JyxcbiAgICAgICAgLy8gICAgICAgICBmdWxsc2NyZWVuOiAnZmEgZmEtYXJyb3dzLWFsdCdcbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gfSksXG4gICAgICAgIC8vIG5neC1saWIgbW9kdWxlc1xuICAgICAgICBQZXBOZ3hMaWJNb2R1bGUsXG4gICAgICAgIFBlcEljb25Nb2R1bGUsXG4gICAgICAgIFBlcEZpZWxkVGl0bGVNb2R1bGUsXG4gICAgICAgIFBlcERpYWxvZ01vZHVsZSxcbiAgICBdLFxuICAgIGV4cG9ydHM6IFtQZXBJbWFnZXNGaWxtc3RyaXBDb21wb25lbnRdLFxuICAgIGRlY2xhcmF0aW9uczogW1BlcEltYWdlc0ZpbG1zdHJpcENvbXBvbmVudF0sXG59KVxuZXhwb3J0IGNsYXNzIFBlcEltYWdlc0ZpbG1zdHJpcE1vZHVsZSB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBwZXBJY29uUmVnaXN0cnk6IFBlcEljb25SZWdpc3RyeSkge1xuICAgICAgICB0aGlzLnBlcEljb25SZWdpc3RyeS5yZWdpc3Rlckljb25zKFtcbiAgICAgICAgICAgIHBlcEljb25TeXN0ZW1FZGl0LFxuICAgICAgICAgICAgcGVwSWNvblN5c3RlbUNsb3NlLFxuICAgICAgICAgICAgcGVwSWNvbkFycm93UmlnaHRBbHQsXG4gICAgICAgICAgICBwZXBJY29uQXJyb3dMZWZ0QWx0LFxuICAgICAgICBdKTtcbiAgICB9XG59XG4iXX0=