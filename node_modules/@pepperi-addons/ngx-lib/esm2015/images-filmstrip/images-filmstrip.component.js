import { Component, ViewChild, ElementRef, Input, TemplateRef, Renderer2, ChangeDetectorRef, Inject, Optional, } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
import { TranslateService } from '@ngx-translate/core';
import { Gallery, LoadingStrategy, SlidingDirection, ThumbnailsPosition, ImageItem, } from 'ng-gallery';
import { PepCustomizationService, PepLayoutService, PepFileService, DEFAULT_HORIZONTAL_ALIGNMENT, PepImagesField, } from '@pepperi-addons/ngx-lib';
import { PepDialogService } from '@pepperi-addons/ngx-lib/dialog';
import { pepIconArrowRightAlt } from '@pepperi-addons/ngx-lib/icon';
import { pepIconNoImage2 } from '@pepperi-addons/ngx-lib/icon';
import 'hammerjs';
// export const slideInAnimation = trigger('slideAnimation', [
//     state('in', style({ transform: 'translateY(0)', opacity: 1 })),
//     transition(':enter', [
//         style({ transform: 'translateY(-100%)', opacity: 0 }),
//         animate(400)
//     ]),
//     transition(':leave', [
//         animate(400, style({ transform: 'translateY(-100%)', opacity: 0 }))
//     ])
// ]);
import { IMAGEVIEWER_CONFIG, createButtonConfig, } from '@hallysonh/ngx-imageviewer';
export function createViewerConfig(translate) {
    return {
        // width: 850,
        // height: 150,
        bgStyle: '#FFF',
        // scaleStep: 0.1, // zoom scale step (using the zoom in/out buttons)
        // rotateStepper: false, // touch rotate should rotate only 90 to 90 degrees
        loadingMessage: translate.instant('MESSAGES.INFO_LOADING_FILE'),
        // buttonStyle: {
        //     iconFontFamily: 'Material Icons', // font used to render the button icons
        //     alpha: 0.5, // buttons' transparence value
        //     hoverAlpha: 0.7, // buttons' transparence value when mouse is over
        //     bgStyle: '#000000', //  buttons' background style
        //     iconStyle: '#ffffff', // buttons' icon colors
        //     borderStyle: '#000000', // buttons' border style
        //     borderWidth: 0, // buttons' border width (0 == disabled)
        // },
        // tooltips: {
        //     enabled: true, // enable or disable tooltips for buttons
        //     bgStyle: '#000000', // tooltip background style
        //     bgAlpha: 0.5, // tooltip background transparence
        //     textStyle: '#ffffff', // tooltip's text style
        //     textAlpha: 0.9, // tooltip's text transparence
        //     padding: 15, // tooltip padding
        //     radius: 20, // tooltip border radius
        // },
        // shorter button configuration style
        nextPageButton: createButtonConfig('navigate_next', 'Next page', 0, false),
        beforePageButton: createButtonConfig('navigate_before', 'Previous page', 1, false),
        zoomOutButton: createButtonConfig('zoom_out', 'Zoom out', 0, false),
        zoomInButton: createButtonConfig('zoom_in', 'Zoom in', 1, false),
        rotateLeftButton: createButtonConfig('rotate_left', 'Rotate left', 2, false),
        rotateRightButton: createButtonConfig('rotate_right', 'Rotate right', 3, false),
        resetButton: createButtonConfig('autorenew', 'Reset', 4, false),
    };
}
export class PepImagesFilmstripComponent {
    constructor(customizationService, dialogService, layoutService, fileService, gallery, renderer, element, cd, dialogRef, data) {
        this.customizationService = customizationService;
        this.dialogService = dialogService;
        this.layoutService = layoutService;
        this.fileService = fileService;
        this.gallery = gallery;
        this.renderer = renderer;
        this.element = element;
        this.cd = cd;
        this.dialogRef = dialogRef;
        this.data = data;
        // @ViewChild('ngxViewerImage') ngxViewerImage: any; // TODO: Check if we need to use this??
        this.key = '';
        this.value = '';
        this.label = '';
        this.xAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;
        this._rowSpan = 1;
        this.controlType = 'images';
        this.form = null;
        this.uid = '0';
        this.showTitle = false;
        this._layoutType = 'form';
        this.currIndex = 0;
        this.showThumbnails = false;
        this.items = null;
        this.inDialog = false;
        this.mandatory = false;
        this.readonly = false;
        this.disabled = false;
        this.fieldHeight = '';
        this.standAlone = false;
        this.galleryWidth = 0;
        this.isVertical = false;
        // If data exist copy all data properties into this.
        if (dialogRef && data) {
            this.inDialog = true;
            Object.keys(data).forEach((key) => {
                if (key in this) {
                    this[key] = data[key];
                }
            });
        }
        this.config = {
            // nav: false, // Show navigation buttons
            navIcon: pepIconArrowRightAlt.data,
            // loop: true,
            // zoomOut: 0,
            // dots: false,
            // dotsPosition: 'bottom',
            // counterPosition: 'top',
            // thumb: true,
            counter: false,
            gestures: true,
            // autoPlay: false,
            // thumbWidth: 120,
            // thumbHeight: 90,
            imageSize: 'contain',
            // panSensitivity: 25,
            // disableThumb: false,
            // playerInterval: 3000,
            // thumbMode: ThumbnailsMode.Free,
            // thumbPosition: ThumbnailsPosition.Bottom,
            loadingStrategy: LoadingStrategy.Default,
            // slidingDirection: SlidingDirection.Horizontal,
        };
    }
    set rowSpan(value) {
        this._rowSpan = value;
        this.setFieldHeight();
    }
    get rowSpan() {
        return this._rowSpan;
    }
    set layoutType(value) {
        this._layoutType = value;
        this.setFieldHeight();
    }
    get layoutType() {
        return this._layoutType;
    }
    setFieldHeight() {
        this.fieldHeight = this.customizationService.calculateFieldHeight(this.layoutType, this.rowSpan, this.standAlone);
    }
    setDefaultForm() {
        const pepField = new PepImagesField({
            key: this.key,
            value: this.value,
            mandatory: this.mandatory,
            readonly: this.readonly,
            disabled: this.disabled,
        });
        this.form = this.customizationService.getDefaultFromGroup(pepField);
    }
    ngOnInit() {
        if (!this.inDialog) {
            if (this.form === null) {
                this.standAlone = true;
                this.setFieldHeight();
                this.setDefaultForm();
                this.renderer.addClass(this.element.nativeElement, PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME);
            }
        }
        if (this.items === null) {
            const imgArr = this.value ? this.value.split(';') : [];
            // add No image image when there is no images
            if (imgArr.length === 0) {
                const noImageSrc = this.fileService.getSvgAsImageSrc(pepIconNoImage2.data);
                imgArr.push(noImageSrc);
            }
            this.items = imgArr.map((img) => new ImageItem({ src: img, thumb: img }));
        }
        this.config.dots = this.config.nav = this.items.length > 1;
        this.config.thumb =
            (this.key === 'ItemFilmstripImages' || this.showThumbnails) &&
                this.items.length > 1
                ? true
                : false;
        this.currIndex =
            this.key === 'ItemFilmstripImages' &&
                this.currIndex === 0 &&
                this.items.length > 1
                ? Math.floor(this.items.length / 2) - 1
                : this.currIndex;
    }
    ngAfterViewInit() {
        if (this.inDialog) {
            this.afterDialogOpened();
        }
        else {
            this.galleryRef = this.gallery.ref(`${this.key}-${this.uid}-gallery`);
            this.initGalleryStyle(this.galleryCont, this.galleryRef);
        }
    }
    ngOnChanges() {
        if (this.standAlone) {
            this.setDefaultForm();
        }
    }
    ngOnDestroy() {
        if (this.galleryRef) {
            this.galleryRef.destroy();
        }
        if (this.dialogGalleryRef) {
            this.dialogGalleryRef.destroy();
        }
        // if (this.myPinch) { this.myPinch.destroy(); }
    }
    initGalleryStyle(galleryContainer, galleryRef) {
        setTimeout(() => {
            // Set thumbnails position and sliding direction
            this.setThumbnailDimension(galleryContainer);
            galleryRef.setConfig(this.config);
        }, 0);
        const currentIndex = this.currIndex;
        if (currentIndex > 0) {
            setTimeout(() => {
                galleryRef.load(this.items);
                galleryRef.set(currentIndex);
            }, 0);
            // galleryRef.set(currentIndex);
        }
        else {
            galleryRef.load(this.items);
        }
    }
    onError(e) {
        const noImageSrc = this.fileService.getSvgAsImageSrc(pepIconNoImage2.data);
        const noimg = new ImageItem({ src: noImageSrc, thumb: noImageSrc });
        this.items.splice(e.itemIndex, 1, noimg);
    }
    enlargeImage(event) {
        const config = this.dialogService.getDialogConfig({}, 'inline');
        config.maxWidth = '75vw';
        config.height = '95vh';
        const dialogRef = this.dialogService.openDialog(this.galleryDialogTemplate, {
            currIndex: this.currIndex,
        }, config);
        dialogRef.afterOpened().subscribe(() => {
            this.afterDialogOpened();
        });
        // Update currentIndex in galleryRef
        // dialogRef.afterClosed().subscribe(value => {
        //     this.galleryRef.set(this.currIndex);
        // });
    }
    afterDialogOpened() {
        this.dialogGalleryRef = this.gallery.ref(`${this.key}-${this.uid}-dlgGallery`);
        this.initGalleryStyle(this.galleryDialogCont, this.dialogGalleryRef);
    }
    setThumbnailDimension(galleryContainer) {
        this.galleryWidth = galleryContainer.nativeElement.clientWidth;
        // this.galleryHeight = galleryContainer.nativeElement.clientHeight - 32; // TODO - TALK WITH TOMER
        this.galleryHeight = this.inDialog
            ? galleryContainer.nativeElement.clientHeight - 32
            : galleryContainer.nativeElement.clientHeight;
        // this.galleryHeight = galleryContainer.nativeElement.clientHeight - 32;
        this.cd.detectChanges();
        this.isVertical = this.galleryWidth < this.galleryHeight;
        this.cd.detectChanges();
        if (this.isVertical) {
            let width = (this.galleryWidth - (this.items.length - 1) * 16) /
                this.items.length;
            width = Math.min(Math.max(width, 24), 96);
            this.config.thumbHeight = width;
            this.config.thumbWidth = width + 16;
        }
        else {
            let height = (this.galleryHeight - (this.items.length - 1) * 16) /
                this.items.length;
            height = Math.min(Math.max(height, 24), 96);
            this.config.thumbHeight = height + 16;
            this.config.thumbWidth = height;
        }
        this.config.thumbPosition = this.isVertical
            ? ThumbnailsPosition.Bottom
            : this.layoutService.isRtl()
                ? ThumbnailsPosition.Right
                : ThumbnailsPosition.Left;
        this.config.slidingDirection =
            this.key !== 'ItemFilmstripImages'
                ? SlidingDirection.Horizontal
                : this.isVertical
                    ? SlidingDirection.Horizontal
                    : SlidingDirection.Vertical;
        this.config.imageSize = 'contain';
    }
    indexChange(item) {
        this.currIndex = item.currIndex;
        // if (this.ngxViewerImage && this.ngxViewerImage.scale) {
        //     this.ngxViewerImage.scale = 1;
        //     this.updateStyle();
        // }
    }
}
PepImagesFilmstripComponent.decorators = [
    { type: Component, args: [{
                selector: 'pep-images-filmstrip',
                template: "<ng-container *ngIf=\"inDialog; then galleryDialogTemplate; else regularTemplate\"></ng-container>\n<ng-template #regularTemplate>\n    <ng-container [formGroup]=\"form\">\n        <div class=\"images-filmstrip-container\">\n            <pep-field-title [label]=\"label\" [xAlignment]=\"xAlignment\" [showTitle]=\"showTitle\">\n            </pep-field-title>\n            <div #galleryCont class=\"img-wrapper\" [ngClass]=\"isVertical ? 'vertical-gallery' : 'horizontal-gallery'\"\n                [style.height]=\"fieldHeight\">\n                <gallery id=\"{{key}}-{{uid}}-gallery\" (itemClick)=\"enlargeImage($event);\" [imageSize]=\"'contain'\"\n                    (indexChange)=\"indexChange($event)\" (error)=\"onError($event)\">\n                </gallery>\n            </div>\n        </div>\n    </ng-container>\n</ng-template>\n\n<ng-template #galleryDialogTemplate>\n    <div class=\"gallery-dialog\">\n        <pep-dialog [title]=\"label\" [showFooter]=\"false\">\n            <div pep-dialog-content #galleryDialogCont class=\"gallery-dialog-content\"\n                [ngClass]=\"isVertical ? 'vertical-gallery' : 'horizontal-gallery'\">\n                <gallery id=\"{{key}}-{{uid}}-dlgGallery\" [imageSize]=\"'contain'\" (indexChange)=\"indexChange($event)\"\n                    (error)=\"onError($event)\">\n                </gallery>\n            </div>\n        </pep-dialog>\n    </div>\n</ng-template>\n\n<!-- Add custom template to image items -->\n<ng-template #itemTemplate let-index=\"index\" let-type=\"type\" let-data=\"data\" let-currIndex=\"currIndex\">\n    <ng-container *ngIf=\"index === currIndex\">\n        <ngx-imageviewer [src]=\"data.src\">\n        </ngx-imageviewer>\n    </ng-container>\n</ng-template>",
                // animations: [slideInAnimation],
                providers: [
                    {
                        provide: IMAGEVIEWER_CONFIG,
                        // useValue: IMAGEVIEWER_CONFIG_DEFAULT,
                        useFactory: createViewerConfig,
                        deps: [TranslateService],
                    },
                ],
                styles: [":host{width:100%;height:inherit;display:block}:host>*{align-self:center}.gallery-dialog{height:inherit}.images-filmstrip-container,.images-filmstrip-container .img-wrapper,gallery{height:100%}gallery{direction:ltr;min-height:100%}.gallery-dialog-content gallery{min-width:65vw}.gallery-dialog-content ::ng-deep gallery-item gallery-image .g-image-item{background-size:content!important}.gallery-dialog-content ::ng-deep gallery-item .g-item-template ngx-imageviewer canvas{max-width:100%!important;max-height:100%!important}::ng-deep gallery-thumbs{margin:0 1rem 0 .5rem;margin:0 var(--pep-spacing-lg,1rem) 0 var(--pep-spacing-sm,.5rem)}::ng-deep gallery-thumbs gallery-thumb{padding:0!important;border-radius:.25rem;border-radius:var(--pep-border-radius-md,.25rem);margin:.5rem 0;margin:var(--pep-spacing-sm,.5rem) 0}::ng-deep gallery-thumbs gallery-thumb .g-image-item{background-size:cover!important}::ng-deep gallery-item gallery-image .g-image-item{border-radius:.5rem;border-radius:var(--pep-border-radius-lg,.5rem)}::ng-deep gallery-item:hover{cursor:pointer}::ng-deep gallery-dots{position:absolute!important;border-radius:.25rem;border-radius:var(--pep-border-radius-md,.25rem)}::ng-deep gallery-dots.pep-button,::ng-deep gallery-dots.pepperi-button{display:flex!important}::ng-deep .img-container{display:flex;align-items:center}::ng-deep .g-nav-next,::ng-deep .g-nav-prev{width:2rem!important;height:2rem!important;padding:.25rem;border-radius:.25rem;border-radius:var(--pep-border-radius-md,.25rem)}::ng-deep .g-nav-next .mat-icon,::ng-deep .g-nav-prev .mat-icon{display:inline-block!important}::ng-deep .g-nav-prev{transform:translateY(-50%) perspective(1px) scaleX(-1)!important}.vertical-gallery ::ng-deep gallery-thumbs{margin:1rem 0 .5rem;margin:var(--pep-spacing-lg,1rem) 0 var(--pep-spacing-sm,.5rem) 0}.vertical-gallery ::ng-deep gallery-thumbs gallery-thumb{margin:0 .5rem;margin:0 var(--pep-spacing-sm,.5rem)}"]
            },] }
];
PepImagesFilmstripComponent.ctorParameters = () => [
    { type: PepCustomizationService },
    { type: PepDialogService },
    { type: PepLayoutService },
    { type: PepFileService },
    { type: Gallery },
    { type: Renderer2 },
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: MatDialogRef, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
PepImagesFilmstripComponent.propDecorators = {
    key: [{ type: Input }],
    value: [{ type: Input }],
    label: [{ type: Input }],
    xAlignment: [{ type: Input }],
    rowSpan: [{ type: Input }],
    form: [{ type: Input }],
    uid: [{ type: Input }],
    showTitle: [{ type: Input }],
    layoutType: [{ type: Input }],
    currIndex: [{ type: Input }],
    showThumbnails: [{ type: Input }],
    galleryCont: [{ type: ViewChild, args: ['galleryCont',] }],
    galleryDialogTemplate: [{ type: ViewChild, args: ['galleryDialogTemplate', { read: TemplateRef },] }],
    galleryDialogCont: [{ type: ViewChild, args: ['galleryDialogCont',] }]
};
//# sourceMappingURL=data:application/json;base64,