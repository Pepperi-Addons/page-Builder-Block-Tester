import { Component, Injectable, Input, Output, EventEmitter, ViewChild, ChangeDetectionStrategy, } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { FileUploader } from 'ng2-file-upload';
import { PepFileService, PepCustomizationService, DEFAULT_HORIZONTAL_ALIGNMENT, } from '@pepperi-addons/ngx-lib';
import { PepDialogService, PepDialogData, } from '@pepperi-addons/ngx-lib/dialog';
import { pepIconNoImage2 } from '@pepperi-addons/ngx-lib/icon';
export class PepFilesUploaderComponent {
    constructor(dialogService, customizationService, fileService, translate) {
        this.dialogService = dialogService;
        this.customizationService = customizationService;
        this.fileService = fileService;
        this.translate = translate;
        this.key = '';
        this.src = '';
        this.label = '';
        this.mandatory = false;
        this.disabled = false;
        this.xAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;
        this._rowSpan = 1;
        this.controlType = '';
        this.sizeLimitMB = 5;
        this.standAlone = false;
        this.acceptedExtensions = 'bmp,jpg,jpeg,png,gif,ico,svg,html,css';
        this.layoutType = 'form';
        this.fileChange = new EventEmitter();
        this.elementClick = new EventEmitter();
        this.fieldHeight = '';
        this.progress = 0;
        // response: string;
        this.intervalID = null;
        this.uploader = new FileUploader({ removeAfterUpload: true });
        this.uploader.onAfterAddingFile = (item) => {
            var _a;
            if ((_a = this.fileInput) === null || _a === void 0 ? void 0 : _a.nativeElement) {
                this.fileInput.nativeElement.value = '';
            }
            const reader = new FileReader();
            reader.onload = (event) => {
                const fileNameArray = item._file.name.split('.');
                const fileName = fileNameArray[0];
                const fileExt = fileNameArray[1]; // item._file.name.split('.').pop();
                const target = event.target || event.srcElement;
                const fileStr = target.result;
                const errorMsg = this.isValidFile(fileStr, fileExt, this.acceptedExtensions, this.sizeLimitMB);
                if (errorMsg === '') {
                    this.src = fileStr;
                    // this.setIntervalX(25, 75);
                    // this.setProgress(5);
                    this.fileChange.emit({
                        acceptedExtensions: this.acceptedExtensions,
                        fileStr,
                        fileName,
                        fileExt,
                    });
                }
                else {
                    const title = this.translate.instant('MESSAGES.TITLE_NOTICE');
                    const data = new PepDialogData({
                        title,
                        content: errorMsg,
                    });
                    this.dialogService.openDefaultDialog(data);
                }
            };
            reader.readAsDataURL(item._file);
        };
    }
    set rowSpan(value) {
        this._rowSpan = value;
    }
    get rowSpan() {
        return this._rowSpan;
    }
    ngOnInit() {
        /*this.uploader.onCompleteAll = () => {
            this.fileInput.nativeElement.value = '';
        }*/
    }
    isValidFile(fileStr, fileExtension, acceptedExtensions, sizeLimitMB = 5) {
        const file = fileStr;
        let fileSize = 0;
        let content = '';
        // check if got file as Base64
        if (typeof fileStr === 'string' && fileStr.indexOf('data:') > -1) {
            fileSize = this.getBase64FileSize(fileStr);
        }
        else {
            fileSize = file.size;
        }
        // check the size and the extension
        const sizeOK = fileSize !== -1 && file != null && fileSize < sizeLimitMB * 1048576;
        const extensionOK = acceptedExtensions === '' ||
            acceptedExtensions.indexOf(fileExtension.toLowerCase()) !== -1;
        if (!extensionOK) {
            content = this.translate.instant('MESSAGES.ERROR_FAILD_TO_LOAD_EXTENSION', {
                fileExtension: "<label class='uppercase bold'>" +
                    fileExtension +
                    '</label>',
            });
        }
        else if (!sizeOK) {
            content = this.translate.instant('MESSAGES.ERROR_FAILD_TO_LOAD_SIZE', {
                fileSize: "<label class='uppercase bold'>" +
                    sizeLimitMB.toString() +
                    '</label>',
            });
        }
        return content;
    }
    getBase64FileSize(base64String) {
        let fileSize;
        try {
            base64String = base64String.substr(base64String.indexOf(',') + 1);
            fileSize = atob(base64String).length;
        }
        catch (e) {
            fileSize = -1;
        }
        return fileSize; // return size in bytes;
    }
    // setIntervalX(delay, repetitions): void {
    //     let x = 0;
    //     this.intervalID = window.setInterval(() => {
    //         // this.setProgress(this.progress + 5);
    //         if (++x === repetitions || this.uploader.progress >= 100) {
    //             window.clearInterval(this.intervalID);
    //         }
    //     }, delay);
    // }
    errorHandler(event) {
        event.target.src = this.fileService.getSvgAsImageSrc(pepIconNoImage2.data);
        event.target.title = this.translate.instant('IMAGE.NO_IMAGE');
    }
    setProgress(progress) {
        this.progress = progress;
        this.uploader.progress = progress;
    }
    deleteFile() {
        this.uploader.clearQueue();
        window.clearInterval(this.intervalID);
        this.setProgress(0);
        const empltValue = '';
        this.src = empltValue;
        this.fileChange.emit(null);
        // this.fileChange.emit({
        //     acceptedExtensions: this.acceptedExtensions,
        //     fileStr: null,
        //     fileExt: null,
        // });
    }
    onElementClicked(event) {
        this.elementClick.emit({
            key: this.key,
            controlType: this.controlType,
            eventWhich: event.which,
        });
    }
    onClick_ChooseFile(event) {
        var _a;
        if ((_a = this.fileInput) === null || _a === void 0 ? void 0 : _a.nativeElement) {
            this.fileInput.nativeElement.click();
        }
    }
    onKeyPress_ChooseFile(event) {
        var _a;
        const e = event;
        if ([13, 32].indexOf(e.which) !== -1) {
            if ((_a = this.fileInput) === null || _a === void 0 ? void 0 : _a.nativeElement) {
                this.fileInput.nativeElement.click();
            }
        }
        e.preventDefault();
    }
}
PepFilesUploaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'pep-files-uploader',
                template: "<ng-template #pepTemplate>\n    <mat-form-field [formGroup]=\"form\" appearance=\"outline\">\n        <div class=\"pep-file-wrapper\">\n            <div class=\"pep-file body-sm\" [style.height]=\"fieldHeight\" [ngClass]=\"{\n                    'one-row': rowSpan == 1,\n                    disable: disabled\n                }\">\n                <ng-container *ngIf=\"src != ''; then withImg; else noImg\"></ng-container>\n                <ng-template #withImg>\n                    <button *ngIf=\"!disabled\" mat-button (click)=\"deleteFile()\"\n                        class=\"pep-button icon-button weak md delete\" tabindex=\"-1\"\n                        [ngClass]=\"{ 'right-alignment': xAlignment == 'right' }\">\n                        <mat-icon>\n                            <pep-icon name=\"system_bin\"></pep-icon>\n                        </mat-icon>\n                    </button>\n                    <div class=\"pep-file-preview\" (click)=\"onElementClicked($event)\">\n                        <img *ngIf=\"controlType === 'image'\" #imagePreview [src]=\"src\" class=\"pep-file-preview-img\"\n                            [style.max-height]=\"fieldHeight\" (error)=\"errorHandler($event)\" [alt]=\"label\"\n                            [ngClass]=\"['text-align-' + xAlignment]\" />\n                        <div *ngIf=\"controlType === 'attachment'\" class=\"ellipsis pep-file-message\">\n                            <a *ngIf=\"src != ''\" href=\"javascript:void(0)\">\n                                <mat-icon class=\"pep-spacing-element\">\n                                    <pep-icon name=\"system_attach\"></pep-icon>\n                                </mat-icon>\n                                <span class=\"body-sm ellipsis\">{{ 'FILE.SEE_ORIGINAL' | translate }}</span>\n                            </a>\n                        </div>\n                    </div>\n                </ng-template>\n                <ng-template #noImg>\n                    <div class=\"ellipsis pep-file-message\">\n                        <mat-icon *ngIf=\"controlType === 'attachment'\" class=\"pep-spacing-element\">\n                            <pep-icon name=\"system_attach\"></pep-icon>\n                        </mat-icon>\n                        <mat-icon *ngIf=\"controlType === 'image'\" class=\"pep-spacing-element\">\n                            <pep-icon name=\"system_file_upload_cloud\"></pep-icon>\n                        </mat-icon>\n                        <span class=\"body-sm ellipsis\" *ngIf=\"progress == 0\">\n                            {{ (disabled ? (controlType === 'image' ? 'MESSAGES.INFO_MISSING_IMAGE' :\n                            'MESSAGES.INFO_MISSING_FILE') : 'FILE.HINT') | translate }}\n                        </span>\n                        <!-- <p *ngIf=\"progress != 0\" class=\"pull-left flip\"\n                            [ngClass]=\"{ 'pull-left flip': rowSpan == 1, image: controlType == 'image', attachment: controlType == 'attachment' }\">\n                            {{ 'FILE.UPLOADING_FILE' | translate }}\n                        </p> -->\n                    </div>\n                    <ng-container *ngIf=\"!disabled\">\n                        <input #fileInput id=\"pep-file-{{ key }}\" tabindex=\"-1\" type=\"file\" accept=\"acceptedExtensions\"\n                            ng2FileSelect [uploader]=\"uploader\" autocomplete=\"off\" />\n                        <button *ngIf=\"progress != 0\" mat-button class=\"pep-button icon-button weak md delete\"\n                            [ngClass]=\"{ 'right-alignment': xAlignment == 'right' }\">\n                            <mat-icon>\n                                <pep-icon name=\"system_processing\" [spin]=\"true\">\n                                </pep-icon>\n                            </mat-icon>\n                        </button>\n                    </ng-container>\n                </ng-template>\n            </div>\n            <input [id]=\"key\" matInput [name]=\"key\" [formControlName]=\"key\" class=\"hidden-input\" type=\"text\"\n                [value]=\"src\" (click)=\"onClick_ChooseFile($event)\" (keypress)=\"onKeyPress_ChooseFile($event)\"\n                autocomplete=\"off\" />\n        </div>\n\n        <mat-error><span class=\"body-xs\"\n                [title]=\"mandatory && src.length == 0 ? ('MESSAGES.ERROR_IS_REQUIRED' | translate: { field: label }) : ('MESSAGES.ERROR_IS_NOT_VALID' | translate: { field: label })\"\n                [innerText]=\"mandatory && src.length == 0 ? ('MESSAGES.ERROR_IS_REQUIRED' | translate: { field: label }) : ('MESSAGES.ERROR_IS_NOT_VALID' | translate: { field: label })\"></span>\n        </mat-error>\n    </mat-form-field>\n</ng-template>\n\n<ng-container *ngIf=\"layoutType === 'form'\">\n    <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"layoutType === 'card'\">\n    <!-- <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container> -->\n</ng-container>\n\n<ng-container *ngIf=\"layoutType === 'table'\">\n    <!-- <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container> -->\n</ng-container>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{display:grid;height:inherit}"]
            },] },
    { type: Injectable }
];
PepFilesUploaderComponent.ctorParameters = () => [
    { type: PepDialogService },
    { type: PepCustomizationService },
    { type: PepFileService },
    { type: TranslateService }
];
PepFilesUploaderComponent.propDecorators = {
    key: [{ type: Input }],
    src: [{ type: Input }],
    label: [{ type: Input }],
    mandatory: [{ type: Input }],
    disabled: [{ type: Input }],
    xAlignment: [{ type: Input }],
    rowSpan: [{ type: Input }],
    controlType: [{ type: Input }],
    sizeLimitMB: [{ type: Input }],
    form: [{ type: Input }],
    standAlone: [{ type: Input }],
    acceptedExtensions: [{ type: Input }],
    layoutType: [{ type: Input }],
    fileChange: [{ type: Output }],
    elementClick: [{ type: Output }],
    fileInput: [{ type: ViewChild, args: ['fileInput',] }],
    imagePreview: [{ type: ViewChild, args: ['imagePreview',] }],
    fieldHeight: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,