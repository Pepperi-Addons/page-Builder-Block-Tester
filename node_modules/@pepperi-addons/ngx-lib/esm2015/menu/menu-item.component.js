import { Component, Input, Output, EventEmitter, ViewChild, } from '@angular/core';
import { pepIconArrowRight } from '@pepperi-addons/ngx-lib/icon';
import { PepMenuItem, } from './menu.model';
export class PepInternalMenuItem extends PepMenuItem {
    constructor() {
        super(...arguments);
        this.selected = false;
    }
}
export class PepMenuItemComponent {
    constructor() {
        this.type = 'action';
        this.parent = null;
        this.items = [];
        this._selectedItem = null;
        this.xPosition = 'after';
        this.subMenuIconName = pepIconArrowRight.name;
        this.menuItemClick = new EventEmitter();
    }
    set selectedItem(selectedItem) {
        this.updateSelectedItem(selectedItem);
    }
    get selectedItem() {
        return this._selectedItem;
    }
    ngOnDestroy() {
        // if (this.menuItemClick) {
        //     this.menuItemClick.unsubscribe();
        // }
    }
    clearSelectedItem(selectedItem) {
        if (this.items) {
            this.items.forEach((item) => {
                item.selected = (selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.key) === item.key;
                if (item.children) {
                    item.children.forEach((child) => {
                        this.clearSelectedChildren(child, selectedItem);
                    });
                }
            });
        }
    }
    clearSelectedChildren(item, selectedItem) {
        item.selected = (selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.key) === item.key;
        if (item.children) {
            item.children.forEach((child) => {
                this.clearSelectedChildren(child, selectedItem);
            });
        }
    }
    selectParentAndChildren(items, parentsKeys) {
        if (parentsKeys.length > 0) {
            const key = parentsKeys.pop();
            const selectedParent = items.find((item) => item.key === key);
            if (selectedParent) {
                selectedParent.selected = true;
                this.selectParentAndChildren(selectedParent.children, parentsKeys);
            }
        }
    }
    updateSelectedParent(parentItem, parentsKeys) {
        parentsKeys.push(parentItem.key);
        if (parentItem.parent) {
            this.updateSelectedParent(parentItem.parent, parentsKeys);
        }
        else {
            this.selectParentAndChildren(this.items, parentsKeys);
        }
    }
    updateSelectedItem(selectedItem) {
        this.clearSelectedItem(selectedItem);
        this._selectedItem = selectedItem;
        if (selectedItem && selectedItem.parent) {
            this.updateSelectedParent(selectedItem.parent, []);
        }
    }
    onChildClicked(click) {
        // click.source.selected = true;
        this.menuItemClick.emit(click);
    }
    onMenuItemClicked(item) {
        // item.selected = true;
        this.menuItemClick.emit({ source: item });
    }
}
PepMenuItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'pep-menu-item',
                template: "<mat-menu #childMenu=\"matMenu\" xPosition=\"{{ xPosition }}\" class=\"pep-{{type}}-menu\">\n    <ng-container *ngFor=\"let menuItem of items\">\n        <ng-container *ngIf=\"!menuItem.hidden\">\n            <ng-container *ngIf=\"menuItem.type === 'splitter'; then splitterBlock; else buttonBlock\"></ng-container>\n            <ng-template #splitterBlock>\n                <div mat-menu-item class=\"splitter\"></div>\n            </ng-template>\n\n            <ng-template #buttonBlock>\n                <ng-container\n                    *ngIf=\"type !== 'select' && menuItem.children?.length > 0; then childrenBlock; else regularBlock\">\n                </ng-container>\n                <ng-template #childrenBlock>\n                    <button mat-menu-item (click)=\"onMenuItemClicked(menuItem)\" [matMenuTriggerFor]=\"menu.childMenu\"\n                        title=\"{{ menuItem.text }}\" pepRtlDirection [disabled]=\"menuItem.disabled\"\n                        [ngClass]=\"{ selected: type === 'action-select' && menuItem.selected, disabled: menuItem.disabled }\">\n                        <ng-container *ngTemplateOutlet=\"itemTemplate; context: {\n                            itemIconName: menuItem.iconName,\n                            itemText: menuItem.text,\n                            itemType: menuItem.type,\n                            hasChildren: true\n                        }\"></ng-container>\n                    </button>\n                    <pep-menu-item #menu [type]=\"type\" [items]=\"menuItem.children\" [parent]=\"menuItem\"\n                        (menuItemClick)=\"onChildClicked($event)\">\n                    </pep-menu-item>\n                </ng-template>\n                <ng-template #regularBlock>\n                    <button mat-menu-item (click)=\"onMenuItemClicked(menuItem)\" title=\"{{ menuItem.text }}\"\n                        pepRtlDirection [disabled]=\"menuItem.disabled\"\n                        [ngClass]=\"{ selected: (type === 'select' || type === 'action-select') && menuItem.selected, disabled: menuItem.disabled }\">\n                        <ng-container *ngTemplateOutlet=\"itemTemplate; context: {\n                            itemIconName: menuItem.iconName,\n                            itemText: menuItem.text,\n                            itemType: menuItem.type,\n                            hasChildren: false\n                        }\"></ng-container>\n                    </button>\n                </ng-template>\n            </ng-template>\n        </ng-container>\n    </ng-container>\n</mat-menu>\n\n<ng-template #itemTemplate let-itemIconName=\"itemIconName\" let-itemText=\"itemText\" let-itemType=\"itemType\"\n    let-hasChildren=\"hasChildren\">\n    <ng-container>\n        <mat-icon *ngIf=\"itemIconName\" class=\"pull-left flip\">\n            <pep-icon name=\"{{itemIconName}}\"></pep-icon>\n        </mat-icon>\n        <span *ngIf=\"itemText\" class=\"pull-left flip title ellipsis\"\n            [ngClass]=\"{ 'spacing-from-icon': itemIconName, 'spacing-from-submenu-trigger': hasChildren }\"\n            [title]=\"itemText\">\n            {{ itemText }}\n        </span>\n        <mat-icon *ngIf=\"hasChildren\" class=\"pull-left flip submenu-trigger\"\n            [ngClass]=\"{ 'rotate': xPosition === 'before' }\">\n            <pep-icon name=\"{{ subMenuIconName }}\"></pep-icon>\n        </mat-icon>\n    </ng-container>\n</ng-template>",
                styles: [".mat-menu-item-submenu-trigger:after{display:none}.mat-menu-item .title{margin:0 .25rem;margin:0 var(--pep-spacing-xs,.25rem)}.mat-menu-item .title.spacing-from-icon{margin:0 .5rem;margin:0 var(--pep-spacing-sm,.5rem)}.mat-menu-item .title.spacing-from-submenu-trigger{-webkit-padding-end:1rem;padding-inline-end:1rem;-webkit-padding-end:var(--pep-spacing-lg,1rem);padding-inline-end:var(--pep-spacing-lg,1rem)}.mat-menu-item .mat-icon{margin:0}.mat-menu-item .submenu-trigger{position:absolute;right:.5rem;right:var(--pep-spacing-sm,.5rem);width:1rem}.mat-menu-item .submenu-trigger.rotate{transform:rotate(180deg)}.mat-menu-item.splitter{height:1px!important;margin:.5rem 0;margin:var(--pep-spacing-sm,.5rem) 0}.mat-menu-item[dir=rtl] .submenu-trigger{right:unset;left:.5rem;left:var(--pep-spacing-sm,.5rem);transform:rotate(180deg)}.mat-menu-item[dir=rtl] .submenu-trigger.rotate{transform:rotate(0deg)}.mat-menu-item-submenu-trigger:after{width:unset;height:unset;transform:unset}"]
            },] }
];
PepMenuItemComponent.propDecorators = {
    type: [{ type: Input }],
    parent: [{ type: Input }],
    items: [{ type: Input }],
    selectedItem: [{ type: Input }],
    xPosition: [{ type: Input }],
    subMenuIconName: [{ type: Input }],
    childMenu: [{ type: ViewChild, args: ['childMenu', { static: true },] }],
    menuItemClick: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,