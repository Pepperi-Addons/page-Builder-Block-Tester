import { Component, Input, Output, EventEmitter, } from '@angular/core';
import { trigger, state, style, transition, animate, } from '@angular/animations';
import { PepLayoutService, PepScreenSizeType, } from '@pepperi-addons/ngx-lib';
import { pepIconSystemMenu } from '@pepperi-addons/ngx-lib/icon';
import { PepMenuItemParent, } from './menu.model';
export class PepMenuComponent {
    constructor(layoutService) {
        this.layoutService = layoutService;
        this.text = null;
        /**
         * The icon name to show on the menu. look in (@link icon -> All icons)
         *
         * @type {PepIconType} See {@link PepIconType}
         * @memberof PepMenuComponent
         */
        this.iconName = pepIconSystemMenu.name;
        this.type = 'action';
        this.styleType = 'weak';
        this.sizeType = 'md';
        this.classNames = '';
        this.xPosition = 'after';
        this.hideOnEmptyItems = false;
        this._items = null;
        this.selectedItem = null;
        this.disabled = false;
        this.stateChange = new EventEmitter();
        this.menuItemClick = new EventEmitter();
        this.menuClick = new EventEmitter();
        this.state = 'hidden';
        this.PepScreenSizeType = PepScreenSizeType;
        this.displayText = null;
        this.layoutService.onResize$.subscribe((size) => {
            this.screenSize = size;
        });
    }
    set items(items) {
        this.setItemsParent(items);
        this._items = items;
    }
    get items() {
        return this._items;
    }
    setChildrenParent(item, parent) {
        item.parent = parent;
        if (item.children && item.children.length > 0) {
            item.children.forEach((child) => {
                this.setChildrenParent(child, new PepMenuItemParent(item));
            });
        }
    }
    setItemsParent(items) {
        if (items) {
            items.forEach((item) => {
                item.parent = null;
                if (item.children && item.children.length > 0) {
                    item.children.forEach((child) => {
                        this.setChildrenParent(child, new PepMenuItemParent(item));
                    });
                }
            });
        }
    }
    updateText() {
        if (this.type === 'select' || this.type === 'action-select') {
            this.displayText = this.selectedItem
                ? this.selectedItem.text
                : this.text;
        }
        else {
            this.displayText = this.text;
        }
    }
    ngOnChanges(changes) {
        if (this.hideOnEmptyItems) {
            this.state =
                !this.disabled &&
                    this.items &&
                    this.items.filter((item) => !item.disabled).length > 0
                    ? 'visible'
                    : 'hidden';
        }
        else {
            this.state = 'visible';
        }
        if (this.type === 'select') {
            if (this.selectedItem === null &&
                this.items &&
                this.items.length > 0) {
                this.selectedItem = this.items[0];
            }
        }
        this.updateText();
    }
    ngOnDestroy() {
        // if (this.menuItemClick) {
        //     this.menuItemClick.unsubscribe();
        // }
    }
    onMenuClicked(event) {
        this.menuClick.emit();
    }
    // private manipulateData(menuItem: PepMenuItem) {
    //     menuItem.children = null;
    //     if (menuItem.parent) {
    //         menuItem.parent = new PepMenuItem(menuItem.parent);
    //         this.manipulateData(menuItem.parent);
    //     }
    // }
    onMenuItemClicked(click) {
        this.selectedItem = click.source;
        this.updateText();
        // Manipulate click data because the data is dupplicate in parent.children
        // const tmp = new PepMenuItem(click.source);
        // this.manipulateData(tmp);
        // click.source = tmp;
        this.menuItemClick.emit(click);
    }
    animationDone() {
        if (this.state === 'hidden') {
            setTimeout(() => {
                this.stateChange.emit({ state: this.state });
            }, 500);
        }
    }
    animationStart() {
        if (this.state === 'visible') {
            this.stateChange.emit({ state: this.state });
        }
    }
}
PepMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'pep-menu',
                template: "<div class=\"menu-container\" dir=\"{{ layoutService.isRtl() ? 'rtl' : 'ltr' }}\">\n\n    <ng-container *ngIf=\"hideOnEmptyItems then animationTemplate else regularTemplate\">\n    </ng-container>\n    <ng-template #animationTemplate>\n        <button mat-button class=\"pep-button {{ sizeType }} {{ styleType }} {{ classNames }}\"\n            [ngClass]=\"{ 'icon-button': !displayText || screenSize > PepScreenSizeType.SM, 'pep-button-limited-width': screenSize < PepScreenSizeType.XS  }\"\n            pepRtlDirection pepMenuBlur (click)=\"onMenuClicked($event)\" [@slideInOut]=\"state\"\n            (@slideInOut.done)=\"animationDone()\" (@slideInOut.start)=\"animationStart()\"\n            [matMenuTriggerFor]=\"menu.childMenu\">\n            <ng-container *ngTemplateOutlet=\"triggerTemplate\">\n            </ng-container>\n        </button>\n        <pep-menu-item #menu [type]=\"type\" [items]=\"items\" [selectedItem]=\"selectedItem\" [xPosition]=\"xPosition\"\n            (menuItemClick)=\"onMenuItemClicked($event)\">\n        </pep-menu-item>\n    </ng-template>\n    <ng-template #regularTemplate>\n        <ng-container *ngIf=\"items then menuTemplate else buttonTemplate\"></ng-container>\n        <ng-template #menuTemplate>\n            <button mat-button class=\"pep-button {{ sizeType }} {{ styleType }} {{ classNames }}\"\n                [ngClass]=\"{ 'icon-button': !displayText || screenSize > PepScreenSizeType.SM, 'pep-button-limited-width': screenSize < PepScreenSizeType.XS, disabled: disabled }\"\n                pepRtlDirection pepMenuBlur (menuClick)=\"onMenuClicked($event)\" [disabled]=\"disabled\"\n                [matMenuTriggerFor]=\"menu.childMenu\">\n                <ng-container *ngTemplateOutlet=\"triggerTemplate\">\n                </ng-container>\n            </button>\n            <pep-menu-item #menu [type]=\"type\" [items]=\"items\" [selectedItem]=\"selectedItem\" [xPosition]=\"xPosition\"\n                (menuItemClick)=\"onMenuItemClicked($event)\"></pep-menu-item>\n        </ng-template>\n        <ng-template #buttonTemplate>\n            <button mat-button class=\"pep-button {{ sizeType }} {{ styleType }} {{ classNames }}\"\n                [ngClass]=\"{ 'icon-button': !displayText || screenSize > PepScreenSizeType.SM, 'pep-button-limited-width': screenSize < PepScreenSizeType.XS, disabled: disabled }\"\n                pepRtlDirection pepMenuBlur (menuClick)=\"onMenuClicked($event)\" [disabled]=\"disabled\">\n                <ng-container *ngTemplateOutlet=\"triggerTemplate\">\n                </ng-container>\n            </button>\n        </ng-template>\n    </ng-template>\n</div>\n\n<ng-template #triggerTemplate>\n    <span *ngIf=\"displayText && screenSize <= PepScreenSizeType.SM\" class=\"ellipsis\"\n        [ngClass]=\"{ 'button-title-with-icon': iconName }\" [title]=\"displayText\">\n        {{ displayText }}\n    </span>\n    <mat-icon *ngIf=\"iconName\">\n        <pep-icon name=\"{{ iconName }}\"></pep-icon>\n    </mat-icon>\n</ng-template>",
                animations: [
                    trigger('slideInOut', [
                        state('hidden', style({
                            width: '0px',
                            padding: '0',
                            margin: '0',
                            minWidth: '0px',
                            opacity: 0,
                        })),
                        state('visible', style({
                            width: 'inherit',
                            opacity: 1,
                        })),
                        transition('close => open', animate('500ms ease-in')),
                        transition('open => close', animate('500ms ease-out')),
                    ]),
                ],
                styles: [".menu-container .pep-button{display:flex;align-items:center;justify-content:center}"]
            },] }
];
PepMenuComponent.ctorParameters = () => [
    { type: PepLayoutService }
];
PepMenuComponent.propDecorators = {
    text: [{ type: Input }],
    iconName: [{ type: Input }],
    type: [{ type: Input }],
    styleType: [{ type: Input }],
    sizeType: [{ type: Input }],
    classNames: [{ type: Input }],
    xPosition: [{ type: Input }],
    hideOnEmptyItems: [{ type: Input }],
    items: [{ type: Input }],
    selectedItem: [{ type: Input }],
    disabled: [{ type: Input }],
    stateChange: [{ type: Output }],
    menuItemClick: [{ type: Output }],
    menuClick: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,