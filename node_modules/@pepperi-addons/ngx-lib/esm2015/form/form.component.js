import { Component, ChangeDetectionStrategy, Input, KeyValueDiffers, Output, EventEmitter, } from '@angular/core';
import { FormBuilder, Validators, } from '@angular/forms';
import { TranslateService } from '@ngx-translate/core';
import { PepDialogService, PepDialogData, } from '@pepperi-addons/ngx-lib/dialog';
import { FIELD_TYPE, PepCustomizationService, PepLayoutService, PepTextboxField, PepSelectField, PepInternalMenuField, PepQuantitySelectorField, PepAddressField, PepIndicatorsField, PepInternalPageField, PepInternalButtonField, PepAttachmentField, PepSignatureField, PepImageField, PepImagesField, PepTextareaField, PepRichHtmlTextareaField, PepDateField, PepCheckboxField, PepSeparatorField, PepPlaceholderField, X_ALIGNMENT_TYPE, Y_ALIGNMENT_TYPE, DEFAULT_VERTICAL_ALIGNMENT, DEFAULT_HORIZONTAL_ALIGNMENT, } from '@pepperi-addons/ngx-lib';
export class PepFormComponent {
    // eventServiceSub: Subscription;
    // public jsonLib = JSON;
    constructor(dialogService, customizationService, layoutService, fb, differs, translate) {
        this.dialogService = dialogService;
        this.customizationService = customizationService;
        this.layoutService = layoutService;
        this.fb = fb;
        this.translate = translate;
        this.isReport = false;
        this.lockEvents = false;
        this.canEditObject = true;
        this._data = null;
        this.isActive = false;
        this.layoutType = 'card';
        // @Input() listType = '';
        this.objectId = '0';
        this.parentId = '0';
        this.searchCode = '0';
        this.showTitle = true;
        this.firstFieldAsLink = false;
        this.checkForChanges = null;
        this.valueChange = new EventEmitter();
        this.formValidationChange = new EventEmitter();
        this.childClick = new EventEmitter();
        this.childChange = new EventEmitter();
        this.fieldClick = new EventEmitter();
        this.isLocked = false;
        // payLoad = '';
        this.rows = [];
        this.fields = [];
        this.columns = 1;
        this.hasMenuFloatingOnOtherField = false;
        this.indicatorsDataField = null;
        this._shouldReloadForm = false;
        // store the initial value to compare with
        this.differ = differs.find({}).create();
    }
    set data(value) {
        const shouldReload = this.shouldReloadForm || !this._data;
        this._data = value;
        if (shouldReload) {
            this._shouldReloadForm = false;
            this.initForm();
        }
        else {
            this.updateForm();
        }
    }
    get data() {
        return this._data;
    }
    get shouldReloadForm() {
        return this._shouldReloadForm;
    }
    convertXAlignToHorizontalAlign(xAlign) {
        let res = DEFAULT_HORIZONTAL_ALIGNMENT;
        if (xAlign === X_ALIGNMENT_TYPE.None ||
            xAlign === X_ALIGNMENT_TYPE.Left) {
            res = 'left';
        }
        else if (xAlign === X_ALIGNMENT_TYPE.Right) {
            res = 'right';
        }
        else {
            res = 'center';
        }
        return res;
    }
    convertYAlignToVerticalAlign(yAlign) {
        let res = DEFAULT_VERTICAL_ALIGNMENT;
        if (yAlign === Y_ALIGNMENT_TYPE.None ||
            yAlign === Y_ALIGNMENT_TYPE.Top) {
            res = 'top';
        }
        else if (yAlign === Y_ALIGNMENT_TYPE.Bottom) {
            res = 'bottom';
        }
        else {
            res = 'middle';
        }
        return res;
    }
    convertOptionalValues(optionalValues) {
        if (optionalValues && optionalValues.length > 0) {
            return optionalValues.map((ov) => {
                return { key: ov.Key, value: ov.Value };
            });
        }
        else {
            return [];
        }
    }
    convertAddressFields(controlField, addressFields, canEditObject) {
        const fields = [];
        addressFields.forEach((field) => {
            let customField;
            const placeholder = field.ApiName;
            if (field.ApiName.toLowerCase().indexOf('street') >= 0) {
                customField = new PepTextboxField({
                    key: field.ApiName,
                    label: field.ApiName,
                    type: 'text',
                    placeholder,
                    readonly: !canEditObject,
                    disabled: !field.Enabled || !canEditObject,
                    hidden: false,
                    mandatory: false,
                    value: field.Value,
                    formattedValue: field.FormattedValue,
                    row: 0,
                    rowSpan: 1,
                    col: 0,
                    colSpan: 2,
                    xAlignment: this.convertXAlignToHorizontalAlign(controlField.Layout.XAlignment),
                    yAlignment: this.convertYAlignToVerticalAlign(controlField.Layout.YAlignment),
                    order: 0,
                });
            }
            else if (field.ApiName.toLowerCase().indexOf('city') >= 0) {
                customField = new PepTextboxField({
                    key: field.ApiName,
                    label: field.ApiName,
                    type: 'text',
                    placeholder,
                    readonly: !canEditObject,
                    disabled: !field.Enabled || !canEditObject,
                    hidden: false,
                    mandatory: false,
                    value: field.Value,
                    formattedValue: field.FormattedValue,
                    row: 0,
                    rowSpan: 1,
                    col: 2,
                    colSpan: 1,
                    xAlignment: this.convertXAlignToHorizontalAlign(controlField.Layout.XAlignment),
                    yAlignment: this.convertYAlignToVerticalAlign(controlField.Layout.YAlignment),
                    order: 1,
                });
            }
            else if (field.ApiName.toLowerCase().indexOf('state') >= 0) {
                customField = new PepSelectField({
                    key: field.ApiName,
                    label: field.ApiName,
                    placeholder,
                    options: this.convertOptionalValues(field.OptionalValues),
                    readonly: !canEditObject,
                    disabled: !field.Enabled || !canEditObject,
                    hidden: false,
                    mandatory: false,
                    value: field.Value,
                    formattedValue: field.FormattedValue,
                    row: 1,
                    rowSpan: 1,
                    col: 0,
                    colSpan: 1,
                    xAlignment: this.convertXAlignToHorizontalAlign(controlField.Layout.XAlignment),
                    yAlignment: this.convertYAlignToVerticalAlign(controlField.Layout.YAlignment),
                    order: 2,
                });
            }
            else if (field.ApiName.toLowerCase().indexOf('zipcode') >= 0) {
                customField = new PepTextboxField({
                    key: field.ApiName,
                    label: field.ApiName,
                    type: 'text',
                    placeholder,
                    readonly: !canEditObject,
                    disabled: !field.Enabled || !canEditObject,
                    hidden: false,
                    mandatory: false,
                    value: field.Value,
                    formattedValue: field.FormattedValue,
                    row: 1,
                    rowSpan: 1,
                    col: 1,
                    colSpan: 1,
                    xAlignment: this.convertXAlignToHorizontalAlign(controlField.Layout.XAlignment),
                    yAlignment: this.convertYAlignToVerticalAlign(controlField.Layout.YAlignment),
                    order: 3,
                });
            }
            else if (field.ApiName.toLowerCase().indexOf('country') >= 0) {
                customField = new PepSelectField({
                    key: field.ApiName,
                    label: field.ApiName,
                    placeholder,
                    options: this.convertOptionalValues(field.OptionalValues),
                    readonly: !canEditObject,
                    disabled: !field.Enabled || !canEditObject,
                    hidden: false,
                    mandatory: false,
                    value: field.Value,
                    formattedValue: field.FormattedValue,
                    row: 2,
                    rowSpan: 1,
                    col: 2,
                    colSpan: 1,
                    xAlignment: this.convertXAlignToHorizontalAlign(controlField.Layout.XAlignment),
                    yAlignment: this.convertYAlignToVerticalAlign(controlField.Layout.YAlignment),
                    order: 4,
                });
            }
            fields.push(customField);
        });
        return fields.sort((n1, n2) => n1.order > n2.order ? 1 : n1.order < n2.order ? -1 : 0);
    }
    isMatrixField(apiNameToCheck) {
        return apiNameToCheck.indexOf('Matrix') >= 0;
    }
    doesFieldHavaFloatingField(controlField, floatingField) {
        let hasFloatingField = false;
        if (floatingField.Layout.Y >= controlField.Layout.Y &&
            floatingField.Layout.Y <
                controlField.Layout.Y + controlField.Layout.Height &&
            floatingField.Layout.X >= controlField.Layout.X &&
            floatingField.Layout.X <
                controlField.Layout.X + controlField.Layout.Width) {
            hasFloatingField = true;
        }
        return hasFloatingField;
    }
    getOptionsForCustomField(controlField, dataField, canEditObject) {
        if (!controlField || !dataField) {
            return;
        }
        const placeholder = controlField.ReadOnly || !canEditObject ? '' : controlField.Title;
        return {
            key: controlField.ApiName,
            label: controlField.Title,
            accessory: dataField.Accessory,
            placeholder,
            readonly: controlField.ReadOnly || !canEditObject,
            disabled: !dataField.Enabled || !canEditObject,
            hidden: controlField.Hidden,
            mandatory: controlField.Mandatory,
            value: dataField.Value,
            formattedValue: dataField.FormattedValue,
            additionalValue: dataField.AdditionalValue,
            row: controlField.Layout.Y,
            rowSpan: controlField.Layout.Height,
            col: controlField.Layout.X,
            colSpan: controlField.Layout.Width,
            xAlignment: this.convertXAlignToHorizontalAlign(controlField.Layout.XAlignment),
            yAlignment: this.convertYAlignToVerticalAlign(controlField.Layout.YAlignment),
            options: this.convertOptionalValues(dataField.OptionalValues),
            groupFields: undefined,
            maxFieldCharacters: controlField.MaxFieldCharacters,
            minValue: controlField.MinValue,
            maxValue: controlField.MaxValue,
            // hasMenu: hasMenu,
            // hasCampaign: hasCampaign,
            // hasIndicators: hasIndicators,
            textColor: dataField.TextColor,
            visible: dataField.Visible,
        };
    }
    convertToCustomField(controlField, dataField, canEditObject, menuField, hasCampaignField, indicatorsField, objectId, parentId, searchCode) {
        let customField;
        const options = this.getOptionsForCustomField(controlField, dataField, canEditObject);
        if (controlField.ApiName === 'ObjectMenu') {
            options.type = 'menu';
            customField = new PepInternalMenuField(options);
        }
        else if (controlField.FieldType === FIELD_TYPE.NumberRealQuantitySelector ||
            controlField.FieldType ===
                FIELD_TYPE.NumberIntegerQuantitySelector ||
            controlField.ApiName === 'QuantitySelector' ||
            controlField.ApiName === 'UnitsQuantity' ||
            controlField.ApiName.indexOf('size_') === 0) {
            if (dataField.FieldType === FIELD_TYPE.InternalLink) {
                options.type = 'button';
            }
            else if (dataField.FieldType === FIELD_TYPE.Package) {
                options.type = 'packageButton';
            }
            else if (dataField.FieldType === FIELD_TYPE.NumberRealQuantitySelector ||
                dataField.FieldType === FIELD_TYPE.NumberReal) {
                options.type = 'qs';
                options.allowDecimal = true;
            }
            else if (dataField.FieldType ===
                FIELD_TYPE.NumberIntegerQuantitySelector ||
                dataField.FieldType === FIELD_TYPE.NumberInteger) {
                options.type = 'qs';
                options.allowDecimal = false;
            }
            else if (dataField.FieldType === FIELD_TYPE.NumberIntegerForMatrix) {
                options.type = 'qsForMatrix';
                options.allowDecimal = false;
            }
            else if (dataField.FieldType === FIELD_TYPE.NumberRealForMatrix) {
                options.type = 'qsForMatrix';
                options.allowDecimal = true;
            }
            options.notificationInfo = dataField.NotificationInfo;
            customField = new PepQuantitySelectorField(options);
        }
        else {
            // HACK: need to remove this..
            if (dataField.FieldType === FIELD_TYPE.Indicators &&
                this.isMatrixField(dataField.ApiName)) {
                dataField.FieldType = FIELD_TYPE.InternalPage;
            }
            switch (dataField.FieldType) {
                case FIELD_TYPE.Address: {
                    const canEditGroupObject = controlField.ReadOnly
                        ? false
                        : canEditObject;
                    options.groupFields = this.convertAddressFields(controlField, dataField.GroupFields, canEditGroupObject);
                    customField = new PepAddressField(options);
                    break;
                }
                case FIELD_TYPE.Indicators: {
                    // options['type'] = 'indicators'; // Not needed this is PepIndicatorsField.
                    customField = new PepIndicatorsField(options);
                    break;
                }
                case FIELD_TYPE.InternalPage: {
                    if (this.isMatrixField(controlField.ApiName)) {
                        options.rowSpan = controlField.Layout.Height;
                        options.objectId = objectId;
                        options.parentId = parentId;
                        options.searchCode = searchCode;
                        customField = new PepInternalPageField(options);
                    }
                    else {
                        // Not supported
                    }
                    break;
                }
                case FIELD_TYPE.Link: {
                    options.type = 'link';
                    customField = new PepTextboxField(options);
                    break;
                }
                case FIELD_TYPE.InternalLink:
                case FIELD_TYPE.Button: {
                    options.type = 'button';
                    customField = new PepInternalButtonField(options);
                    break;
                }
                case FIELD_TYPE.Attachment: {
                    // options.type = 'attachment';
                    customField = new PepAttachmentField(options);
                    break;
                }
                case FIELD_TYPE.Signature: {
                    // options.type = 'signature';
                    customField = new PepSignatureField(options);
                    break;
                }
                case FIELD_TYPE.Image:
                case FIELD_TYPE.ImageURL: {
                    // options.type = 'image';
                    options.menuField =
                        menuField &&
                            this.doesFieldHavaFloatingField(controlField, menuField)
                            ? menuField
                            : null;
                    options.hasCampaignField =
                        hasCampaignField &&
                            this.doesFieldHavaFloatingField(controlField, hasCampaignField)
                            ? hasCampaignField
                            : null;
                    options.indicatorsField =
                        indicatorsField &&
                            this.doesFieldHavaFloatingField(controlField, indicatorsField)
                            ? indicatorsField
                            : null;
                    customField = new PepImageField(options);
                    break;
                }
                case FIELD_TYPE.Images: {
                    // options.type = 'images';
                    customField = new PepImagesField(options);
                    break;
                }
                case FIELD_TYPE.Email: {
                    options.type = 'email';
                    customField = new PepTextboxField(options);
                    break;
                }
                case FIELD_TYPE.Phone: {
                    options.type = 'phone';
                    customField = new PepTextboxField(options);
                    break;
                }
                case FIELD_TYPE.Duration: {
                    options.type = 'duration';
                    customField = new PepTextboxField(options);
                    break;
                }
                case FIELD_TYPE.Default:
                case FIELD_TYPE.TextBox:
                case FIELD_TYPE.LimitedLengthTextBox:
                case FIELD_TYPE.TextHeader:
                case FIELD_TYPE.CalculatedString:
                case FIELD_TYPE.MapDataString: {
                    customField = new PepTextboxField(options);
                    break;
                }
                case FIELD_TYPE.TextArea: {
                    customField = new PepTextareaField(options);
                    break;
                }
                case FIELD_TYPE.RichTextHTML: {
                    customField = new PepRichHtmlTextareaField(options);
                    break;
                }
                case FIELD_TYPE.Date:
                case FIELD_TYPE.LimitedDate:
                case FIELD_TYPE.CalculatedDate:
                case FIELD_TYPE.DateAndTime: {
                    options.type =
                        dataField.FieldType === FIELD_TYPE.DateAndTime
                            ? 'datetime'
                            : 'date';
                    customField = new PepDateField(options);
                    break;
                }
                case FIELD_TYPE.NumberInteger:
                case FIELD_TYPE.CalculatedInt:
                case FIELD_TYPE.MapDataInt: {
                    options.type = 'int';
                    customField = new PepTextboxField(options);
                    break;
                }
                case FIELD_TYPE.Percentage: {
                    options.type = 'percentage';
                    customField = new PepTextboxField(options);
                    break;
                }
                case FIELD_TYPE.Currency: {
                    options.type = 'currency';
                    customField = new PepTextboxField(options);
                    break;
                }
                case FIELD_TYPE.NumberReal:
                case FIELD_TYPE.CalculatedReal:
                case FIELD_TYPE.MapDataReal:
                case FIELD_TYPE.Sum:
                case FIELD_TYPE.Totals: {
                    options.type = 'real';
                    customField = new PepTextboxField(options);
                    break;
                }
                case FIELD_TYPE.Boolean:
                case FIELD_TYPE.CalculatedBool: {
                    customField = new PepCheckboxField(options);
                    break;
                }
                case FIELD_TYPE.BooleanText: {
                    options.type = 'booleanText';
                    customField = new PepCheckboxField(options);
                    break;
                }
                case FIELD_TYPE.ComboBox:
                case FIELD_TYPE.EmptyComboBox:
                case FIELD_TYPE.MapDataDropDown: {
                    // options.type = 'select';
                    customField = new PepSelectField(options);
                    break;
                }
                case FIELD_TYPE.MultiTickBox:
                case FIELD_TYPE.MultiTickBoxToComboBox:
                case FIELD_TYPE.EmptyMultiTickBox: {
                    options.type = 'multi';
                    customField = new PepSelectField(options);
                    break;
                }
                case FIELD_TYPE.GuidReferenceType: {
                    options.type = 'reference';
                    options.referenceObjectType = dataField.ReferenceObjectType;
                    options.referenceObjectSubType =
                        dataField.ReferenceObjectSubType;
                    options.referenceObjectInternalType =
                        dataField.ReferenceObjectInternalType;
                    customField = new PepInternalButtonField(options);
                    break;
                }
                case FIELD_TYPE.ListOfObjects: {
                    options.type = 'listofobjects';
                    customField = new PepInternalButtonField(options);
                    break;
                }
                case FIELD_TYPE.Separator: {
                    customField = new PepSeparatorField(options);
                    break;
                }
                /*
                    case FIELD_TYPE.Images: return that.field(value);
                */
                case FIELD_TYPE.NumberRealQuantitySelector:
                case FIELD_TYPE.NumberIntegerQuantitySelector: {
                    options.type = 'qs';
                    options.allowDecimal =
                        dataField.FieldType ===
                            FIELD_TYPE.NumberRealQuantitySelector;
                    options.notificationInfo = dataField.NotificationInfo;
                    customField = new PepQuantitySelectorField(options);
                    break;
                }
                case FIELD_TYPE.Package: {
                    options.type = 'packageButton';
                    options.notificationInfo = dataField.NotificationInfo;
                    customField = new PepQuantitySelectorField(options);
                    break;
                }
            }
        }
        if (!customField) {
            options.label = controlField.ApiName + ' is not supported!!!';
            customField = new PepSeparatorField(options);
        }
        return customField;
    }
    getFieldFormattedValue(field) {
        let fieldFormattedValue = field.formattedValue;
        // Fix for the custom check box component.
        if (field.controlType === 'checkbox') {
            fieldFormattedValue = fieldFormattedValue === 'true';
        }
        // Fix for the custom button component.
        if (field.controlType === 'button') {
            fieldFormattedValue =
                fieldFormattedValue === '0' ? '' : fieldFormattedValue;
        }
        return fieldFormattedValue;
    }
    toControlGroup(fields) {
        const group = {};
        if (fields && fields.length > 0) {
            fields.forEach((field) => {
                if (field.groupFields && field.groupFields.length > 0) {
                    const subGroup = {};
                    field.groupFields.forEach((groupField) => {
                        if (groupField.mandatory &&
                            !field.readonly &&
                            !field.disabled) {
                            subGroup[groupField.key] = [
                                {
                                    value: groupField.formattedValue || '',
                                    disabled: field.readonly ||
                                        field.disabled ||
                                        groupField.disabled,
                                },
                                [Validators.required],
                            ];
                        }
                        else {
                            subGroup[groupField.key] = [
                                {
                                    value: groupField.formattedValue || '',
                                    disabled: field.readonly ||
                                        field.disabled ||
                                        groupField.disabled,
                                },
                                [Validators.nullValidator],
                            ];
                        }
                    });
                    group[field.key] = this.fb.group(subGroup);
                }
                else {
                    const validators = field.getValidators();
                    const fieldFormattedValue = this.getFieldFormattedValue(field);
                    group[field.key] = [
                        {
                            value: fieldFormattedValue || '',
                            disabled: field.disabled,
                        },
                        validators,
                    ];
                }
            });
        }
        return this.fb.group(group);
    }
    showFormValidationMessage() {
        const fields = this.fields;
        let emptyMandatoryFieldsMsg = '';
        let notValidFieldsMsg = '';
        // for (let i: number = 0; i < fields.length; i++) {
        //     let field = fields[i];
        for (const field of fields) {
            const formControl = this.form && this.form.get(field.key);
            if (formControl) {
                // Mandatory is empty.
                if (field.mandatory &&
                    formControl.value.toString().trim().length === 0) {
                    emptyMandatoryFieldsMsg +=
                        '<li><small>' + field.label + '</small></li>';
                }
                else if (!field.disabled && !formControl.valid) {
                    notValidFieldsMsg +=
                        '<li><small>' + field.label + '</small></li>';
                }
            }
        }
        // Add the header message of the empty mandatory fields
        if (emptyMandatoryFieldsMsg.length > 0) {
            emptyMandatoryFieldsMsg =
                '<div>' +
                    this.translate.instant('MESSAGES.ERROR_MANDATORY_FIELDS') +
                    "</div><ul style='padding: 0 20px;'>" +
                    emptyMandatoryFieldsMsg +
                    '</ul><br/>';
        }
        // Add the header message of the empty mandatory fields
        if (notValidFieldsMsg.length > 0) {
            notValidFieldsMsg =
                '<div>' +
                    this.translate.instant('MESSAGES.ERROR_INVALID_FIELDS') +
                    "</div><ul style='padding: 0 20px;'>" +
                    notValidFieldsMsg +
                    '</ul>';
        }
        const title = this.translate.instant('MESSAGES.TITLE_NOTICE');
        const data = new PepDialogData({
            title,
            content: emptyMandatoryFieldsMsg + notValidFieldsMsg,
        });
        this.dialogService.openDefaultDialog(data);
    }
    ngOnInit() {
        const themeVars = this.customizationService.getThemeVariables();
        // convert rem to pixel
        const RemToPixel = 16;
        this.formGutterSize =
            this.customizationService.getNumberThemeVariable(themeVars, PepCustomizationService.FORM_SPACEING_KEY) * RemToPixel;
        this.cardGutterSize =
            this.customizationService.getNumberThemeVariable(themeVars, PepCustomizationService.CARD_SPACEING_KEY) * RemToPixel;
    }
    ngDoCheck() {
        const changes = this.differ.diff(this.data); // check for changes
        if (changes) {
            this.updateForm();
            this.checkForChanges = new Date();
        }
    }
    ngOnChanges(changes) {
        // if (changes.data && changes.data.currentValue) {
        //     // Load changes
        //     if (!this.shouldReloadForm && changes.data.previousValue) {
        //         this.data = changes.data.currentValue;
        //         this.updateForm();
        //     } else {
        //         this._shouldReloadForm = false;
        //         this.initForm();
        //     }
        // }
        // if (this.shouldReloadForm || !changes?.data?.previousValue) {
        //     this._shouldReloadForm = false;
        //     this.initForm();
        //     this.checkForChanges = new Date();
        // }
    }
    ngOnDestroy() {
        // if (this.valueChange) {
        //     this.valueChange.unsubscribe();
        // }
        // if (this.formValidationChange) {
        //     this.formValidationChange.unsubscribe();
        // }
        // if (this.childClick) {
        //     this.childClick.unsubscribe();
        // }
        // if (this.childChange) {
        //     this.childChange.unsubscribe();
        // }
        // if (this.fieldClick) {
        //     this.fieldClick.unsubscribe();
        // }
    }
    getUiControlFields() {
        return this.layout ? this.layout.ControlFields : [];
    }
    initFieldsStructure(fields, maxRow) {
        const themeVars = this.customizationService.getThemeVariables();
        // Set form row height.
        if (this.layoutType === 'card') {
            const cardFieldHeight = this.customizationService.getNumberThemeVariable(themeVars, PepCustomizationService.CARD_FIELD_HEIGHT_KEY);
            this.rowHeight = cardFieldHeight;
        }
        else {
            const rowFieldHeight = this.customizationService.getNumberThemeVariable(themeVars, PepCustomizationService.FORM_FIELD_HEIGHT_KEY);
            const rowFieldTitleHeight = this.customizationService.getNumberThemeVariable(themeVars, PepCustomizationService.FORM_FIELD_TITLE_HEIGHT_KEY);
            this.rowHeight = rowFieldHeight + rowFieldTitleHeight;
        }
        // Create the fields structure (the fields must be sorted!!!).
        if (fields.length > 0) {
            // Init the layout.
            if (
            // this.layoutType === 'form' ||
            this.layoutType === 'table') {
                this.fields = fields;
                this.rows = [];
                for (let i = 0; i <= maxRow; i++) {
                    this.rows[i] = [];
                }
                // for (let i = 0; i < fields.length; i++) {
                // const field = fields[i]
                for (const field of fields) {
                    this.rows[field.row].push(field);
                }
            }
            else {
                const doesfieldExistIn = new Array(maxRow);
                for (let i = 0; i < doesfieldExistIn.length; i++) {
                    doesfieldExistIn[i] = new Array(this.columns);
                    for (let j = 0; j < doesfieldExistIn[i].length; j++) {
                        doesfieldExistIn[i][j] = false;
                    }
                }
                // Run in squere (row - colspan, col - rowspan) and put true where it should.
                // for (let index = 0; index < fields.length; index++) {
                //     const currentField = fields[index];
                for (const currentField of fields) {
                    if (currentField.rowSpan > 1) {
                        for (let row = currentField.row; row < currentField.row + currentField.rowSpan; row++) {
                            if (currentField.colSpan > 1) {
                                for (let col = currentField.col; col <
                                    currentField.col + currentField.colSpan; col++) {
                                    if (doesfieldExistIn.length > row &&
                                        doesfieldExistIn[0].length > col) {
                                        doesfieldExistIn[row][col] = true;
                                    }
                                }
                            }
                            else {
                                if (doesfieldExistIn.length > row &&
                                    doesfieldExistIn[0].length >
                                        currentField.col) {
                                    doesfieldExistIn[row][currentField.col] = true;
                                }
                            }
                        }
                    }
                    else if (currentField.colSpan > 1) {
                        for (let col = currentField.col; col < currentField.col + currentField.colSpan; col++) {
                            if (doesfieldExistIn.length > currentField.row &&
                                doesfieldExistIn[0].length > col) {
                                doesfieldExistIn[currentField.row][col] = true;
                            }
                        }
                    }
                    else {
                        if (doesfieldExistIn.length > currentField.row &&
                            doesfieldExistIn[0].length > currentField.col) {
                            doesfieldExistIn[currentField.row][currentField.col] = true;
                        }
                    }
                }
                // Create empty fields where doesfieldExistIn is false (For the md-grid-list UI Component).
                for (let i = 0; i < doesfieldExistIn.length; i++) {
                    for (let j = 0; j < doesfieldExistIn[i].length; j++) {
                        if (!doesfieldExistIn[i][j]) {
                            // Create empty field and add it to the fields list.
                            fields.push(new PepPlaceholderField({
                                key: i + '_' + j,
                                label: '',
                                placeholder: '',
                                readonly: false,
                                disabled: false,
                                hidden: false,
                                mandatory: false,
                                value: '',
                                formattedValue: '',
                                row: i,
                                rowSpan: 1,
                                col: j,
                                colSpan: 1,
                                order: 1,
                            }));
                        }
                    }
                }
                // Sort the fields again.
                this.fields = fields.sort((f1, f2) => f1.row > f2.row
                    ? 1
                    : f1.row < f2.row
                        ? -1
                        : f1.col > f2.col
                            ? 1
                            : f1.col < f2.col
                                ? -1
                                : 0);
            }
        }
    }
    setForm(isForUpdate = false) {
        var _a;
        let allFieldsAreReadOnly = true;
        if (!isForUpdate) {
            const fields = [];
            for (const currentField of this.fields) {
                // Add all fields except 'internalPage' type (for children).
                if (currentField.controlType !== 'internalPage') {
                    fields.push(currentField);
                }
                if (!currentField.readonly) {
                    allFieldsAreReadOnly = false;
                }
            }
            this.form = this.toControlGroup(fields);
        }
        else {
            // Update form values if changed by calculated fields.
            for (const currentField of this.fields) {
                if (currentField.controlType !== 'internalPage') {
                    if (currentField.groupFields &&
                        currentField.groupFields.length > 0) {
                        // for (let j = 0; j < currentField.groupFields.length; j++) {
                        //     let currentGroupField = currentField.groupFields[j];
                        for (const currentGroupField of currentField.groupFields) {
                            const fieldFormattedValue = this.getFieldFormattedValue(currentGroupField);
                            this.customizationService.updateFormField(this.form, currentGroupField, fieldFormattedValue, currentField);
                        }
                    }
                    else {
                        const fieldFormattedValue = this.getFieldFormattedValue(currentField);
                        // this.form.controls[currentField.key].setValue(fieldFormattedValue);
                        this.customizationService.updateFormField(this.form, currentField, fieldFormattedValue);
                    }
                }
                if (!currentField.readonly) {
                    allFieldsAreReadOnly = false;
                }
            }
        }
        let isFormValid = (_a = this.form) === null || _a === void 0 ? void 0 : _a.valid;
        // Change validation to true if all fields are read only.
        if (!isFormValid && allFieldsAreReadOnly) {
            isFormValid = true;
        }
        this.onFormValidationChanged(isFormValid);
        // Set it to false to enable all fields.
        this.isLocked = false;
    }
    initForm() {
        if (this.data && this.data.Fields) {
            const fields = this.convertCustomFields(this.getUiControlFields(), this.data.Fields);
            const maxRow = Math.max(...fields.map((f) => {
                return f.row + f.rowSpan;
            }));
            this.columns = Math.max(...fields.map((f) => {
                return f.col + f.colSpan;
            }));
            this.initFieldsStructure(fields, maxRow);
            this.setForm();
        }
    }
    updateField(customField, updatedField) {
        const options = {
            disabled: !updatedField.Enabled || !this.canEditObject,
            readonly: !updatedField.Enabled || !this.canEditObject,
            visible: updatedField.Visible,
            value: updatedField.Value,
            additionalValue: updatedField.AdditionalValue,
            formattedValue: updatedField.FormattedValue,
            textColor: updatedField.TextColor,
        };
        if (customField instanceof PepQuantitySelectorField) {
            const notificationInfo = updatedField.NotificationInfo;
            options.notificationInfo = notificationInfo;
        }
        else if (customField instanceof PepSelectField) {
            options.options = this.convertOptionalValues(updatedField.OptionalValues);
            if (!options.options || options.options.length === 0) {
                options.options.push({
                    key: options.value,
                    value: options.formattedValue,
                });
            }
        }
        customField.update(options);
    }
    updateForm() {
        if (this.data && this.data.Fields) {
            for (const currentField of this.data.Fields) {
                const customField = this.fields.filter((f) => f.key === currentField.ApiName)[0];
                // Update all fields except 'internalPage' type (for children).
                if (customField && customField.controlType !== 'internalPage') {
                    this.updateField(customField, currentField);
                    // Update the group fields.
                    if (customField.controlType === 'address' &&
                        currentField.GroupFields) {
                        // for (let j = 0; j < currentField.GroupFields.length; j++) {
                        // let currentGroupField = currentField.GroupFields[j];
                        for (const currentGroupField of currentField.GroupFields) {
                            currentGroupField.Enabled = !currentField.Enabled
                                ? false
                                : currentGroupField.Enabled;
                            const customGroupField = customField.groupFields.filter((f) => f.key === currentGroupField.ApiName)[0];
                            this.updateField(customGroupField, currentGroupField);
                        }
                    }
                }
            }
            this.setForm(true);
        }
    }
    ReloadForm() {
        this._shouldReloadForm = true;
    }
    // onSubmit() {
    //     if (this.form.valid) {
    //         this.payLoad = JSON.stringify(this.form.value);
    //         //this.submitted.emit(this.form.value);
    //     }
    // }
    getFormControlById(key) {
        let formControl = null;
        this.fields.forEach((field) => {
            if (field.key === key) {
                formControl = this.form.get(field.key);
                return;
            }
            else if (field.groupFields && field.groupFields.length > 0) {
                field.groupFields.forEach((groupField) => {
                    if (groupField.key === key) {
                        formControl = this.form.get(field.key + '.' + groupField.key);
                        return;
                    }
                });
            }
        });
        return formControl;
    }
    setSpecialFields(controlFields, dataFields) {
        // let cf;
        // for (let index = 0; index < controlFields.length; index++) {
        //     cf = controlFields[index];
        for (const cf of controlFields) {
            if (cf.ApiName === 'ObjectMenu') {
                this.menuField = cf;
            }
            else if (cf.ApiName === 'ItemHasActiveCampaign') {
                this.hasCampaignField = cf;
            }
            else if (cf.ApiName === 'ItemIndicatorsWithoutCampaign') {
                this.indicatorsField = cf;
            }
        }
        // let df;
        // for (let index = 0; index < dataFields.length; index++) {
        //     df = dataFields[index];
        for (const df of dataFields) {
            if (df.ApiName === 'ObjectMenu') {
                this.menuDataField = df;
            }
            else if (df.ApiName === 'ItemHasActiveCampaign') {
                this.hasCampaignDataField = df;
            }
            else if (df.ApiName === 'ItemIndicatorsWithoutCampaign') {
                this.indicatorsDataField = df;
            }
        }
        if (this.menuField && this.menuDataField) {
            this.menuDataField.Layout = this.menuField.Layout;
        }
        if (this.hasCampaignField && this.hasCampaignDataField) {
            this.hasCampaignDataField.Layout = this.hasCampaignField.Layout;
        }
        if (this.indicatorsField && this.indicatorsDataField) {
            this.indicatorsDataField.Layout = this.indicatorsField.Layout;
        }
        // Check if menu is floating on other field.
        // for (let index = 0; index < controlFields.length; index++) {
        //     cf = controlFields[index];
        for (const cf of controlFields) {
            if (this.menuField && cf.ApiName !== 'ObjectMenu') {
                this.hasMenuFloatingOnOtherField = this.doesFieldHavaFloatingField(cf, this.menuField);
                if (this.hasMenuFloatingOnOtherField) {
                    break;
                }
            }
        }
    }
    convertCustomFields(controlFields, dataFields) {
        if (this.layoutType !== 'table') {
            this.setSpecialFields(controlFields, dataFields);
        }
        else {
            // HACK: convert to center alignment if table view & special fields)
            controlFields.forEach((field, index) => {
                if (field.ApiName === 'UnitsQuantity' ||
                    field.ApiName === 'QuantitySelector' ||
                    field.ApiName === 'ObjectMenu' ||
                    field.FieldType === FIELD_TYPE.Image ||
                    field.FieldType === FIELD_TYPE.ImageURL ||
                    field.FieldType === FIELD_TYPE.Indicators ||
                    field.FieldType === FIELD_TYPE.Boolean ||
                    field.FieldType === FIELD_TYPE.CalculatedBool ||
                    field.FieldType === FIELD_TYPE.Signature ||
                    field.FieldType ===
                        FIELD_TYPE.NumberIntegerQuantitySelector ||
                    field.FieldType === FIELD_TYPE.NumberRealQuantitySelector ||
                    field.FieldType === FIELD_TYPE.Package ||
                    field.FieldType === FIELD_TYPE.NumberIntegerForMatrix ||
                    field.FieldType === FIELD_TYPE.NumberRealForMatrix) {
                    field.Layout.XAlignment = X_ALIGNMENT_TYPE.Center;
                }
                else {
                    // HACK: align the rest of the fields by the culture.
                    // field.Layout.XAlignment = this.layoutService.isRtl() ? X_ALIGNMENT_TYPE.Right : X_ALIGNMENT_TYPE.Left;
                }
            });
        }
        const fields = [];
        // const matrixFields = controlFields.filter((cf) =>
        //     this.isMatrixField(cf.ApiName)
        // ).length;
        // let matrixAlreadyPlaced = false;
        controlFields.forEach((field, index) => {
            const dataField = dataFields.filter((df) => df.ApiName === field.ApiName)[0];
            if (!dataField) {
                return;
            }
            // If current view is not table view and those fields are special.
            if (this.layoutType !== 'table' &&
                ((this.hasMenuFloatingOnOtherField &&
                    this.menuField &&
                    this.menuField.ApiName === field.ApiName) ||
                    (this.indicatorsField &&
                        this.indicatorsField.ApiName === field.ApiName) ||
                    (this.hasCampaignField &&
                        this.hasCampaignField.ApiName === field.ApiName))) {
                return;
            }
            // Set type to link
            if (index === 0 && this.firstFieldAsLink) {
                dataField.FieldType = FIELD_TYPE.InternalLink;
                // dataField.Value = this.getInternalLinkHref();
            }
            else if (dataField.Value.length > 0 &&
                (field.FieldType === FIELD_TYPE.ReferenceType ||
                    field.FieldType === FIELD_TYPE.GuidReferenceType)) {
                // const transactionUrl =
                //     this.data.MainAction === '2'
                //         ? 'transactions/scope_items/'
                //         : 'transactions/cart/';
                // dataField.Value = transactionUrl + dataField.Value;
            }
            if (field.ApiName === 'ObjectMenu') {
                dataField.Enabled = true;
                // HACK : Until "Enabled" returns from the server, we set PepMenu to be
                //        Disabled in cart on regular items and not campign items.
            }
            const customField = this.convertToCustomField(field, dataField, this.canEditObject, this.menuDataField, this.hasCampaignDataField, this.indicatorsDataField, this.objectId, this.parentId, this.searchCode);
            fields.push(customField);
        });
        return fields.sort((f1, f2) => f1.row > f2.row
            ? 1
            : f1.row < f2.row
                ? -1
                : f1.col > f2.col
                    ? 1
                    : f1.col < f2.col
                        ? -1
                        : 0);
    }
    onValueChanged(event) {
        this.onFormValidationChanged(this.form.valid);
        const formControl = this.getFormControlById(event.key);
        const isValid = formControl ? formControl.valid : true;
        // const isValid = true;
        if (isValid) {
            // Set it to false to disable all fields.
            if (this.layoutType === 'form') {
                this.isLocked = true;
            }
            // Update the current field value.
            const currentField = this.fields.find((f) => f.key === event.key);
            if (currentField) {
                currentField.formattedValue = currentField.value = event.value;
            }
            this.valueChange.emit({
                id: this.data.UID.toString(),
                key: event.key,
                value: event.value,
                controlType: event.controlType,
            });
        }
    }
    onChildClicked(childClick) {
        this.childClick.emit(childClick);
    }
    onChildChanged(childChange) {
        this.childChange.emit(childChange);
    }
    onFormValidationChanged(formValidationChange) {
        this.formValidationChange.emit(formValidationChange);
    }
    onClick(fieldClickEvent) {
        const clickedUiControlField = this.data.Fields.filter((f) => f.ApiName === fieldClickEvent.key)[0];
        const idType = this.data.Type ? this.data.Type.toString() : '';
        if (clickedUiControlField) {
            if (clickedUiControlField.FieldType === FIELD_TYPE.GuidReferenceType) {
                this.fieldClick.emit({
                    id: this.data.UID.toString(),
                    key: fieldClickEvent.key,
                    idType,
                    which: fieldClickEvent.eventWhich,
                    value: fieldClickEvent.value,
                    controlType: fieldClickEvent.controlType,
                    fieldType: clickedUiControlField.FieldType,
                    otherData: fieldClickEvent.otherData,
                });
            }
            else if (clickedUiControlField.FieldType === FIELD_TYPE.ListOfObjects) {
                this.fieldClick.emit({
                    id: this.data.UID.toString(),
                    key: fieldClickEvent.key,
                    idType,
                    which: fieldClickEvent.eventWhich,
                    value: fieldClickEvent.value,
                    controlType: fieldClickEvent.controlType,
                    fieldType: clickedUiControlField.FieldType,
                    otherData: fieldClickEvent.otherData,
                });
            }
            else {
                this.fieldClick.emit({
                    id: this.data.UID.toString(),
                    key: fieldClickEvent.key,
                    idType,
                    which: fieldClickEvent.eventWhich,
                    value: fieldClickEvent.value,
                    controlType: fieldClickEvent.controlType,
                    fieldType: clickedUiControlField.FieldType,
                    otherData: fieldClickEvent.otherData,
                });
            }
        }
        else {
            // For other api names (like enter children etc).
            this.fieldClick.emit({
                id: this.data.UID.toString(),
                key: fieldClickEvent.key,
                idType,
                which: fieldClickEvent.eventWhich,
                value: fieldClickEvent.value,
                controlType: fieldClickEvent.controlType,
                otherData: fieldClickEvent.otherData,
            });
        }
    }
}
PepFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'pep-form',
                template: "<fieldset *ngIf=\"form\" [formGroup]=\"form\" [disabled]=\"isLocked\" class=\"pep-form\"\n    [ngStyle]=\"{ 'background-color': layoutType == 'card' && data?.BackgroundColor }\">\n    <!-- New Form -->\n    <mat-grid-list *ngIf=\"layoutType == 'form'\" [cols]=\"columns\" [rowHeight]=\"rowHeight + 'rem'\"\n        [gutterSize]=\"formGutterSize\">\n        <mat-grid-tile *ngFor=\"let field of fields\" [rowspan]=\"field.rowSpan\" [colspan]=\"field.colSpan\">\n            <pep-field-generator *ngIf=\"field.controlType != 'placeholder'\" [form]=\"form\" [layoutType]=\"layoutType\"\n                [checkForChanges]=\"checkForChanges\" [uid]=\"data?.UID\" [field]=\"field\" [showTitle]=\"showTitle\"\n                (valueChange)=\"onValueChanged($event)\" (childClick)=\"onChildClicked($event)\"\n                (childChange)=\"onChildChanged($event)\" (elementClick)=\"onClick($event)\"\n                (formValidationChange)=\"onFormValidationChanged($event)\">\n            </pep-field-generator>\n        </mat-grid-tile>\n    </mat-grid-list>\n\n    <!-- Thumbnails -->\n    <mat-grid-list *ngIf=\"layoutType == 'card'\" [cols]=\"columns\" [rowHeight]=\"rowHeight + 'rem'\"\n        [gutterSize]=\"cardGutterSize\" class=\"card-spacing\">\n        <mat-grid-tile *ngFor=\"let field of fields\" [rowspan]=\"field.rowSpan\" [colspan]=\"field.colSpan\"\n            [ngStyle]=\"{ overflow: field.type == 'qs' ? 'unset' : 'hidden' }\">\n            <pep-field-generator *ngIf=\"field.controlType != 'placeholder'\" [form]=\"form\" [layoutType]=\"layoutType\"\n                [ngClass]=\"{ 'lock-events': lockEvents }\" [isActive]=\"isActive\" [checkForChanges]=\"checkForChanges\"\n                [uid]=\"data?.UID\" [field]=\"field\" [showTitle]=\"showTitle\" (valueChange)=\"onValueChanged($event)\"\n                (childClick)=\"onChildClicked($event)\" (childChange)=\"onChildChanged($event)\"\n                (elementClick)=\"onClick($event)\">\n            </pep-field-generator>\n        </mat-grid-tile>\n    </mat-grid-list>\n\n    <ng-container *ngIf=\"layoutType == 'table'\">\n        <ng-container *ngIf=\"isReport; then reportBlock; else notReportBlock\"></ng-container>\n        <ng-template #reportBlock>\n            <ng-container *ngTemplateOutlet=\"report\"></ng-container>\n        </ng-template>\n        <ng-template #notReportBlock>\n            <div *ngFor=\"let field of fields; let j = index\" class=\"pull-left flip table-cell \"\n                [ngClass]=\"['text-align-' + field.xAlignment]\" style=\"height: 100%\"\n                [ngStyle]=\"{ width: (layout?.ControlFields)[j]?.calcColumnWidthString}\">\n                <pep-field-generator *ngIf=\"field.controlType != 'placeholder'\" [checkForChanges]=\"checkForChanges\"\n                    [uid]=\"data?.UID\" [field]=\"field\" (valueChange)=\"onValueChanged($event)\"\n                    (elementClick)=\"onClick($event)\" [form]=\"form\" [layoutType]=\"layoutType\" [showTitle]=\"false\"\n                    [isActive]=\"isActive\">\n                </pep-field-generator>\n            </div>\n        </ng-template>\n    </ng-container>\n\n    <!------- For testing ------------\n    {{ form.value | json }}\n    {{ form.valid }}\n    ---------------------------------->\n</fieldset>\n\n<ng-template #report>\n    <div *ngFor=\"let field of fields; let j = index\" class=\"pull-left flip pep-report-fields\"\n        [ngStyle]=\"{ width: (layout?.ControlFields)[j]?.calcColumnWidthString }\"\n        [ngClass]=\"['text-align-' + field.xAlignment]\">\n        <ng-container [ngSwitch]=\"field.controlType\">\n            <pep-image *ngSwitchCase=\"'image'\" [uid]=\"data?.UID\" [form]=\"form\" [key]=\"field.key\"\n                [src]=\"field.formattedValue\" [srcLarge]=\"field.value\" [options]=\"field.options\" [label]=\"field.label\"\n                [mandatory]=\"field.mandatory\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\n                [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\" [layoutType]=\"layoutType\"\n                (elementClick)=\"onClick($event)\">\n            </pep-image>\n\n            <pep-signature *ngSwitchCase=\"'signature'\" [form]=\"form\" [key]=\"field.key\" [src]=\"field.value\"\n                [label]=\"field.label\" [mandatory]=\"field.mandatory\" [disabled]=\"field.disabled\"\n                [readonly]=\"field.readonly\" [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\"\n                [layoutType]=\"layoutType\">\n            </pep-signature>\n\n            <pep-checkbox *ngSwitchCase=\"'checkbox'\" [form]=\"form\" [key]=\"field.key\"\n                [value]=\"(field.value | lowercase) == 'true' || field.value == '1' ? true : false\" [label]=\"field.label\"\n                [type]=\"field.type\" [mandatory]=\"field.mandatory\" [disabled]=\"field.disabled\"\n                [readonly]=\"field.readonly\" [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\"\n                [additionalValue]=\"field.additionalValue\" [layoutType]=\"layoutType\">\n            </pep-checkbox>\n\n            <pep-date *ngSwitchCase=\"'date'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\"\n                [formattedValue]=\"field.formattedValue\" [label]=\"field.label\" [type]=\"field.type\"\n                [mandatory]=\"field.mandatory\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\n                [textColor]=\"field.textColor\" [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\"\n                [minValue]=\"field.minValue\" [maxValue]=\"field.maxValue\" [layoutType]=\"layoutType\">\n            </pep-date>\n\n            <pep-internal-button *ngSwitchCase=\"'button'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\"\n                [formattedValue]=\"field.formattedValue\" [label]=\"field.label\" [type]=\"field.type\"\n                [disabled]=\"field.disabled\" [readonly]=\"field.readonly\" [xAlignment]=\"field.xAlignment\"\n                [layoutType]=\"layoutType\" (elementClick)=\"onClick($event)\">\n            </pep-internal-button>\n\n            <pep-textarea *ngSwitchCase=\"'textarea'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\"\n                [label]=\"field.label\" [mandatory]=\"field.mandatory\" [disabled]=\"field.disabled\"\n                [readonly]=\"field.readonly\" [maxFieldCharacters]=\"field.maxFieldCharacters\"\n                [textColor]=\"field.textColor\" [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\"\n                [layoutType]=\"layoutType\">\n            </pep-textarea>\n\n            <pep-quantity-selector *ngSwitchCase=\"'qs'\" [id]=\"field.key\" [form]=\"form\" [key]=\"field.key\"\n                [value]=\"field.value\" [formattedValue]=\"field.formattedValue\" [label]=\"field.label\" [type]=\"field.type\"\n                [mandatory]=\"field.mandatory\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\n                [textColor]=\"field.textColor\" [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\"\n                [layoutType]=\"layoutType\" (valueChange)=\"onValueChanged($event)\" (elementClick)=\"onClick($event)\">\n            </pep-quantity-selector>\n\n            <ng-container *ngSwitchDefault>\n                <ng-container *ngIf=\"field.formattedValue?.length > 0; then notEmptyBlock; else emptyBlock\">\n                </ng-container>\n                <ng-template #notEmptyBlock>\n                    <ng-container\n                        *ngIf=\"field.controlType === 'attachment' || field.type === 'link'; then linkBlock; else notLinkBlock\">\n                    </ng-container>\n                    <ng-template #linkBlock>\n                        <a [id]=\"field.key\" class=\"color-link body-sm pep-report-input readonly\"\n                            *ngIf=\"field.formattedValue != null\" title=\"{{ field.formattedValue }}\" target=\"_blank\"\n                            href=\"{{ field.value }}\">{{ field.formattedValue }}</a>\n                    </ng-template>\n                    <ng-template #notLinkBlock>\n                        <span [id]=\"field.key\" class=\"body-sm pep-report-input readonly\"\n                            title=\"{{ field.formattedValue }}\" [ngStyle]=\"{ color: field.textColor }\">{{\n                            field.formattedValue }}</span>\n                    </ng-template>\n                </ng-template>\n                <ng-template #emptyBlock>\n                    <span>&nbsp;</span>\n                </ng-template>\n            </ng-container>\n        </ng-container>\n    </div>\n</ng-template>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{display:grid}"]
            },] }
];
PepFormComponent.ctorParameters = () => [
    { type: PepDialogService },
    { type: PepCustomizationService },
    { type: PepLayoutService },
    { type: FormBuilder },
    { type: KeyValueDiffers },
    { type: TranslateService }
];
PepFormComponent.propDecorators = {
    isReport: [{ type: Input }],
    layout: [{ type: Input }],
    lockEvents: [{ type: Input }],
    canEditObject: [{ type: Input }],
    data: [{ type: Input }],
    isActive: [{ type: Input }],
    layoutType: [{ type: Input }],
    objectId: [{ type: Input }],
    parentId: [{ type: Input }],
    searchCode: [{ type: Input }],
    showTitle: [{ type: Input }],
    firstFieldAsLink: [{ type: Input }],
    checkForChanges: [{ type: Input }],
    valueChange: [{ type: Output }],
    formValidationChange: [{ type: Output }],
    childClick: [{ type: Output }],
    childChange: [{ type: Output }],
    fieldClick: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,