import { Component, Input, Output, EventEmitter, ViewChild, ElementRef, ViewContainerRef, TemplateRef, ChangeDetectionStrategy, ChangeDetectorRef, } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { PepInternalPageService } from './internal-page.service';
import { PepCustomizationService, FIELD_TYPE, } from '@pepperi-addons/ngx-lib';
import { PepInternalListComponent, } from './internal-list.component';
import { PepDialogService } from '@pepperi-addons/ngx-lib/dialog';
import { fromEvent } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { PepQuantitySelectorComponent } from '@pepperi-addons/ngx-lib/quantity-selector';
export class PepInternalPageComponent {
    constructor(fb, dialogService, internalPageService, customizationService, elementRef, changeDetectorRef) {
        this.fb = fb;
        this.dialogService = dialogService;
        this.internalPageService = internalPageService;
        this.customizationService = customizationService;
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.controlType = 'internalPage';
        this.layoutType = 'form';
        this.childChange = new EventEmitter();
        this.childClick = new EventEmitter();
        this.checkForChanges = null;
        this.childData = null;
        this.totalsRow = [];
        this.additionalApiNames = null;
        this.currentAdditionalApiName = null;
        this.focusedQS = false;
        this.fieldIdWithFocus = '';
        this.columnWidth = 100;
        this.coverChildTable = false;
        this.currentViewType = null;
        this.sumOfMinColWidth = 0;
        this.totalRowsWidth = 0;
        this.viewWidth = '100%';
        this.viewHeight = 'auto';
        this.displayQSbtns = true;
        this.selectedApiName = '';
        this.showSort = false;
        this.defaultRowSpan = -1;
    }
    fillData(isInDialog = false) {
        var _a, _b, _c, _d, _e;
        const view = this.matrixTemplate.createEmbeddedView(null);
        (_a = this.customList) === null || _a === void 0 ? void 0 : _a.clear();
        (_b = this.orgCont) === null || _b === void 0 ? void 0 : _b.clear();
        if (isInDialog) {
            (_c = this.dialogCont) === null || _c === void 0 ? void 0 : _c.clear();
            (_d = this.dialogCont) === null || _d === void 0 ? void 0 : _d.insert(view);
        }
        else {
            (_e = this.orgCont) === null || _e === void 0 ? void 0 : _e.insert(view);
        }
        setTimeout(() => {
            // const buffer = [];
            // if (this.childData.Rows) {
            //     // for (let i = 0; i < this.childData.Rows.length; i++) {
            //     for (const childDataRow of this.childData.Rows) {
            //         const osd = new ObjectSingleData(
            //             this.uiControl,
            //             childDataRow
            //         );
            //         osd.IsEditable = true;
            //         buffer.push(osd);
            //     }
            // }
            const viewType = this.isTableView()
                ? 'table'
                : 'lines';
            this.customList.initListData(this.uiControl, this.childData.TotalRows, this.childData.Rows, viewType);
            this.setTotalsRow();
            // if (!this.childModal.isShown) {
            const childrenCount = this.childData.Rows
                ? this.childData.Rows.length
                : 0;
            const isEven = childrenCount % 2 === 0;
            // 3 for matrix & flat matrix because the header + total is 2 more rows.
            const rowsToAdd = this.isMatrixView() || this.isFlatMatrixView()
                ? isEven
                    ? 3
                    : 4
                : 1;
            const formRowHeight = this.customizationService.calculateFormFieldHeight() * 16; // convert rem to pixel
            // Set the default only if not set yet.
            if (this.defaultRowSpan === -1) {
                this.defaultRowSpan = this.field.rowSpan;
            }
            this.sumOfMinColWidth = 0;
            this.totalRowsWidth = 0;
            this.childData.UIControl.ControlFields.forEach((uiControlField) => {
                this.totalRowsWidth += uiControlField.ColumnWidth;
                uiControlField.minFieldWidth = this.mmToPx(12); // NEED TO GET THIS PARAM FROM CUSTOMIZATION;
                this.sumOfMinColWidth += 12;
            });
            this.setViewCover(this.childData.Rows);
            if (this.coverChildTable) {
                this.field.rowSpan = this.defaultRowSpan;
            }
            else {
                // For line view Add the height of the line (form height).
                if (this.currentViewType.Key === 'OrderCenterFlatMatrixLine') {
                    const maxRow = Math.max(...this.uiControl.ControlFields.map((f) => {
                        return f.Layout.Y + f.Layout.Height;
                    }));
                    // * 16 convert rem to pixel
                    const cardRowsHeight = this.customizationService.calculateCardRowsHeight(maxRow) * 16;
                    // maxRow * 24 + 60 - 24 for each row in card + 60 for the padding of each card.
                    // const rowSpanToAdd = Math.floor(childrenCount * ((cardRowsHeight + 56) / formRowHeight) + rowsToAdd);
                    // + 16 is the 1rem margin outside card.
                    const rowSpanToAdd = (childrenCount * (cardRowsHeight + 16)) /
                        formRowHeight +
                        rowsToAdd;
                    this.field.rowSpan = rowSpanToAdd;
                }
                else {
                    // const tableRowsHeight = this.customizationService.calculateTableRowsHeight(childrenCount) * 16;
                    // this.field.rowSpan = Math.ceil((tableRowsHeight + (rowsToAdd * 40)) / formRowHeight);
                    // * 16 convert rem to pixel
                    const rowsToAddHeight = this.customizationService.calculateTableRowsHeight(rowsToAdd, false) * 16;
                    const tableRowsHeight = this.customizationService.calculateTableRowsHeight(childrenCount) * 16;
                    this.field.rowSpan =
                        (rowsToAddHeight + tableRowsHeight) / formRowHeight;
                }
            }
        }, 0);
        this.changeDetectorRef.markForCheck();
    }
    fillChildData(res) {
        this.childData = res;
        this.uiControl = res.UIControl;
        this.additionalApiNames = res.AdditionalApiNames;
        this.fillData();
    }
    mmToPx(mm) {
        const height = this.my1mm.nativeElement.clientHeight;
        return Math.floor(mm * height); // returns sizes in PX
    }
    isMatrixView() {
        return (this.currentViewType &&
            this.currentViewType.Key === 'OrderCenterMatrix');
    }
    isFlatMatrixView() {
        return (this.currentViewType &&
            this.currentViewType.Key === 'OrderCenterFlatMatrixGrid');
    }
    isTableView() {
        return this.isMatrixView() || this.isFlatMatrixView();
    }
    // private getItemClass(): string {
    //     let res = '';
    //     if (!this.isTableView()) {
    //         res = 'line-view';
    //     }
    //     return res;
    // }
    changeChildrenViewType(viewTypeKey) {
        this.rows = [];
        this.uiControl = null;
        for (const vt of this.childViewTypes) {
            if (vt.Key === viewTypeKey) {
                this.currentViewType = vt;
                break;
            }
        }
        // check if view type changed
        // if (this.currentViewType.Key != viewTypeKey) {
        // window.scroll(0, 0); //or document.body.scrollTop = 0; or document.querySelector('body').scrollTo(0,0)
        this.currentViewTypeTitle = this.currentViewType.Value;
        this.internalPageService.changeChildrenViewType(this.currentViewType.Key, (res) => {
            if (res.Rows) {
                this.fillChildData(res);
            }
        });
    }
    setViewCover(rows) {
        if (!rows) {
            return;
        }
        const matrixCont = this.mainViewCont.nativeElement;
        const viewWidth = matrixCont.clientWidth;
        this.viewWidth = viewWidth ? viewWidth.toString() : '100%';
        // if the matrix located on the bottom / there is nothing under the matrix we dont need to check the height
        if (parseInt(viewWidth, 10) < this.mmToPx(this.sumOfMinColWidth)) {
            this.coverChildTable = true;
        }
        else {
            this.coverChildTable = false;
        }
        this.changeDetectorRef.markForCheck();
    }
    showMatrixDialog() {
        const config = this.dialogService.getDialogConfig({
            disableClose: false,
            // minWidth: '50vw',
            // maxWidth: '90vw',
            // maxHeight: '90vh',
        }, 'large');
        const dialogRef = this.dialogService.openDialog(this.matrixDialogTemplate, {}, config);
        dialogRef.afterOpened().subscribe(() => {
            this.fillData(true);
        });
        dialogRef.afterClosed().subscribe((value) => {
            this.fillData(false);
        });
    }
    ngOnInit() {
        // let field = this.field as PepInternalPageField;
        this.internalPageService.initDetails(this.field.objectId, this.field.parentId, this.field.searchCode, (resViewTypes) => {
            // my code DI-7134
            resViewTypes.Rows = resViewTypes.Rows.filter((item) => item.Key !== 'OrderCenterView1');
            if (resViewTypes.Rows && resViewTypes.Rows.length > 0) {
                if (!resViewTypes.Default) {
                    resViewTypes.Default = resViewTypes.Rows[0].Key;
                }
                this.childViewTypes = resViewTypes.Rows;
                this.currentViewType = resViewTypes.Rows[0];
                // for (var i = 0; i < resViewTypes.Rows.length; i++) {
                for (const viewTypeRow of resViewTypes.Rows) {
                    if (viewTypeRow.Value === resViewTypes.Default) {
                        this.currentViewType = viewTypeRow;
                    }
                }
                this.loadLastAdditionalApiName();
                this.changeChildrenViewType(this.currentViewType.Key);
            }
        });
        this.resize = fromEvent(window, 'resize')
            .pipe(debounceTime(10))
            .subscribe((event) => {
            this.setViewCover(this.rows);
        });
    }
    loadLastAdditionalApiName() {
        const daa = sessionStorage.getItem(PepInternalPageComponent.CURRENT_ADDITIONAL_API_NAME);
        if (daa && daa.length > 0) {
            const additionalApiName = JSON.parse(daa);
            this.currentAdditionalApiName = additionalApiName;
            this.internalPageService.additionalApiName = additionalApiName === null || additionalApiName === void 0 ? void 0 : additionalApiName.Key;
        }
    }
    ngOnDestroy() {
        // if (this.childChange) {
        //     this.childChange.unsubscribe();
        // }
        // if (this.childClick) {
        //     this.childClick.unsubscribe();
        // }
        if (this.resize) {
            this.resize.unsubscribe();
        }
    }
    changeAdditionalApiName(additionalApiName) {
        this.internalPageService.changeAdditionalApiName(additionalApiName ? additionalApiName.Key : '', (res) => {
            // for (let index = 0; index < res.Rows.length; index++) {
            for (const row of res.Rows) {
                this.updateChanges(row);
            }
            this.changeDetectorRef.markForCheck();
        });
        sessionStorage.setItem(PepInternalPageComponent.CURRENT_ADDITIONAL_API_NAME, JSON.stringify(additionalApiName));
        setTimeout(() => {
            this.currentAdditionalApiName = additionalApiName;
        }, 0);
    }
    setTotalsRow() {
        this.totalsRow = [];
        if (this.isMatrixView() || this.isFlatMatrixView()) {
            let totalCol = 0;
            const items = this.customList.items;
            if (items) {
                for (let col = 0; col < items[0].Fields.length; col++) {
                    const field = items[0].Fields[col];
                    if (field.FieldType === FIELD_TYPE.NumberIntegerForMatrix ||
                        field.FieldType ===
                            FIELD_TYPE.NumberIntegerQuantitySelector ||
                        field.FieldType === FIELD_TYPE.NumberRealForMatrix ||
                        field.FieldType ===
                            FIELD_TYPE.NumberRealQuantitySelector ||
                        field.FieldType === FIELD_TYPE.CalculatedInt ||
                        field.FieldType === FIELD_TYPE.NumberInteger ||
                        field.FieldType === FIELD_TYPE.CalculatedReal ||
                        field.FieldType === FIELD_TYPE.NumberReal) {
                        totalCol = 0;
                        for (const listItem of items) {
                            if (listItem.Fields[col] &&
                                listItem.Fields[col].Value) {
                                const num = parseFloat(listItem.Fields[col].Value);
                                totalCol += isNaN(num) ? 0 : num;
                            }
                        }
                        this.totalsRow.push(totalCol);
                    }
                    else {
                        this.totalsRow.push('');
                    }
                }
            }
        }
    }
    updateChanges(elementToUpdate) {
        this.customList.updateItem(elementToUpdate);
        // Update memory data
        for (let index = 0; index < this.childData.Rows.length; index++) {
            if (this.childData.Rows[index].UID === elementToUpdate.UID) {
                this.childData.Rows[index] = elementToUpdate;
            }
        }
    }
    setValueCallback(id, res) {
        if (res.Rows.length === 1) {
            const field = res.Rows[0].Fields.find((f) => f.ApiName === 'ObjectMenu');
            if (field) {
                // HACK : Until "Enabled" returns from the server, we set PepMenu to be
                //        Disabled in cart on regular items and not campign items.
                field.Enabled = true;
            }
            this.updateChanges(res.Rows[0]);
        }
        this.setTotalsRow();
        this.checkForChanges = new Date();
        // DI-15985
        this.childChange.emit(res);
        this.changeDetectorRef.markForCheck();
    }
    onCustomizeObjectChanged(customizeObjectChangedData) {
        this.internalPageService.childValueChanged(customizeObjectChangedData.id, customizeObjectChangedData.key, customizeObjectChangedData.value, (res) => {
            this.setValueCallback(customizeObjectChangedData.id, res);
        });
    }
    onCustomizeFieldClick(fieldClickEvent) {
        let handledEvent = false;
        // For the new custom form, the plus and minus events transform in the IPepFormFieldValueChangeEvent
        if (fieldClickEvent.controlType === 'qs') {
            if (fieldClickEvent.value === PepQuantitySelectorComponent.PLUS) {
                handledEvent = true;
                this.internalPageService.childPlusClick(fieldClickEvent.id, fieldClickEvent.key, (res) => {
                    this.setValueCallback(fieldClickEvent.id, res);
                });
            }
            else if (fieldClickEvent.value === PepQuantitySelectorComponent.MINUS) {
                handledEvent = true;
                this.internalPageService.childMinusClick(fieldClickEvent.id, fieldClickEvent.key, (res) => {
                    this.setValueCallback(fieldClickEvent.id, res);
                });
            }
        }
        if (!handledEvent) {
            this.childClick.emit(fieldClickEvent);
        }
    }
}
PepInternalPageComponent.CURRENT_ADDITIONAL_API_NAME = 'item_details_currentAdditionalApiName';
PepInternalPageComponent.decorators = [
    { type: Component, args: [{
                selector: 'pep-internal-page',
                template: "<ng-template #matrixHeaderTemplate>\n    <div class=\"matrix-title-container pep-border-bottom align-{{\n            field.xAlignment\n        }}\" title=\"{{ field.label }}\">\n        <span class=\"block-with-text body-md\">{{ field.label }}</span>\n\n        <div class=\"buttons-container pep-spacing-element-negative pull-right flip\">\n            <ng-container *ngIf=\"\n                    currentViewType?.Key == 'OrderCenterMatrix' &&\n                    additionalApiNames &&\n                    additionalApiNames.length > 0\n                \">\n                <button class=\"pep-spacing-element pep-button icon-button sm weak\" mat-button [matMenuTriggerFor]=\"menu\"\n                    menu-blur>\n                    <span class=\"pull-left flip\" *ngIf=\"currentAdditionalApiName\">&nbsp;{{\n                        currentAdditionalApiName?.Value }}&nbsp;</span>\n\n                    <mat-icon [ngClass]=\"{'pull-left flip': currentAdditionalApiName}\">\n                        <pep-icon name=\"system_info\"></pep-icon>\n                    </mat-icon>\n                </button>\n                <mat-menu #menu=\"matMenu\" xPosition=\"before\">\n                    <button mat-menu-item [ngClass]=\"{\n                            selected: currentAdditionalApiName === null\n                        }\" (click)=\"changeAdditionalApiName(null)\">\n                        <span>{{ \"LIST.NONE\" | translate }}</span>\n                    </button>\n                    <button mat-menu-item [ngClass]=\"{\n                            selected:\n                                currentAdditionalApiName?.Key ==\n                                additionalApiName?.Key\n                        }\" *ngFor=\"let additionalApiName of additionalApiNames\"\n                        (click)=\"changeAdditionalApiName(additionalApiName)\">\n                        <span>{{ additionalApiName.Value }}</span>\n                    </button>\n                </mat-menu>\n            </ng-container>\n            <ng-container *ngIf=\"childViewTypes && childViewTypes.length > 1\">\n                <button class=\"pep-spacing-element pep-button icon-button sm weak\" mat-button\n                    [matMenuTriggerFor]=\"viewsMenu\" menu-blur>\n                    <mat-icon>\n                        <pep-icon name=\"view_card_md\"></pep-icon>\n                    </mat-icon>\n                </button>\n\n                <mat-menu #viewsMenu=\"matMenu\" xPosition=\"before\">\n                    <button mat-menu-item [ngClass]=\"{\n                            selected: currentViewType?.Key == viewType?.Key\n                        }\" *ngFor=\"let viewType of childViewTypes\" (click)=\"changeChildrenViewType(viewType?.Key)\">\n                        <mat-icon [ngSwitch]=\"viewType?.Key\">\n                            <pep-icon *ngSwitchCase=\"'OrderCenterMatrix'\" name=\"view_matrix\"></pep-icon>\n                            <pep-icon *ngSwitchCase=\"'OrderCenterFlatMatrixGrid'\" name=\"view_table\"></pep-icon>\n                            <pep-icon *ngSwitchCase=\"'OrderCenterFlatMatrixLine'\" name=\"view_line\"></pep-icon>\n                        </mat-icon>\n                        <span>{{ viewType?.Value }}</span>\n                    </button>\n                </mat-menu>\n            </ng-container>\n        </div>\n    </div>\n\n</ng-template>\n\n<ng-template #matrixTemplate>\n    <div #matrixContainer class=\"matrix-container\">\n        <pep-internal-list (valueChange)=\"onCustomizeObjectChanged($event)\" [parentScroll]=\"matrixContainer\"\n            (fieldClick)=\"onCustomizeFieldClick($event)\" [totalsRow]=\"totalsRow\"></pep-internal-list>\n    </div>\n</ng-template>\n\n<div #mainViewCont id=\"mainViewCont\" [ngStyle]=\"{ 'max-width': viewWidth, 'max-height': viewHeight }\">\n    <div #my1mm id=\"my1_mm\" style=\"height:1mm;width:1mm;visibility: hidden;\"></div>\n    <ng-container *ngIf=\"coverChildTable && uiControl != null\">\n        <div class=\"table-cover\"></div>\n        <button (click)=\"showMatrixDialog()\" class=\"pep-button strong sm table-cover-button\"\n            [ngClass]=\"{ 'lineview-btn': currentViewType?.Key == 'OrderCenterFlatMatrixLine'}\">\n            {{ \"INTERNAL_PAGE.CLICK_TO_ORDER\" | translate }}\n        </button>\n    </ng-container>\n\n    <ng-container *ngTemplateOutlet=\"matrixHeaderTemplate\"></ng-container>\n    <ng-container #orgCont></ng-container>\n</div>\n\n<ng-template #matrixDialogTemplate>\n\n    <div mat-dialog-title>\n        <ng-container *ngTemplateOutlet=\"matrixHeaderTemplate\"></ng-container>\n    </div>\n\n    <div mat-dialog-content>\n        <ng-container #dialogCont></ng-container>\n    </div>\n</ng-template>\n\n<!-- <div id=\"childGridModal\" bsModal (onShown)=\"onShown()\" (onHidden)=\"onHidden()\" #childModal=\"bs-modal\" class=\"modal\"\n    tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"gridModalLabel\" aria-hidden=\"true\">\n    <div class=\"modal-dialog\" role=\"document\">\n        <div class=\"modal-content\">\n            <div class=\"modal-body matrix-dialog-body\">\n                <ng-container #modalCont></ng-container>\n            </div>\n        </div>\n    </div>\n</div> -->",
                providers: [PepInternalPageService],
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{display:grid;width:inherit;height:inherit}.matrix-title-container{padding:0;height:2.5rem;height:var(--pep-form-field-height,2.5rem);display:flex;align-items:flex-end}.matrix-title-container .block-with-text{width:100%;max-height:inherit;font-weight:600;font-weight:var(--pep-font-weight-bold,600);display:block;text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.matrix-title-container .buttons-container{display:flex;align-self:center}.matrix-title-container .buttons-container .pep-button,.matrix-title-container .buttons-container .pepperi-button{width:-webkit-max-content;width:-moz-max-content;width:max-content}#mainViewCont{width:100%;height:inherit;overflow:hidden;padding:0 .25rem;padding:0 var(--pep-spacing-xs,.25rem)}#mainViewCont .table-cover{background-color:#fff;z-index:98;position:absolute;top:0;width:100%;height:inherit;opacity:.5}#mainViewCont .table-cover-button{position:absolute;left:50%;transform:translate(-50%,-50%);top:calc(50% + 2.5rem);top:calc(50% + var(--pep-form-field-height, 2.5rem));z-index:99}#mainViewCont .table-cover-button.lineview-btn{top:calc(2 * 2.5rem);top:calc(2 * var(--pep-form-field-height, 2.5rem));transform:translate(-50%)}#mainViewCont .underCover{max-height:inherit;overflow:hidden}#mainViewCont ::ng-deep.table-header{top:unset!important}"]
            },] }
];
PepInternalPageComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: PepDialogService },
    { type: PepInternalPageService },
    { type: PepCustomizationService },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
PepInternalPageComponent.propDecorators = {
    field: [{ type: Input }],
    layoutType: [{ type: Input }],
    childChange: [{ type: Output }],
    childClick: [{ type: Output }],
    my1mm: [{ type: ViewChild, args: ['my1mm',] }],
    mainViewCont: [{ type: ViewChild, args: ['mainViewCont',] }],
    orgCont: [{ type: ViewChild, args: ['orgCont', { read: ViewContainerRef },] }],
    dialogCont: [{ type: ViewChild, args: ['dialogCont', { read: ViewContainerRef },] }],
    matrixTemplate: [{ type: ViewChild, args: ['matrixTemplate',] }],
    matrixDialogTemplate: [{ type: ViewChild, args: ['matrixDialogTemplate', { read: TemplateRef },] }],
    customList: [{ type: ViewChild, args: [PepInternalListComponent,] }]
};
//# sourceMappingURL=data:application/json;base64,