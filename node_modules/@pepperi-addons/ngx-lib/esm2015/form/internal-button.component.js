import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, Renderer2, ElementRef, } from '@angular/core';
import { PepCustomizationService, DEFAULT_HORIZONTAL_ALIGNMENT, PepInternalButtonField, } from '@pepperi-addons/ngx-lib';
import { pepIconSystemBin } from '@pepperi-addons/ngx-lib/icon';
export class PepInternalButtonComponent {
    constructor(customizationService, renderer, element) {
        this.customizationService = customizationService;
        this.renderer = renderer;
        this.element = element;
        this.key = '';
        this.value = '';
        this.formattedValue = '';
        this.label = '';
        this.type = 'button';
        this.mandatory = false;
        this.disabled = false;
        this.readonly = false;
        this.xAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;
        this.rowSpan = 1;
        this._visible = true;
        this.controlType = 'button';
        this.form = null;
        this.showTitle = true;
        this.layoutType = 'form';
        this.elementClick = new EventEmitter();
        this.valueChange = new EventEmitter();
        this.standAlone = false;
        this.createNewReference = false;
        this.referenceButtons = [
            {
                key: 'action',
                callback: (action) => this.onButtonClicked(action.event),
            },
            {
                key: 'delete',
                callback: (action) => this.remove(),
                classNames: 'caution',
                iconName: pepIconSystemBin.name,
            },
        ];
    }
    set visible(visible) {
        this._visible = visible;
        if (visible) {
            this.renderer.removeClass(this.element.nativeElement, 'hidden-element');
        }
        else {
            this.renderer.addClass(this.element.nativeElement, 'hidden-element');
        }
    }
    get visible() {
        return this._visible;
    }
    ngOnInit() {
        if (this.form === null) {
            this.standAlone = true;
            // this.form = this.customizationService.getDefaultFromGroup(this.key, this.value, this.mandatory, this.readonly, this.disabled);
            const pepField = new PepInternalButtonField({
                key: this.key,
                value: this.value,
                mandatory: this.mandatory,
                readonly: this.readonly,
                disabled: this.disabled,
            });
            this.form = this.customizationService.getDefaultFromGroup(pepField);
            this.formattedValue = this.formattedValue || this.value;
            this.renderer.addClass(this.element.nativeElement, PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME);
        }
    }
    ngOnChanges(changes) {
        if (this.type === 'reference') {
            this.createNewReference = this.value.length === 0;
            this.referenceButtons[0].value = this.formattedValue;
        }
    }
    ngOnDestroy() {
        //
    }
    // groupButtonClicked(action: IPepButtonClickEvent): void {
    //     if (action.source.key === 'action') {
    //         this.onButtonClicked(action.event);
    //     } else if (action.source.key === 'delete') {
    //         this.remove();
    //     }
    // }
    onButtonClicked(event) {
        if (this.type === 'reference') {
            const valueArr = this.value.split('/');
            this.elementClick.emit({
                key: this.key,
                value: valueArr[valueArr.length - 1],
                controlType: this.controlType,
                eventWhich: event.which,
                otherData: this.referenceObjectInternalType,
            });
        }
        else if (this.type === 'button' && true) {
            this.elementClick.emit({
                key: this.key,
                value: this.value,
                controlType: this.controlType,
                eventWhich: event.which,
            });
        }
        else {
            this.elementClick.emit({
                key: this.key,
                controlType: this.controlType,
                eventWhich: event.which,
            });
        }
    }
    hrefFunction(event) {
        if (event.which === 1 /*|| event.which === 2*/) {
            this.onButtonClicked(event);
        }
    }
    openReferenceObjectInternal(event) {
        this.elementClick.emit({
            key: this.key,
            value: this.value,
            controlType: this.controlType,
            eventWhich: event.which,
            otherData: this.referenceObjectInternalType,
        });
    }
    remove() {
        this.value = '';
        this.valueChange.emit(this.value);
    }
}
PepInternalButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'pep-internal-button',
                template: "<ng-container [ngSwitch]=\"type\">\n    <ng-container *ngSwitchCase=\"'reference'\">\n        <ng-container *ngIf=\"layoutType === 'form'; then formBlock; else notFormBlock\"></ng-container>\n        <ng-template #formBlock>\n            <div class=\"pep-button-container reference-button\">\n                <pep-field-title [label]=\"label\" [mandatory]=\"mandatory\" [disabled]=\"disabled\" [xAlignment]=\"xAlignment\"\n                    [showTitle]=\"showTitle\">\n                </pep-field-title>\n                <ng-container *ngIf=\"createNewReference; then newBlock; else existingBlock\"></ng-container>\n                <ng-template #newBlock>\n                    <button mat-button [id]=\"key\" title=\"{{ formattedValue }}\" class=\"pep-button md regular\"\n                        (click)=\"onButtonClicked($event)\" [ngClass]=\"{\n                            disabled: disabled,\n                            'pull-left': xAlignment == 'left',\n                            'pull-right': xAlignment == 'right',\n                            'center-alignment': xAlignment == 'center'\n                        }\">\n                        <span class=\"ellipsis pull-left flip button-title-with-icon\">{{ 'ACTIONS.CREATE_NEW' | translate\n                            }}</span>\n                        <mat-icon class=\"pull-right flip\" pepRtlClass>\n                            <pep-icon name=\"number_plus\" (click)=\"onButtonClicked($event)\">\n                            </pep-icon>\n                        </mat-icon>\n                    </button>\n                </ng-template>\n                <ng-template #existingBlock>\n                    <pep-group-buttons [buttons]=\"referenceButtons\" styleType=\"regular\" viewType=\"split\">\n                    </pep-group-buttons>\n                </ng-template>\n            </div>\n        </ng-template>\n        <ng-template #notFormBlock>\n            <ng-container *ngTemplateOutlet=\"linkTemplate\"></ng-container>\n        </ng-template>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"'listofobjects'\">\n        <ng-container *ngIf=\"layoutType === 'form'; then formBlock; else notFormBlock\"></ng-container>\n        <ng-template #formBlock>\n            <ng-container *ngTemplateOutlet=\"buttonTemplate; context: {internal: true}\"></ng-container>\n        </ng-template>\n        <ng-template #notFormBlock>\n            <ng-container *ngTemplateOutlet=\"linkTemplate\"></ng-container>\n        </ng-template>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"'button'\">\n        <ng-container [ngSwitch]=\"key\">\n            <ng-container *ngSwitchCase=\"'ObjectMenu'\">\n                <span (click)=\"onButtonClicked($event)\" title=\"{{ key }}\">\n                    <mat-icon>\n                        <pep-icon *ngIf=\"key == 'ObjectMenu'\" name=\"system_menu\">\n                        </pep-icon>\n                    </mat-icon>\n                </span>\n            </ng-container>\n\n            <ng-container *ngSwitchCase=\"'Agents' || 'ContactPersons' || 'Buyers'\">\n                <ng-container *ngIf=\"layoutType === 'table'; then tableBlock; else nonTableBlock\">\n                </ng-container>\n                <ng-template #nonTableBlock>\n                    <ng-container *ngTemplateOutlet=\"buttonTemplate; context: {internal: true}\"></ng-container>\n                </ng-template>\n                <ng-template #tableBlock>\n                    <span [id]=\"key\" title=\"{{ formattedValue }}\" class=\"pep-report-input readonly body-sm\">{{\n                        formattedValue }}</span>\n                </ng-template>\n            </ng-container>\n\n            <ng-container *ngSwitchDefault>\n                <ng-container *ngIf=\"layoutType === 'form'; then buttonBlock; else linkBlock\">\n                </ng-container>\n\n                <ng-template #buttonBlock>\n                    <ng-container *ngTemplateOutlet=\"buttonTemplate; context: {internal: false}\"></ng-container>\n                </ng-template>\n                <ng-template #linkBlock>\n                    <ng-container *ngTemplateOutlet=\"linkTemplate\"></ng-container>\n                </ng-template>\n            </ng-container>\n        </ng-container>\n    </ng-container>\n</ng-container>\n\n<ng-template #buttonTemplate let-internal=\"internal\">\n    <div class=\"pep-button-container\">\n        <pep-field-title [label]=\"label\" [mandatory]=\"mandatory\" [disabled]=\"disabled\" [xAlignment]=\"xAlignment\"\n            [showTitle]=\"showTitle\">\n        </pep-field-title>\n\n        <ng-container *ngIf=\"internal; then internalButtonTemplate; else regularButtonTemplate\"></ng-container>\n        <ng-template #regularButtonTemplate>\n            <button [id]=\"key\" title=\"{{ formattedValue }}\" mat-button class=\"pep-button md regular\"\n                dir=\"{{ xAlignment == 'right' ? 'rtl' : 'ltr' }}\" (click)=\"onButtonClicked($event)\"\n                [disabled]=\"disabled\"\n                [ngClass]=\"{disabled: disabled, 'pull-left': xAlignment == 'left', 'pull-right': xAlignment == 'right', 'center-alignment': xAlignment == 'center'}\">\n                {{ formattedValue }}\n            </button>\n        </ng-template>\n\n        <ng-template #internalButtonTemplate>\n            <button [id]=\"key\" title=\"{{ formattedValue }}\" mat-button class=\"pep-button md regular\"\n                dir=\"{{ xAlignment == 'right' ? 'rtl' : 'ltr' }}\" (click)=\"openReferenceObjectInternal($event)\"\n                [disabled]=\"disabled\"\n                [ngClass]=\"{disabled: disabled, 'pull-left': xAlignment == 'left', 'pull-right': xAlignment == 'right', 'center-alignment': xAlignment == 'center'}\">\n                <ng-container *ngIf=\"formattedValue == '0' || formattedValue == ''; then newBlock; else existingBlock\">\n                </ng-container>\n                <ng-template #newBlock>\n                    <span class=\"pull-left flip button-title-with-icon\">{{ 'LIST.SELECT' | translate }}&nbsp;</span>\n                    <mat-icon>\n                        <pep-icon name=\"number_plus\">\n                        </pep-icon>\n                    </mat-icon>\n                </ng-template>\n                <ng-template #existingBlock>\n                    <span class=\"pull-left flip button-title-with-icon\">{{ formattedValue }}&nbsp;{{ 'LIST.SELECTED' |\n                        translate\n                        }}&nbsp;</span>\n                    <mat-icon>\n                        <pep-icon name=\"system_edit\">\n                        </pep-icon>\n                    </mat-icon>\n                </ng-template>\n            </button>\n        </ng-template>\n    </div>\n</ng-template>\n\n<ng-template #linkTemplate>\n    <ng-container *ngIf=\"formattedValue?.length > 0; then notEmptyBlock; else emptyBlock\"></ng-container>\n    <ng-template #notEmptyBlock>\n        <a href=\"{{ value }}\" (mousedown)=\"hrefFunction($event)\" class=\"color-link\">\n            <span *ngIf=\"layoutType === 'table'\" [id]=\"key\" title=\"{{ formattedValue }}\"\n                class=\"body-sm pep-report-input readonly\">\n                {{ formattedValue }}\n            </span>\n            <span *ngIf=\"layoutType !== 'table'\" [id]=\"key\" title=\"{{ formattedValue }}\" class=\"body-sm pep-card-input\"\n                style=\"display: block;\">\n                {{ formattedValue }}\n            </span>\n        </a>\n    </ng-template>\n    <ng-template #emptyBlock>\n        <span>&nbsp;</span>\n    </ng-template>\n</ng-template>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{height:inherit;display:grid}:host>*{align-self:center}.pep-button-container,.pepperi-button-container{height:-webkit-fit-content;height:-moz-fit-content;height:fit-content}.pep-button-container .center-alignment,.pepperi-button-container .center-alignment{position:absolute;left:50%;transform:translate(-50%)}.pep-button-container.reference-button .split-buttons,.pep-button-container.reference-button ::ng-deep.split-buttons,.pepperi-button-container.reference-button .split-buttons,.pepperi-button-container.reference-button ::ng-deep.split-buttons{float:left}.pep-button-container.reference-button .split-buttons button:last-of-type,.pep-button-container.reference-button ::ng-deep.split-buttons button:last-of-type,.pepperi-button-container.reference-button .split-buttons button:last-of-type,.pepperi-button-container.reference-button ::ng-deep.split-buttons button:last-of-type{width:1.5rem;padding:0}"]
            },] }
];
PepInternalButtonComponent.ctorParameters = () => [
    { type: PepCustomizationService },
    { type: Renderer2 },
    { type: ElementRef }
];
PepInternalButtonComponent.propDecorators = {
    key: [{ type: Input }],
    value: [{ type: Input }],
    formattedValue: [{ type: Input }],
    label: [{ type: Input }],
    referenceObjectInternalType: [{ type: Input }],
    type: [{ type: Input }],
    mandatory: [{ type: Input }],
    disabled: [{ type: Input }],
    readonly: [{ type: Input }],
    xAlignment: [{ type: Input }],
    rowSpan: [{ type: Input }],
    visible: [{ type: Input }],
    form: [{ type: Input }],
    showTitle: [{ type: Input }],
    layoutType: [{ type: Input }],
    elementClick: [{ type: Output }],
    valueChange: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,