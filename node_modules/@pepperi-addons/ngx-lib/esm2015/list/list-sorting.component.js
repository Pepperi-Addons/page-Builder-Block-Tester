import { Component, Injectable, Input, Output, EventEmitter, } from '@angular/core';
export class IPepListSortingOption {
}
export class PepListSortingComponent {
    constructor() {
        this._options = null;
        this._currentSorting = null;
        this.sizeType = 'md';
        this.change = new EventEmitter();
        this.menuItems = null;
        this.currentItem = null;
    }
    set options(value) {
        this._options = value;
        this.menuItems = value.map((opt) => {
            return { key: opt.sortBy, text: opt.title, iconName: opt.iconName };
        });
    }
    get options() {
        return this._options;
    }
    set currentSorting(value) {
        this._currentSorting = value;
        this.currentItem = this.menuItems.find((mi) => mi.key === value.sortBy);
    }
    get currentSorting() {
        return this._currentSorting;
    }
    ngOnInit() {
        if (this.currentSorting === null &&
            this.options &&
            this.options.length > 0) {
            this.currentSorting = this.options[0];
        }
    }
    onMenuItemClicked(menuItemClickEvent) {
        this.currentSorting = this.options.find((sorting) => sorting.sortBy === menuItemClickEvent.source.key);
        this.change.emit({ source: this.currentSorting });
    }
}
PepListSortingComponent.decorators = [
    { type: Component, args: [{
                selector: 'pep-list-sorting',
                template: "<div class=\"sorting-container\">\n    <div class=\"body-xs sort-by\">\n        <span>{{ 'LIST.SORT_BY' | translate }}</span>\n    </div>\n    <pep-menu [type]=\"'select'\" [sizeType]=\"sizeType\" [items]=\"menuItems\" [selectedItem]=\"currentItem\"\n        [iconName]=\"'arrow_down'\" (menuItemClick)=\"onMenuItemClicked($event)\"></pep-menu>\n</div>",
                styles: [".sorting-container{display:flex;align-items:center}.sorting-container .sort-by{-webkit-margin-end:.5rem;margin-inline-end:.5rem;-webkit-margin-end:var(--pep-spacing-sm,.5rem);margin-inline-end:var(--pep-spacing-sm,.5rem)}"]
            },] },
    { type: Injectable }
];
PepListSortingComponent.propDecorators = {
    options: [{ type: Input }],
    currentSorting: [{ type: Input }],
    sizeType: [{ type: Input }],
    change: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1zb3J0aW5nLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1saWIvbGlzdC9saXN0LXNvcnRpbmcuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsVUFBVSxFQUNWLEtBQUssRUFDTCxNQUFNLEVBQ04sWUFBWSxHQUdmLE1BQU0sZUFBZSxDQUFDO0FBUXZCLE1BQU0sT0FBTyxxQkFBcUI7Q0FLakM7QUFZRCxNQUFNLE9BQU8sdUJBQXVCO0lBTnBDO1FBT1ksYUFBUSxHQUFpQyxJQUFJLENBQUM7UUFhOUMsb0JBQWUsR0FBMEIsSUFBSSxDQUFDO1FBVTdDLGFBQVEsR0FBZ0IsSUFBSSxDQUFDO1FBRXRDLFdBQU0sR0FBbUQsSUFBSSxZQUFZLEVBQW9DLENBQUM7UUFFOUcsY0FBUyxHQUF1QixJQUFJLENBQUM7UUFDckMsZ0JBQVcsR0FBZ0IsSUFBSSxDQUFDO0lBa0JwQyxDQUFDO0lBN0NHLElBQ0ksT0FBTyxDQUFDLEtBQW1DO1FBQzNDLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBRXRCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQy9CLE9BQU8sRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3hFLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUNELElBQUksT0FBTztRQUNQLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN6QixDQUFDO0lBR0QsSUFDSSxjQUFjLENBQUMsS0FBNEI7UUFDM0MsSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUM7UUFDN0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUNELElBQUksY0FBYztRQUNkLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUNoQyxDQUFDO0lBU0QsUUFBUTtRQUNKLElBQ0ksSUFBSSxDQUFDLGNBQWMsS0FBSyxJQUFJO1lBQzVCLElBQUksQ0FBQyxPQUFPO1lBQ1osSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUN6QjtZQUNFLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN6QztJQUNMLENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxrQkFBMEM7UUFDeEQsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FDbkMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEtBQUssa0JBQWtCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FDaEUsQ0FBQztRQUNGLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDO0lBQ3RELENBQUM7OztZQXBESixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGtCQUFrQjtnQkFDNUIsNFdBQTRDOzthQUUvQztZQUNBLFVBQVU7OztzQkFHTixLQUFLOzZCQWFMLEtBQUs7dUJBU0wsS0FBSztxQkFDTCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDb21wb25lbnQsXG4gICAgSW5qZWN0YWJsZSxcbiAgICBJbnB1dCxcbiAgICBPdXRwdXQsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIE9uQ2hhbmdlcyxcbiAgICBPbkluaXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGVwU2l6ZVR5cGUgfSBmcm9tICdAcGVwcGVyaS1hZGRvbnMvbmd4LWxpYic7XG5pbXBvcnQge1xuICAgIElQZXBNZW51SXRlbUNsaWNrRXZlbnQsXG4gICAgUGVwTWVudUl0ZW0sXG59IGZyb20gJ0BwZXBwZXJpLWFkZG9ucy9uZ3gtbGliL21lbnUnO1xuaW1wb3J0IHsgSVBlcExpc3RTb3J0aW5nQ2hhbmdlRXZlbnQgfSBmcm9tICcuL2xpc3QubW9kZWwnO1xuXG5leHBvcnQgY2xhc3MgSVBlcExpc3RTb3J0aW5nT3B0aW9uIHtcbiAgICBzb3J0Qnk6IHN0cmluZztcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIGljb25OYW1lPzogc3RyaW5nO1xuICAgIGlzQXNjPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUGVwTGlzdFNvcnRpbmdPcHRpb25DaGFuZ2VFdmVudCB7XG4gICAgc291cmNlOiBJUGVwTGlzdFNvcnRpbmdPcHRpb247XG59XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAncGVwLWxpc3Qtc29ydGluZycsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2xpc3Qtc29ydGluZy5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vbGlzdC1zb3J0aW5nLmNvbXBvbmVudC5zY3NzJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBlcExpc3RTb3J0aW5nQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBwcml2YXRlIF9vcHRpb25zOiBBcnJheTxJUGVwTGlzdFNvcnRpbmdPcHRpb24+ID0gbnVsbDtcbiAgICBASW5wdXQoKVxuICAgIHNldCBvcHRpb25zKHZhbHVlOiBBcnJheTxJUGVwTGlzdFNvcnRpbmdPcHRpb24+KSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSB2YWx1ZTtcblxuICAgICAgICB0aGlzLm1lbnVJdGVtcyA9IHZhbHVlLm1hcCgob3B0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4geyBrZXk6IG9wdC5zb3J0QnksIHRleHQ6IG9wdC50aXRsZSwgaWNvbk5hbWU6IG9wdC5pY29uTmFtZSB9O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0IG9wdGlvbnMoKTogQXJyYXk8SVBlcExpc3RTb3J0aW5nT3B0aW9uPiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2N1cnJlbnRTb3J0aW5nOiBJUGVwTGlzdFNvcnRpbmdPcHRpb24gPSBudWxsO1xuICAgIEBJbnB1dCgpXG4gICAgc2V0IGN1cnJlbnRTb3J0aW5nKHZhbHVlOiBJUGVwTGlzdFNvcnRpbmdPcHRpb24pIHtcbiAgICAgICAgdGhpcy5fY3VycmVudFNvcnRpbmcgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5jdXJyZW50SXRlbSA9IHRoaXMubWVudUl0ZW1zLmZpbmQoKG1pKSA9PiBtaS5rZXkgPT09IHZhbHVlLnNvcnRCeSk7XG4gICAgfVxuICAgIGdldCBjdXJyZW50U29ydGluZygpOiBJUGVwTGlzdFNvcnRpbmdPcHRpb24ge1xuICAgICAgICByZXR1cm4gdGhpcy5fY3VycmVudFNvcnRpbmc7XG4gICAgfVxuXG4gICAgQElucHV0KCkgc2l6ZVR5cGU6IFBlcFNpemVUeXBlID0gJ21kJztcbiAgICBAT3V0cHV0KClcbiAgICBjaGFuZ2U6IEV2ZW50RW1pdHRlcjxJUGVwTGlzdFNvcnRpbmdPcHRpb25DaGFuZ2VFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyPElQZXBMaXN0U29ydGluZ09wdGlvbkNoYW5nZUV2ZW50PigpO1xuXG4gICAgbWVudUl0ZW1zOiBBcnJheTxQZXBNZW51SXRlbT4gPSBudWxsO1xuICAgIGN1cnJlbnRJdGVtOiBQZXBNZW51SXRlbSA9IG51bGw7XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5jdXJyZW50U29ydGluZyA9PT0gbnVsbCAmJlxuICAgICAgICAgICAgdGhpcy5vcHRpb25zICYmXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMubGVuZ3RoID4gMFxuICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFNvcnRpbmcgPSB0aGlzLm9wdGlvbnNbMF07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbk1lbnVJdGVtQ2xpY2tlZChtZW51SXRlbUNsaWNrRXZlbnQ6IElQZXBNZW51SXRlbUNsaWNrRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jdXJyZW50U29ydGluZyA9IHRoaXMub3B0aW9ucy5maW5kKFxuICAgICAgICAgICAgKHNvcnRpbmcpID0+IHNvcnRpbmcuc29ydEJ5ID09PSBtZW51SXRlbUNsaWNrRXZlbnQuc291cmNlLmtleVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmNoYW5nZS5lbWl0KHsgc291cmNlOiB0aGlzLmN1cnJlbnRTb3J0aW5nIH0pO1xuICAgIH1cbn1cbiJdfQ==