import { coerceNumberProperty } from '@angular/cdk/coercion';
import { ChangeDetectorRef, Component, EventEmitter, Injectable, Input, Output, } from '@angular/core';
import { PepLayoutService, } from '@pepperi-addons/ngx-lib';
import { DEFAULT_PAGE_SIZE } from './list.model';
export class IPepListPagerChangeEvent {
}
export class PepListPagerComponent {
    constructor(_changeDetectorRef, layoutService) {
        this._changeDetectorRef = _changeDetectorRef;
        this.layoutService = layoutService;
        this.disabled = false;
        this._pageIndex = 0;
        this.length = 0;
        this.pageSize = DEFAULT_PAGE_SIZE;
        this.pagerChange = new EventEmitter();
    }
    set pageIndex(value) {
        this.setPageIndex(value);
    }
    get pageIndex() {
        return this._pageIndex;
    }
    nextPage() {
        if (!this.hasNextPage()) {
            return;
        }
        this.setPageIndex(this.pageIndex + 1);
    }
    previousPage() {
        if (!this.hasPreviousPage()) {
            return;
        }
        this.setPageIndex(this.pageIndex - 1);
    }
    firstPage() {
        if (!this.hasPreviousPage()) {
            return;
        }
        this.setPageIndex(0);
    }
    lastPage() {
        if (!this.hasNextPage()) {
            return;
        }
        this.setPageIndex(this.getNumberOfPages() - 1);
    }
    hasPreviousPage() {
        return this.pageIndex >= 1 && this.pageSize != 0;
    }
    hasNextPage() {
        const maxPageIndex = this.getNumberOfPages() - 1;
        return this.pageIndex < maxPageIndex && this.pageSize != 0;
    }
    getNumberOfPages() {
        if (!this.pageSize) {
            return 0;
        }
        return Math.ceil(this.length / this.pageSize);
    }
    /** Checks whether the buttons for going forwards should be disabled. */
    _nextButtonsDisabled() {
        return this.disabled || !this.hasNextPage();
    }
    /** Checks whether the buttons for going backwards should be disabled. */
    _previousButtonsDisabled() {
        return this.disabled || !this.hasPreviousPage();
    }
    onValueChange(value) {
        const pageNumber = coerceNumberProperty(value);
        this.setPageIndex(pageNumber - 1); // - 1 to convert number into index.
    }
    setPageIndex(newIndex) {
        const previousPageIndex = this.pageIndex;
        if (newIndex >= 0 && newIndex < this.getNumberOfPages()) {
            this._pageIndex = newIndex;
        }
        else {
            this._pageIndex = 0;
        }
        if (this.pageIndex !== previousPageIndex) {
            this._emitChangeEvent(previousPageIndex);
        }
    }
    /** Emits an event notifying that a change of the paginator's properties has been triggered. */
    _emitChangeEvent(previousPageIndex) {
        this.pagerChange.emit({
            previousPageIndex,
            pageIndex: this.pageIndex,
            pageSize: this.pageSize,
            length: this.length,
        });
    }
}
PepListPagerComponent.decorators = [
    { type: Component, args: [{
                selector: 'pep-list-pager',
                template: "<div class=\"pager-container body-sm\">\n    <span class=\"pep-spacing-element\">{{ 'LIST.PAGER_PAGE' | translate }}</span>\n    <pep-textbox pepAutoWidth class=\"page-index pep-spacing-element\" [key]=\"'pageIndex'\" [type]=\"'int'\"\n        [disabled]=\"disabled\" [xAlignment]=\"'center'\" [renderTitle]=\"false\" [renderError]=\"false\" [renderSymbol]=\"false\"\n        [value]=\"pageIndex + 1\" [formattedValue]=\"pageIndex + 1\" [minValue]=\"1\" [maxValue]=\"this.getNumberOfPages()\"\n        [maxFieldCharacters]=\"6\" [mandatory]=\"true\" (valueChange)=\"onValueChange($event)\">\n    </pep-textbox>\n    <span class=\"pep-spacing-element\">{{ 'LIST.PAGER_OUT_OF' | translate }}</span>\n    <span class=\"pep-spacing-element\">{{ getNumberOfPages() }}</span>\n    <button mat-button [disabled]=\"disabled || _previousButtonsDisabled()\"\n        [ngClass]=\"{ disabled: disabled || _previousButtonsDisabled() }\"\n        class=\"pep-button icon-button pep-spacing-element sm weak\" pepRtlDirection pepMenuBlur (click)=\"previousPage()\"\n        [title]=\"('LIST.PAGER_PREVIOUS' | translate)\">\n        <mat-icon>\n            <pep-icon [name]=\"layoutService.isRtl() ? 'arrow_right' : 'arrow_left'\"></pep-icon>\n        </mat-icon>\n    </button>\n    <button mat-button [disabled]=\"disabled || _nextButtonsDisabled()\"\n        [ngClass]=\"{ disabled: disabled || _nextButtonsDisabled() }\"\n        class=\"pep-button icon-button pep-spacing-element sm weak\" pepRtlDirection pepMenuBlur (click)=\"nextPage()\"\n        [title]=\"('LIST.PAGER_NEXT' | translate)\">\n        <mat-icon>\n            <pep-icon [name]=\"layoutService.isRtl() ? 'arrow_left' : 'arrow_right'\"></pep-icon>\n        </mat-icon>\n    </button>\n</div>",
                styles: [".pager-container{display:flex;justify-content:center;align-items:center;height:calc(2rem + calc(.5rem * 2));height:calc(2rem + calc(var(--pep-spacing-sm, .5rem) * 2));padding:.5rem;padding:var(--pep-spacing-sm,.5rem)}.pager-container .page-index{min-height:unset;margin-bottom:0}.pager-container .page-index ::ng-deep .mat-form-field-flex{padding:0 .5rem;min-height:2rem}.pager-container .page-index ::ng-deep .mat-form-field-flex .mat-input-element{min-width:1.25rem}"]
            },] },
    { type: Injectable }
];
PepListPagerComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: PepLayoutService }
];
PepListPagerComponent.propDecorators = {
    disabled: [{ type: Input }],
    pageIndex: [{ type: Input }],
    length: [{ type: Input }],
    pageSize: [{ type: Input }],
    pagerChange: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,