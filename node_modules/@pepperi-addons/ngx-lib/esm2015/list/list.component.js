import { Component, Input, Output, EventEmitter, Renderer2, ViewChild, ElementRef, ChangeDetectorRef, NgZone, } from '@angular/core';
import { PepLayoutService, PepScreenSizeType, PepSessionService, FIELD_TYPE, } from '@pepperi-addons/ngx-lib';
import { VirtualScrollerComponent } from './virtual-scroller';
import { PepSelectionData, DEFAULT_PAGE_SIZE, } from './list.model';
import * as tween from '@tweenjs/tween.js';
export class PepListComponent {
    constructor(hostElement, layoutService, sessionService, cd, renderer, zone) {
        this.hostElement = hostElement;
        this.layoutService = layoutService;
        this.sessionService = sessionService;
        this.cd = cd;
        this.renderer = renderer;
        this.zone = zone;
        this.noDataFoundMsg = null;
        this.selectionTypeForActions = 'multi';
        this.showCardSelection = false;
        this.hideAllSelectionInMulti = false;
        this.cardSize = 'md';
        this._viewType = '';
        this.firstFieldAsLink = false;
        this.supportSorting = true;
        this.supportResizing = true;
        this._parentScroll = null;
        this.disabled = false;
        this._lockEvents = false;
        this.lockItemInnerEvents = false;
        this.printMode = false;
        this.isReport = false;
        this.totalsRow = [];
        this.pagerType = 'scroll';
        this.pageSize = DEFAULT_PAGE_SIZE;
        this.pageIndex = 0;
        // @Input() startIndex = 0;
        this.scrollAnimationTime = 500;
        this.scrollDebounceTime = 0;
        this.scrollThrottlingTime = 0;
        this._useAsWebComponent = false;
        this.itemClick = new EventEmitter();
        this.fieldClick = new EventEmitter();
        this.valueChange = new EventEmitter();
        this.sortingChange = new EventEmitter();
        this.selectedItemsChange = new EventEmitter();
        this.selectedItemChange = new EventEmitter();
        this.selectAllClick = new EventEmitter();
        // @Output()
        // singleActionClick: EventEmitter<any> = new EventEmitter<any>();
        this.listLoad = new EventEmitter();
        this.loadItems = new EventEmitter();
        this.loadPage = new EventEmitter();
        this.startIndexChange = new EventEmitter();
        this._layout = null;
        this.totalRows = -1;
        this.isTable = false;
        this.hasColumnWidthOfTypePercentage = true;
        this._items = null;
        this.itemsCounter = 0;
        this.SEPARATOR = ',';
        this.isAllSelected = false;
        this.selectedItems = new Map();
        this.unSelectedItems = new Map();
        this.selectedItemId = '';
        this.hoveredItemId = '';
        this.containerWidth = 0;
        this.tableScrollWidth = 0;
        this._loadingItemsFromApi = false;
        this.deviceHasMouse = false;
        // For resize
        this.pressedColumn = '';
        this.startX = 0;
        this.startWidth = 0;
        this.tableStartWidth = 0;
        // For sorting
        this.isAsc = true;
        this.sortBy = '';
        this.isUserSelected = false;
        this.checkForChanges = null;
        // this.nativeWindow = window;
        this.layoutService.onResize$.subscribe((size) => {
            this.screenSize = size;
        });
        this.layoutService.onMouseOver$.subscribe((deviceHasMouse) => {
            this.deviceHasMouse = deviceHasMouse;
        });
    }
    set viewType(value) {
        this._viewType = value;
        this.isTable = value === 'table';
    }
    get viewType() {
        return this._viewType;
    }
    set parentScroll(value) {
        this._parentScroll = value;
    }
    get parentScroll() {
        return this._parentScroll;
    }
    set lockEvents(value) {
        this._lockEvents = value;
        if (this._lockEvents) {
            this.renderer.addClass(this.hostElement.nativeElement, 'lock-events');
        }
        else {
            this.renderer.removeClass(this.hostElement.nativeElement, 'lock-events');
        }
    }
    get lockEvents() {
        return this._lockEvents;
    }
    set useAsWebComponent(value) {
        this._useAsWebComponent = value;
        if (value) {
            this.exportFunctionsOnHostElement();
        }
    }
    get useAsWebComponent() {
        return this._useAsWebComponent;
    }
    get layout() {
        return this._layout;
    }
    get items() {
        return this._items;
    }
    get loadingItemsFromApi() {
        return this._loadingItemsFromApi;
    }
    ngOnInit() {
        this.containerWidth = 0;
        this.deviceHasMouse = this.layoutService.getDeviceHasMouse();
    }
    ngOnChanges(changes) {
        if (this.containerWidth <= 0) {
            this.setContainerWidth();
        }
    }
    ngOnDestroy() {
        // if (this.valueChange) {
        //     this.valueChange.unsubscribe();
        // }
        // if (this.loadItems) {
        //     this.loadItems.unsubscribe();
        // }
        // if (this.loadPage) {
        //     this.loadPage.unsubscribe();
        // }
        // if (this.sortingChange) {
        //     this.sortingChange.unsubscribe();
        // }
        // if (this.fieldClick) {
        //     this.fieldClick.unsubscribe();
        // }
        // if (this.itemClick) {
        //     this.itemClick.unsubscribe();
        // }
        // if (this.listLoad) {
        //     this.listLoad.unsubscribe();
        // }
        this.saveSortingToSession();
    }
    getScrollingElement() {
        var _a;
        return this.parentScroll ? this.parentScroll : (_a = this.virtualScroller) === null || _a === void 0 ? void 0 : _a.contentElementRef.nativeElement.parentElement;
    }
    scrollToTop(animate = true) {
        const scrollingElement = this.getScrollingElement();
        if (scrollingElement) {
            const scrollTop = 0;
            // totally disable animate
            if (!animate || this.scrollAnimationTime === 0) {
                if (scrollingElement instanceof Window) {
                    window.scrollTo(0, scrollTop);
                }
                else {
                    scrollingElement.scrollTop = scrollTop;
                }
            }
            else {
                let animationRequest;
                const isWindow = scrollingElement instanceof Window;
                const currentScrollTop = scrollingElement instanceof Window
                    ? window.pageYOffset
                    : scrollingElement.scrollTop;
                if (this.currentTween !== undefined) {
                    this.currentTween.stop();
                }
                this.currentTween = new tween.Tween({ scrollTop: currentScrollTop })
                    .to({ scrollTop }, this.scrollAnimationTime)
                    .easing(tween.Easing.Quadratic.Out)
                    .onUpdate((data) => {
                    if (isNaN(data.scrollTop)) {
                        return;
                    }
                    if (isWindow) {
                        window.scrollTo(0, data.scrollTop);
                    }
                    else {
                        this.renderer.setProperty(scrollingElement, 'scrollTop', data.scrollTop);
                    }
                })
                    .onStop(() => {
                    cancelAnimationFrame(animationRequest);
                })
                    .start();
                const animate = (time) => {
                    this.currentTween.update(time);
                    if (this.currentTween._object.scrollTop !== scrollTop) {
                        this.zone.runOutsideAngular(() => {
                            animationRequest = requestAnimationFrame(animate);
                        });
                    }
                };
                animate();
            }
        }
    }
    setContainerWidth() {
        const selectionCheckBoxWidth = this.selectionTypeForActions === 'multi' ? 44 : 0;
        const rowHeight = 40; // the table row height (2.5rem * 16font-size).
        const style = window.getComputedStyle(this.hostElement.nativeElement.parentElement);
        // The container-fluid class padding left + right + border
        const containerFluidSpacing = parseInt(style.paddingLeft, 10) + parseInt(style.paddingRight, 10);
        const parentContainer = this.hostElement.nativeElement.parentElement.parentElement > 0
            ? this.hostElement.nativeElement.parentElement.parentElement
            : this.hostElement.nativeElement.parentElement;
        // Calculate if vertical scroll should appear, if so set the scroll width. (this.totalRows + 1) + 1 is for the header row.
        this.tableScrollWidth = parentContainer.clientHeight < rowHeight * (this.totalRows + 1)
            ? this.layoutService.getScrollbarWidth()
            : 0;
        // The selectionCheckBoxWidth width + containerFluidSpacing + this.tableScrollWidth.
        const rowHeaderWidthToSub = containerFluidSpacing + selectionCheckBoxWidth + this.tableScrollWidth;
        this.containerWidth = parentContainer.offsetWidth - rowHeaderWidthToSub;
    }
    saveSortingToSession() {
        this.sessionService.setObject(PepListComponent.SORT_BY_STATE_KEY, this.sortBy);
        this.sessionService.setObject(PepListComponent.ASCENDING_STATE_KEY, this.isAsc);
    }
    getTopItems() {
        return this.isTable
            ? PepListComponent.TOP_ITEMS_TABLE
            : PepListComponent.TOP_ITEMS_THUMBNAILS;
    }
    // private disableScroll(disable: boolean) {
    //     if (disable) {
    //         this.renderer.addClass(this.getParentContainer(), 'lock-events');
    //     } else {
    //         this.renderer.removeClass(this.getParentContainer(), 'lock-events');
    //     }
    // }
    toggleLoadingItemsFropApi(loadingItemsFromApi) {
        this._loadingItemsFromApi = loadingItemsFromApi;
        // this.disableScroll(loadingItemsFromApi);
    }
    updateCurrentPageItems(startIndex, endIndex) {
        this.currentPageItems = this.items.slice(startIndex, endIndex);
    }
    setSelectionItems(itemId, uniqItemId, isChecked) {
        // Set selected item checkbox
        if (this.isAllSelected) {
            if (isChecked) {
                this.unSelectedItems.delete(itemId);
                this.selectedItems.set(itemId, uniqItemId);
            }
            else {
                this.selectedItems.delete(itemId);
                this.unSelectedItems.set(itemId, uniqItemId);
            }
        }
        else {
            if (isChecked) {
                this.unSelectedItems.delete(itemId);
                this.selectedItems.set(itemId, uniqItemId);
            }
            else {
                this.selectedItems.delete(itemId);
                this.unSelectedItems.set(itemId, uniqItemId);
            }
        }
    }
    getUniqItemId(itemId, itemType = '') {
        return itemId + this.SEPARATOR + itemType;
    }
    setLayout() {
        if (this.totalRows === 0 ||
            !this._layout ||
            !this._layout.ControlFields ||
            this._layout.ControlFields.length === 0) {
            return;
        }
        this._layout.ControlFields.forEach((cf) => {
            if (cf.ColumnWidth === 0) {
                cf.ColumnWidth = 10;
            }
            if (this.isTable &&
                (cf.FieldType === FIELD_TYPE.Image ||
                    // cf.FieldType === FIELD_TYPE.Indicators || ???
                    cf.FieldType === FIELD_TYPE.Signature ||
                    cf.FieldType === FIELD_TYPE.NumberIntegerQuantitySelector ||
                    cf.FieldType === FIELD_TYPE.NumberRealQuantitySelector ||
                    cf.FieldType === FIELD_TYPE.NumberIntegerForMatrix ||
                    cf.FieldType === FIELD_TYPE.NumberRealForMatrix ||
                    cf.FieldType === FIELD_TYPE.Package ||
                    cf.ApiName === 'UnitsQuantity' ||
                    cf.ApiName === 'QuantitySelector')) {
                cf.Layout.XAlignment = 3;
            }
        });
        if (!this.cd['destroyed']) {
            this.cd.detectChanges();
        }
        // Set the columns width.
        if (this.containerWidth <= 0) {
            this.setContainerWidth();
        }
        this.calcColumnsWidth();
        this.checkForChanges = new Date().getTime();
    }
    calcColumnsWidth() {
        const fixedMultiple = 3.78; // for converting em to pixel.
        const length = this._layout.ControlFields.length;
        const selectionCheckBoxWidth = this.selectionTypeForActions === 'multi' ? 44 : 0;
        // Is table AND there is at least one column of width type of percentage.
        if (this.isTable) {
            if (this._layout && this._layout.ControlFields) {
                this.hasColumnWidthOfTypePercentage =
                    this._layout.ControlFields.filter((cf) => cf.ColumnWidthType === 1).length === 0;
            }
        }
        // If the columns size is fixed and the total is small then the container change it to percentage.
        if (!this.hasColumnWidthOfTypePercentage) {
            const totalFixedColsWidth = this._layout.ControlFields.map((cf) => cf.ColumnWidth * fixedMultiple).reduce((sum, current) => sum + current);
            if (window.innerWidth > totalFixedColsWidth) {
                this.hasColumnWidthOfTypePercentage = true;
            }
        }
        let totalCalcColsWidth = 0;
        // Calc by percentage
        if (this.hasColumnWidthOfTypePercentage) {
            const totalColsWidth = this._layout.ControlFields.map((cf) => cf.ColumnWidth).reduce((sum, current) => sum + current);
            for (let index = 0; index < length; index++) {
                const uiControlField = this._layout.ControlFields[index];
                const calcColumnWidthPercentage = (100 / totalColsWidth) * uiControlField.ColumnWidth;
                uiControlField.calcColumnWidth = Math.floor((this.containerWidth * calcColumnWidthPercentage) / 100);
                if (index === length - 1) {
                    uiControlField.calcTitleColumnWidthString = uiControlField.calcColumnWidthString = 'calc(100% - ' + totalCalcColsWidth + 'px)'; // For 100%
                }
                else {
                    uiControlField.calcTitleColumnWidthString = uiControlField.calcColumnWidthString = uiControlField.calcColumnWidth + 'px';
                    totalCalcColsWidth += uiControlField.calcColumnWidth;
                }
            }
            this.renderer.setStyle(this.hostElement.nativeElement, 'width', 'inherit');
        }
        else {
            for (let index = 0; index < length; index++) {
                const uiControlField = this._layout
                    .ControlFields[index];
                const currentFixedWidth = Math.floor(uiControlField.ColumnWidth * fixedMultiple);
                if (index === length - 1) {
                    uiControlField.calcTitleColumnWidthString = currentFixedWidth + 'px';
                    uiControlField.calcColumnWidthString = currentFixedWidth + 'px';
                }
                else {
                    uiControlField.calcTitleColumnWidthString = uiControlField.calcColumnWidthString = currentFixedWidth + 'px';
                }
                totalCalcColsWidth += currentFixedWidth;
            }
            this.renderer.setStyle(this.hostElement.nativeElement, 'width', totalCalcColsWidth + selectionCheckBoxWidth + 'px');
        }
    }
    initResizeData() {
        this.startX = 0;
        this.startWidth = 0;
        this.tableStartWidth = 0;
        this.pressedColumn = '';
    }
    getParent(el, parentSelector) {
        // If no parentSelector defined will bubble up all the way to *document*
        if (parentSelector === undefined) {
            parentSelector = document;
        }
        const parent = [];
        let p = el.parentNode;
        while (p &&
            p.className !== '' &&
            p.className.indexOf(parentSelector) === -1 &&
            parentSelector !== document) {
            const o = p;
            p = o.parentNode;
        }
        if (p.className.indexOf(parentSelector) > -1) {
            parent.push(p); // Push that parentSelector you wanted to stop at
        }
        return parent;
    }
    cleanItems() {
        this.itemsCounter = 0;
        this._items =
            this.totalRows > 0 ? Array(this.totalRows) : [];
        this.currentPageItems = [];
        this.calculatedObjectHeight = '';
    }
    initVariablesFromSession(items) {
        const selectedItemsObject = this.sessionService.getObject(PepListComponent.SELECTED_ITEMS_STATE_KEY);
        const selectedItemsFromMap = selectedItemsObject && selectedItemsObject.length > 0
            ? new Map(selectedItemsObject)
            : null;
        if (selectedItemsFromMap != null &&
            typeof selectedItemsFromMap.size !== 'undefined' &&
            selectedItemsFromMap.size > 0) {
            this.selectedItems = selectedItemsFromMap;
            this.sessionService.removeObject(PepListComponent.SELECTED_ITEMS_STATE_KEY);
        }
        else {
            this.selectedItems.clear();
        }
        const unSelectedItemsObject = this.sessionService.getObject(PepListComponent.UN_SELECTED_ITEMS_STATE_KEY);
        const unSelectedItemsMap = unSelectedItemsObject && unSelectedItemsObject.length > 0
            ? new Map(unSelectedItemsObject)
            : null;
        if (unSelectedItemsMap != null &&
            typeof unSelectedItemsMap.size !== 'undefined' &&
            unSelectedItemsMap.size > 0) {
            this.unSelectedItems = unSelectedItemsMap;
            this.sessionService.removeObject(PepListComponent.UN_SELECTED_ITEMS_STATE_KEY);
        }
        else {
            this.unSelectedItems.clear();
        }
        const isAllSelected = this.sessionService.getObject(PepListComponent.ALL_SELECTED_STATE_KEY);
        if (isAllSelected != null) {
            this.isAllSelected = isAllSelected && this.getIsAllSelected(items);
            this.sessionService.removeObject(PepListComponent.ALL_SELECTED_STATE_KEY);
        }
        else {
            this.isAllSelected = false;
        }
        const sortBy = this.sessionService.getObject(PepListComponent.SORT_BY_STATE_KEY);
        if (sortBy && sortBy !== '') {
            this.sortBy = sortBy;
            this.sessionService.removeObject(PepListComponent.SORT_BY_STATE_KEY);
        }
        else {
            this.sortBy = '';
        }
        const isAsc = this.sessionService.getObject(PepListComponent.ASCENDING_STATE_KEY);
        if (isAsc != null) {
            this.isAsc = isAsc;
            this.sessionService.removeObject(PepListComponent.ASCENDING_STATE_KEY);
        }
        else {
            this.isAsc = true;
        }
    }
    getIsAllSelected(items) {
        var _a;
        let result = true;
        if (((_a = this.selectedItems) === null || _a === void 0 ? void 0 : _a.size) > 0 && (items === null || items === void 0 ? void 0 : items.length) > 0) {
            for (const item of items) {
                if (!(item && this.selectedItems.has(item === null || item === void 0 ? void 0 : item.UID.toString()))) {
                    result = false;
                    break;
                }
            }
        }
        else {
            result = false;
        }
        return result;
    }
    getNumberOfStartItems() {
        let numberOfStartItems = 20;
        if (this.screenSize === PepScreenSizeType.XL ||
            this.screenSize === PepScreenSizeType.LG) {
            numberOfStartItems = this.isTable ? 50 : 40;
        }
        else if (this.screenSize === PepScreenSizeType.MD) {
            numberOfStartItems = this.isTable ? 30 : 20;
        }
        else if (this.screenSize === PepScreenSizeType.SM) {
            numberOfStartItems = this.isTable ? 20 : 10;
        }
        else if (this.screenSize === PepScreenSizeType.XS) {
            numberOfStartItems = this.isTable ? 15 : 5;
        }
        return numberOfStartItems;
    }
    setItemClicked(itemId, isSelectableForActions, itemType, isChecked) {
        const uniqItemId = this.getUniqItemId(itemId, itemType);
        // select the selected item.
        if (isChecked) {
            // Set seleted item
            this.selectedItemId = uniqItemId;
        }
        else {
            if (this.selectedItemId === uniqItemId) {
                this.selectedItemId = '';
            }
        }
        if (this.selectionTypeForActions === 'single') {
            this.selectedItemsChange.emit(this.selectedItemId.length === 0 ? 0 : 1);
        }
        else if (this.selectionTypeForActions === 'multi') {
            if (isSelectableForActions) {
                this.setSelectionItems(itemId, uniqItemId, isChecked);
                const currentList = this.isAllSelected
                    ? this.unSelectedItems
                    : this.selectedItems;
                const currentListCount = this.isAllSelected
                    ? this.totalRows - currentList.size
                    : currentList.size;
                this.selectedItemsChange.emit(currentListCount);
            }
        }
        // Raise selected item change event
        if (this.selectionTypeForActions !== 'none') {
            this.selectedItemChange.emit({
                id: itemId,
                selected: isChecked,
            });
        }
    }
    exportFunctionsOnHostElement() {
        // This is for web component usage for use those functions.
        this.hostElement.nativeElement.clear = this.clear.bind(this);
        this.hostElement.nativeElement.initListData = this.initListData.bind(this);
        this.hostElement.nativeElement.updateItems = this.updateItems.bind(this);
        this.hostElement.nativeElement.updatePage = this.updatePage.bind(this);
        this.hostElement.nativeElement.updateItem = this.updateItem.bind(this);
    }
    // getIsDisabled(item: ObjectsDataRow): boolean {
    //     return (
    //         this.lockItemInnerEvents || (item && !item.IsSelectableForActions)
    //     );
    // }
    getIsAllSelectedForActions() {
        var _a;
        let res = false;
        if (this.isAllSelected) {
            if (this.unSelectedItems.size === 0) {
                res = true;
            }
        }
        else {
            if ((_a = this.virtualScroller) === null || _a === void 0 ? void 0 : _a.viewPortItems) {
                if (this.selectedItems.size === this.totalRows) {
                    res = this.getIsAllSelected(this.virtualScroller.viewPortItems);
                }
                else if (this.selectedItems.size < this.totalRows) {
                    for (const item of this.virtualScroller.viewPortItems) {
                        res =
                            item && this.selectedItems.has(item === null || item === void 0 ? void 0 : item.UID.toString());
                        if (!res) {
                            break;
                        }
                    }
                }
            }
        }
        return res;
    }
    setIsAllSelected(isChecked) {
        if (this.selectionTypeForActions === 'multi') {
            this.selectAllCB.checked = isChecked;
            this.isAllSelected = isChecked;
        }
    }
    selectAllItemsForActions(e) {
        // For material checkbox || radio.
        const isChecked = e.source.checked;
        // Indeterminate mode
        let isIndeterminate = false;
        const currentList = this.isAllSelected
            ? this.unSelectedItems
            : this.selectedItems;
        if (currentList.size > 0) {
            isIndeterminate = true;
            this.isAllSelected = false;
            this.selectedItemsChange.emit(0);
            e.source.checked = false;
        }
        this.selectedItems.clear();
        this.unSelectedItems.clear();
        if (!isIndeterminate) {
            this.isAllSelected = isChecked;
            this.selectAllClick.emit(isChecked);
            if (this.selectionTypeForActions === 'multi') {
                if (!isChecked) {
                    this.selectedItemsChange.emit(0);
                    this.selectedItemId = '';
                }
                else {
                    const filteredItems = this.items.filter((item) => item && item.IsSelectableForActions);
                    this.selectedItemsChange.emit(filteredItems.length);
                }
            }
        }
        else {
            // Remove all
            if (this.selectionTypeForActions === 'multi') {
                this.selectAllClick.emit(false);
            }
        }
    }
    raiseStartIndexChange(startIndex = 0) {
        // this.startIndex = startIndex;
        this.startIndexChange.emit({ startIndex });
    }
    getIsItemSelected(item) {
        let isSelected = false;
        if (item) {
            if (this.selectionTypeForActions === 'single') {
                isSelected = this.selectedItemId === this.getUniqItemId(item.UID, item.Type.toString());
            }
            else if (this.selectionTypeForActions === 'multi') {
                if (item.IsSelectableForActions) {
                    isSelected = (this.isAllSelected && !this.unSelectedItems.has(item.UID)) || this.selectedItems.has(item.UID);
                }
            }
        }
        return isSelected;
    }
    selectItemForActions(e, itemId, isSelectableForActions, itemType = '') {
        // For material checkbox || radio.
        const isChecked = e.source.checked;
        this.setItemClicked(itemId, isSelectableForActions, itemType, isChecked);
    }
    itemClicked(e, item) {
        // Set seleted item
        const itemId = item === null || item === void 0 ? void 0 : item.UID.toString();
        const itemType = item === null || item === void 0 ? void 0 : item.Type.toString();
        let isChecked = false;
        if (item && item.IsSelectableForActions) {
            this.selectedItemId = this.getUniqItemId(itemId, itemType);
            isChecked = true;
        }
        if (this.isTable) {
            if (this.selectionTypeForActions === 'single') {
                this.setItemClicked(itemId, item.IsSelectableForActions, itemType, isChecked);
            }
            else if (this.selectionTypeForActions === 'none') {
                // Just mark the row as highlighted
                this.setItemClicked(itemId, item.IsSelectableForActions, itemType, true);
            }
        }
        else {
            if (this.disabled) {
                return;
            }
        }
        this.itemClick.emit({ source: item, viewType: this.viewType });
    }
    onTableRowMouseEnter(event, itemId, itemType) {
        if (!this.deviceHasMouse) {
            return;
        }
        const uniqItemId = this.getUniqItemId(itemId, itemType);
        this.hoveredItemId = uniqItemId;
    }
    onTableRowMouseLeave(event, itemId, itemType) {
        this.hoveredItemId = '';
    }
    onCardMouseEnter(event, itemId, itemType) {
        if (!this.deviceHasMouse) {
            return;
        }
        const uniqItemId = this.getUniqItemId(itemId, itemType);
        this.hoveredItemId = uniqItemId;
    }
    onCardMouseLeave(event, itemId, itemType) {
        this.hoveredItemId = '';
    }
    // trackByFunc(index: number, item: ObjectsDataRow): any {
    //     return item && item?.UID ? item?.UID : index;
    //     // let res: string = "";
    //     // if (item && item?.UID) {
    //     //    res = item?.UID + "_" + this.listType + "_" + (this.isTable ? "Table" : "Thumbnails");
    //     // }
    //     // else {
    //     //    res = index + "_" + this.listType + "_" + (this.isTable ? "Table" : "Thumbnails");
    //     // }
    //     // return res;
    // }
    clear() {
        this.cleanItems();
        this._layout = null;
    }
    setSelectedIds(selectedIds, items = null) {
        var _a;
        this.selectedItems.clear();
        this.isAllSelected = false;
        if (selectedIds) {
            // for (let i = 0; i < selected.length; i++) {
            for (const selectedId of selectedIds) {
                const tmp = selectedId.split(this.SEPARATOR);
                if (tmp && tmp.length > 0) {
                    const itemId = tmp[0];
                    const itemType = tmp.length > 1 ? tmp[1] : '';
                    this.selectedItems.set(itemId, this.getUniqItemId(itemId, itemType));
                }
            }
            this.isAllSelected = this.getIsAllSelected(items ? items : (_a = this.virtualScroller) === null || _a === void 0 ? void 0 : _a.viewPortItems);
            this.setSelectionDataInSession();
        }
        this.refresh();
    }
    setSelectionDataInSession() {
        if (this.selectedItems.size > 0) {
            this.sessionService.setObject(PepListComponent.SELECTED_ITEMS_STATE_KEY, JSON.stringify([...this.selectedItems]));
        }
        if (this.unSelectedItems.size > 0) {
            this.sessionService.setObject(PepListComponent.UN_SELECTED_ITEMS_STATE_KEY, JSON.stringify([...this.unSelectedItems]));
        }
        this.sessionService.setObject(PepListComponent.ALL_SELECTED_STATE_KEY, this.isAllSelected);
    }
    initListData(layout, totalRows, items) {
        this.initVariablesFromSession(items);
        const currentList = this.isAllSelected
            ? this.unSelectedItems
            : this.selectedItems;
        const currentListCount = this.isAllSelected
            ? this.totalRows - currentList.size
            : currentList.size;
        this.selectedItemsChange.emit(currentListCount);
        this._layout = layout;
        this.selectedItemId = '';
        this.totalRows = totalRows;
        this.scrollToTop(false);
        this.cleanItems();
        if (items) {
            if (this.pagerType === 'pages') {
                // If page index out of bounds - init to 0.
                const numberOfPages = Math.ceil(totalRows / this.pageSize);
                if (this.pageIndex >= numberOfPages) {
                    this.pageIndex = 0;
                }
                this.updatePage(items, {
                    pageIndex: this.pageIndex,
                    pageSize: this.pageSize,
                });
            }
            else {
                const numberOfStartItems = this.getNumberOfStartItems();
                const event = {
                    fromIndex: 0,
                    toIndex: numberOfStartItems,
                };
                this.updateItems(items, event);
                this.refresh();
            }
        }
        this.setLayout();
        this.onListLoad();
    }
    updateItems(items, event = null) {
        var _a;
        if (!event) {
            return; // Event isn't supplied.
        }
        // Clean array
        if (this.itemsCounter + items.length > PepListComponent.TOP_ITEMS_ARRAY) {
            this.cleanItems();
        }
        const startIndex = (_a = event.fromIndex) !== null && _a !== void 0 ? _a : 0;
        for (let i = 0; i < items.length; i++) {
            if (!this.items[i + startIndex]) {
                this.items[i + startIndex] = items[i];
                this.itemsCounter += 1;
            }
        }
        this.toggleLoadingItemsFropApi(false);
    }
    updatePage(items, event) {
        if (!event) {
            return; // Event isn't supplied.
        }
        // Clean array
        if (this.itemsCounter + items.length > PepListComponent.TOP_ITEMS_ARRAY) {
            this.cleanItems();
        }
        // const loadInChunks = this.itemsCounter === 0;
        const startIndex = Math.min(event.pageIndex * event.pageSize, this.totalRows);
        const endIndex = Math.min(startIndex + event.pageSize, this.totalRows);
        for (let i = 0; i < items.length; i++) {
            if (!this.items[i + startIndex]) {
                this.items[i + startIndex] = items[i];
                this.itemsCounter += 1;
            }
        }
        this.updateCurrentPageItems(startIndex, endIndex);
        this.toggleLoadingItemsFropApi(false);
    }
    updateItem(data) {
        const index = this.items.findIndex((i) => i && (i === null || i === void 0 ? void 0 : i.UID) === (data === null || data === void 0 ? void 0 : data.UID));
        if (index >= 0 && index < this.items.length) {
            this.updateItemProperties(this.items[index], data);
        }
    }
    scrollToIndex(index, alignToBeginning = true, additionalOffset = 0, animationMilliseconds = undefined, animationCompletedCallback = undefined) {
        var _a;
        (_a = this.virtualScroller) === null || _a === void 0 ? void 0 : _a.scrollToIndex(index, alignToBeginning, additionalOffset, animationMilliseconds, animationCompletedCallback);
    }
    updateItemProperties(itemToUpdate, data) {
        Object.assign(itemToUpdate, data);
    }
    getSelectedItemsData(isForEdit = false) {
        const res = new PepSelectionData();
        if (this.selectionTypeForActions === 'single') {
            const tmp = this.selectedItemId.split(this.SEPARATOR);
            res.selectionType = 1;
            res.rows = [tmp[0]];
            res.rowTypes = [tmp[1]];
        }
        else if (this.selectionTypeForActions === 'multi') {
            const items = [];
            const itemTypes = [];
            let selectionType = 1;
            let currentList = [];
            // For edit - only the selected items.
            if (isForEdit) {
                if (!this.isAllSelected) {
                    currentList = Array.from(this.selectedItems.values());
                }
                else {
                    // Get the id's of the items that not founded in unSelectedItems.
                    this.items.forEach((item) => {
                        if (item &&
                            !this.unSelectedItems.has(item === null || item === void 0 ? void 0 : item.UID.toString())) {
                            currentList.push(this.getUniqItemId(item === null || item === void 0 ? void 0 : item.UID.toString(), item === null || item === void 0 ? void 0 : item.Type.toString()));
                        }
                    });
                }
            }
            else {
                // For delete - can be the unselected with select_all functionality.
                currentList = Array.from(this.isAllSelected
                    ? this.unSelectedItems.values()
                    : this.selectedItems.values());
                selectionType = this.isAllSelected ? 0 : 1;
            }
            currentList.forEach((item) => {
                const tmp = item.split(this.SEPARATOR);
                if (tmp.length === 2) {
                    items.push(tmp[0]);
                    itemTypes.push(tmp[1]);
                }
            });
            res.selectionType = selectionType;
            res.rows = items;
            res.rowTypes = itemTypes;
        }
        return res;
    }
    getIsItemEditable(uid) {
        const item = this.items.filter((x) => (x === null || x === void 0 ? void 0 : x.UID.toString()) === uid);
        if (item.length > 0) {
            return item[0].IsEditable;
        }
        else {
            return false;
        }
    }
    getItemDataByID(uid) {
        return this.items.find((item) => (item === null || item === void 0 ? void 0 : item.UID.toString()) === uid);
    }
    refresh() {
        var _a;
        (_a = this.virtualScroller) === null || _a === void 0 ? void 0 : _a.refresh();
    }
    // ---------------------------------------------------------------
    //              Events handlers.
    // ---------------------------------------------------------------
    onWinResize(e) {
        this.refresh();
        this.containerWidth = 0;
        this.setLayout();
    }
    onListResizeStart(event, columnKey) {
        var _a;
        this.pressedColumn = columnKey;
        this.startX = event.x;
        this.startWidth = event.target.closest('.header-column').offsetWidth;
        this.tableStartWidth = (_a = this.virtualScroller) === null || _a === void 0 ? void 0 : _a.contentElementRef.nativeElement.offsetWidth;
    }
    onListResize(event) {
        if (this.pressedColumn.length > 0) {
            let widthToAdd = this.layoutService.isRtl() ? this.startX - event.x : event.x - this.startX;
            // Set the width of the column and the container of the whole columns.
            if (this.startWidth + widthToAdd >= PepListComponent.MINIMUM_COLUMN_WIDTH || widthToAdd > 0) {
                const length = this._layout.ControlFields.length;
                let totalCalcColsWidth = 0;
                for (let index = 0; index < length; index++) {
                    const uiControlField = this._layout
                        .ControlFields[index];
                    if (index === length - 1) {
                        // Calc the last column only in percentage type.
                        if (this.hasColumnWidthOfTypePercentage) {
                            const scrollWidth = this.layoutService.getScrollbarWidth();
                            widthToAdd += scrollWidth;
                            uiControlField.calcTitleColumnWidthString = uiControlField.calcColumnWidthString = 'calc(100% - ' + (totalCalcColsWidth + scrollWidth) + 'px)'; // For 100%
                        }
                        else {
                            if (uiControlField.ApiName === this.pressedColumn) {
                                uiControlField.calcColumnWidth = this.startWidth + widthToAdd;
                                uiControlField.calcTitleColumnWidthString = uiControlField.calcColumnWidth + 'px';
                                uiControlField.calcColumnWidthString = uiControlField.calcColumnWidth + 'px';
                            }
                        }
                    }
                    else if (uiControlField.ApiName === this.pressedColumn) {
                        uiControlField.calcColumnWidth = this.startWidth + widthToAdd;
                        uiControlField.calcTitleColumnWidthString = uiControlField.calcColumnWidthString = uiControlField.calcColumnWidth + 'px';
                    }
                    totalCalcColsWidth += uiControlField.calcColumnWidth;
                }
                this.renderer.setStyle(this.hostElement.nativeElement, 'width', this.tableStartWidth + widthToAdd + 'px');
            }
            this.checkForChanges = new Date().getTime();
        }
    }
    onListResizeEnd(event) {
        if (this.pressedColumn.length > 0) {
            if (event &&
                this.getParent(event.srcElement, 'resize-box').length > 0) {
                this.initResizeData();
            }
            else {
                // Set timeout 0 for onListSortingChange will have the pressedColumn.
                setTimeout(() => {
                    this.initResizeData();
                }, 0);
            }
            event.stopPropagation();
        }
    }
    onListSortingChange(sortBy, isAsc, event = null) {
        if (this.pressedColumn.length > 0 ||
            (event && this.getParent(event.srcElement, 'resize-box').length > 0)) {
            return;
        }
        if (this.sortBy !== sortBy || this.isAsc !== isAsc) {
            this.sortBy = sortBy;
            this.isAsc = isAsc;
            this.saveSortingToSession();
            this.sortingChange.emit({ sortBy, isAsc });
        }
    }
    onListHeaderMouseEnter(event) {
        // this.headerIsInFocus = true;
    }
    onListHeaderMouseLeave(event) {
        // this.headerIsInFocus = false;
        this.onListResizeEnd(event);
        this.initResizeData();
    }
    onPagerChange(event) {
        this.pageIndex = event.pageIndex;
        // Scroll to top.
        this.scrollToTop();
        const startIndex = event.pageIndex * event.pageSize;
        const endIndex = Math.min(startIndex + event.pageSize, this.totalRows);
        let shouldGetItemsFromApi = false;
        let index = startIndex;
        while (!shouldGetItemsFromApi && index < endIndex) {
            if (!this.items[index]) {
                shouldGetItemsFromApi = true;
            }
            index++;
        }
        // Get bulk from api.
        if (shouldGetItemsFromApi) {
            if (!this.loadingItemsFromApi) {
                this.toggleLoadingItemsFropApi(true);
                this.loadPage.emit({
                    pageIndex: event.pageIndex,
                    pageSize: event.pageSize,
                });
            }
        }
        else {
            setTimeout(() => {
                this.updateCurrentPageItems(startIndex, endIndex);
            }, this.scrollAnimationTime);
        }
    }
    onVirtualScrollerChange(event) {
        this.raiseStartIndexChange(event.startIndex);
        if (this.pagerType === 'scroll') {
            // For other events do nothing.
            if (typeof event.startIndex === 'undefined' || event.startIndex < 0 ||
                typeof event.endIndex === 'undefined' || event.endIndex < 0) {
                return;
            }
            const addAtStart = event.scrollDirection === 'backward';
            let shouldGetItemsFromApi = false;
            let indexOfMissingItem;
            if (addAtStart) {
                indexOfMissingItem = event.endIndex;
                while (!shouldGetItemsFromApi && indexOfMissingItem >= event.startIndex) {
                    if (!this.items[indexOfMissingItem]) {
                        shouldGetItemsFromApi = true;
                    }
                    if (!shouldGetItemsFromApi) {
                        indexOfMissingItem--;
                    }
                }
            }
            else {
                indexOfMissingItem = event.startIndex;
                while (!shouldGetItemsFromApi && indexOfMissingItem <= event.endIndex) {
                    if (!this.items[indexOfMissingItem]) {
                        shouldGetItemsFromApi = true;
                    }
                    if (!shouldGetItemsFromApi) {
                        indexOfMissingItem++;
                    }
                }
            }
            // Get bulk from api.
            if (shouldGetItemsFromApi) {
                if (!this.loadingItemsFromApi) {
                    this.toggleLoadingItemsFropApi(true);
                    const top = this.getTopItems() - 1;
                    const fromIndex = addAtStart ? Math.max(indexOfMissingItem - top, 0) : indexOfMissingItem;
                    const toIndex = addAtStart ? indexOfMissingItem : Math.min(indexOfMissingItem + top, this.totalRows);
                    this.loadItems.emit({
                        fromIndex,
                        toIndex,
                    });
                }
            }
        }
    }
    onListLoad() {
        setTimeout(() => {
            this.listLoad.emit();
        }, 0);
    }
    onChildRectChange(event) {
        setTimeout(() => {
            this.calculatedObjectHeight = (event === null || event === void 0 ? void 0 : event.height) + 'px';
        }, 0);
    }
    onValueChanged(valueChange) {
        if (this.disabled) {
            return;
        }
        this.valueChange.emit(valueChange);
    }
    onCustomizeFieldClick(customizeFieldClickedData) {
        if (this.disabled) {
            return;
        }
        this.fieldClick.emit(customizeFieldClickedData);
    }
}
PepListComponent.TOP_ITEMS_DEFAULT = 100;
PepListComponent.TOP_ITEMS_TABLE = 100;
PepListComponent.TOP_ITEMS_THUMBNAILS = 100;
PepListComponent.TOP_ITEMS_ARRAY = 2500;
PepListComponent.SELECTED_ITEMS_STATE_KEY = 'SelectedItems';
PepListComponent.UN_SELECTED_ITEMS_STATE_KEY = 'UnSelectedItems';
PepListComponent.ALL_SELECTED_STATE_KEY = 'AllSelected';
PepListComponent.SORT_BY_STATE_KEY = 'SortBy';
PepListComponent.ASCENDING_STATE_KEY = 'IsAscending';
PepListComponent.MINIMUM_COLUMN_WIDTH = 48;
PepListComponent.decorators = [
    { type: Component, args: [{
                selector: 'pep-list',
                template: "<ng-container *ngIf=\"totalRows == 0\">\n    <ng-container *ngIf=\"noDataFoundMsg; then noDataMsgInputBlock; else noDataMsgDefaultBlock\"></ng-container>\n    <ng-template #noDataMsgInputBlock>\n        <div class=\"pep-border-bottom\">\n            <p class=\"title-xl no-data\">\n                {{ noDataFoundMsg }}\n            </p>\n        </div>\n    </ng-template>\n    <ng-template #noDataMsgDefaultBlock>\n        <div class=\"pep-border-bottom\">\n            <p class=\"title-xl no-data\">\n                {{ 'LIST.NO_DATA_FOUND' | translate}}\n            </p>\n        </div>\n        <div class=\"no-data-suggestions\">\n            <p class=\"suggestions-title title-lg\">\n                {{ 'LIST.NO_DATA_FOUND_SUGGESTIONS_TITLE' | translate}}\n            </p>\n            <ul class=\"suggestions-list body-lg\" [innerHtml]=\"'LIST.NO_DATA_FOUND_SUGGESTIONS_LIST' | translate\"></ul>\n        </div>\n    </ng-template>\n</ng-container>\n<ng-container *ngIf=\"totalRows > 0\">\n    <ng-container *ngTemplateOutlet=\"tableHeader\"></ng-container>\n\n    <virtual-scroller #scroller [items]=\"pagerType === 'pages' ? currentPageItems : items\"\n        [scrollDebounceTime]=\"scrollDebounceTime\" [scrollThrottlingTime]=\"scrollThrottlingTime\"\n        [bufferAmount]=\"printMode ? totalRows : -1\" [parentScroll]=\"parentScroll\" [disable]=\"loadingItemsFromApi\"\n        class=\"virtual-scroller\" [ngClass]=\"{ 'table-body': isTable, 'cards-body': !isTable }\"\n        (vsChange)=\"onVirtualScrollerChange($event)\" (vsChildRectChange)=\"onChildRectChange($event)\">\n        <ng-container *ngFor=\"let item of scroller.viewPortItems; let index; let isFirst = first;\">\n            <ng-container *ngTemplateOutlet=\"listData; context: {item: item}\"></ng-container>\n        </ng-container>\n    </virtual-scroller>\n\n    <pep-list-pager *ngIf=\"pagerType === 'pages'\" class=\" list-pager\" [disabled]=\"loadingItemsFromApi\"\n        [length]=\"totalRows\" [pageSize]=\"pageSize\" [pageIndex]=\"pageIndex\" (pagerChange)=\"onPagerChange($event)\">\n    </pep-list-pager>\n\n    <ng-container *ngTemplateOutlet=\"tableTotal\"></ng-container>\n</ng-container>\n\n<ng-template #listData let-item=\"item\">\n    <ng-container *ngIf=\"isTable\">\n        <!-- getIsItemSelected(item) -> item | isItemSelected: selectionTypeForActions : selectedItemId : isAllSelected : selectedItems : unSelectedItems -->\n        <div class=\"table-row\" (mouseenter)=\"onTableRowMouseEnter($event, item?.UID, item?.Type)\"\n            (mouseleave)=\"onTableRowMouseLeave($event, item?.UID, item?.Type)\" [ngClass]=\"{\n                    selected: getIsItemSelected(item),\n                    highlighted: item?.UID + SEPARATOR + item?.Type === selectedItemId\n                }\" [ngStyle]=\"{ visibility: !loadingItemsFromApi || item ? 'visible' : 'hidden' }\">\n            <fieldset class=\"table-row-fieldset\" [ngStyle]=\"{ 'background-color': item?.BackgroundColor }\">\n                <mat-checkbox *ngIf=\"selectionTypeForActions == 'multi'\" type=\"checkbox\"\n                    class=\"pull-left flip row-selection\"\n                    [disabled]=\"item | isItemDisabled: lockItemInnerEvents : printMode\" [ngStyle]=\"{\n                            visibility: !deviceHasMouse ||\n                            item?.UID + SEPARATOR + item?.Type === hoveredItemId || isAllSelected || selectedItems.size > 0 ? 'visible' : 'hidden'\n                        }\" [checked]=\"getIsItemSelected(item)\"\n                    (change)=\"selectItemForActions($event, item?.UID, item?.IsSelectableForActions, item?.Type)\">\n                </mat-checkbox>\n                <mat-radio-button *ngIf=\"selectionTypeForActions == 'single'\" name=\"selection\"\n                    class=\"pull-left flip row-selection pep-radio-button\"\n                    [disabled]=\"item | isItemDisabled: lockItemInnerEvents : printMode\"\n                    [checked]=\"getIsItemSelected(item)\"\n                    (change)=\"selectItemForActions($event, item?.UID, item?.IsSelectableForActions, item?.Type)\">\n                </mat-radio-button>\n                <pep-form [layoutType]=\"'table'\" [checkForChanges]=\"checkForChanges\" [layout]=\"layout\"\n                    [firstFieldAsLink]=\"firstFieldAsLink\" [data]=\"item\" [canEditObject]=\"!disabled\"\n                    [lockEvents]=\"lockItemInnerEvents || printMode\" [isReport]=\"isReport\" [isActive]=\"\n                            (item?.UID + SEPARATOR + item?.Type === selectedItemId ||\n                            item?.UID + SEPARATOR + item?.Type === hoveredItemId) && deviceHasMouse\n                        \" (valueChange)=\"onValueChanged($event)\" (fieldClick)=\"onCustomizeFieldClick($event)\"\n                    (click)=\"itemClicked($event, item)\">\n                </pep-form>\n            </fieldset>\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"!isTable\">\n        <div (mouseenter)=\"onCardMouseEnter($event, item?.UID, item?.Type)\"\n            (mouseleave)=\"onCardMouseLeave($event, item?.UID, item?.Type)\" [ngClass]=\"{\n                    selected: getIsItemSelected(item),\n                    highlighted: item?.UID + SEPARATOR + item?.Type === selectedItemId,\n                    'line-view': viewType === 'lines',\n                    'card-view': viewType === 'cards',\n                    'small-card': cardSize === 'sm'\n                }\" class=\"pull-left flip\"\n            [ngStyle]=\"{ height: calculatedObjectHeight, visibility: !loadingItemsFromApi || item ? 'visible' : 'hidden' }\">\n            <mat-checkbox *ngIf=\"showCardSelection\" class=\"pull-left flip card-selection\"\n                [disabled]=\"item | isItemDisabled: lockItemInnerEvents : printMode\" [checked]=\"getIsItemSelected(item)\"\n                (change)=\"selectItemForActions($event, item?.UID, item?.IsSelectableForActions, item?.Type)\">\n            </mat-checkbox>\n            <pep-form [layoutType]=\"'card'\" [firstFieldAsLink]=\"firstFieldAsLink\" [checkForChanges]=\"checkForChanges\"\n                [layout]=\"layout\" [data]=\"item\" [canEditObject]=\"!disabled\"\n                [lockEvents]=\"lockItemInnerEvents || printMode\" [isActive]=\"\n                        (item?.UID + SEPARATOR + item?.Type === selectedItemId ||\n                        item?.UID + SEPARATOR + item?.Type === hoveredItemId) && deviceHasMouse\n                    \" (valueChange)=\"onValueChanged($event)\" (fieldClick)=\"onCustomizeFieldClick($event)\"\n                (click)=\"itemClicked($event, item)\">\n            </pep-form>\n        </div>\n    </ng-container>\n</ng-template>\n\n<ng-template #tableHeader>\n    <div *ngIf=\"isTable\" class=\"table-header\" (mouseup)=\"onListResizeEnd($event)\"\n        (mouseenter)=\"onListHeaderMouseEnter($event)\" (mouseleave)=\"onListHeaderMouseLeave($event)\"\n        (mousemove)=\"onListResize($event)\">\n\n        <div class=\"table-header-padding-top\"></div>\n        <fieldset class=\"table-header-fieldset\">\n            <mat-checkbox *ngIf=\"selectionTypeForActions !== 'none'\" #selectAllCB class=\"pull-left flip row-selection\"\n                type=\"checkbox\" [ngStyle]=\"{\n                        visibility:\n                            selectionTypeForActions == 'single' || \n                            (selectionTypeForActions == 'multi' && hideAllSelectionInMulti) ? 'hidden' : 'visible'\n                    }\"\n                [indeterminate]=\"isAllSelected ? unSelectedItems.size > 0 && unSelectedItems.size < totalRows : (selectedItems.size > 0 && !getIsAllSelectedForActions())\"\n                [disabled]=\"disabled || selectionTypeForActions === 'single'\" [checked]=\"getIsAllSelectedForActions()\"\n                (change)=\"selectAllItemsForActions($event)\"></mat-checkbox>\n            <fieldset>\n                <div *ngFor=\"let field of layout?.ControlFields; let j = index\" class=\"header-column pull-left flip\"\n                    [ngStyle]=\"{ width: field.calcTitleColumnWidthString }\" [ngClass]=\"{\n                            'support-sorting': supportSorting,\n                            'has-sorting': field.ApiName === sortBy,\n                            'is-resizing': field.ApiName === pressedColumn,\n                            'is-first': j === 0 && selectionTypeForActions !== 'multi',\n                            'is-last': j === layout?.ControlFields?.length - 1\n                        }\"\n                    (click)=\"supportSorting ? (onListSortingChange(field.ApiName, sortBy !== null && sortBy != field.ApiName ? true : !isAsc, $event)) : false\">\n\n                    <label id=\"{{ field.ApiName }}\"\n                        class=\"header-label body-sm pull-left flip text-align-{{ field.Layout.XAlignment }}\"\n                        title=\"{{ field.Title }}\">\n                        <span *ngIf=\"field.Mandatory\" class=\"mandatory\">\n                            <pep-icon name=\"system_must\"></pep-icon>\n                        </span>\n                        {{ field.Title != '' ? field.Title : ' '}}\n                    </label>\n\n                    <div *ngIf=\"supportResizing\" class=\"resize-box pull-right flip\"\n                        (mousedown)=\"onListResizeStart($event, field.ApiName)\">\n                        <div class=\"splitter\"></div>\n                    </div>\n\n                    <div *ngIf=\"supportSorting\" class=\"sorting-box pull-left flip\"\n                        [ngClass]=\"{ 'has-sorting': field.ApiName === sortBy }\">\n                        <mat-icon *ngIf=\"field.ApiName !== sortBy\">\n                            <pep-icon name=\"arrow_either\" class=\"asc\"></pep-icon>\n                        </mat-icon>\n                        <ng-container *ngIf=\"field.ApiName === sortBy\">\n                            <mat-icon *ngIf=\"!isAsc\" [ngClass]=\"{ 'sort-by': field.ApiName === sortBy && isAsc }\"\n                                title=\"{{ 'LIST.SORT_ASC' | translate }}\">\n                                <pep-icon name=\"arrow_up\" class=\"asc\"></pep-icon>\n                            </mat-icon>\n                            <mat-icon *ngIf=\"isAsc\" [ngClass]=\"{ 'sort-by': field.ApiName === sortBy && !isAsc }\"\n                                title=\"{{ 'LIST.SORT_DESC' | translate }}\">\n                                <pep-icon name=\"arrow_down\" class=\"desc\"></pep-icon>\n                            </mat-icon>\n                        </ng-container>\n                    </div>\n                </div>\n            </fieldset>\n        </fieldset>\n    </div>\n</ng-template>\n\n<ng-template #tableTotal>\n    <div *ngIf=\"isTable && totalsRow?.length > 0 && totalsRow.length <= layout?.ControlFields.length\"\n        class=\"table-total\">\n        <fieldset class=\"table-header-fieldset\">\n            <div *ngFor=\"let field of layout?.ControlFields; let j = index\" class=\"total-column pull-left flip\"\n                [ngStyle]=\"{ width: field.calcTitleColumnWidthString }\">\n                <label class=\"total-label body-sm text-align-{{ field.Layout.XAlignment }}\">\n                    {{ totalsRow[j] }}\n                </label>\n            </div>\n        </fieldset>\n    </div>\n</ng-template>",
                host: {
                    '(window:resize)': 'onWinResize($event)',
                },
                styles: [":host{height:inherit;display:flex;flex-direction:column}.no-data{margin:2rem 0;margin:var(--pep-spacing-2xl,2rem) 0}.no-data-suggestions .suggestions-title{margin:1rem 0 .5rem;margin:var(--pep-spacing-lg,1rem) 0 var(--pep-spacing-sm,.5rem)}.no-data-suggestions .suggestions-list{margin:0;padding:0;-webkit-padding-start:2rem;padding-inline-start:2rem;-webkit-padding-start:var(--pep-spacing-2xl,2rem);padding-inline-start:var(--pep-spacing-2xl,2rem)}.virtual-scroller{min-height:5rem;height:inherit}"]
            },] }
];
PepListComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: PepLayoutService },
    { type: PepSessionService },
    { type: ChangeDetectorRef },
    { type: Renderer2 },
    { type: NgZone }
];
PepListComponent.propDecorators = {
    noDataFoundMsg: [{ type: Input }],
    selectionTypeForActions: [{ type: Input }],
    showCardSelection: [{ type: Input }],
    hideAllSelectionInMulti: [{ type: Input }],
    cardSize: [{ type: Input }],
    viewType: [{ type: Input }],
    firstFieldAsLink: [{ type: Input }],
    supportSorting: [{ type: Input }],
    supportResizing: [{ type: Input }],
    parentScroll: [{ type: Input }],
    disabled: [{ type: Input }],
    lockEvents: [{ type: Input }],
    lockItemInnerEvents: [{ type: Input }],
    printMode: [{ type: Input }],
    isReport: [{ type: Input }],
    totalsRow: [{ type: Input }],
    pagerType: [{ type: Input }],
    pageSize: [{ type: Input }],
    pageIndex: [{ type: Input }],
    scrollAnimationTime: [{ type: Input }],
    scrollDebounceTime: [{ type: Input }],
    scrollThrottlingTime: [{ type: Input }],
    useAsWebComponent: [{ type: Input }],
    itemClick: [{ type: Output }],
    fieldClick: [{ type: Output }],
    valueChange: [{ type: Output }],
    sortingChange: [{ type: Output }],
    selectedItemsChange: [{ type: Output }],
    selectedItemChange: [{ type: Output }],
    selectAllClick: [{ type: Output }],
    listLoad: [{ type: Output }],
    loadItems: [{ type: Output }],
    loadPage: [{ type: Output }],
    startIndexChange: [{ type: Output }],
    virtualScroller: [{ type: ViewChild, args: [VirtualScrollerComponent,] }],
    selectAllCB: [{ type: ViewChild, args: ['selectAllCB',] }]
};
//# sourceMappingURL=data:application/json;base64,