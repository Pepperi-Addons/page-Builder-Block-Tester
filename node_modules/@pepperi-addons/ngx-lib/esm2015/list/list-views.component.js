import { Component, Injectable, Input, Output, EventEmitter, } from '@angular/core';
export class IPepListView {
}
export class PepListViewsComponent {
    constructor() {
        this._views = null;
        this._currentView = null;
        this.displayType = 'menu';
        this.styleType = 'weak';
        this.sizeType = 'md';
        this.classNames = '';
        this.change = new EventEmitter();
        this.menuItems = null;
        this.currentItem = null;
    }
    set views(value) {
        this._views = value;
        this.menuItems = value.map((opt) => {
            return { key: opt.key, text: opt.title, iconName: opt.iconName };
        });
    }
    get views() {
        return this._views;
    }
    set currentView(value) {
        this._currentView = value;
        if (this.displayType === 'menu') {
            this.currentItem = this.menuItems.find((mi) => mi.key === value.key);
        }
    }
    get currentView() {
        return this._currentView;
    }
    ngOnInit() {
        if (this.displayType === 'buttons') {
            if (this.currentView === null &&
                this.views &&
                this.views.length > 0) {
                this.currentView = this.views[0];
            }
        }
    }
    onMenuItemClicked(menuItemClickEvent) {
        this.currentView = this.views.find((list) => list.key === menuItemClickEvent.source.key);
        this.raiseChangeEvent();
    }
    onViewChanged(view) {
        this.currentView = view;
        this.raiseChangeEvent();
    }
    raiseChangeEvent() {
        this.change.emit({ source: this.currentView });
    }
}
PepListViewsComponent.decorators = [
    { type: Component, args: [{
                selector: 'pep-list-views',
                template: "<ng-container *ngIf=\"displayType === 'menu' then menuTemplate else buttonsTemplate\">\n</ng-container>\n<ng-template #menuTemplate>\n    <pep-menu [type]=\"'select'\" [styleType]=\"styleType\" [sizeType]=\"sizeType\" [classNames]=\"classNames\"\n        [items]=\"menuItems\" [selectedItem]=\"currentItem\"\n        [iconName]=\"currentItem?.iconName ? currentItem?.iconName : 'arrow_down'\"\n        (menuItemClick)=\"onMenuItemClicked($event)\"></pep-menu>\n</ng-template>\n<ng-template #buttonsTemplate>\n    <div class=\"buttons-wrapper pep-spacing-element-negative\">\n        <button *ngFor=\"let view of views\" mat-button [title]=\"view.title\" [disabled]=\"view.key === currentView?.key\"\n            class=\"pep-button icon-button pep-spacing-element {{ sizeType }} {{ styleType }} {{ classNames }}\"\n            pepRtlDirection pepMenuBlur (click)=\"onViewChanged(view)\">\n            <mat-icon>\n                <pep-icon name=\"{{ view?.iconName }}\"></pep-icon>\n            </mat-icon>\n        </button>\n    </div>\n</ng-template>",
                styles: [".buttons-wrapper{display:flex}"]
            },] },
    { type: Injectable }
];
PepListViewsComponent.propDecorators = {
    views: [{ type: Input }],
    currentView: [{ type: Input }],
    displayType: [{ type: Input }],
    styleType: [{ type: Input }],
    sizeType: [{ type: Input }],
    classNames: [{ type: Input }],
    change: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC12aWV3cy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtbGliL2xpc3QvbGlzdC12aWV3cy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILFNBQVMsRUFFVCxVQUFVLEVBQ1YsS0FBSyxFQUNMLE1BQU0sRUFDTixZQUFZLEdBRWYsTUFBTSxlQUFlLENBQUM7QUFTdkIsTUFBTSxPQUFPLFlBQVk7Q0FJeEI7QUFZRCxNQUFNLE9BQU8scUJBQXFCO0lBTmxDO1FBT1ksV0FBTSxHQUF3QixJQUFJLENBQUM7UUFhbkMsaUJBQVksR0FBaUIsSUFBSSxDQUFDO1FBZWpDLGdCQUFXLEdBQTJCLE1BQU0sQ0FBQztRQUM3QyxjQUFTLEdBQWlCLE1BQU0sQ0FBQztRQUNqQyxhQUFRLEdBQWdCLElBQUksQ0FBQztRQUM3QixlQUFVLEdBQUcsRUFBRSxDQUFDO1FBR3pCLFdBQU0sR0FBdUMsSUFBSSxZQUFZLEVBQXdCLENBQUM7UUFFdEYsY0FBUyxHQUF1QixJQUFJLENBQUM7UUFDckMsZ0JBQVcsR0FBZ0IsSUFBSSxDQUFDO0lBNkJwQyxDQUFDO0lBakVHLElBQ0ksS0FBSyxDQUFDLEtBQTBCO1FBQ2hDLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBRXBCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQy9CLE9BQU8sRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3JFLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUNELElBQUksS0FBSztRQUNMLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBR0QsSUFDSSxXQUFXLENBQUMsS0FBbUI7UUFDL0IsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7UUFFMUIsSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLE1BQU0sRUFBRTtZQUM3QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUNsQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxLQUFLLENBQUMsR0FBRyxDQUMvQixDQUFDO1NBQ0w7SUFDTCxDQUFDO0lBQ0QsSUFBSSxXQUFXO1FBQ1gsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzdCLENBQUM7SUFhRCxRQUFRO1FBQ0osSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLFNBQVMsRUFBRTtZQUNoQyxJQUNJLElBQUksQ0FBQyxXQUFXLEtBQUssSUFBSTtnQkFDekIsSUFBSSxDQUFDLEtBQUs7Z0JBQ1YsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUN2QjtnQkFDRSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDcEM7U0FDSjtJQUNMLENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxrQkFBMEM7UUFDeEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDOUIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssa0JBQWtCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FDdkQsQ0FBQztRQUNGLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRCxhQUFhLENBQUMsSUFBa0I7UUFDNUIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDeEIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVPLGdCQUFnQjtRQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUNuRCxDQUFDOzs7WUF4RUosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxnQkFBZ0I7Z0JBQzFCLHVpQ0FBMEM7O2FBRTdDO1lBQ0EsVUFBVTs7O29CQUdOLEtBQUs7MEJBYUwsS0FBSzswQkFjTCxLQUFLO3dCQUNMLEtBQUs7dUJBQ0wsS0FBSzt5QkFDTCxLQUFLO3FCQUVMLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENvbXBvbmVudCxcbiAgICBPbkluaXQsXG4gICAgSW5qZWN0YWJsZSxcbiAgICBJbnB1dCxcbiAgICBPdXRwdXQsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIE9uQ2hhbmdlcyxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQZXBTaXplVHlwZSwgUGVwU3R5bGVUeXBlIH0gZnJvbSAnQHBlcHBlcmktYWRkb25zL25neC1saWInO1xuaW1wb3J0IHtcbiAgICBQZXBNZW51SXRlbSxcbiAgICBJUGVwTWVudUl0ZW1DbGlja0V2ZW50LFxufSBmcm9tICdAcGVwcGVyaS1hZGRvbnMvbmd4LWxpYi9tZW51JztcblxuZXhwb3J0IHR5cGUgUGVwTGlzdFZpZXdEaXNwbGF5VHlwZSA9ICdtZW51JyB8ICdidXR0b25zJztcblxuZXhwb3J0IGNsYXNzIElQZXBMaXN0VmlldyB7XG4gICAga2V5OiBzdHJpbmc7XG4gICAgaWNvbk5hbWU6IHN0cmluZztcbiAgICB0aXRsZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJTGlzdFZpZXdDaGFuZ2VFdmVudCB7XG4gICAgc291cmNlOiBJUGVwTGlzdFZpZXc7XG59XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAncGVwLWxpc3Qtdmlld3MnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9saXN0LXZpZXdzLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9saXN0LXZpZXdzLmNvbXBvbmVudC5zY3NzJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBlcExpc3RWaWV3c0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgcHJpdmF0ZSBfdmlld3M6IEFycmF5PElQZXBMaXN0Vmlldz4gPSBudWxsO1xuICAgIEBJbnB1dCgpXG4gICAgc2V0IHZpZXdzKHZhbHVlOiBBcnJheTxJUGVwTGlzdFZpZXc+KSB7XG4gICAgICAgIHRoaXMuX3ZpZXdzID0gdmFsdWU7XG5cbiAgICAgICAgdGhpcy5tZW51SXRlbXMgPSB2YWx1ZS5tYXAoKG9wdCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHsga2V5OiBvcHQua2V5LCB0ZXh0OiBvcHQudGl0bGUsIGljb25OYW1lOiBvcHQuaWNvbk5hbWUgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldCB2aWV3cygpOiBBcnJheTxJUGVwTGlzdFZpZXc+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZpZXdzO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2N1cnJlbnRWaWV3OiBJUGVwTGlzdFZpZXcgPSBudWxsO1xuICAgIEBJbnB1dCgpXG4gICAgc2V0IGN1cnJlbnRWaWV3KHZhbHVlOiBJUGVwTGlzdFZpZXcpIHtcbiAgICAgICAgdGhpcy5fY3VycmVudFZpZXcgPSB2YWx1ZTtcblxuICAgICAgICBpZiAodGhpcy5kaXNwbGF5VHlwZSA9PT0gJ21lbnUnKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRJdGVtID0gdGhpcy5tZW51SXRlbXMuZmluZChcbiAgICAgICAgICAgICAgICAobWkpID0+IG1pLmtleSA9PT0gdmFsdWUua2V5XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBjdXJyZW50VmlldygpOiBJUGVwTGlzdFZpZXcge1xuICAgICAgICByZXR1cm4gdGhpcy5fY3VycmVudFZpZXc7XG4gICAgfVxuXG4gICAgQElucHV0KCkgZGlzcGxheVR5cGU6IFBlcExpc3RWaWV3RGlzcGxheVR5cGUgPSAnbWVudSc7XG4gICAgQElucHV0KCkgc3R5bGVUeXBlOiBQZXBTdHlsZVR5cGUgPSAnd2Vhayc7XG4gICAgQElucHV0KCkgc2l6ZVR5cGU6IFBlcFNpemVUeXBlID0gJ21kJztcbiAgICBASW5wdXQoKSBjbGFzc05hbWVzID0gJyc7XG5cbiAgICBAT3V0cHV0KClcbiAgICBjaGFuZ2U6IEV2ZW50RW1pdHRlcjxJTGlzdFZpZXdDaGFuZ2VFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyPElMaXN0Vmlld0NoYW5nZUV2ZW50PigpO1xuXG4gICAgbWVudUl0ZW1zOiBBcnJheTxQZXBNZW51SXRlbT4gPSBudWxsO1xuICAgIGN1cnJlbnRJdGVtOiBQZXBNZW51SXRlbSA9IG51bGw7XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuZGlzcGxheVR5cGUgPT09ICdidXR0b25zJykge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFZpZXcgPT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdzICYmXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3cy5sZW5ndGggPiAwXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRWaWV3ID0gdGhpcy52aWV3c1swXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uTWVudUl0ZW1DbGlja2VkKG1lbnVJdGVtQ2xpY2tFdmVudDogSVBlcE1lbnVJdGVtQ2xpY2tFdmVudCk6IHZvaWQge1xuICAgICAgICB0aGlzLmN1cnJlbnRWaWV3ID0gdGhpcy52aWV3cy5maW5kKFxuICAgICAgICAgICAgKGxpc3QpID0+IGxpc3Qua2V5ID09PSBtZW51SXRlbUNsaWNrRXZlbnQuc291cmNlLmtleVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnJhaXNlQ2hhbmdlRXZlbnQoKTtcbiAgICB9XG5cbiAgICBvblZpZXdDaGFuZ2VkKHZpZXc6IElQZXBMaXN0Vmlldyk6IHZvaWQge1xuICAgICAgICB0aGlzLmN1cnJlbnRWaWV3ID0gdmlldztcbiAgICAgICAgdGhpcy5yYWlzZUNoYW5nZUV2ZW50KCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByYWlzZUNoYW5nZUV2ZW50KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNoYW5nZS5lbWl0KHsgc291cmNlOiB0aGlzLmN1cnJlbnRWaWV3IH0pO1xuICAgIH1cbn1cbiJdfQ==