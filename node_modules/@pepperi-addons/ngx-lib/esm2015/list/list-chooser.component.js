import { Component, Injectable, Input, Output, EventEmitter, } from '@angular/core';
import { PepBreadCrumbItem } from '@pepperi-addons/ngx-lib/bread-crumbs';
export class IPepListChooserOption {
}
export class PepListChooserComponent {
    constructor() {
        this._options = null;
        this._currentList = null;
        this.sizeType = 'md';
        this.change = new EventEmitter();
        this.breadCrumbsItems = null;
        this.menuItems = null;
        this.currentItem = null;
    }
    set options(value) {
        var _a;
        this._options = value;
        this.menuItems = value.map((opt) => {
            return { key: opt.key, text: opt.text };
        });
        if (((_a = this.menuItems) === null || _a === void 0 ? void 0 : _a.length) === 1) {
            this.breadCrumbsItems = [];
            this.breadCrumbsItems.push(new PepBreadCrumbItem({
                key: this.menuItems[0].key,
                text: this.menuItems[0].text,
            }));
        }
    }
    get options() {
        return this._options;
    }
    set currentList(value) {
        this._currentList = value;
        this.currentItem = this.menuItems.find((mi) => mi.key === value.key);
    }
    get currentList() {
        return this._currentList;
    }
    onMenuItemClicked(menuItemClickEvent) {
        this.currentList = this.options.find((list) => list.key === menuItemClickEvent.source.key);
        this.change.emit({ source: this.currentList });
    }
}
PepListChooserComponent.decorators = [
    { type: Component, args: [{
                selector: 'pep-list-chooser',
                template: "<ng-container *ngIf=\"menuItems?.length > 1\">\n    <pep-menu [type]=\"'select'\" [sizeType]=\"sizeType\" [items]=\"menuItems\" [selectedItem]=\"currentItem\"\n        [iconName]=\"'arrow_down'\" (menuItemClick)=\"onMenuItemClicked($event)\"></pep-menu>\n</ng-container>\n<ng-container *ngIf=\"menuItems?.length == 1\">\n    <pep-bread-crumbs [items]=\"breadCrumbsItems\" [addSpacing]=\"true\"></pep-bread-crumbs>\n</ng-container>",
                styles: [""]
            },] },
    { type: Injectable }
];
PepListChooserComponent.propDecorators = {
    options: [{ type: Input }],
    currentList: [{ type: Input }],
    sizeType: [{ type: Input }],
    change: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1jaG9vc2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1saWIvbGlzdC9saXN0LWNob29zZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsVUFBVSxFQUNWLEtBQUssRUFDTCxNQUFNLEVBQ04sWUFBWSxHQUNmLE1BQU0sZUFBZSxDQUFDO0FBTXZCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBRXpFLE1BQU0sT0FBTyxxQkFBcUI7Q0FHakM7QUFZRCxNQUFNLE9BQU8sdUJBQXVCO0lBTnBDO1FBT1ksYUFBUSxHQUFpQyxJQUFJLENBQUM7UUF1QjlDLGlCQUFZLEdBQTBCLElBQUksQ0FBQztRQVUxQyxhQUFRLEdBQWdCLElBQUksQ0FBQztRQUd0QyxXQUFNLEdBQW1ELElBQUksWUFBWSxFQUFvQyxDQUFDO1FBRTlHLHFCQUFnQixHQUE2QixJQUFJLENBQUM7UUFDbEQsY0FBUyxHQUF1QixJQUFJLENBQUM7UUFDckMsZ0JBQVcsR0FBZ0IsSUFBSSxDQUFDO0lBUXBDLENBQUM7SUEvQ0csSUFDSSxPQUFPLENBQUMsS0FBbUM7O1FBQzNDLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBRXRCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQy9CLE9BQU8sRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzVDLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFBLE1BQUEsSUFBSSxDQUFDLFNBQVMsMENBQUUsTUFBTSxNQUFLLENBQUMsRUFBRTtZQUM5QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO1lBQzNCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQ3RCLElBQUksaUJBQWlCLENBQUM7Z0JBQ2xCLEdBQUcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUc7Z0JBQzFCLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUk7YUFDL0IsQ0FBQyxDQUNMLENBQUM7U0FDTDtJQUNMLENBQUM7SUFDRCxJQUFJLE9BQU87UUFDUCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDekIsQ0FBQztJQUdELElBQ0ksV0FBVyxDQUFDLEtBQTRCO1FBQ3hDLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1FBQzFCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7SUFDRCxJQUFJLFdBQVc7UUFDWCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDN0IsQ0FBQztJQVdELGlCQUFpQixDQUFDLGtCQUEwQztRQUN4RCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUNoQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUN2RCxDQUFDO1FBQ0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFDbkQsQ0FBQzs7O1lBdERKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsa0JBQWtCO2dCQUM1QiwwYkFBNEM7O2FBRS9DO1lBQ0EsVUFBVTs7O3NCQUdOLEtBQUs7MEJBdUJMLEtBQUs7dUJBU0wsS0FBSztxQkFFTCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDb21wb25lbnQsXG4gICAgSW5qZWN0YWJsZSxcbiAgICBJbnB1dCxcbiAgICBPdXRwdXQsXG4gICAgRXZlbnRFbWl0dGVyLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBlcFNpemVUeXBlIH0gZnJvbSAnQHBlcHBlcmktYWRkb25zL25neC1saWInO1xuaW1wb3J0IHtcbiAgICBQZXBNZW51SXRlbSxcbiAgICBJUGVwTWVudUl0ZW1DbGlja0V2ZW50LFxufSBmcm9tICdAcGVwcGVyaS1hZGRvbnMvbmd4LWxpYi9tZW51JztcbmltcG9ydCB7IFBlcEJyZWFkQ3J1bWJJdGVtIH0gZnJvbSAnQHBlcHBlcmktYWRkb25zL25neC1saWIvYnJlYWQtY3J1bWJzJztcblxuZXhwb3J0IGNsYXNzIElQZXBMaXN0Q2hvb3Nlck9wdGlvbiB7XG4gICAga2V5OiBzdHJpbmc7XG4gICAgdGV4dDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQZXBMaXN0Q2hvb3Nlck9wdGlvbkNoYW5nZUV2ZW50IHtcbiAgICBzb3VyY2U6IElQZXBMaXN0Q2hvb3Nlck9wdGlvbjtcbn1cblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdwZXAtbGlzdC1jaG9vc2VyJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vbGlzdC1jaG9vc2VyLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9saXN0LWNob29zZXIuY29tcG9uZW50LnNjc3MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUGVwTGlzdENob29zZXJDb21wb25lbnQge1xuICAgIHByaXZhdGUgX29wdGlvbnM6IEFycmF5PElQZXBMaXN0Q2hvb3Nlck9wdGlvbj4gPSBudWxsO1xuICAgIEBJbnB1dCgpXG4gICAgc2V0IG9wdGlvbnModmFsdWU6IEFycmF5PElQZXBMaXN0Q2hvb3Nlck9wdGlvbj4pIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IHZhbHVlO1xuXG4gICAgICAgIHRoaXMubWVudUl0ZW1zID0gdmFsdWUubWFwKChvcHQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7IGtleTogb3B0LmtleSwgdGV4dDogb3B0LnRleHQgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMubWVudUl0ZW1zPy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHRoaXMuYnJlYWRDcnVtYnNJdGVtcyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5icmVhZENydW1ic0l0ZW1zLnB1c2goXG4gICAgICAgICAgICAgICAgbmV3IFBlcEJyZWFkQ3J1bWJJdGVtKHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiB0aGlzLm1lbnVJdGVtc1swXS5rZXksXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMubWVudUl0ZW1zWzBdLnRleHQsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IG9wdGlvbnMoKTogQXJyYXk8SVBlcExpc3RDaG9vc2VyT3B0aW9uPiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2N1cnJlbnRMaXN0OiBJUGVwTGlzdENob29zZXJPcHRpb24gPSBudWxsO1xuICAgIEBJbnB1dCgpXG4gICAgc2V0IGN1cnJlbnRMaXN0KHZhbHVlOiBJUGVwTGlzdENob29zZXJPcHRpb24pIHtcbiAgICAgICAgdGhpcy5fY3VycmVudExpc3QgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5jdXJyZW50SXRlbSA9IHRoaXMubWVudUl0ZW1zLmZpbmQoKG1pKSA9PiBtaS5rZXkgPT09IHZhbHVlLmtleSk7XG4gICAgfVxuICAgIGdldCBjdXJyZW50TGlzdCgpOiBJUGVwTGlzdENob29zZXJPcHRpb24ge1xuICAgICAgICByZXR1cm4gdGhpcy5fY3VycmVudExpc3Q7XG4gICAgfVxuXG4gICAgQElucHV0KCkgc2l6ZVR5cGU6IFBlcFNpemVUeXBlID0gJ21kJztcblxuICAgIEBPdXRwdXQoKVxuICAgIGNoYW5nZTogRXZlbnRFbWl0dGVyPElQZXBMaXN0Q2hvb3Nlck9wdGlvbkNoYW5nZUV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXI8SVBlcExpc3RDaG9vc2VyT3B0aW9uQ2hhbmdlRXZlbnQ+KCk7XG5cbiAgICBicmVhZENydW1ic0l0ZW1zOiBBcnJheTxQZXBCcmVhZENydW1iSXRlbT4gPSBudWxsO1xuICAgIG1lbnVJdGVtczogQXJyYXk8UGVwTWVudUl0ZW0+ID0gbnVsbDtcbiAgICBjdXJyZW50SXRlbTogUGVwTWVudUl0ZW0gPSBudWxsO1xuXG4gICAgb25NZW51SXRlbUNsaWNrZWQobWVudUl0ZW1DbGlja0V2ZW50OiBJUGVwTWVudUl0ZW1DbGlja0V2ZW50KTogdm9pZCB7XG4gICAgICAgIHRoaXMuY3VycmVudExpc3QgPSB0aGlzLm9wdGlvbnMuZmluZChcbiAgICAgICAgICAgIChsaXN0KSA9PiBsaXN0LmtleSA9PT0gbWVudUl0ZW1DbGlja0V2ZW50LnNvdXJjZS5rZXlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5jaGFuZ2UuZW1pdCh7IHNvdXJjZTogdGhpcy5jdXJyZW50TGlzdCB9KTtcbiAgICB9XG59XG4iXX0=