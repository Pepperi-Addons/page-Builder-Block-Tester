import { Pipe } from '@angular/core';
export class IsItemSelectedPipe {
    constructor() {
        this.SEPARATOR = ',';
    }
    getUniqItemId(itemId, itemType = '') {
        return itemId + this.SEPARATOR + itemType;
    }
    transform(item, selectionTypeForActions, selectedItemId, isAllSelected, selectedItems, unSelectedItems) {
        let isSelected = false;
        if (selectionTypeForActions === 'single') {
            isSelected = selectedItemId === this.getUniqItemId(item === null || item === void 0 ? void 0 : item.UID, item === null || item === void 0 ? void 0 : item.Type.toString());
        }
        // else if (selectionTypeForActions === 'single-action') {
        //     isSelected = (isAllSelected && !unSelectedItems.has(item?.UID)) || selectedItems.has(item?.UID);
        // }
        else if (selectionTypeForActions === 'multi') {
            if (item === null || item === void 0 ? void 0 : item.IsSelectableForActions) {
                isSelected = (isAllSelected && !unSelectedItems.has(item === null || item === void 0 ? void 0 : item.UID)) || selectedItems.has(item === null || item === void 0 ? void 0 : item.UID);
            }
        }
        return isSelected;
    }
}
IsItemSelectedPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isItemSelected'
            },] }
];
export class IsItemDisabledPipe {
    transform(item, lockItemInnerEvents, printMode) {
        return (printMode || lockItemInnerEvents || (item && !item.IsSelectableForActions));
    }
}
IsItemDisabledPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isItemDisabled'
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5waXBlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1saWIvbGlzdC9saXN0LnBpcGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBT3BELE1BQU0sT0FBTyxrQkFBa0I7SUFIL0I7UUFJSSxjQUFTLEdBQUcsR0FBRyxDQUFDO0lBd0JwQixDQUFDO0lBdEJXLGFBQWEsQ0FBQyxNQUFjLEVBQUUsUUFBUSxHQUFHLEVBQUU7UUFDL0MsT0FBTyxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7SUFDOUMsQ0FBQztJQUVELFNBQVMsQ0FBQyxJQUFvQixFQUFFLHVCQUE2QyxFQUFFLGNBQXNCLEVBQUUsYUFBc0IsRUFDekgsYUFBa0MsRUFBRSxlQUFvQztRQUN4RSxJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFFdkIsSUFBSSx1QkFBdUIsS0FBSyxRQUFRLEVBQUU7WUFDdEMsVUFBVSxHQUFHLGNBQWMsS0FBSyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxHQUFHLEVBQUUsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1NBQ3hGO1FBQ0QsMERBQTBEO1FBQzFELHVHQUF1RztRQUN2RyxJQUFJO2FBQ0MsSUFBSSx1QkFBdUIsS0FBSyxPQUFPLEVBQUU7WUFDMUMsSUFBSSxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsc0JBQXNCLEVBQUU7Z0JBQzlCLFVBQVUsR0FBRyxDQUFDLGFBQWEsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksYUFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsR0FBRyxDQUFDLENBQUM7YUFDbkc7U0FDSjtRQUVELE9BQU8sVUFBVSxDQUFDO0lBQ3RCLENBQUM7OztZQTNCSixJQUFJLFNBQUM7Z0JBQ0YsSUFBSSxFQUFFLGdCQUFnQjthQUN6Qjs7QUErQkQsTUFBTSxPQUFPLGtCQUFrQjtJQUMzQixTQUFTLENBQUMsSUFBb0IsRUFBRSxtQkFBNEIsRUFBRSxTQUFrQjtRQUM1RSxPQUFPLENBQ0gsU0FBUyxJQUFJLG1CQUFtQixJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQzdFLENBQUM7SUFDTixDQUFDOzs7WUFSSixJQUFJLFNBQUM7Z0JBQ0YsSUFBSSxFQUFFLGdCQUFnQjthQUN6QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JqZWN0c0RhdGFSb3cgfSBmcm9tICdAcGVwcGVyaS1hZGRvbnMvbmd4LWxpYic7XHJcbmltcG9ydCB7IFBlcExpc3RTZWxlY3Rpb25UeXBlIH0gZnJvbSAnLi9saXN0Lm1vZGVsJztcclxuXHJcbkBQaXBlKHtcclxuICAgIG5hbWU6ICdpc0l0ZW1TZWxlY3RlZCdcclxufSlcclxuZXhwb3J0IGNsYXNzIElzSXRlbVNlbGVjdGVkUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gICAgU0VQQVJBVE9SID0gJywnO1xyXG5cclxuICAgIHByaXZhdGUgZ2V0VW5pcUl0ZW1JZChpdGVtSWQ6IHN0cmluZywgaXRlbVR5cGUgPSAnJyk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIGl0ZW1JZCArIHRoaXMuU0VQQVJBVE9SICsgaXRlbVR5cGU7XHJcbiAgICB9XHJcblxyXG4gICAgdHJhbnNmb3JtKGl0ZW06IE9iamVjdHNEYXRhUm93LCBzZWxlY3Rpb25UeXBlRm9yQWN0aW9uczogUGVwTGlzdFNlbGVjdGlvblR5cGUsIHNlbGVjdGVkSXRlbUlkOiBzdHJpbmcsIGlzQWxsU2VsZWN0ZWQ6IGJvb2xlYW4sXHJcbiAgICAgICAgc2VsZWN0ZWRJdGVtczogTWFwPHN0cmluZywgc3RyaW5nPiwgdW5TZWxlY3RlZEl0ZW1zOiBNYXA8c3RyaW5nLCBzdHJpbmc+KTogYW55IHtcclxuICAgICAgICBsZXQgaXNTZWxlY3RlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICBpZiAoc2VsZWN0aW9uVHlwZUZvckFjdGlvbnMgPT09ICdzaW5nbGUnKSB7XHJcbiAgICAgICAgICAgIGlzU2VsZWN0ZWQgPSBzZWxlY3RlZEl0ZW1JZCA9PT0gdGhpcy5nZXRVbmlxSXRlbUlkKGl0ZW0/LlVJRCwgaXRlbT8uVHlwZS50b1N0cmluZygpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZWxzZSBpZiAoc2VsZWN0aW9uVHlwZUZvckFjdGlvbnMgPT09ICdzaW5nbGUtYWN0aW9uJykge1xyXG4gICAgICAgIC8vICAgICBpc1NlbGVjdGVkID0gKGlzQWxsU2VsZWN0ZWQgJiYgIXVuU2VsZWN0ZWRJdGVtcy5oYXMoaXRlbT8uVUlEKSkgfHwgc2VsZWN0ZWRJdGVtcy5oYXMoaXRlbT8uVUlEKTtcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgZWxzZSBpZiAoc2VsZWN0aW9uVHlwZUZvckFjdGlvbnMgPT09ICdtdWx0aScpIHtcclxuICAgICAgICAgICAgaWYgKGl0ZW0/LklzU2VsZWN0YWJsZUZvckFjdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIGlzU2VsZWN0ZWQgPSAoaXNBbGxTZWxlY3RlZCAmJiAhdW5TZWxlY3RlZEl0ZW1zLmhhcyhpdGVtPy5VSUQpKSB8fCBzZWxlY3RlZEl0ZW1zLmhhcyhpdGVtPy5VSUQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaXNTZWxlY3RlZDtcclxuICAgIH1cclxufVxyXG5cclxuQFBpcGUoe1xyXG4gICAgbmFtZTogJ2lzSXRlbURpc2FibGVkJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNJdGVtRGlzYWJsZWRQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgICB0cmFuc2Zvcm0oaXRlbTogT2JqZWN0c0RhdGFSb3csIGxvY2tJdGVtSW5uZXJFdmVudHM6IGJvb2xlYW4sIHByaW50TW9kZTogYm9vbGVhbik6IGFueSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgcHJpbnRNb2RlIHx8IGxvY2tJdGVtSW5uZXJFdmVudHMgfHwgKGl0ZW0gJiYgIWl0ZW0uSXNTZWxlY3RhYmxlRm9yQWN0aW9ucylcclxuICAgICAgICApO1xyXG4gICAgfVxyXG59Il19