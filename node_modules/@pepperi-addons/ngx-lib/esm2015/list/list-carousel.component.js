import { Component, Injectable, Input, Output, EventEmitter, ViewChild, } from '@angular/core';
import { PepLayoutService, PepScreenSizeType, } from '@pepperi-addons/ngx-lib';
import { PepCarouselComponent } from '@pepperi-addons/ngx-lib/carousel';
export class PepListCarouselComponent {
    // deviceHasMouse = false;
    constructor(layoutService) {
        this.layoutService = layoutService;
        this.duration = 1000;
        this.layout = null;
        this.itemsToMove = 3;
        this.lockItemInnerEvents = true;
        this.hideArrowsInSmallScreen = true;
        this._items = null;
        this._itemSize = 'xs';
        this.itemClick = new EventEmitter();
        this.prevDisabled = false;
        this.nextDisabled = false;
        this.PepScreenSizeType = PepScreenSizeType;
        // this.deviceHasMouse = this.layoutService.getDeviceHasMouse();
    }
    set items(value) {
        this._items = value;
        this.moveTo(0);
    }
    get items() {
        return this._items;
    }
    set itemSize(value) {
        this._itemSize = value;
        this.moveTo(0);
    }
    get itemSize() {
        return this._itemSize;
    }
    ngAfterViewInit() {
        this.layoutService.onResize$.subscribe((size) => {
            this.screenSize = size;
        });
        // this.layoutService.onMouseOver$.subscribe((deviceHasMouse: boolean) => {
        //     this.deviceHasMouse = deviceHasMouse;
        // });
    }
    ngOnDestroy() {
        // if (this.itemClick) {
        //     this.itemClick.unsubscribe();
        // }
    }
    itemClicked(item) {
        this.itemClick.emit({ source: item });
    }
    moveLeft() {
        // this.carousel.moveLeft();
        const indexToMove = Math.max(this.carousel.currIndex - this.itemsToMove, 0);
        this.moveTo(indexToMove);
    }
    moveRight() {
        // this.carousel.moveRight();
        const indexToMove = Math.min(this.carousel.currIndex + this.itemsToMove, this.items.length);
        this.moveTo(indexToMove);
    }
    moveTo(index) {
        if (this.carousel) {
            this.carousel.moveTo(index);
        }
    }
    onReachesLeftBound(event) {
        this.prevDisabled = event;
    }
    onReachesRightBound(event) {
        this.nextDisabled = event;
    }
}
PepListCarouselComponent.decorators = [
    { type: Component, args: [{
                selector: 'pep-list-carousel',
                template: "<div class=\"carousel-container\">\n    <ng-container *ngIf=\"items?.length > 0; then carouselBlock; else emptyBlock\"></ng-container>\n    <ng-template #emptyBlock>\n        <!-- No items -->\n    </ng-template>\n    <ng-template #carouselBlock>\n        <pep-button *ngIf=\"!(hideArrowsInSmallScreen && screenSize > PepScreenSizeType.SM)\"\n            [iconName]=\"'arrow_left_alt'\" [styleType]=\"'regular'\" [disabled]=\"prevDisabled\" (click)=\"moveLeft()\"\n            class=\"carousel-arrow start-arrow\">\n        </pep-button>\n        <pep-carousel #carousel [xWheelEnabled]=\"false\" [snapDuration]=\"duration\"\n            (reachesLeftBound)=\"onReachesLeftBound($event)\" (reachesRightBound)=\"onReachesRightBound($event)\">\n            <ng-container *ngFor=\"let item of items\">\n                <pep-form pepCarouselItem [layout]=\"layout\" [data]=\"item\" [layoutType]=\"'card'\"\n                    (click)=\"itemClicked(item)\" class=\"card-view \" [lockEvents]=\"lockItemInnerEvents\"\n                    [ngClass]=\"{ 'x-small-card': itemSize === 'xs', 'small-card': itemSize === 'sm'}\">\n                </pep-form>\n            </ng-container>\n        </pep-carousel>\n        <pep-button *ngIf=\"!(hideArrowsInSmallScreen && screenSize > PepScreenSizeType.SM)\"\n            [iconName]=\"'arrow_right_alt'\" [styleType]=\"'regular'\" [disabled]=\"nextDisabled\" (click)=\"moveRight()\"\n            class=\"carousel-arrow end-arrow\">\n        </pep-button>\n    </ng-template>\n</div>",
                styles: [".carousel-container{position:relative;margin:0 calc(.5rem * -1);margin:0 calc(var(--pep-spacing-sm, .5rem) * -1);display:grid}.carousel-container .carousel-arrow{position:absolute;top:50%;transform:translateY(-50%);z-index:1}.carousel-container .carousel-arrow.start-arrow{left:0}.carousel-container .carousel-arrow.end-arrow{right:0}.carousel-container ::ng-deep.carousel-content .card-view{padding:.5rem 0!important;padding:var(--pep-spacing-sm,.5rem) 0!important}.carousel-container ::ng-deep.carousel-content .card-view:first-child{-webkit-padding-start:.5rem!important;padding-inline-start:.5rem!important;-webkit-padding-start:var(--pep-spacing-sm,.5rem)!important;padding-inline-start:var(--pep-spacing-sm,.5rem)!important}.carousel-container ::ng-deep.carousel-content .card-view:last-child{-webkit-padding-end:.5rem!important;padding-inline-end:.5rem!important;-webkit-padding-end:var(--pep-spacing-sm,.5rem)!important;padding-inline-end:var(--pep-spacing-sm,.5rem)!important}"]
            },] },
    { type: Injectable }
];
PepListCarouselComponent.ctorParameters = () => [
    { type: PepLayoutService }
];
PepListCarouselComponent.propDecorators = {
    duration: [{ type: Input }],
    layout: [{ type: Input }],
    itemsToMove: [{ type: Input }],
    lockItemInnerEvents: [{ type: Input }],
    hideArrowsInSmallScreen: [{ type: Input }],
    items: [{ type: Input }],
    itemSize: [{ type: Input }],
    itemClick: [{ type: Output }],
    carousel: [{ type: ViewChild, args: ['carousel', { read: PepCarouselComponent },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1jYXJvdXNlbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtbGliL2xpc3QvbGlzdC1jYXJvdXNlbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILFNBQVMsRUFDVCxVQUFVLEVBQ1YsS0FBSyxFQUNMLE1BQU0sRUFDTixZQUFZLEVBQ1osU0FBUyxHQU1aLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFHSCxnQkFBZ0IsRUFDaEIsaUJBQWlCLEdBQ3BCLE1BQU0seUJBQXlCLENBQUM7QUFDakMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFjeEUsTUFBTSxPQUFPLHdCQUF3QjtJQXFDakMsMEJBQTBCO0lBRTFCLFlBQW1CLGFBQStCO1FBQS9CLGtCQUFhLEdBQWIsYUFBYSxDQUFrQjtRQXRDekMsYUFBUSxHQUFHLElBQUksQ0FBQztRQUNoQixXQUFNLEdBQWMsSUFBSSxDQUFDO1FBQ3pCLGdCQUFXLEdBQUcsQ0FBQyxDQUFDO1FBQ2hCLHdCQUFtQixHQUFHLElBQUksQ0FBQztRQUMzQiw0QkFBdUIsR0FBRyxJQUFJLENBQUM7UUFFaEMsV0FBTSxHQUEwQixJQUFJLENBQUM7UUFVckMsY0FBUyxHQUE0QixJQUFJLENBQUM7UUFXbEQsY0FBUyxHQUFpRCxJQUFJLFlBQVksRUFBa0MsQ0FBQztRQUs3RyxpQkFBWSxHQUFHLEtBQUssQ0FBQztRQUNyQixpQkFBWSxHQUFHLEtBQUssQ0FBQztRQUVyQixzQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQztRQUlsQyxnRUFBZ0U7SUFDcEUsQ0FBQztJQWpDRCxJQUNJLEtBQUssQ0FBQyxLQUE0QjtRQUNsQyxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25CLENBQUM7SUFDRCxJQUFJLEtBQUs7UUFDTCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUdELElBQ0ksUUFBUSxDQUFDLEtBQThCO1FBQ3ZDLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkIsQ0FBQztJQUNELElBQUksUUFBUTtRQUNSLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMxQixDQUFDO0lBa0JELGVBQWU7UUFDWCxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUF1QixFQUFFLEVBQUU7WUFDL0QsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDM0IsQ0FBQyxDQUFDLENBQUM7UUFFSCwyRUFBMkU7UUFDM0UsNENBQTRDO1FBQzVDLE1BQU07SUFDVixDQUFDO0lBRUQsV0FBVztRQUNQLHdCQUF3QjtRQUN4QixvQ0FBb0M7UUFDcEMsSUFBSTtJQUNSLENBQUM7SUFFRCxXQUFXLENBQUMsSUFBb0I7UUFDNUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQsUUFBUTtRQUNKLDRCQUE0QjtRQUM1QixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUN4QixJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUMxQyxDQUFDLENBQ0osQ0FBQztRQUNGLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVELFNBQVM7UUFDTCw2QkFBNkI7UUFDN0IsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FDeEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFDMUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQ3BCLENBQUM7UUFDRixJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBYTtRQUNoQixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDZixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMvQjtJQUNMLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxLQUFjO1FBQzdCLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO0lBQzlCLENBQUM7SUFFRCxtQkFBbUIsQ0FBQyxLQUFjO1FBQzlCLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO0lBQzlCLENBQUM7OztZQW5HSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLG1CQUFtQjtnQkFDN0IseS9DQUE2Qzs7YUFFaEQ7WUFDQSxVQUFVOzs7WUFoQlAsZ0JBQWdCOzs7dUJBa0JmLEtBQUs7cUJBQ0wsS0FBSzswQkFDTCxLQUFLO2tDQUNMLEtBQUs7c0NBQ0wsS0FBSztvQkFHTCxLQUFLO3VCQVVMLEtBQUs7d0JBU0wsTUFBTTt1QkFHTixTQUFTLFNBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLG9CQUFvQixFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDb21wb25lbnQsXG4gICAgSW5qZWN0YWJsZSxcbiAgICBJbnB1dCxcbiAgICBPdXRwdXQsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIFZpZXdDaGlsZCxcbiAgICBFbGVtZW50UmVmLFxuICAgIFJlbmRlcmVyMixcbiAgICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBPbkRlc3Ryb3ksXG4gICAgQWZ0ZXJWaWV3SW5pdCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIE9iamVjdHNEYXRhUm93LFxuICAgIFVJQ29udHJvbCxcbiAgICBQZXBMYXlvdXRTZXJ2aWNlLFxuICAgIFBlcFNjcmVlblNpemVUeXBlLFxufSBmcm9tICdAcGVwcGVyaS1hZGRvbnMvbmd4LWxpYic7XG5pbXBvcnQgeyBQZXBDYXJvdXNlbENvbXBvbmVudCB9IGZyb20gJ0BwZXBwZXJpLWFkZG9ucy9uZ3gtbGliL2Nhcm91c2VsJztcblxuZXhwb3J0IHR5cGUgUGVwTGlzdENhcm91c2VsU2l6ZVR5cGUgPSAneHMnIHwgJ3NtJyB8ICdtZCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVBlcExpc3RDYXJvdXNlbEl0ZW1DbGlja0V2ZW50IHtcbiAgICBzb3VyY2U6IE9iamVjdHNEYXRhUm93O1xufVxuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3BlcC1saXN0LWNhcm91c2VsJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vbGlzdC1jYXJvdXNlbC5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vbGlzdC1jYXJvdXNlbC5jb21wb25lbnQuc2NzcyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQZXBMaXN0Q2Fyb3VzZWxDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICAgIEBJbnB1dCgpIGR1cmF0aW9uID0gMTAwMDtcbiAgICBASW5wdXQoKSBsYXlvdXQ6IFVJQ29udHJvbCA9IG51bGw7XG4gICAgQElucHV0KCkgaXRlbXNUb01vdmUgPSAzO1xuICAgIEBJbnB1dCgpIGxvY2tJdGVtSW5uZXJFdmVudHMgPSB0cnVlO1xuICAgIEBJbnB1dCgpIGhpZGVBcnJvd3NJblNtYWxsU2NyZWVuID0gdHJ1ZTtcblxuICAgIHByaXZhdGUgX2l0ZW1zOiBBcnJheTxPYmplY3RzRGF0YVJvdz4gPSBudWxsO1xuICAgIEBJbnB1dCgpXG4gICAgc2V0IGl0ZW1zKHZhbHVlOiBBcnJheTxPYmplY3RzRGF0YVJvdz4pIHtcbiAgICAgICAgdGhpcy5faXRlbXMgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5tb3ZlVG8oMCk7XG4gICAgfVxuICAgIGdldCBpdGVtcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2l0ZW1TaXplOiBQZXBMaXN0Q2Fyb3VzZWxTaXplVHlwZSA9ICd4cyc7XG4gICAgQElucHV0KClcbiAgICBzZXQgaXRlbVNpemUodmFsdWU6IFBlcExpc3RDYXJvdXNlbFNpemVUeXBlKSB7XG4gICAgICAgIHRoaXMuX2l0ZW1TaXplID0gdmFsdWU7XG4gICAgICAgIHRoaXMubW92ZVRvKDApO1xuICAgIH1cbiAgICBnZXQgaXRlbVNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pdGVtU2l6ZTtcbiAgICB9XG5cbiAgICBAT3V0cHV0KClcbiAgICBpdGVtQ2xpY2s6IEV2ZW50RW1pdHRlcjxJUGVwTGlzdENhcm91c2VsSXRlbUNsaWNrRXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcjxJUGVwTGlzdENhcm91c2VsSXRlbUNsaWNrRXZlbnQ+KCk7XG5cbiAgICBAVmlld0NoaWxkKCdjYXJvdXNlbCcsIHsgcmVhZDogUGVwQ2Fyb3VzZWxDb21wb25lbnQgfSlcbiAgICBjYXJvdXNlbDogUGVwQ2Fyb3VzZWxDb21wb25lbnQ7XG5cbiAgICBwcmV2RGlzYWJsZWQgPSBmYWxzZTtcbiAgICBuZXh0RGlzYWJsZWQgPSBmYWxzZTtcbiAgICBzY3JlZW5TaXplOiBQZXBTY3JlZW5TaXplVHlwZTtcbiAgICBQZXBTY3JlZW5TaXplVHlwZSA9IFBlcFNjcmVlblNpemVUeXBlO1xuICAgIC8vIGRldmljZUhhc01vdXNlID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgbGF5b3V0U2VydmljZTogUGVwTGF5b3V0U2VydmljZSkge1xuICAgICAgICAvLyB0aGlzLmRldmljZUhhc01vdXNlID0gdGhpcy5sYXlvdXRTZXJ2aWNlLmdldERldmljZUhhc01vdXNlKCk7XG4gICAgfVxuXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmxheW91dFNlcnZpY2Uub25SZXNpemUkLnN1YnNjcmliZSgoc2l6ZTogUGVwU2NyZWVuU2l6ZVR5cGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2NyZWVuU2l6ZSA9IHNpemU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHRoaXMubGF5b3V0U2VydmljZS5vbk1vdXNlT3ZlciQuc3Vic2NyaWJlKChkZXZpY2VIYXNNb3VzZTogYm9vbGVhbikgPT4ge1xuICAgICAgICAvLyAgICAgdGhpcy5kZXZpY2VIYXNNb3VzZSA9IGRldmljZUhhc01vdXNlO1xuICAgICAgICAvLyB9KTtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgLy8gaWYgKHRoaXMuaXRlbUNsaWNrKSB7XG4gICAgICAgIC8vICAgICB0aGlzLml0ZW1DbGljay51bnN1YnNjcmliZSgpO1xuICAgICAgICAvLyB9XG4gICAgfVxuXG4gICAgaXRlbUNsaWNrZWQoaXRlbTogT2JqZWN0c0RhdGFSb3cpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pdGVtQ2xpY2suZW1pdCh7IHNvdXJjZTogaXRlbSB9KTtcbiAgICB9XG5cbiAgICBtb3ZlTGVmdCgpIHtcbiAgICAgICAgLy8gdGhpcy5jYXJvdXNlbC5tb3ZlTGVmdCgpO1xuICAgICAgICBjb25zdCBpbmRleFRvTW92ZSA9IE1hdGgubWF4KFxuICAgICAgICAgICAgdGhpcy5jYXJvdXNlbC5jdXJySW5kZXggLSB0aGlzLml0ZW1zVG9Nb3ZlLFxuICAgICAgICAgICAgMFxuICAgICAgICApO1xuICAgICAgICB0aGlzLm1vdmVUbyhpbmRleFRvTW92ZSk7XG4gICAgfVxuXG4gICAgbW92ZVJpZ2h0KCkge1xuICAgICAgICAvLyB0aGlzLmNhcm91c2VsLm1vdmVSaWdodCgpO1xuICAgICAgICBjb25zdCBpbmRleFRvTW92ZSA9IE1hdGgubWluKFxuICAgICAgICAgICAgdGhpcy5jYXJvdXNlbC5jdXJySW5kZXggKyB0aGlzLml0ZW1zVG9Nb3ZlLFxuICAgICAgICAgICAgdGhpcy5pdGVtcy5sZW5ndGhcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5tb3ZlVG8oaW5kZXhUb01vdmUpO1xuICAgIH1cblxuICAgIG1vdmVUbyhpbmRleDogbnVtYmVyKSB7XG4gICAgICAgIGlmICh0aGlzLmNhcm91c2VsKSB7XG4gICAgICAgICAgICB0aGlzLmNhcm91c2VsLm1vdmVUbyhpbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvblJlYWNoZXNMZWZ0Qm91bmQoZXZlbnQ6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5wcmV2RGlzYWJsZWQgPSBldmVudDtcbiAgICB9XG5cbiAgICBvblJlYWNoZXNSaWdodEJvdW5kKGV2ZW50OiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMubmV4dERpc2FibGVkID0gZXZlbnQ7XG4gICAgfVxufVxuIl19