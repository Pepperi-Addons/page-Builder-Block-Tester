import { Component, Input, ChangeDetectionStrategy, Output, EventEmitter, ElementRef, } from '@angular/core';
import { PepLayoutService } from '@pepperi-addons/ngx-lib';
export class PepSmartFiltersComponent {
    constructor(hostElement, layoutService) {
        this.hostElement = hostElement;
        this.layoutService = layoutService;
        this.title = '';
        this.filtersDataMap = new Map();
        this._filters = [];
        this._fields = [];
        this._useAsWebComponent = false;
        // @Output()
        // filtersClear: EventEmitter<void> = new EventEmitter<void>();
        this.filtersChange = new EventEmitter();
        this.fieldToggleChange = new EventEmitter();
        this.expansionPanelHeaderHeight = '*';
    }
    set filters(value) {
        this._filters = value;
        this.setupFilters(value);
    }
    get filters() {
        this._filters = [...this.filtersDataMap.keys()]
            // .filter((key) => this.filtersDataMap.get(key) !== null)
            .map((key) => {
            if (key) {
                return this.filtersDataMap.get(key);
            }
        });
        return this._filters;
    }
    set fields(value) {
        this._fields = value;
    }
    get fields() {
        return this._fields;
    }
    set useAsWebComponent(value) {
        if (value) {
            this.exportFunctionsOnHostElement();
        }
    }
    get useAsWebComponent() {
        return this._useAsWebComponent;
    }
    exportFunctionsOnHostElement() {
        // This is for web component usage for use those functions.
        this.hostElement.nativeElement.clearFilters = this.clearFilters.bind(this);
        this.hostElement.nativeElement.clearFilter = this.clearFilter.bind(this);
        this.hostElement.nativeElement.toggleField = this.toggleField.bind(this);
    }
    setupFilters(value) {
        this.filtersDataMap.clear();
        if (value) {
            value.forEach((filter) => {
                // Validate before add the filter into the map.
                let currentField = null;
                if (this.fields && this.fields.length > 0) {
                    currentField = this.fields.find((field) => field.id === filter.fieldId);
                }
                if (currentField) {
                    // Only if the operator is from the same type
                    if (filter.operator.componentType.includes(currentField.componentType)) {
                        let isOperatorUnitValid = true;
                        if (filter.operatorUnit) {
                            // Only if the operator unit is not from the same type
                            if (!filter.operatorUnit.componentType.includes(currentField.componentType)) {
                                isOperatorUnitValid = false;
                            }
                        }
                        // Add the filter.
                        if (isOperatorUnitValid) {
                            this.filtersDataMap.set(filter.fieldId, filter);
                        }
                    }
                }
            });
        }
    }
    raiseFiltersChange() {
        this.filtersChange.emit(this.filters);
    }
    toggleField(index, isOpen) {
        this.fields[index].isOpen = isOpen;
        this.fieldToggleChange.emit(this.fields[index]);
    }
    clearFilters() {
        this.filtersDataMap.clear();
    }
    clearFilter(fieldId) {
        this.filtersDataMap.delete(fieldId);
    }
    // Clear all the filters and raise event that filters has change.
    onFiltersClear() {
        this.clearFilters();
        this.raiseFiltersChange();
    }
    // Clear the filter and raise event that filters has change.
    onFilterClear(field) {
        this.clearFilter(field.id);
        this.raiseFiltersChange();
    }
    // Set the filter and raise event that filters has change.
    onFilterChange(field, filterData) {
        this.clearFilter(field.id);
        this.filtersDataMap.set(field.id, filterData);
        this.raiseFiltersChange();
    }
}
PepSmartFiltersComponent.decorators = [
    { type: Component, args: [{
                selector: 'pep-smart-filters',
                template: "<div class=\"smart-filters-container\" dir=\"{{ layoutService.isRtl() ? 'rtl' : 'ltr' }}\">\n    <div class=\"title\">\n        <span class=\"body-md bold\">{{ title?.length > 0 ? title : (\"SMART_FILTERS.TITLE\" | translate)}}</span>\n        <mat-chip *ngIf=\"filtersDataMap.size > 0\" [selectable]=\"false\" [removable]=\"true\" (click)=\"onFiltersClear()\"\n            class=\"clear-filter pep-button chip xs weak\">\n            <span class=\"body-xs ellipsis \">\n                {{ \"ACTIONS.CLEAR\" | translate}}\n            </span>\n        </mat-chip>\n    </div>\n\n    <mat-accordion [displayMode]=\"'flat'\" [multi]=\"true\" class=\"pep-accordion2\">\n        <mat-expansion-panel *ngFor=\"let field of fields; let i = index\" hideToggle=\"true\" [expanded]=\"field.isOpen\"\n            (opened)=\"toggleField(i, true)\" (closed)=\"toggleField(i, false)\">\n            <mat-expansion-panel-header [collapsedHeight]=\"expansionPanelHeaderHeight\"\n                [expandedHeight]=\"expansionPanelHeaderHeight\">\n                <mat-panel-title class=\"pep-spacing-element-negative\">\n                    <div class=\"smart-filter-title-container\">\n                        <mat-icon class=\"pep-spacing-element\">\n                            <pep-icon [name]=\"field.isOpen ? 'number_minus' : 'number_plus'\"></pep-icon>\n                        </mat-icon>\n                        <span class=\"body-sm ellipsis\" [title]=\"field.name\">\n                            {{ field.name }}\n                        </span>\n                        <mat-chip *ngIf=\"filtersDataMap.get(field.id)\" [selectable]=\"false\" [removable]=\"true\"\n                            (click)=\"onFilterClear(field)\" class=\"clear-filter pep-button chip xs weak\">\n                            <span *ngIf=\"field.componentType === 'multi-select'\" class=\"body-xs pep-spacing-element\">\n                                {{ filtersDataMap.get(field.id).value?.first?.length }}\n                                <!-- {{ field.componentType === 'multi-select' ?\n                                filtersDataMap.get(field.id).value?.first?.length : 1 }} -->\n                            </span>\n                            <mat-icon>\n                                <pep-icon name=\"system_close\"></pep-icon>\n                            </mat-icon>\n                        </mat-chip>\n                    </div>\n                </mat-panel-title>\n            </mat-expansion-panel-header>\n            <div class=\"expansion-content smart-filter-content\">\n                <ng-container [ngSwitch]=\"field.componentType\">\n                    <ng-container *ngSwitchCase=\"'boolean'\">\n                        <pep-boolean-filter [field]=\"field\" [filter]=\"filtersDataMap.get(field.id)\"\n                            (filterChange)=\"onFilterChange(field, $event)\" (filterClear)=\"onFilterClear(field)\">\n                        </pep-boolean-filter>\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"'date'\">\n                        <pep-date-filter [field]=\"field\" [filter]=\"filtersDataMap.get(field.id)\"\n                            (filterChange)=\"onFilterChange(field, $event)\" (filterClear)=\"onFilterClear(field)\">\n                        </pep-date-filter>\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"'multi-select'\">\n                        <pep-multi-select-filter [field]=\"field\" [filter]=\"filtersDataMap.get(field.id)\"\n                            (filterChange)=\"onFilterChange(field, $event)\" (filterClear)=\"onFilterClear(field)\">\n                        </pep-multi-select-filter>\n                    </ng-container>\n                    <ng-container *ngSwitchCase=\"'number'\">\n                        <pep-number-filter [field]=\"field\" [filter]=\"filtersDataMap.get(field.id)\"\n                            (filterChange)=\"onFilterChange(field, $event)\" (filterClear)=\"onFilterClear(field)\">\n                        </pep-number-filter>\n                    </ng-container>\n                    <!-- <div *ngSwitchDefault>\n                    </div> -->\n                </ng-container>\n            </div>\n        </mat-expansion-panel>\n    </mat-accordion>\n</div>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".smart-filters-container .title{height:calc(.5rem + 2.5rem);height:calc(var(--pep-top-bar-spacing-bottom, .5rem) + var(--pep-top-bar-field-height, 2.5rem));display:flex;flex-flow:wrap;align-items:center;justify-content:space-between}.smart-filters-container .title .clear-filter{display:flex;flex-direction:row;align-items:center;justify-content:center;margin:0 .25rem;margin:0 var(--pep-spacing-xs,.25rem);padding:0 .75rem;padding:0 var(--pep-spacing-md,.75rem)}.smart-filters-container .title .clear-filter:after{background-color:transparent}.smart-filters-container .smart-filter-title-container{display:grid;grid-auto-flow:column;grid-template-columns:auto 1fr auto;width:100%}.smart-filters-container .smart-filter-title-container>*{align-self:center}.smart-filters-container .smart-filter-title-container .clear-filter{display:flex;flex-direction:row;align-items:center;justify-content:center;-webkit-margin-end:.5rem;margin-inline-end:.5rem;-webkit-margin-end:var(--pep-spacing-sm,.5rem);margin-inline-end:var(--pep-spacing-sm,.5rem)}.smart-filters-container .smart-filter-title-container .clear-filter:after{background-color:transparent}.smart-filters-container .smart-filter-title-container .mat-icon pep-icon{height:.75rem;width:.75rem}"]
            },] }
];
PepSmartFiltersComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: PepLayoutService }
];
PepSmartFiltersComponent.propDecorators = {
    title: [{ type: Input }],
    filters: [{ type: Input }],
    fields: [{ type: Input }],
    useAsWebComponent: [{ type: Input }],
    filtersChange: [{ type: Output }],
    fieldToggleChange: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,