// Base field
// ------------------------------
export class PepSmartFilterBaseField {
    constructor(field) {
        this.id = field.id;
        this.name = field.name;
        this.isOpen = field.isOpen;
        this.options = field.options;
        this.operators = field.operators;
        this.operatorUnits = field.operatorUnits;
        this._type = this.getType();
    }
    get componentType() {
        return this._componentType;
    }
    get type() {
        return this._type;
    }
}
// Boolean field
// ------------------------------
export class PepSmartFilterBooleanField extends PepSmartFilterBaseField {
    constructor(field) {
        super(field);
        this._componentType = 'boolean';
    }
    getType() {
        return 'boolean';
    }
}
// Date fields
// ------------------------------
export class PepSmartFilterDateBaseField extends PepSmartFilterBaseField {
    constructor(field) {
        super(field);
        this._componentType = 'date';
    }
}
export class PepSmartFilterDateField extends PepSmartFilterDateBaseField {
    constructor(field) {
        super(field);
    }
    getType() {
        return 'date';
    }
}
export class PepSmartFilterDateTimeField extends PepSmartFilterDateBaseField {
    constructor(field) {
        super(field);
    }
    getType() {
        return 'date-time';
    }
}
// Multi select field
// ------------------------------
export class PepSmartFilterMultiSelectField extends PepSmartFilterBaseField {
    constructor(field) {
        super(field);
        this._componentType = 'multi-select';
    }
    getType() {
        return 'multi-select';
    }
}
// Number fields
// ------------------------------
export class PepSmartFilterNumberBaseField extends PepSmartFilterBaseField {
    constructor(field) {
        super(field);
        this._componentType = 'number';
    }
}
export class PepSmartFilterIntField extends PepSmartFilterNumberBaseField {
    constructor(field) {
        super(field);
    }
    getType() {
        return 'int';
    }
}
export class PepSmartFilterRealField extends PepSmartFilterNumberBaseField {
    constructor(field) {
        super(field);
    }
    getType() {
        return 'real';
    }
}
export class PepSmartFilterCurrencyField extends PepSmartFilterNumberBaseField {
    constructor(field) {
        super(field);
    }
    getType() {
        return 'currency';
    }
}
export class PepSmartFilterPercentageField extends PepSmartFilterNumberBaseField {
    constructor(field) {
        super(field);
    }
    getType() {
        return 'percentage';
    }
}
//# sourceMappingURL=data:application/json;base64,