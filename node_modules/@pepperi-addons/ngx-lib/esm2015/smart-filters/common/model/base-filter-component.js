import { Directive, EventEmitter, Input, Output, Renderer2, ViewContainerRef, ComponentFactoryResolver, Injector, } from '@angular/core';
import { FormBuilder, Validators, } from '@angular/forms';
import { Subject } from 'rxjs';
import { PepValidatorService } from '@pepperi-addons/ngx-lib';
import { PepSmartFilterOperators, PepSmartFilterOperatorUnits, } from './operator';
import { takeUntil } from 'rxjs/operators';
import { TranslateService } from '@ngx-translate/core';
import { PepFilterActionsComponent } from '../filter-actions.component';
export class BaseFilterComponent {
    constructor(viewContainerRef, injector, resolver, builder, translate, validator, renderer) {
        this.viewContainerRef = viewContainerRef;
        this.injector = injector;
        this.resolver = resolver;
        this.builder = builder;
        this.translate = translate;
        this.validator = validator;
        this.renderer = renderer;
        this._fieldIdWithNoDots = '';
        this.filterClear = new EventEmitter();
        this.filterChange = new EventEmitter();
        this.OPERATORS_TRANSLATION_PREFIX = 'SMART_FILTERS.OPERATORS';
        this.OPERATOR_UNITS_TRANSLATION_PREFIX = 'SMART_FILTERS.OPERATOR_UNITS';
        this._destroyed = new Subject();
    }
    set field(value) {
        this._field = value;
        this._fieldIdWithNoDots = value ? value.id.replace(/./g, '_') : '';
        this.setupForm();
    }
    get field() {
        return this._field;
    }
    set filter(value) {
        this._filter = value;
        this.setupFilter();
    }
    get filter() {
        return this._filter;
    }
    set operator(operator) {
        var _a;
        if ((operator === null || operator === void 0 ? void 0 : operator.id) != ((_a = this._operator) === null || _a === void 0 ? void 0 : _a.id)) {
            // Validate operator
            const index = this.operators.findIndex((o) => o.id === operator.id);
            if (index >= 0) {
                this._operator = this.operators[index];
            }
            else {
                this._operator = this.operators[0];
            }
            this.form.reset();
            this.updateValidity();
        }
    }
    get operator() {
        return this._operator;
    }
    set operatorUnit(operatorUnit) {
        // Validate operator unit
        if (operatorUnit === undefined) {
            this._operatorUnit = undefined;
        }
        else {
            const index = this.operatorUnits.findIndex((ou) => ou.id === operatorUnit.id);
            if (index >= 0) {
                this._operatorUnit = this.operatorUnits[index];
            }
            else {
                this._operatorUnit = this.operatorUnits[0];
            }
        }
    }
    get operatorUnit() {
        return this._operatorUnit;
    }
    get firstControlKey() {
        return this.field ? `${this._fieldIdWithNoDots}_first` : 'first';
    }
    get firstControl() {
        return this.form.get(this.firstControlKey);
    }
    get secondControlKey() {
        return this.field ? `${this._fieldIdWithNoDots}_second` : 'second';
    }
    get secondControl() {
        return this.form.get(this.secondControlKey);
    }
    createActionsComponent() {
        const factory = this.resolver.resolveComponentFactory(PepFilterActionsComponent);
        this.actionsContainerRef = factory.create(this.injector);
        this.actionsContainerRef.instance.form = this.form;
        this.actionsContainerRef.instance.applyClick.subscribe(() => this.applyFilter());
        this.actionsContainerRef.instance.clearClick.subscribe(() => this.clearFilter());
        this.viewContainerRef.insert(this.actionsContainerRef.hostView);
    }
    setupForm() {
        const formValue = {};
        formValue[this.firstControlKey] = [];
        formValue[this.secondControlKey] = [];
        // this.form.patchValue(formValue);
        this.form = this.builder.group(formValue);
        // this.form[this.firstControlKey] = [];
        // this.form[this.secondControlKey] = [];
        this.setupOperators();
        this.createActionsComponent();
    }
    setupOperators() {
        var _a, _b;
        // Get the operators by componentType.
        this.operators = Object.keys(PepSmartFilterOperators)
            .filter((key) => {
            return PepSmartFilterOperators[key].componentType.includes(this.field.componentType);
        })
            .map((key) => PepSmartFilterOperators[key]);
        // Filter by from field.operators input if exist.
        if (((_a = this.field.operators) === null || _a === void 0 ? void 0 : _a.length) > 0) {
            this.operators = this.operators.filter((o1) => this.field.operators.some((o2) => o1.id === o2));
        }
        // Get the operator units by componentType.
        this.operatorUnits = Object.keys(PepSmartFilterOperatorUnits)
            .filter((key) => {
            return PepSmartFilterOperatorUnits[key].componentType.includes(this.field.componentType);
        })
            .map((key) => PepSmartFilterOperatorUnits[key]);
        // Filter by from field.operatorsUnits input if exist.
        if (((_b = this.field.operatorUnits) === null || _b === void 0 ? void 0 : _b.length) > 0) {
            this.operatorUnits = this.operatorUnits.filter((o1) => this.field.operatorUnits.some((o2) => o1.id === o2));
        }
        // Load translation before get the options in the children.
        this.translate.get('SMART_FILTERS.TITLE').subscribe((res) => {
            this.loadOperatorsOptions();
        });
    }
    setupFilter() {
        if (this.filter) {
            this.operator = this.filter.operator;
            this.operatorUnit = this.filter.operatorUnit;
            const formValue = {};
            formValue[this.firstControlKey] = this.filter.value.first;
            formValue[this.secondControlKey] = this.filter.value.second;
            this.form.patchValue(formValue);
        }
        else {
            this.operator = this.getDefaultOperator();
            this.operatorUnit = this.getDefaultOperatorUnit();
            this.clearFilter(false);
        }
    }
    getDestroyer() {
        return takeUntil(this._destroyed);
    }
    updateValidity() {
        this.setFieldsStateAndValidators();
        this.firstControl.updateValueAndValidity();
        this.secondControl.updateValueAndValidity();
    }
    // Load the operators options from the translation.
    loadOperatorsOptions() {
        // Not implemented in the base
    }
    // Set default validators - some childs override this.
    setFieldsStateAndValidators() {
        this.firstControl.setValidators(Validators.required);
        this.secondControl.setValidators(Validators.required);
        this.secondControl.disable();
    }
    // Return undefined - some childs override this.
    getDefaultOperatorUnit() {
        return undefined;
    }
    initFilter() {
        // Not implemented in the base
    }
    clearFilter(emitEvent = true) {
        this._filter = null;
        this.form.reset();
        this.initFilter();
        if (emitEvent) {
            this.filterClear.emit();
        }
    }
    applyFilter() {
        const filterValue = this.getFilterValue();
        // If the filter is not null declare it, else - clear it.
        if (filterValue) {
            const filter = {
                fieldId: this.field.id,
                operator: this.operator,
                operatorUnit: this.operatorUnit,
                value: filterValue,
            };
            this._filter = filter;
            this.filterChange.emit(filter);
        }
        else {
            this.clearFilter();
        }
    }
    ngOnInit() {
        if (this.form) {
            this.updateValidity();
        }
    }
    ngOnChanges() {
        // if (this.form) {
        //     this.updateValidity();
        // }
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this.actionsContainerRef.destroy();
    }
}
BaseFilterComponent.decorators = [
    { type: Directive, args: [{},] }
];
BaseFilterComponent.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: FormBuilder },
    { type: TranslateService },
    { type: PepValidatorService },
    { type: Renderer2 }
];
BaseFilterComponent.propDecorators = {
    field: [{ type: Input }],
    filter: [{ type: Input }],
    filterClear: [{ type: Output }],
    filterChange: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,