import { Component } from '@angular/core';
import { BaseFilterComponent } from '../common/model/base-filter-component';
import { PepSmartFilterOperators, PepSmartFilterOperatorUnits, } from '../common/model/operator';
import { Validators } from '@angular/forms';
export class PepDateFilterComponent extends BaseFilterComponent {
    constructor() {
        super(...arguments);
        this.PepSmartFilterOperators = PepSmartFilterOperators;
        this.chooseTimeOptions = [];
        this.chooseTimeUnitOptions = [];
    }
    // Override
    getDefaultOperator() {
        return PepSmartFilterOperators.InTheLast;
    }
    // Override
    getDefaultOperatorUnit() {
        if (this.operator === PepSmartFilterOperators.InTheLast ||
            this.operator === PepSmartFilterOperators.NotInTheLast ||
            this.operator === PepSmartFilterOperators.DueIn ||
            this.operator === PepSmartFilterOperators.NotDueIn) {
            return PepSmartFilterOperatorUnits.Months;
        }
        else {
            return undefined;
        }
    }
    // Override
    getFilterValue() {
        const filterValue = {
            first: this.firstControl.value,
        };
        if (this.operator === PepSmartFilterOperators.DateRange) {
            filterValue['second'] = this.secondControl.value;
        }
        return filterValue;
    }
    // Override
    loadOperatorsOptions() {
        this.chooseTimeOptions = this.operators.map((operator) => {
            return {
                key: operator.id,
                value: this.translate.instant(`${this.OPERATORS_TRANSLATION_PREFIX}.${operator.name}`),
            };
        });
        this.chooseTimeUnitOptions = this.operatorUnits.map((operatorUnit) => {
            return {
                key: operatorUnit.id,
                value: this.translate.instant(`${this.OPERATOR_UNITS_TRANSLATION_PREFIX}.${operatorUnit.name}`),
            };
        });
    }
    // Override
    setFieldsStateAndValidators() {
        this.firstControl.enable();
        if (this.operator === PepSmartFilterOperators.DateRange) {
            this.firstControl.setValidators(Validators.required);
            this.secondControl.enable();
            this.secondControl.setValidators(Validators.required);
        }
        else if (this.operator === PepSmartFilterOperators.InTheLast ||
            this.operator === PepSmartFilterOperators.NotInTheLast ||
            this.operator === PepSmartFilterOperators.DueIn ||
            this.operator === PepSmartFilterOperators.NotDueIn) {
            this.firstControl.setValidators([
                Validators.required,
                this.validator.numberValidator(),
            ]);
            this.secondControl.disable();
        }
        else {
            // Disable 'first' field.
            if (this.operator === PepSmartFilterOperators.Today ||
                this.operator === PepSmartFilterOperators.ThisWeek ||
                this.operator === PepSmartFilterOperators.ThisMonth ||
                this.operator === PepSmartFilterOperators.IsEmpty ||
                this.operator === PepSmartFilterOperators.IsNotEmpty) {
                this.firstControl.disable();
            }
            // Default disable 'second' field.
            super.setFieldsStateAndValidators();
        }
    }
    onOperatorChanged(value) {
        const operator = Object.values(PepSmartFilterOperators).find((operator) => operator.id === value);
        this.operator = operator;
        this.operatorUnit = this.getDefaultOperatorUnit();
    }
    onTimeUnitChanged(value) {
        const operatorUnit = Object.values(PepSmartFilterOperatorUnits).find((operatorUnit) => operatorUnit.id === value);
        this.operatorUnit = operatorUnit;
    }
}
PepDateFilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'pep-date-filter',
                template: "<div [formGroup]=\"form\">\n    <ng-container>\n        <pep-select [key]=\"'timeOperator'\" [value]=\"operator.id\" [label]=\"'SMART_FILTERS.CHOOSE_TIME' | translate\"\n            [emptyOption]=\"false\" [options]=\"chooseTimeOptions\" (valueChange)=\"onOperatorChanged($event)\">\n        </pep-select>\n    </ng-container>\n\n    <div *ngIf=\"operator === PepSmartFilterOperators.InTheLast ||\n                operator === PepSmartFilterOperators.NotInTheLast ||\n                operator === PepSmartFilterOperators.DueIn ||\n                operator === PepSmartFilterOperators.NotDueIn\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutGap=\"1rem\">\n        <!-- Amount -->\n        <pep-textbox [form]=\"form\" [key]=\"firstControlKey\" [label]=\"'SMART_FILTERS.AMOUNT' | translate\"\n            [renderError]=\"false\" fxFlex=\"50%\" [type]=\"'int'\" [formattedValue]=\"firstControl.value\"\n            [value]=\"firstControl.value\">\n        </pep-textbox>\n        <!-- Time unit -->\n        <pep-select [form]=\"form\" [key]=\"'timeUnit'\" [value]=\"operatorUnit?.id\"\n            [label]=\"'SMART_FILTERS.TIME_UNIT' | translate\" fxFlex=\"50%\" [emptyOption]=\"false\"\n            [options]=\"chooseTimeUnitOptions\" (valueChange)=\"onTimeUnitChanged($event)\">\n        </pep-select>\n    </div>\n    <div pepRtlDirection *ngIf=\"operator === PepSmartFilterOperators.DateRange\" fxLayout=\"row\" fxLayout.xs=\"column\"\n        fxLayoutGap=\"1rem\">\n        <!-- Start date -->\n        <pep-date [form]=\"form\" [key]=\"firstControlKey\" [label]=\"'SMART_FILTERS.START_DATE' | translate\"\n            [renderError]=\"false\" fxFlex=\"50%\" [type]=\"field.type === 'date' ? 'date' : 'datetime'\"\n            [value]=\"firstControl.value\" [maxDateValue]=\"secondControl.value\">\n        </pep-date>\n        <!-- End date -->\n        <pep-date [form]=\"form\" [key]=\"secondControlKey\" [label]=\"'SMART_FILTERS.END_DATE' | translate\"\n            [renderError]=\"false\" fxFlex=\"50%\" [type]=\"field.type === 'date' ? 'date' : 'datetime'\"\n            [value]=\"secondControl.value\" [minDateValue]=\"firstControl.value\">\n        </pep-date>\n    </div>\n    <ng-container *ngIf=\"operator === PepSmartFilterOperators.On\">\n        <!-- Choose a date -->\n        <pep-date [form]=\"form\" [key]=\"firstControlKey\" [label]=\"'SMART_FILTERS.CHOOSE_DATE' | translate\"\n            [renderError]=\"false\" [type]=\"field.type === 'date' ? 'date' : 'datetime'\" [value]=\"firstControl.value\">\n        </pep-date>\n    </ng-container>\n</div>",
                styles: [""]
            },] }
];
//# sourceMappingURL=data:application/json;base64,