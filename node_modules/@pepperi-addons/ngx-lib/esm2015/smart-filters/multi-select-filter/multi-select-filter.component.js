import { ViewChild, } from '@angular/core';
import { Component } from '@angular/core';
import { BaseFilterComponent } from '../common/model/base-filter-component';
import { PepSmartFilterOperators, } from '../common/model/operator';
import { distinctUntilChanged, map, startWith } from 'rxjs/operators';
import { FormControl } from '@angular/forms';
import { VirtualScrollerComponent } from 'ngx-virtual-scroller';
class PepMultiSelectFilterOption {
    constructor() {
        this.selected = false;
    }
}
export class PepMultiSelectFilterComponent extends BaseFilterComponent {
    constructor() {
        super(...arguments);
        this.options = [];
        this.searchControl = new FormControl();
        this.MAX_OPTIONS_TO_SHOW = 6.35;
        this.numberOptionsToShowSearch = 10;
    }
    ngOnInit() {
        var _a;
        super.ngOnInit;
        if (((_a = this.field.options) === null || _a === void 0 ? void 0 : _a.length) > 0) {
            this.options = this.field.options.map((opt) => {
                return { value: opt.value, count: opt.count, selected: false };
            });
        }
        else {
            this.searchControl.disable();
        }
        // Init the selected values from first value.
        const firstControl = this.firstControl;
        if (firstControl.value) {
            this.initOptionsSelectedValues(firstControl.value);
        }
        // Add subscription for the first value change to set the selected options.
        firstControl.valueChanges
            .pipe(this.getDestroyer(), distinctUntilChanged())
            .subscribe((selectedValues) => {
            this.initOptionsSelectedValues(selectedValues);
        });
        // Filter the options by the search control.
        this.filteredOptions$ = this.searchControl.valueChanges.pipe(this.getDestroyer(), startWith(''), map((option) => typeof option === 'string' ? option : option && option.value), map((value) => (value ? this.filterOptions(value) : this.options)));
        // Each time the filter change.
        this.filteredOptions$.subscribe((filterdOptions) => {
            this.calcOptionsHeight(filterdOptions.length);
            setTimeout(() => {
                // 8 is the padding top of the multi-select-options
                this.virtualScroller.scrollToPosition(-8);
            }, 125);
        });
    }
    ngAfterViewInit() {
        // Calc for the first time.
        this.calcOptionsHeight(this.options.length);
    }
    initOptionsSelectedValues(selectedValues) {
        this.options.forEach((opt) => {
            const isValueSelected = selectedValues && selectedValues.includes(opt.value);
            opt.selected = isValueSelected;
        });
    }
    calcOptionsHeight(optionsCount) {
        if (this.optionsContainer) {
            const optionsToShow = optionsCount > this.MAX_OPTIONS_TO_SHOW
                ? this.MAX_OPTIONS_TO_SHOW
                : optionsCount;
            // optionsToShow * 2.25 is 1 option height + 1 is the padding top & bottom of the container.
            const optionsHeight = optionsToShow * 2.25 + 1 + 'rem';
            this.renderer.setStyle(this.optionsContainer.nativeElement, 'height', optionsHeight);
        }
    }
    filterOptions(value) {
        const filterValue = value.toLowerCase();
        return this.options.filter((opt) => opt.value &&
            opt.value.toLowerCase().includes(filterValue.toLowerCase()));
    }
    // Override
    getDefaultOperator() {
        return PepSmartFilterOperators.In;
    }
    // Override
    getFilterValue() {
        const selectedValues = this.options
            .filter((opt) => opt.selected)
            .map((opt) => opt.value);
        const filterValue = {
            first: selectedValues,
        };
        return selectedValues.length > 0 ? filterValue : null;
    }
    // Override
    initFilter() {
        this.options.forEach((opt) => (opt.selected = false));
        this.searchControl.setValue('');
    }
    onOptionChange(option, event) {
        option.selected = event.checked;
        this.firstControl.setValue(this.options.filter((opt) => opt.selected).map((opt) => opt.value), { emitEvent: false });
    }
}
PepMultiSelectFilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'pep-multi-select-filter',
                template: "<div [formGroup]=\"form\">\n    <pep-search *ngIf=\"options?.length > numberOptionsToShowSearch\" [searchControl]=\"searchControl\"\n        [triggerOn]=\"'keydown'\" [shrinkInSmallScreen]=\"false\"></pep-search>\n    <div pepRtlClass class=\"multi-select-options pep-border-top pep-border-bottom\"\n        [ngClass]=\"{'with-no-search': options?.length <= numberOptionsToShowSearch}\">\n        <div #optionsContainer class=\"flip-scroll\" pepRtlClass>\n            <virtual-scroller #scroll [items]=\"filteredOptions$ | async\" [parentScroll]=\"optionsContainer\">\n                <mat-checkbox *ngFor=\"let opt of scroll.viewPortItems\"\n                    class=\"pep-checkbox-container pep-input no-default-background md\" [title]=\"opt.value\"\n                    [checked]=\"opt.selected\" (change)=\"onOptionChange(opt, $event)\">\n                    <div class=\"title\">\n                        <span class=\"body-sm ellipsis\">{{ opt.value }}</span>\n                        <span *ngIf=\"opt.count\" class=\"color-dimmed body-xs ellipsis\">({{opt.count}})</span>\n                    </div>\n                </mat-checkbox>\n                <ng-container *ngIf=\"scroll.viewPortItems?.length === 0\">\n                    <span class=\"no-options body-sm ellipsis\" [title]=\"field.name\">\n                        {{ ( options.length > 0 ? \"SMART_FILTERS.NO_SEARCH_RESULTS\" : \"SMART_FILTERS.NO_OPTIONS\") |\n                        translate }}\n                    </span>\n                </ng-container>\n            </virtual-scroller>\n        </div>\n    </div>\n</div>",
                styles: [".multi-select-options{margin:.5rem calc(.25rem * -1) 0;margin:var(--pep-spacing-sm,.5rem) calc(var(--pep-spacing-xs, .25rem) * -1) 0}.multi-select-options.with-no-search{margin:calc(.5rem * -1) calc(.25rem * -1) 0;margin:calc(var(--pep-spacing-sm, .5rem) * -1) calc(var(--pep-spacing-xs, .25rem) * -1) 0}.multi-select-options .no-options{display:flex;padding:.5rem .75rem;padding:var(--pep-spacing-sm,.5rem) var(--pep-spacing-md,.75rem)}.multi-select-options .flip-scroll{padding:.5rem .25rem;padding:var(--pep-spacing-sm,.5rem) var(--pep-spacing-xs,.25rem);min-height:3.25rem;max-height:34.75rem;direction:rtl}.multi-select-options .flip-scroll.rtl,.multi-select-options .flip-scroll virtual-scroller{direction:ltr}.multi-select-options .flip-scroll.rtl virtual-scroller{direction:rtl}.multi-select-options .pep-checkbox-container{height:2.25rem;-webkit-padding-end:0;padding-inline-end:0}.multi-select-options .pep-checkbox-container ::ng-deep.mat-checkbox-layout{width:100%;height:100%;grid-template-columns:auto 1fr}.multi-select-options .pep-checkbox-container ::ng-deep.mat-checkbox-layout .mat-checkbox-label{align-self:center}.multi-select-options .pep-checkbox-container .title{display:flex;justify-content:space-between;align-items:center;margin:0 .25rem;margin:0 var(--pep-spacing-xs,.25rem)}"]
            },] }
];
PepMultiSelectFilterComponent.propDecorators = {
    optionsContainer: [{ type: ViewChild, args: ['optionsContainer',] }],
    virtualScroller: [{ type: ViewChild, args: [VirtualScrollerComponent,] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktc2VsZWN0LWZpbHRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtbGliL3NtYXJ0LWZpbHRlcnMvbXVsdGktc2VsZWN0LWZpbHRlci9tdWx0aS1zZWxlY3QtZmlsdGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBTUgsU0FBUyxHQUNaLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDbEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDNUUsT0FBTyxFQUVILHVCQUF1QixHQUMxQixNQUFNLDBCQUEwQixDQUFDO0FBSWxDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTdDLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRWhFLE1BQU0sMEJBQTBCO0lBQWhDO1FBR0ksYUFBUSxHQUFHLEtBQUssQ0FBQztJQUNyQixDQUFDO0NBQUE7QUFPRCxNQUFNLE9BQU8sNkJBQ1QsU0FBUSxtQkFBbUI7SUFOL0I7O1FBUUksWUFBTyxHQUFpQyxFQUFFLENBQUM7UUFFM0Msa0JBQWEsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBS2pCLHdCQUFtQixHQUFHLElBQUksQ0FBQztRQUk1Qyw4QkFBeUIsR0FBRyxFQUFFLENBQUM7SUF3SG5DLENBQUM7SUF0SEcsUUFBUTs7UUFDSixLQUFLLENBQUMsUUFBUSxDQUFDO1FBRWYsSUFBSSxDQUFBLE1BQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLDBDQUFFLE1BQU0sSUFBRyxDQUFDLEVBQUU7WUFDaEMsSUFBSSxDQUFDLE9BQU8sR0FB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Q0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRCxjQUFjLENBQ1YsTUFBa0MsRUFDbEMsS0FBd0I7UUFFeEIsTUFBTSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUN0QixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUNsRSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FDdkIsQ0FBQztJQUNOLENBQUM7OztZQTFJSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHlCQUF5QjtnQkFDbkMseWtEQUFtRDs7YUFFdEQ7OzsrQkFRSSxTQUFTLFNBQUMsa0JBQWtCOzhCQUk1QixTQUFTLFNBQUMsd0JBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBBZnRlclZpZXdJbml0LFxuICAgIEVsZW1lbnRSZWYsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIElucHV0LFxuICAgIE91dHB1dCxcbiAgICBWaWV3Q2hpbGQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJhc2VGaWx0ZXJDb21wb25lbnQgfSBmcm9tICcuLi9jb21tb24vbW9kZWwvYmFzZS1maWx0ZXItY29tcG9uZW50JztcbmltcG9ydCB7XG4gICAgSVBlcFNtYXJ0RmlsdGVyT3BlcmF0b3IsXG4gICAgUGVwU21hcnRGaWx0ZXJPcGVyYXRvcnMsXG59IGZyb20gJy4uL2NvbW1vbi9tb2RlbC9vcGVyYXRvcic7XG5pbXBvcnQgeyBJUGVwU21hcnRGaWx0ZXJEYXRhVmFsdWUgfSBmcm9tICcuLi9jb21tb24vbW9kZWwvZmlsdGVyJztcbmltcG9ydCB7IElQZXBTbWFydEZpbHRlckZpZWxkT3B0aW9uIH0gZnJvbSAnLi4vY29tbW9uL21vZGVsL2ZpZWxkJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBtYXAsIHN0YXJ0V2l0aCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEZvcm1Db250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgTWF0Q2hlY2tib3hDaGFuZ2UgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9jaGVja2JveCc7XG5pbXBvcnQgeyBWaXJ0dWFsU2Nyb2xsZXJDb21wb25lbnQgfSBmcm9tICduZ3gtdmlydHVhbC1zY3JvbGxlcic7XG5cbmNsYXNzIFBlcE11bHRpU2VsZWN0RmlsdGVyT3B0aW9uIGltcGxlbWVudHMgSVBlcFNtYXJ0RmlsdGVyRmllbGRPcHRpb24ge1xuICAgIHZhbHVlOiBzdHJpbmc7XG4gICAgY291bnQ/OiBudW1iZXI7XG4gICAgc2VsZWN0ZWQgPSBmYWxzZTtcbn1cblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdwZXAtbXVsdGktc2VsZWN0LWZpbHRlcicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL211bHRpLXNlbGVjdC1maWx0ZXIuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL211bHRpLXNlbGVjdC1maWx0ZXIuY29tcG9uZW50LnNjc3MnXSxcbn0pXG5leHBvcnQgY2xhc3MgUGVwTXVsdGlTZWxlY3RGaWx0ZXJDb21wb25lbnRcbiAgICBleHRlbmRzIEJhc2VGaWx0ZXJDb21wb25lbnRcbiAgICBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgb3B0aW9uczogUGVwTXVsdGlTZWxlY3RGaWx0ZXJPcHRpb25bXSA9IFtdO1xuICAgIGZpbHRlcmVkT3B0aW9ucyQ6IE9ic2VydmFibGU8YW55PjtcbiAgICBzZWFyY2hDb250cm9sID0gbmV3IEZvcm1Db250cm9sKCk7XG5cbiAgICBAVmlld0NoaWxkKCdvcHRpb25zQ29udGFpbmVyJylcbiAgICBvcHRpb25zQ29udGFpbmVyOiBFbGVtZW50UmVmO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBNQVhfT1BUSU9OU19UT19TSE9XID0gNi4zNTtcbiAgICBAVmlld0NoaWxkKFZpcnR1YWxTY3JvbGxlckNvbXBvbmVudClcbiAgICBwcml2YXRlIHZpcnR1YWxTY3JvbGxlcjogVmlydHVhbFNjcm9sbGVyQ29tcG9uZW50O1xuXG4gICAgbnVtYmVyT3B0aW9uc1RvU2hvd1NlYXJjaCA9IDEwO1xuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHN1cGVyLm5nT25Jbml0O1xuXG4gICAgICAgIGlmICh0aGlzLmZpZWxkLm9wdGlvbnM/Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IHRoaXMuZmllbGQub3B0aW9ucy5tYXAoKG9wdCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvcHQudmFsdWUsIGNvdW50OiBvcHQuY291bnQsIHNlbGVjdGVkOiBmYWxzZSB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNlYXJjaENvbnRyb2wuZGlzYWJsZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW5pdCB0aGUgc2VsZWN0ZWQgdmFsdWVzIGZyb20gZmlyc3QgdmFsdWUuXG4gICAgICAgIGNvbnN0IGZpcnN0Q29udHJvbCA9IHRoaXMuZmlyc3RDb250cm9sO1xuICAgICAgICBpZiAoZmlyc3RDb250cm9sLnZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmluaXRPcHRpb25zU2VsZWN0ZWRWYWx1ZXMoZmlyc3RDb250cm9sLnZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkZCBzdWJzY3JpcHRpb24gZm9yIHRoZSBmaXJzdCB2YWx1ZSBjaGFuZ2UgdG8gc2V0IHRoZSBzZWxlY3RlZCBvcHRpb25zLlxuICAgICAgICBmaXJzdENvbnRyb2wudmFsdWVDaGFuZ2VzXG4gICAgICAgICAgICAucGlwZSh0aGlzLmdldERlc3Ryb3llcigpLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKVxuICAgICAgICAgICAgLnN1YnNjcmliZSgoc2VsZWN0ZWRWYWx1ZXM6IHN0cmluZ1tdKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbml0T3B0aW9uc1NlbGVjdGVkVmFsdWVzKHNlbGVjdGVkVmFsdWVzKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEZpbHRlciB0aGUgb3B0aW9ucyBieSB0aGUgc2VhcmNoIGNvbnRyb2wuXG4gICAgICAgIHRoaXMuZmlsdGVyZWRPcHRpb25zJCA9IHRoaXMuc2VhcmNoQ29udHJvbC52YWx1ZUNoYW5nZXMucGlwZShcbiAgICAgICAgICAgIHRoaXMuZ2V0RGVzdHJveWVyKCksXG4gICAgICAgICAgICBzdGFydFdpdGg8YW55PignJyksXG4gICAgICAgICAgICBtYXAoKG9wdGlvbikgPT5cbiAgICAgICAgICAgICAgICB0eXBlb2Ygb3B0aW9uID09PSAnc3RyaW5nJyA/IG9wdGlvbiA6IG9wdGlvbiAmJiBvcHRpb24udmFsdWVcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBtYXAoKHZhbHVlKSA9PiAodmFsdWUgPyB0aGlzLmZpbHRlck9wdGlvbnModmFsdWUpIDogdGhpcy5vcHRpb25zKSlcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBFYWNoIHRpbWUgdGhlIGZpbHRlciBjaGFuZ2UuXG4gICAgICAgIHRoaXMuZmlsdGVyZWRPcHRpb25zJC5zdWJzY3JpYmUoXG4gICAgICAgICAgICAoZmlsdGVyZE9wdGlvbnM6IFBlcE11bHRpU2VsZWN0RmlsdGVyT3B0aW9uW10pID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGNPcHRpb25zSGVpZ2h0KGZpbHRlcmRPcHRpb25zLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIDggaXMgdGhlIHBhZGRpbmcgdG9wIG9mIHRoZSBtdWx0aS1zZWxlY3Qtb3B0aW9uc1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpcnR1YWxTY3JvbGxlci5zY3JvbGxUb1Bvc2l0aW9uKC04KTtcbiAgICAgICAgICAgICAgICB9LCAxMjUpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICAgICAgLy8gQ2FsYyBmb3IgdGhlIGZpcnN0IHRpbWUuXG4gICAgICAgIHRoaXMuY2FsY09wdGlvbnNIZWlnaHQodGhpcy5vcHRpb25zLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgaW5pdE9wdGlvbnNTZWxlY3RlZFZhbHVlcyhzZWxlY3RlZFZhbHVlczogc3RyaW5nW10pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmZvckVhY2goKG9wdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaXNWYWx1ZVNlbGVjdGVkID1cbiAgICAgICAgICAgICAgICBzZWxlY3RlZFZhbHVlcyAmJiBzZWxlY3RlZFZhbHVlcy5pbmNsdWRlcyhvcHQudmFsdWUpO1xuICAgICAgICAgICAgb3B0LnNlbGVjdGVkID0gaXNWYWx1ZVNlbGVjdGVkO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNhbGNPcHRpb25zSGVpZ2h0KG9wdGlvbnNDb3VudDogbnVtYmVyKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnNDb250YWluZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnNUb1Nob3cgPVxuICAgICAgICAgICAgICAgIG9wdGlvbnNDb3VudCA+IHRoaXMuTUFYX09QVElPTlNfVE9fU0hPV1xuICAgICAgICAgICAgICAgICAgICA/IHRoaXMuTUFYX09QVElPTlNfVE9fU0hPV1xuICAgICAgICAgICAgICAgICAgICA6IG9wdGlvbnNDb3VudDtcbiAgICAgICAgICAgIC8vIG9wdGlvbnNUb1Nob3cgKiAyLjI1IGlzIDEgb3B0aW9uIGhlaWdodCArIDEgaXMgdGhlIHBhZGRpbmcgdG9wICYgYm90dG9tIG9mIHRoZSBjb250YWluZXIuXG4gICAgICAgICAgICBjb25zdCBvcHRpb25zSGVpZ2h0ID0gb3B0aW9uc1RvU2hvdyAqIDIuMjUgKyAxICsgJ3JlbSc7XG5cbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUoXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zQ29udGFpbmVyLm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgJ2hlaWdodCcsXG4gICAgICAgICAgICAgICAgb3B0aW9uc0hlaWdodFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZmlsdGVyT3B0aW9ucyh2YWx1ZTogc3RyaW5nKTogYW55W10ge1xuICAgICAgICBjb25zdCBmaWx0ZXJWYWx1ZSA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZmlsdGVyKFxuICAgICAgICAgICAgKG9wdCkgPT5cbiAgICAgICAgICAgICAgICBvcHQudmFsdWUgJiZcbiAgICAgICAgICAgICAgICBvcHQudmFsdWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhmaWx0ZXJWYWx1ZS50b0xvd2VyQ2FzZSgpKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8vIE92ZXJyaWRlXG4gICAgZ2V0RGVmYXVsdE9wZXJhdG9yKCk6IElQZXBTbWFydEZpbHRlck9wZXJhdG9yIHtcbiAgICAgICAgcmV0dXJuIFBlcFNtYXJ0RmlsdGVyT3BlcmF0b3JzLkluO1xuICAgIH1cblxuICAgIC8vIE92ZXJyaWRlXG4gICAgZ2V0RmlsdGVyVmFsdWUoKTogSVBlcFNtYXJ0RmlsdGVyRGF0YVZhbHVlIHtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRWYWx1ZXMgPSB0aGlzLm9wdGlvbnNcbiAgICAgICAgICAgIC5maWx0ZXIoKG9wdCkgPT4gb3B0LnNlbGVjdGVkKVxuICAgICAgICAgICAgLm1hcCgob3B0KSA9PiBvcHQudmFsdWUpO1xuICAgICAgICBjb25zdCBmaWx0ZXJWYWx1ZSA9IHtcbiAgICAgICAgICAgIGZpcnN0OiBzZWxlY3RlZFZhbHVlcyxcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gc2VsZWN0ZWRWYWx1ZXMubGVuZ3RoID4gMCA/IGZpbHRlclZhbHVlIDogbnVsbDtcbiAgICB9XG5cbiAgICAvLyBPdmVycmlkZVxuICAgIGluaXRGaWx0ZXIoKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5mb3JFYWNoKChvcHQpID0+IChvcHQuc2VsZWN0ZWQgPSBmYWxzZSkpO1xuICAgICAgICB0aGlzLnNlYXJjaENvbnRyb2wuc2V0VmFsdWUoJycpO1xuICAgIH1cblxuICAgIG9uT3B0aW9uQ2hhbmdlKFxuICAgICAgICBvcHRpb246IFBlcE11bHRpU2VsZWN0RmlsdGVyT3B0aW9uLFxuICAgICAgICBldmVudDogTWF0Q2hlY2tib3hDaGFuZ2VcbiAgICApIHtcbiAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gZXZlbnQuY2hlY2tlZDtcbiAgICAgICAgdGhpcy5maXJzdENvbnRyb2wuc2V0VmFsdWUoXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuZmlsdGVyKChvcHQpID0+IG9wdC5zZWxlY3RlZCkubWFwKChvcHQpID0+IG9wdC52YWx1ZSksXG4gICAgICAgICAgICB7IGVtaXRFdmVudDogZmFsc2UgfVxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==