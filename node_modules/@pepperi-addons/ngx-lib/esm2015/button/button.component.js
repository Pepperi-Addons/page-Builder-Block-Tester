import { Component, Input, Output, EventEmitter, Renderer2, ElementRef, } from '@angular/core';
import { PepButton } from './button.model';
/**
 * This is a button component that support pepperi theme
 * style & state & sizes
 *
 * @export
 * @class PepButtonComponent
 * @implements {OnDestroy}
 */
export class PepButtonComponent {
    constructor(renderer, element) {
        this.renderer = renderer;
        this.element = element;
        /**
         * The style of the button.
         *
         * @type {PepStyleType}
         * @memberof PepButtonComponent
         */
        this.styleType = 'weak';
        /**
         * The style state of the button.
         *
         * @type {PepStyleStateType}
         * @memberof PepButtonComponent
         */
        this.styleStateType = 'system';
        /**
         * The size of the button.
         *
         * @type {PepSizeType}
         * @memberof PepButtonComponent
         */
        this.sizeType = 'md';
        /**
         * Class names that should be on the button element tag like classNames="class1 class2"
         *
         * @memberof PepButtonComponent
         */
        this.classNames = '';
        /**
         * If the button is disable or not.
         *
         * @type {boolean}
         * @memberof PepButtonComponent
         */
        this.disabled = false;
        /**
         * The icon position.
         *
         * @type {('start' | 'end')}
         * @memberof PepButtonComponent
         */
        this.iconPosition = 'end';
        this._visible = true;
        /**
         * The button click event.
         *
         * @type {EventEmitter<IPepButtonClickEvent>}
         * @memberof PepButtonComponent
         */
        this.buttonClick = new EventEmitter();
    }
    /**
     * If the button is visible or not.
     *
     * @memberof PepButtonComponent
     */
    set visible(visible) {
        if (visible !== undefined) {
            this._visible = !!visible;
            if (visible) {
                this.renderer.removeClass(this.element.nativeElement, 'hidden-element');
            }
            else {
                this.renderer.addClass(this.element.nativeElement, 'hidden-element');
            }
        }
    }
    get visible() {
        return this._visible;
    }
    ngOnDestroy() {
        // if (this.buttonClick) {
        //     this.buttonClick.unsubscribe();
        // }
    }
    /**
     * The button click
     */
    onButtonClicked(event) {
        const button = new PepButton({
            key: this.key,
            value: this.value,
        });
        const buttonClick = {
            source: button,
            event,
        };
        this.buttonClick.emit(buttonClick);
    }
}
PepButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'pep-button',
                template: "<button mat-button [pepDataQa]=\"key ? key : value\"\n    class=\"pep-button {{ sizeType }} {{ styleType }} {{ styleStateType }} {{ classNames }}\"\n    [ngClass]=\"{ 'icon-button': iconName && !value }\" [disabled]=\"disabled\" (click)=\"onButtonClicked($event)\">\n    <ng-container *ngTemplateOutlet=\"contentTemplate\">\n    </ng-container>\n</button>\n\n<ng-template #contentTemplate>\n    <mat-icon *ngIf=\"iconName && iconPosition === 'start'\" [ngClass]=\"{ 'pull-left flip': value }\">\n        <pep-icon name=\"{{iconName}}\"></pep-icon>\n    </mat-icon>\n    <span *ngIf=\"value\" class=\"ellipsis pull-left flip\"\n        [ngClass]=\"{ 'button-title-with-icon': iconName, 'icon-before': iconPosition === 'start' }\" [title]=\"value\">\n        {{value}}\n    </span>\n    <mat-icon *ngIf=\"iconName && iconPosition === 'end'\" [ngClass]=\"{ 'pull-left flip': value }\">\n        <pep-icon name=\"{{iconName}}\"></pep-icon>\n    </mat-icon>\n</ng-template>",
                styles: [":host{display:grid}"]
            },] }
];
PepButtonComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
PepButtonComponent.propDecorators = {
    key: [{ type: Input }],
    value: [{ type: Input }],
    styleType: [{ type: Input }],
    styleStateType: [{ type: Input }],
    sizeType: [{ type: Input }],
    classNames: [{ type: Input }],
    disabled: [{ type: Input }],
    iconName: [{ type: Input }],
    iconPosition: [{ type: Input }],
    visible: [{ type: Input }],
    buttonClick: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1saWIvYnV0dG9uL2J1dHRvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILFNBQVMsRUFFVCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFDWixTQUFTLEVBQ1QsVUFBVSxHQUNiLE1BQU0sZUFBZSxDQUFDO0FBT3ZCLE9BQU8sRUFBRSxTQUFTLEVBQXdCLE1BQU0sZ0JBQWdCLENBQUM7QUFFakU7Ozs7Ozs7R0FPRztBQU1ILE1BQU0sT0FBTyxrQkFBa0I7SUE0RzNCLFlBQW9CLFFBQW1CLEVBQVUsT0FBbUI7UUFBaEQsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUFVLFlBQU8sR0FBUCxPQUFPLENBQVk7UUEzRnBFOzs7OztXQUtHO1FBQ00sY0FBUyxHQUFpQixNQUFNLENBQUM7UUFFMUM7Ozs7O1dBS0c7UUFDTSxtQkFBYyxHQUFzQixRQUFRLENBQUM7UUFFdEQ7Ozs7O1dBS0c7UUFDTSxhQUFRLEdBQWdCLElBQUksQ0FBQztRQUV0Qzs7OztXQUlHO1FBQ00sZUFBVSxHQUFHLEVBQUUsQ0FBQztRQUV6Qjs7Ozs7V0FLRztRQUNNLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFVMUI7Ozs7O1dBS0c7UUFDTSxpQkFBWSxHQUFvQixLQUFLLENBQUM7UUFFdkMsYUFBUSxHQUFHLElBQUksQ0FBQztRQTJCeEI7Ozs7O1dBS0c7UUFFSCxnQkFBVyxHQUF1QyxJQUFJLFlBQVksRUFBd0IsQ0FBQztJQUVuQixDQUFDO0lBbkN6RTs7OztPQUlHO0lBQ0gsSUFDSSxPQUFPLENBQUMsT0FBZ0I7UUFDeEIsSUFBSSxPQUFPLEtBQUssU0FBUyxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUMxQixJQUFJLE9BQU8sRUFBRTtnQkFDVCxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FDckIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQzFCLGdCQUFnQixDQUNuQixDQUFDO2FBQ0w7aUJBQU07Z0JBQ0gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQ2xCLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUMxQixnQkFBZ0IsQ0FDbkIsQ0FBQzthQUNMO1NBQ0o7SUFDTCxDQUFDO0lBQ0QsSUFBSSxPQUFPO1FBQ1AsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3pCLENBQUM7SUFhRCxXQUFXO1FBQ1AsMEJBQTBCO1FBQzFCLHNDQUFzQztRQUN0QyxJQUFJO0lBQ1IsQ0FBQztJQUVEOztPQUVHO0lBQ0gsZUFBZSxDQUFDLEtBQVk7UUFDeEIsTUFBTSxNQUFNLEdBQUcsSUFBSSxTQUFTLENBQUM7WUFDekIsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO1lBQ2IsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1NBQ3BCLENBQUMsQ0FBQztRQUVILE1BQU0sV0FBVyxHQUFHO1lBQ2hCLE1BQU0sRUFBRSxNQUFNO1lBQ2QsS0FBSztTQUNSLENBQUM7UUFFRixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN2QyxDQUFDOzs7WUF4SUosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxZQUFZO2dCQUN0QixvOUJBQXNDOzthQUV6Qzs7O1lBdkJHLFNBQVM7WUFDVCxVQUFVOzs7a0JBOEJULEtBQUs7b0JBUUwsS0FBSzt3QkFRTCxLQUFLOzZCQVFMLEtBQUs7dUJBUUwsS0FBSzt5QkFPTCxLQUFLO3VCQVFMLEtBQUs7dUJBUUwsS0FBSzsyQkFRTCxLQUFLO3NCQVFMLEtBQUs7MEJBMkJMLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENvbXBvbmVudCxcbiAgICBPbkRlc3Ryb3ksXG4gICAgSW5wdXQsXG4gICAgT3V0cHV0LFxuICAgIEV2ZW50RW1pdHRlcixcbiAgICBSZW5kZXJlcjIsXG4gICAgRWxlbWVudFJlZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIFBlcFN0eWxlVHlwZSxcbiAgICBQZXBTdHlsZVN0YXRlVHlwZSxcbiAgICBQZXBTaXplVHlwZSxcbn0gZnJvbSAnQHBlcHBlcmktYWRkb25zL25neC1saWInO1xuaW1wb3J0IHsgUGVwSWNvblR5cGUgfSBmcm9tICdAcGVwcGVyaS1hZGRvbnMvbmd4LWxpYi9pY29uJztcbmltcG9ydCB7IFBlcEJ1dHRvbiwgSVBlcEJ1dHRvbkNsaWNrRXZlbnQgfSBmcm9tICcuL2J1dHRvbi5tb2RlbCc7XG5cbi8qKlxuICogVGhpcyBpcyBhIGJ1dHRvbiBjb21wb25lbnQgdGhhdCBzdXBwb3J0IHBlcHBlcmkgdGhlbWVcbiAqIHN0eWxlICYgc3RhdGUgJiBzaXplc1xuICpcbiAqIEBleHBvcnRcbiAqIEBjbGFzcyBQZXBCdXR0b25Db21wb25lbnRcbiAqIEBpbXBsZW1lbnRzIHtPbkRlc3Ryb3l9XG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAncGVwLWJ1dHRvbicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2J1dHRvbi5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vYnV0dG9uLmNvbXBvbmVudC5zY3NzJ10sXG59KVxuZXhwb3J0IGNsYXNzIFBlcEJ1dHRvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgLyoqXG4gICAgICogVGhlIGJ1dHRvbiBrZXlcbiAgICAgKlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIFBlcEJ1dHRvbkNvbXBvbmVudFxuICAgICAqL1xuICAgIEBJbnB1dCgpIGtleTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRleHQgb24gdGhlIGJ1dHRvbi5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIFBlcEJ1dHRvbkNvbXBvbmVudFxuICAgICAqL1xuICAgIEBJbnB1dCgpIHZhbHVlOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc3R5bGUgb2YgdGhlIGJ1dHRvbi5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtQZXBTdHlsZVR5cGV9XG4gICAgICogQG1lbWJlcm9mIFBlcEJ1dHRvbkNvbXBvbmVudFxuICAgICAqL1xuICAgIEBJbnB1dCgpIHN0eWxlVHlwZTogUGVwU3R5bGVUeXBlID0gJ3dlYWsnO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHN0eWxlIHN0YXRlIG9mIHRoZSBidXR0b24uXG4gICAgICpcbiAgICAgKiBAdHlwZSB7UGVwU3R5bGVTdGF0ZVR5cGV9XG4gICAgICogQG1lbWJlcm9mIFBlcEJ1dHRvbkNvbXBvbmVudFxuICAgICAqL1xuICAgIEBJbnB1dCgpIHN0eWxlU3RhdGVUeXBlOiBQZXBTdHlsZVN0YXRlVHlwZSA9ICdzeXN0ZW0nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNpemUgb2YgdGhlIGJ1dHRvbi5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtQZXBTaXplVHlwZX1cbiAgICAgKiBAbWVtYmVyb2YgUGVwQnV0dG9uQ29tcG9uZW50XG4gICAgICovXG4gICAgQElucHV0KCkgc2l6ZVR5cGU6IFBlcFNpemVUeXBlID0gJ21kJztcblxuICAgIC8qKlxuICAgICAqIENsYXNzIG5hbWVzIHRoYXQgc2hvdWxkIGJlIG9uIHRoZSBidXR0b24gZWxlbWVudCB0YWcgbGlrZSBjbGFzc05hbWVzPVwiY2xhc3MxIGNsYXNzMlwiXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgUGVwQnV0dG9uQ29tcG9uZW50XG4gICAgICovXG4gICAgQElucHV0KCkgY2xhc3NOYW1lcyA9ICcnO1xuXG4gICAgLyoqXG4gICAgICogSWYgdGhlIGJ1dHRvbiBpcyBkaXNhYmxlIG9yIG5vdC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIEBtZW1iZXJvZiBQZXBCdXR0b25Db21wb25lbnRcbiAgICAgKi9cbiAgICBASW5wdXQoKSBkaXNhYmxlZCA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGljb24gbmFtZSB0byBzaG93IG9uIHRoZSBidXR0b24uIGxvb2sgaW4gKEBsaW5rIGljb24gLT4gQWxsIGljb25zKVxuICAgICAqXG4gICAgICogQHR5cGUge1BlcEljb25UeXBlfSBTZWUge0BsaW5rIFBlcEljb25UeXBlfVxuICAgICAqIEBtZW1iZXJvZiBQZXBCdXR0b25Db21wb25lbnRcbiAgICAgKi9cbiAgICBASW5wdXQoKSBpY29uTmFtZTogUGVwSWNvblR5cGU7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaWNvbiBwb3NpdGlvbi5cbiAgICAgKlxuICAgICAqIEB0eXBlIHsoJ3N0YXJ0JyB8ICdlbmQnKX1cbiAgICAgKiBAbWVtYmVyb2YgUGVwQnV0dG9uQ29tcG9uZW50XG4gICAgICovXG4gICAgQElucHV0KCkgaWNvblBvc2l0aW9uOiAnc3RhcnQnIHwgJ2VuZCcgPSAnZW5kJztcblxuICAgIHByaXZhdGUgX3Zpc2libGUgPSB0cnVlO1xuICAgIC8qKlxuICAgICAqIElmIHRoZSBidXR0b24gaXMgdmlzaWJsZSBvciBub3QuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgUGVwQnV0dG9uQ29tcG9uZW50XG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBzZXQgdmlzaWJsZSh2aXNpYmxlOiBib29sZWFuKSB7XG4gICAgICAgIGlmICh2aXNpYmxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3Zpc2libGUgPSAhIXZpc2libGU7XG4gICAgICAgICAgICBpZiAodmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3MoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAnaGlkZGVuLWVsZW1lbnQnXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyhcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICdoaWRkZW4tZWxlbWVudCdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGdldCB2aXNpYmxlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmlzaWJsZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYnV0dG9uIGNsaWNrIGV2ZW50LlxuICAgICAqXG4gICAgICogQHR5cGUge0V2ZW50RW1pdHRlcjxJUGVwQnV0dG9uQ2xpY2tFdmVudD59XG4gICAgICogQG1lbWJlcm9mIFBlcEJ1dHRvbkNvbXBvbmVudFxuICAgICAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGJ1dHRvbkNsaWNrOiBFdmVudEVtaXR0ZXI8SVBlcEJ1dHRvbkNsaWNrRXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcjxJUGVwQnV0dG9uQ2xpY2tFdmVudD4oKTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMiwgcHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmKSB7IH1cblxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgICAgICAvLyBpZiAodGhpcy5idXR0b25DbGljaykge1xuICAgICAgICAvLyAgICAgdGhpcy5idXR0b25DbGljay51bnN1YnNjcmliZSgpO1xuICAgICAgICAvLyB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJ1dHRvbiBjbGlja1xuICAgICAqL1xuICAgIG9uQnV0dG9uQ2xpY2tlZChldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgYnV0dG9uID0gbmV3IFBlcEJ1dHRvbih7XG4gICAgICAgICAgICBrZXk6IHRoaXMua2V5LFxuICAgICAgICAgICAgdmFsdWU6IHRoaXMudmFsdWUsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGJ1dHRvbkNsaWNrID0ge1xuICAgICAgICAgICAgc291cmNlOiBidXR0b24sXG4gICAgICAgICAgICBldmVudCxcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmJ1dHRvbkNsaWNrLmVtaXQoYnV0dG9uQ2xpY2spO1xuICAgIH1cbn1cbiJdfQ==