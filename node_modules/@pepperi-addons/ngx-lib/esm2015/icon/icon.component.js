import { ChangeDetectionStrategy, Component, ElementRef, Inject, Input, Optional, Renderer2, } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { PepUtilitiesService, PepColorService, } from '@pepperi-addons/ngx-lib';
import { PepIconRegistry } from './icon-registry.service';
export class PepIconComponent {
    constructor(renderer, element, utilitiesService, colorService, iconRegistry, document) {
        this.renderer = renderer;
        this.element = element;
        this.utilitiesService = utilitiesService;
        this.colorService = colorService;
        this.iconRegistry = iconRegistry;
        this.document = document;
        this._spin = false;
        this._fill = null;
    }
    /**
     * If icon spin
     *
     * @memberof PepIconComponent
     */
    set spin(value) {
        this._spin = value;
        this.setSpin();
    }
    /**
     * The icon name. look in (#ICON LIST)
     *
     * @type {PepIconType} See {@link PepIconType}
     * @memberof PepIconComponent
     */
    set name(iconName) {
        if (this.svgIcon) {
            this.element.nativeElement.removeChild(this.svgIcon);
        }
        const svgData = this.iconRegistry.getIcon(iconName);
        this.svgIcon = this.utilitiesService.getSvgElementFromString(this.document, svgData);
        if (this.svgIcon) {
            this.element.nativeElement.appendChild(this.svgIcon);
            this.renderer.addClass(this.svgIcon, 'svg-icon');
            this.setFill();
            this.setSpin();
        }
    }
    /**
     * The fill color of the icon like #cccccc
     *
     * @type {Color}
     * @memberof PepIconComponent
     */
    set fill(value) {
        this._fill = value;
        this.setFill();
    }
    /**
     * Set fill on the svg icon.
     *
     * @private
     * @memberof PepIconComponent
     */
    setFill() {
        if (this.svgIcon && this._fill) {
            const colorProperty = this.svgIcon.classList.contains('stroke')
                ? 'stroke'
                : 'fill';
            this.renderer.setStyle(this.svgIcon, colorProperty, this._fill);
        }
    }
    /**
     * Toggle  spin class by spin property.
     *
     * @private
     * @memberof PepIconComponent
     */
    setSpin() {
        if (this.svgIcon) {
            if (this._spin) {
                this.renderer.addClass(this.svgIcon, 'spin');
            }
            else {
                this.renderer.removeClass(this.svgIcon, 'spin');
            }
        }
    }
}
PepIconComponent.decorators = [
    { type: Component, args: [{
                selector: 'pep-icon',
                template: "<ng-content></ng-content>",
                // template: ` <ng-content></ng-content> `,
                // styles: [
                //     `
                //         :host {
                //             display: flex;
                //             align-items: center;
                //             justify-items: center;
                //             width: inherit;
                //             height: inherit;
                //             align-content: center;
                //             justify-content: center;
                //         }
                //         :host::ng-deep svg {
                //             width: inherit;
                //             height: inherit;
                //         }
                //         :host::ng-deep svg.spin {
                //             animation: rotation 2s infinite linear;
                //         }
                //         @keyframes rotation {
                //             from {
                //                 transform: rotate(0deg);
                //             }
                //             to {
                //                 transform: rotate(359deg);
                //             }
                //         }
                //     `,
                // ],
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{display:flex;align-items:center;justify-items:center;width:inherit;height:inherit;align-content:center;justify-content:center}:host::ng-deep svg{width:inherit;height:inherit}:host::ng-deep svg.spin{-webkit-animation:rotation 2s linear infinite;animation:rotation 2s linear infinite}@-webkit-keyframes rotation{0%{transform:rotate(0deg)}to{transform:rotate(359deg)}}@keyframes rotation{0%{transform:rotate(0deg)}to{transform:rotate(359deg)}}"]
            },] }
];
PepIconComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: PepUtilitiesService },
    { type: PepColorService },
    { type: PepIconRegistry },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }
];
PepIconComponent.propDecorators = {
    spin: [{ type: Input }],
    name: [{ type: Input }],
    fill: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,