import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatCommonModule } from '@angular/material/core';
import { MatButtonModule } from '@angular/material/button';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatIconModule } from '@angular/material/icon';
// import { PepNgxLibModule } from '@pepperi-addons/ngx-lib';
import { PepIconModule, PepIconRegistry, pepIconNumberCoins, pepIconNumberPercent, pepIconNumberNumber, pepIconNumberDecimal, pepIconSystemPhone, pepIconSystemEmail, pepIconSystemLink, pepIconSystemFullScreen, pepIconSystemEdit, pepIconTimeDatetime, pepIconTimeCal, } from '@pepperi-addons/ngx-lib/icon';
import { PepTextboxIconComponent } from './textbox-icon.component';
export class PepTextboxIconModule {
    constructor(pepIconRegistry) {
        this.pepIconRegistry = pepIconRegistry;
        this.pepIconRegistry.registerIcons([
            pepIconNumberCoins,
            pepIconNumberPercent,
            pepIconNumberNumber,
            pepIconNumberDecimal,
            pepIconSystemPhone,
            pepIconSystemEmail,
            pepIconSystemLink,
            pepIconSystemFullScreen,
            pepIconSystemEdit,
            pepIconTimeDatetime,
            pepIconTimeCal,
        ]);
    }
}
PepTextboxIconModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    // Material modules,
                    MatCommonModule,
                    MatButtonModule,
                    MatFormFieldModule,
                    MatIconModule,
                    // ngx-lib modules
                    PepIconModule,
                ],
                exports: [PepTextboxIconComponent],
                declarations: [PepTextboxIconComponent],
            },] }
];
PepTextboxIconModule.ctorParameters = () => [
    { type: PepIconRegistry }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dGJveC1pY29uLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1saWIvdGV4dGJveC1pY29uL3RleHRib3gtaWNvbi5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFdkQsNkRBQTZEO0FBQzdELE9BQU8sRUFDSCxhQUFhLEVBQ2IsZUFBZSxFQUNmLGtCQUFrQixFQUNsQixvQkFBb0IsRUFDcEIsbUJBQW1CLEVBQ25CLG9CQUFvQixFQUNwQixrQkFBa0IsRUFDbEIsa0JBQWtCLEVBQ2xCLGlCQUFpQixFQUNqQix1QkFBdUIsRUFDdkIsaUJBQWlCLEVBQ2pCLG1CQUFtQixFQUNuQixjQUFjLEdBQ2pCLE1BQU0sOEJBQThCLENBQUM7QUFFdEMsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFnQm5FLE1BQU0sT0FBTyxvQkFBb0I7SUFDN0IsWUFBb0IsZUFBZ0M7UUFBaEMsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBQ2hELElBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDO1lBQy9CLGtCQUFrQjtZQUNsQixvQkFBb0I7WUFDcEIsbUJBQW1CO1lBQ25CLG9CQUFvQjtZQUNwQixrQkFBa0I7WUFDbEIsa0JBQWtCO1lBQ2xCLGlCQUFpQjtZQUNqQix1QkFBdUI7WUFDdkIsaUJBQWlCO1lBQ2pCLG1CQUFtQjtZQUNuQixjQUFjO1NBQ2pCLENBQUMsQ0FBQztJQUNQLENBQUM7OztZQTdCSixRQUFRLFNBQUM7Z0JBQ04sT0FBTyxFQUFFO29CQUNMLFlBQVk7b0JBQ1osb0JBQW9CO29CQUNwQixlQUFlO29CQUNmLGVBQWU7b0JBQ2Ysa0JBQWtCO29CQUNsQixhQUFhO29CQUNiLGtCQUFrQjtvQkFDbEIsYUFBYTtpQkFDaEI7Z0JBQ0QsT0FBTyxFQUFFLENBQUMsdUJBQXVCLENBQUM7Z0JBQ2xDLFlBQVksRUFBRSxDQUFDLHVCQUF1QixDQUFDO2FBQzFDOzs7WUE3QkcsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBNYXRDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9jb3JlJztcbmltcG9ydCB7IE1hdEJ1dHRvbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2J1dHRvbic7XG5pbXBvcnQgeyBNYXRGb3JtRmllbGRNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9mb3JtLWZpZWxkJztcbmltcG9ydCB7IE1hdEljb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9pY29uJztcblxuLy8gaW1wb3J0IHsgUGVwTmd4TGliTW9kdWxlIH0gZnJvbSAnQHBlcHBlcmktYWRkb25zL25neC1saWInO1xuaW1wb3J0IHtcbiAgICBQZXBJY29uTW9kdWxlLFxuICAgIFBlcEljb25SZWdpc3RyeSxcbiAgICBwZXBJY29uTnVtYmVyQ29pbnMsXG4gICAgcGVwSWNvbk51bWJlclBlcmNlbnQsXG4gICAgcGVwSWNvbk51bWJlck51bWJlcixcbiAgICBwZXBJY29uTnVtYmVyRGVjaW1hbCxcbiAgICBwZXBJY29uU3lzdGVtUGhvbmUsXG4gICAgcGVwSWNvblN5c3RlbUVtYWlsLFxuICAgIHBlcEljb25TeXN0ZW1MaW5rLFxuICAgIHBlcEljb25TeXN0ZW1GdWxsU2NyZWVuLFxuICAgIHBlcEljb25TeXN0ZW1FZGl0LFxuICAgIHBlcEljb25UaW1lRGF0ZXRpbWUsXG4gICAgcGVwSWNvblRpbWVDYWwsXG59IGZyb20gJ0BwZXBwZXJpLWFkZG9ucy9uZ3gtbGliL2ljb24nO1xuXG5pbXBvcnQgeyBQZXBUZXh0Ym94SWNvbkNvbXBvbmVudCB9IGZyb20gJy4vdGV4dGJveC1pY29uLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gICAgaW1wb3J0czogW1xuICAgICAgICBDb21tb25Nb2R1bGUsXG4gICAgICAgIC8vIE1hdGVyaWFsIG1vZHVsZXMsXG4gICAgICAgIE1hdENvbW1vbk1vZHVsZSxcbiAgICAgICAgTWF0QnV0dG9uTW9kdWxlLFxuICAgICAgICBNYXRGb3JtRmllbGRNb2R1bGUsXG4gICAgICAgIE1hdEljb25Nb2R1bGUsXG4gICAgICAgIC8vIG5neC1saWIgbW9kdWxlc1xuICAgICAgICBQZXBJY29uTW9kdWxlLFxuICAgIF0sXG4gICAgZXhwb3J0czogW1BlcFRleHRib3hJY29uQ29tcG9uZW50XSxcbiAgICBkZWNsYXJhdGlvbnM6IFtQZXBUZXh0Ym94SWNvbkNvbXBvbmVudF0sXG59KVxuZXhwb3J0IGNsYXNzIFBlcFRleHRib3hJY29uTW9kdWxlIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBlcEljb25SZWdpc3RyeTogUGVwSWNvblJlZ2lzdHJ5KSB7XG4gICAgICAgIHRoaXMucGVwSWNvblJlZ2lzdHJ5LnJlZ2lzdGVySWNvbnMoW1xuICAgICAgICAgICAgcGVwSWNvbk51bWJlckNvaW5zLFxuICAgICAgICAgICAgcGVwSWNvbk51bWJlclBlcmNlbnQsXG4gICAgICAgICAgICBwZXBJY29uTnVtYmVyTnVtYmVyLFxuICAgICAgICAgICAgcGVwSWNvbk51bWJlckRlY2ltYWwsXG4gICAgICAgICAgICBwZXBJY29uU3lzdGVtUGhvbmUsXG4gICAgICAgICAgICBwZXBJY29uU3lzdGVtRW1haWwsXG4gICAgICAgICAgICBwZXBJY29uU3lzdGVtTGluayxcbiAgICAgICAgICAgIHBlcEljb25TeXN0ZW1GdWxsU2NyZWVuLFxuICAgICAgICAgICAgcGVwSWNvblN5c3RlbUVkaXQsXG4gICAgICAgICAgICBwZXBJY29uVGltZURhdGV0aW1lLFxuICAgICAgICAgICAgcGVwSWNvblRpbWVDYWwsXG4gICAgICAgIF0pO1xuICAgIH1cbn1cbiJdfQ==