import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ElementRef, Renderer2, } from '@angular/core';
import { PepFileService, PepCustomizationService, DEFAULT_HORIZONTAL_ALIGNMENT, PepAttachmentField, } from '@pepperi-addons/ngx-lib';
export class PepAttachmentComponent {
    constructor(customizationService, renderer, element, fileService) {
        this.customizationService = customizationService;
        this.renderer = renderer;
        this.element = element;
        this.fileService = fileService;
        /**
         * The attachment key.
         *
         * @memberof PepAttachmentComponent
         */
        this.key = '';
        this._src = '';
        /**
         * The title of the attachment.
         *
         * @memberof PepAttachmentComponent
         */
        this.label = '';
        /**
         * If the attachment is mandatory
         *
         * @memberof PepAttachmentComponent
         */
        this.mandatory = false;
        /**
         * If the attachment is disabled
         *
         * @memberof PepAttachmentComponent
         */
        this.disabled = false;
        /**
         * If the attachment is readonly
         *
         * @memberof PepAttachmentComponent
         */
        this.readonly = false;
        /**
         * The horizontal alignment of the attachment
         *
         * @type {PepHorizontalAlignment}
         * @memberof PepAttachmentComponent
         */
        this.xAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;
        this._rowSpan = 1;
        this._visible = true;
        this.controlType = 'attachment';
        this.form = null;
        this.showTitle = true;
        this._layoutType = 'form';
        this.isActive = false;
        this.fileChange = new EventEmitter();
        this.elementClick = new EventEmitter();
        this.fieldHeight = '';
        this.standAlone = false;
        this.dataURI = null;
        this.acceptAttachmentType = 'application/pdf,application/json,text/csv,text/csv-schema,application/msword,application/vnd.ms-excel,text/plain,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/vnd.openxmlformats-officedocument.wordprocessingml.document,image/bmp,image/jpg, image/jpeg, image/png, image/tif, image/tiff, txt, json';
    }
    /**
     * The src of the attachment.
     *
     * @memberof PepAttachmentComponent
     */
    set src(value) {
        if (!value) {
            value = '';
        }
        this._src = value;
        if (this._src.length > 0) {
            // Empty dataURI.
            this.dataURI = null;
        }
    }
    get src() {
        return this._src;
    }
    set rowSpan(value) {
        this._rowSpan = value;
        this.setFieldHeight();
    }
    get rowSpan() {
        return this._rowSpan;
    }
    set visible(visible) {
        this._visible = visible;
        if (visible) {
            this.renderer.removeClass(this.element.nativeElement, 'hidden-element');
        }
        else {
            this.renderer.addClass(this.element.nativeElement, 'hidden-element');
        }
    }
    get visible() {
        return this._visible;
    }
    set layoutType(value) {
        this._layoutType = value;
        this.setFieldHeight();
    }
    get layoutType() {
        return this._layoutType;
    }
    setFieldHeight() {
        this.fieldHeight = this.customizationService.calculateFieldHeight(this.layoutType, this.rowSpan, this.standAlone);
    }
    setDefaultForm() {
        const pepField = new PepAttachmentField({
            key: this.key,
            value: this.src,
            mandatory: this.mandatory,
            readonly: this.readonly,
            disabled: this.disabled,
        });
        this.form = this.customizationService.getDefaultFromGroup(pepField);
    }
    ngOnDestroy() {
        //
    }
    ngOnInit() {
        if (this.form === null) {
            this.standAlone = true;
            this.setFieldHeight();
            this.setDefaultForm();
            this.renderer.addClass(this.element.nativeElement, PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME);
        }
    }
    ngOnChanges(changes) {
        if (this.standAlone) {
            this.setDefaultForm();
        }
        // Moved to src input
        // if (changes.src && changes.src.currentValue.length > 0) {
        //     // Empty dataURI if there is change in the src.
        //     this.dataURI = null;
        // }
    }
    onFileChanged(fileData) {
        // const tmp = value.length > 0 ? JSON.parse(value) : null;
        // set this.dataURI after this.src cause it initialize in the src setter.
        this.src = fileData ? fileData.fileStr : '';
        this.dataURI = fileData;
        this.customizationService.updateFormFieldValue(this.form, this.key, this.dataURI ? this.dataURI.fileExt : '');
        // this.valueChange.emit({
        //     key: this.key,
        //     value,
        // });
        this.fileChange.emit(fileData);
        // this.fileChange.emit(value.length > 0 ? JSON.parse(value) : value);
    }
    onFileClicked(event) {
        if (this.dataURI != null) {
            const fileStrArr = this.dataURI.fileStr.split(';');
            if (fileStrArr.length === 2) {
                const win = window.open('', '_blank');
                const contentType = fileStrArr[0].split(':')[1];
                const base64 = fileStrArr[1].split(',')[1];
                const blob = this.fileService.convertFromb64toBlob(base64, contentType);
                const url = URL.createObjectURL(blob);
                win.location.href = url;
            }
        }
        else {
            if (this.fileService.isValidUrl(this.src)) {
                const win = window.open('', '_blank');
                win.location.href = this.src;
            }
        }
        this.elementClick.emit(event);
    }
}
PepAttachmentComponent.decorators = [
    { type: Component, args: [{
                selector: 'pep-attachment',
                template: "<ng-template #pepTemplate>\n    <pep-files-uploader [key]=\"key\" [src]=\"src\" [label]=\"label\" [mandatory]=\"mandatory\" [disabled]=\"disabled\"\n        [xAlignment]=\"xAlignment\" [rowSpan]=\"rowSpan\" [fieldHeight]=\"fieldHeight\" [controlType]=\"controlType\"\n        [form]=\"form\" [layoutType]=\"layoutType\" [standAlone]=\"standAlone\" (fileChange)=\"onFileChanged($event)\"\n        (elementClick)=\"onFileClicked($event)\" [acceptedExtensions]=\"acceptAttachmentType\">\n    </pep-files-uploader>\n</ng-template>\n\n<ng-template #pepReadonlyTemplate>\n    <ng-container *ngIf=\"src?.length > 0; then notEmptyBlock; else emptyBlock\"></ng-container>\n    <ng-template #notEmptyBlock>\n        <div class=\"pep-file-container\">\n            <a [id]=\"key\" class=\"color-link body-sm pep-card-input \" *ngIf=\"src != null\" title=\"{{ src }}\"\n                target=\"_blank\" href=\"{{ src }}\">{{ src }}</a>\n        </div>\n    </ng-template>\n    <ng-template #emptyBlock>\n        <span>&nbsp;</span>\n    </ng-template>\n</ng-template>\n\n<ng-container *ngIf=\"layoutType === 'form'\">\n    <div class=\"pep-file-container\" [ngClass]=\"{ 'one-row': rowSpan == 1, 'stand-alone': standAlone }\">\n        <pep-field-title [label]=\"label\" [mandatory]=\"mandatory\" [disabled]=\"disabled\" [xAlignment]=\"xAlignment\"\n            [showTitle]=\"showTitle\">\n        </pep-field-title>\n        <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n    </div>\n</ng-container>\n\n<ng-container *ngIf=\"layoutType === 'card'\">\n    <ng-container *ngIf=\"false && isActive && !disabled; then selectedBlock; else notSelectedBlock\"></ng-container>\n    <ng-template #selectedBlock>\n        <div class=\"pep-file-container\" [ngClass]=\"{ 'one-row': rowSpan == 1, 'stand-alone': standAlone}\">\n            <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n        </div>\n    </ng-template>\n    <ng-template #notSelectedBlock>\n        <ng-container *ngTemplateOutlet=\"pepReadonlyTemplate\"></ng-container>\n    </ng-template>\n</ng-container>\n\n\n<ng-container *ngIf=\"layoutType === 'table'\">\n    <ng-container *ngIf=\"false && isActive && !disabled; then selectedBlock; else notSelectedBlock\"></ng-container>\n    <ng-template #selectedBlock>\n        <div class=\"pep-file-container one-row\">\n            <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n        </div>\n    </ng-template>\n    <ng-template #notSelectedBlock>\n        <ng-container *ngTemplateOutlet=\"pepReadonlyTemplate\"></ng-container>\n    </ng-template>\n</ng-container>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{display:block}"]
            },] }
];
PepAttachmentComponent.ctorParameters = () => [
    { type: PepCustomizationService },
    { type: Renderer2 },
    { type: ElementRef },
    { type: PepFileService }
];
PepAttachmentComponent.propDecorators = {
    key: [{ type: Input }],
    src: [{ type: Input }],
    label: [{ type: Input }],
    mandatory: [{ type: Input }],
    disabled: [{ type: Input }],
    readonly: [{ type: Input }],
    xAlignment: [{ type: Input }],
    rowSpan: [{ type: Input }],
    visible: [{ type: Input }],
    form: [{ type: Input }],
    showTitle: [{ type: Input }],
    layoutType: [{ type: Input }],
    isActive: [{ type: Input }],
    fileChange: [{ type: Output }],
    elementClick: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,