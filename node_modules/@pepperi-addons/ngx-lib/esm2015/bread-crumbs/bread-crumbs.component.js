import { Component, Input, Injectable, Output, EventEmitter, } from '@angular/core';
import { PepLayoutService, PepScreenSizeType } from '@pepperi-addons/ngx-lib';
import { pepIconArrowLeft, pepIconArrowRight, } from '@pepperi-addons/ngx-lib/icon';
export class PepBreadCrumbsComponent {
    constructor(layoutService) {
        this.layoutService = layoutService;
        this._items = [];
        this._displayType = 'label';
        this.addSpacing = false;
        this.itemClick = new EventEmitter();
        this.charSeparator = ' / ';
        this.iconSeparator = pepIconArrowRight.name;
        this.shrinkItems = false;
    }
    set items(value) {
        this._items = value;
        this.setupShrinkItems();
    }
    get items() {
        return this._items;
    }
    set displayType(value) {
        this._displayType = value;
        this.setupShrinkItems();
    }
    get displayType() {
        return this._displayType;
    }
    ngOnInit() {
        this.layoutService.onResize$.pipe().subscribe((size) => {
            this.screenSize = size;
            this.setupShrinkItems();
        });
        if (this.layoutService.isRtl()) {
            this.charSeparator = ' \\ ';
            this.iconSeparator = pepIconArrowLeft.name;
        }
    }
    setupShrinkItems() {
        if (this.displayType === 'items' && this.items.length > 1) {
            this.shrinkItems = this.screenSize > PepScreenSizeType.SM;
        }
    }
    getLabelTitle() {
        let labelTitle = '';
        if (this.items && this.items.length > 0) {
            for (let index = 0; index < this.items.length; index++) {
                if (index < this.items.length - 1) {
                    if (index > 0) {
                        labelTitle += this.charSeparator;
                    }
                    labelTitle += this.items[index].text;
                }
            }
        }
        return labelTitle;
    }
    onBreadCrumbItemClick(item) {
        this.itemClick.emit({ source: item });
    }
}
PepBreadCrumbsComponent.decorators = [
    { type: Component, args: [{
                selector: 'pep-bread-crumbs',
                template: "<ng-container *ngIf=\"displayType === 'label'; then labelTemplate; else itemsTemplate\">\n</ng-container>\n<ng-template #labelTemplate>\n    <div *ngIf=\"items?.length > 0\" class=\"bread-crumbs-label ellipsis\" [ngClass]=\"{ 'pep-spacing-element': addSpacing }\"\n        [title]=\"getLabelTitle()\">\n        <div class=\"body-xs ellipsis\">\n            <ng-container *ngFor=\"let item of items; let isFirst = first; let isLast = last\">\n                <span *ngIf=\"!isFirst && !isLast\">&nbsp;{{ charSeparator }}&nbsp;</span>\n                <span *ngIf=\"!isLast\">{{ item.text }}</span>\n            </ng-container>\n        </div>\n        <div class=\" title-md ellipsis current\" title=\"{{ items[items.length - 1]?.text }}\">\n            <span>{{ items[items.length - 1]?.text }}</span>\n        </div>\n    </div>\n</ng-template>\n\n<ng-template #itemsTemplate>\n    <ul *ngIf=\"items?.length > 0\" class=\"bread-crumbs-items body-sm ellipsis\">\n        <ng-container *ngIf=\"shrinkItems; then shrinkTemplate; else regularTemplate\">\n        </ng-container>\n\n        <ng-template #shrinkTemplate>\n            <li>\n                <a class=\"color-link\" [matMenuTriggerFor]=\"menu\" href=\"javascript:void(0)\">...</a>\n                <mat-menu #menu=\"matMenu\">\n                    <ng-container *ngFor=\"let menuItem of items; let isLast = last\">\n                        <button mat-menu-item *ngIf=\"!isLast\" (click)=\"onBreadCrumbItemClick(menuItem)\"\n                            [title]=\"menuItem.title || menuItem.text\" [disabled]=\"menuItem.disabled\"\n                            [ngClass]=\"{ disabled: menuItem.disabled }\">\n                            <span>\n                                {{ menuItem.text }}\n                            </span>\n                        </button>\n                    </ng-container>\n                </mat-menu>\n            </li>\n            <li>\n                <mat-icon class=\"seperator pep-spacing-element\">\n                    <pep-icon [name]=\"iconSeparator\">\n                    </pep-icon>\n                </mat-icon>\n            </li>\n            <li>\n                <span [title]=\"items[items.length - 1]?.title || items[items.length - 1]?.text\">\n                    {{ items[items.length - 1]?.text }}\n                </span>\n            </li>\n        </ng-template>\n        <ng-template #regularTemplate>\n            <ng-container *ngFor=\"let item of items; let isFirst = first; let isLast = last\">\n                <li>\n                    <a *ngIf=\"!item.disabled\" [title]=\"item.title || item.text\" href=\"javascript:void(0)\"\n                        class=\" color-link\" (click)=\"onBreadCrumbItemClick(item)\">{{ item.text }}</a>\n                    <span *ngIf=\"item.disabled\" [title]=\"item.title || item.text\">{{ item.text }}</span>\n                </li>\n                <li *ngIf=\"!isLast\">\n                    <mat-icon class=\"seperator pep-spacing-element\">\n                        <pep-icon [name]=\"iconSeparator\">\n                        </pep-icon>\n                    </mat-icon>\n                </li>\n            </ng-container>\n        </ng-template>\n    </ul>\n</ng-template>",
                styles: [":host{display:grid}.bread-crumbs-label{height:calc(.5rem + 2.5rem);height:calc(var(--pep-top-bar-spacing-bottom, .5rem) + var(--pep-top-bar-field-height, 2.5rem));display:flex;flex-flow:wrap;align-items:center}ul.bread-crumbs-items{padding:0;margin:0;list-style-type:none;display:flex;align-items:center}ul.bread-crumbs-items li{display:inline-flex}ul.bread-crumbs-items li .seperator{height:1rem;width:1rem}ul.bread-crumbs-items li a{text-decoration:unset}"]
            },] },
    { type: Injectable }
];
PepBreadCrumbsComponent.ctorParameters = () => [
    { type: PepLayoutService }
];
PepBreadCrumbsComponent.propDecorators = {
    items: [{ type: Input }],
    displayType: [{ type: Input }],
    addSpacing: [{ type: Input }],
    itemClick: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWQtY3J1bWJzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1saWIvYnJlYWQtY3J1bWJzL2JyZWFkLWNydW1icy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILFNBQVMsRUFDVCxLQUFLLEVBRUwsVUFBVSxFQUNWLE1BQU0sRUFDTixZQUFZLEdBQ2YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFNOUUsT0FBTyxFQUNILGdCQUFnQixFQUNoQixpQkFBaUIsR0FDcEIsTUFBTSw4QkFBOEIsQ0FBQztBQU90QyxNQUFNLE9BQU8sdUJBQXVCO0lBK0JoQyxZQUFvQixhQUErQjtRQUEvQixrQkFBYSxHQUFiLGFBQWEsQ0FBa0I7UUE5QjNDLFdBQU0sR0FBNkIsRUFBRSxDQUFDO1FBVXRDLGlCQUFZLEdBQThCLE9BQU8sQ0FBQztRQVVqRCxlQUFVLEdBQUcsS0FBSyxDQUFDO1FBRzVCLGNBQVMsR0FBK0MsSUFBSSxZQUFZLEVBQWdDLENBQUM7UUFFekcsa0JBQWEsR0FBRyxLQUFLLENBQUM7UUFDdEIsa0JBQWEsR0FBVyxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7UUFDL0MsZ0JBQVcsR0FBRyxLQUFLLENBQUM7SUFHbUMsQ0FBQztJQTdCeEQsSUFDSSxLQUFLLENBQUMsS0FBK0I7UUFDckMsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUNELElBQUksS0FBSztRQUNMLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBR0QsSUFDSSxXQUFXLENBQUMsS0FBZ0M7UUFDNUMsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7UUFDMUIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUNELElBQUksV0FBVztRQUNYLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUM3QixDQUFDO0lBY0QsUUFBUTtRQUNKLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ25ELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQzVCLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQzVCLElBQUksQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDO1lBQzVCLElBQUksQ0FBQyxhQUFhLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDO1NBQzlDO0lBQ0wsQ0FBQztJQUVPLGdCQUFnQjtRQUNwQixJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssT0FBTyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN2RCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxVQUFVLEdBQUcsaUJBQWlCLENBQUMsRUFBRSxDQUFDO1NBQzdEO0lBQ0wsQ0FBQztJQUVELGFBQWE7UUFDVCxJQUFJLFVBQVUsR0FBRyxFQUFFLENBQUM7UUFFcEIsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNyQyxLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUU7Z0JBQ3BELElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtvQkFDL0IsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO3dCQUNYLFVBQVUsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDO3FCQUNwQztvQkFFRCxVQUFVLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUM7aUJBQ3hDO2FBQ0o7U0FDSjtRQUVELE9BQU8sVUFBVSxDQUFDO0lBQ3RCLENBQUM7SUFFRCxxQkFBcUIsQ0FBQyxJQUF1QjtRQUN6QyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzFDLENBQUM7OztZQTdFSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGtCQUFrQjtnQkFDNUIsZ3JHQUE0Qzs7YUFFL0M7WUFDQSxVQUFVOzs7WUFmRixnQkFBZ0I7OztvQkFrQnBCLEtBQUs7MEJBVUwsS0FBSzt5QkFTTCxLQUFLO3dCQUVMLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENvbXBvbmVudCxcbiAgICBJbnB1dCxcbiAgICBPbkluaXQsXG4gICAgSW5qZWN0YWJsZSxcbiAgICBPdXRwdXQsXG4gICAgRXZlbnRFbWl0dGVyLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBlcExheW91dFNlcnZpY2UsIFBlcFNjcmVlblNpemVUeXBlIH0gZnJvbSAnQHBlcHBlcmktYWRkb25zL25neC1saWInO1xuaW1wb3J0IHtcbiAgICBJUGVwQnJlYWRDcnVtYkl0ZW1DbGlja0V2ZW50LFxuICAgIFBlcEJyZWFkQ3J1bWJJdGVtLFxuICAgIFBlcEJyZWFkQ3J1bWJzRGlzcGxheVR5cGUsXG59IGZyb20gJy4vYnJlYWQtY3J1bWJzLm1vZGVsJztcbmltcG9ydCB7XG4gICAgcGVwSWNvbkFycm93TGVmdCxcbiAgICBwZXBJY29uQXJyb3dSaWdodCxcbn0gZnJvbSAnQHBlcHBlcmktYWRkb25zL25neC1saWIvaWNvbic7XG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3BlcC1icmVhZC1jcnVtYnMnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9icmVhZC1jcnVtYnMuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2JyZWFkLWNydW1icy5jb21wb25lbnQuc2NzcyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQZXBCcmVhZENydW1ic0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgcHJpdmF0ZSBfaXRlbXM6IEFycmF5PFBlcEJyZWFkQ3J1bWJJdGVtPiA9IFtdO1xuICAgIEBJbnB1dCgpXG4gICAgc2V0IGl0ZW1zKHZhbHVlOiBBcnJheTxQZXBCcmVhZENydW1iSXRlbT4pIHtcbiAgICAgICAgdGhpcy5faXRlbXMgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5zZXR1cFNocmlua0l0ZW1zKCk7XG4gICAgfVxuICAgIGdldCBpdGVtcygpOiBBcnJheTxQZXBCcmVhZENydW1iSXRlbT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5faXRlbXM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfZGlzcGxheVR5cGU6IFBlcEJyZWFkQ3J1bWJzRGlzcGxheVR5cGUgPSAnbGFiZWwnO1xuICAgIEBJbnB1dCgpXG4gICAgc2V0IGRpc3BsYXlUeXBlKHZhbHVlOiBQZXBCcmVhZENydW1ic0Rpc3BsYXlUeXBlKSB7XG4gICAgICAgIHRoaXMuX2Rpc3BsYXlUeXBlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuc2V0dXBTaHJpbmtJdGVtcygpO1xuICAgIH1cbiAgICBnZXQgZGlzcGxheVR5cGUoKTogUGVwQnJlYWRDcnVtYnNEaXNwbGF5VHlwZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kaXNwbGF5VHlwZTtcbiAgICB9XG5cbiAgICBASW5wdXQoKSBhZGRTcGFjaW5nID0gZmFsc2U7XG5cbiAgICBAT3V0cHV0KClcbiAgICBpdGVtQ2xpY2s6IEV2ZW50RW1pdHRlcjxJUGVwQnJlYWRDcnVtYkl0ZW1DbGlja0V2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXI8SVBlcEJyZWFkQ3J1bWJJdGVtQ2xpY2tFdmVudD4oKTtcblxuICAgIGNoYXJTZXBhcmF0b3IgPSAnIC8gJztcbiAgICBpY29uU2VwYXJhdG9yOiBzdHJpbmcgPSBwZXBJY29uQXJyb3dSaWdodC5uYW1lO1xuICAgIHNocmlua0l0ZW1zID0gZmFsc2U7XG4gICAgc2NyZWVuU2l6ZTogUGVwU2NyZWVuU2l6ZVR5cGU7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxheW91dFNlcnZpY2U6IFBlcExheW91dFNlcnZpY2UpIHsgfVxuXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMubGF5b3V0U2VydmljZS5vblJlc2l6ZSQucGlwZSgpLnN1YnNjcmliZSgoc2l6ZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zY3JlZW5TaXplID0gc2l6ZTtcbiAgICAgICAgICAgIHRoaXMuc2V0dXBTaHJpbmtJdGVtcygpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodGhpcy5sYXlvdXRTZXJ2aWNlLmlzUnRsKCkpIHtcbiAgICAgICAgICAgIHRoaXMuY2hhclNlcGFyYXRvciA9ICcgXFxcXCAnO1xuICAgICAgICAgICAgdGhpcy5pY29uU2VwYXJhdG9yID0gcGVwSWNvbkFycm93TGVmdC5uYW1lO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXR1cFNocmlua0l0ZW1zKCkge1xuICAgICAgICBpZiAodGhpcy5kaXNwbGF5VHlwZSA9PT0gJ2l0ZW1zJyAmJiB0aGlzLml0ZW1zLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHRoaXMuc2hyaW5rSXRlbXMgPSB0aGlzLnNjcmVlblNpemUgPiBQZXBTY3JlZW5TaXplVHlwZS5TTTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldExhYmVsVGl0bGUoKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IGxhYmVsVGl0bGUgPSAnJztcblxuICAgICAgICBpZiAodGhpcy5pdGVtcyAmJiB0aGlzLml0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLml0ZW1zLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA8IHRoaXMuaXRlbXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbFRpdGxlICs9IHRoaXMuY2hhclNlcGFyYXRvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsVGl0bGUgKz0gdGhpcy5pdGVtc1tpbmRleF0udGV4dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbGFiZWxUaXRsZTtcbiAgICB9XG5cbiAgICBvbkJyZWFkQ3J1bWJJdGVtQ2xpY2soaXRlbTogUGVwQnJlYWRDcnVtYkl0ZW0pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pdGVtQ2xpY2suZW1pdCh7IHNvdXJjZTogaXRlbSB9KTtcbiAgICB9XG59XG4iXX0=