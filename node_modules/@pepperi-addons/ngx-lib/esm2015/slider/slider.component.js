import { Component, Input, Output, EventEmitter, Renderer2, ElementRef, } from '@angular/core';
import { PepLayoutService, DEFAULT_HORIZONTAL_ALIGNMENT } from '@pepperi-addons/ngx-lib';
/**
 * This is a slider component that support pepperi theme
 * style & state & sizes
 *
 * @export
 * @class PepSliderComponent
 * @implements {OnDestroy}
 */
export class PepSliderComponent {
    constructor(renderer, element, pepLayoutService) {
        this.renderer = renderer;
        this.element = element;
        this.pepLayoutService = pepLayoutService;
        this.label = '';
        this.disabled = false;
        this.hint = '';
        this.background = '';
        this.step = 1;
        this.minValue = NaN;
        this.maxValue = NaN;
        this._value = null;
        this.valueChange = new EventEmitter();
        this.xAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;
    }
    set value(value) {
        if (!value) {
            value = '';
        }
        this._value = value;
    }
    get value() {
        return this._value;
    }
    ngOnInit() {
        this.xAlignment = this.pepLayoutService.isRtl() ? 'right' : 'left';
        // Get the wrapper for set the background.
        const sliderWrapper = this.element.nativeElement.querySelector('.mat-slider-wrapper');
        if (sliderWrapper) {
            this.renderer.setStyle(sliderWrapper, 'background', this.background.length > 0 ? this.background : '#ccc');
        }
    }
    onValueChange(event) {
        this.valueChange.emit(event.value);
    }
}
PepSliderComponent.decorators = [
    { type: Component, args: [{
                selector: 'pep-slider',
                template: "<div class=\"pep-slider-container\">\n    <pep-field-title [label]=\"label\" [disabled]=\"disabled\" [hint]=\"hint\" [xAlignment]=\"xAlignment\">\n    </pep-field-title>\n    <mat-slider [min]=\"minValue\" [max]=\"maxValue\" [step]=\"step\" [value]=\"value\" [disabled]=\"disabled\"\n        (change)=\"onValueChange($event)\">\n    </mat-slider>\n</div>",
                styles: [""]
            },] }
];
PepSliderComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: PepLayoutService }
];
PepSliderComponent.propDecorators = {
    label: [{ type: Input }],
    disabled: [{ type: Input }],
    hint: [{ type: Input }],
    background: [{ type: Input }],
    step: [{ type: Input }],
    minValue: [{ type: Input }],
    maxValue: [{ type: Input }],
    value: [{ type: Input }],
    valueChange: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1saWIvc2xpZGVyL3NsaWRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILFNBQVMsRUFFVCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFDWixTQUFTLEVBQ1QsVUFBVSxHQUdiLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSw0QkFBNEIsRUFBMEIsTUFBTSx5QkFBeUIsQ0FBQztBQUVqSDs7Ozs7OztHQU9HO0FBTUgsTUFBTSxPQUFPLGtCQUFrQjtJQTJCM0IsWUFBb0IsUUFBbUIsRUFBVSxPQUFtQixFQUFVLGdCQUFrQztRQUE1RixhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQVUsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUFVLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUExQnZHLFVBQUssR0FBRyxFQUFFLENBQUM7UUFDWCxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ2pCLFNBQUksR0FBRyxFQUFFLENBQUM7UUFDVixlQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLFNBQUksR0FBVyxDQUFDLENBQUM7UUFDakIsYUFBUSxHQUFHLEdBQUcsQ0FBQztRQUNmLGFBQVEsR0FBRyxHQUFHLENBQUM7UUFFaEIsV0FBTSxHQUFHLElBQUksQ0FBQztRQWN0QixnQkFBVyxHQUF5QixJQUFJLFlBQVksRUFBVSxDQUFDO1FBRS9ELGVBQVUsR0FBMkIsNEJBQTRCLENBQUM7SUFFa0QsQ0FBQztJQWpCckgsSUFDSSxLQUFLLENBQUMsS0FBYTtRQUNuQixJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1IsS0FBSyxHQUFHLEVBQUUsQ0FBQztTQUNkO1FBRUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDeEIsQ0FBQztJQUNELElBQUksS0FBSztRQUNMLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBU0QsUUFBUTtRQUNKLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUVuRSwwQ0FBMEM7UUFDMUMsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDdEYsSUFBSSxhQUFhLEVBQUU7WUFDZixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDOUc7SUFDTCxDQUFDO0lBRUQsYUFBYSxDQUFDLEtBQUs7UUFDZixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkMsQ0FBQzs7O1lBOUNKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsWUFBWTtnQkFDdEIsOFdBQXNDOzthQUV6Qzs7O1lBbkJHLFNBQVM7WUFDVCxVQUFVO1lBSUwsZ0JBQWdCOzs7b0JBZ0JwQixLQUFLO3VCQUNMLEtBQUs7bUJBQ0wsS0FBSzt5QkFDTCxLQUFLO21CQUNMLEtBQUs7dUJBQ0wsS0FBSzt1QkFDTCxLQUFLO29CQUdMLEtBQUs7MEJBWUwsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ29tcG9uZW50LFxuICAgIE9uRGVzdHJveSxcbiAgICBJbnB1dCxcbiAgICBPdXRwdXQsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIFJlbmRlcmVyMixcbiAgICBFbGVtZW50UmVmLFxuICAgIE9uSW5pdCxcbiAgICBWaWV3Q2hpbGQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGVwTGF5b3V0U2VydmljZSwgREVGQVVMVF9IT1JJWk9OVEFMX0FMSUdOTUVOVCwgUGVwSG9yaXpvbnRhbEFsaWdubWVudCB9IGZyb20gJ0BwZXBwZXJpLWFkZG9ucy9uZ3gtbGliJztcblxuLyoqXG4gKiBUaGlzIGlzIGEgc2xpZGVyIGNvbXBvbmVudCB0aGF0IHN1cHBvcnQgcGVwcGVyaSB0aGVtZVxuICogc3R5bGUgJiBzdGF0ZSAmIHNpemVzXG4gKlxuICogQGV4cG9ydFxuICogQGNsYXNzIFBlcFNsaWRlckNvbXBvbmVudFxuICogQGltcGxlbWVudHMge09uRGVzdHJveX1cbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdwZXAtc2xpZGVyJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vc2xpZGVyLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9zbGlkZXIuY29tcG9uZW50LnNjc3MnXSxcbn0pXG5leHBvcnQgY2xhc3MgUGVwU2xpZGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBASW5wdXQoKSBsYWJlbCA9ICcnO1xuICAgIEBJbnB1dCgpIGRpc2FibGVkID0gZmFsc2U7XG4gICAgQElucHV0KCkgaGludCA9ICcnO1xuICAgIEBJbnB1dCgpIGJhY2tncm91bmQgPSAnJztcbiAgICBASW5wdXQoKSBzdGVwOiBudW1iZXIgPSAxO1xuICAgIEBJbnB1dCgpIG1pblZhbHVlID0gTmFOO1xuICAgIEBJbnB1dCgpIG1heFZhbHVlID0gTmFOO1xuXG4gICAgcHJpdmF0ZSBfdmFsdWUgPSBudWxsO1xuICAgIEBJbnB1dCgpXG4gICAgc2V0IHZhbHVlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgdmFsdWUgPSAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCB2YWx1ZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gICAgfVxuXG4gICAgQE91dHB1dCgpXG4gICAgdmFsdWVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxzdHJpbmc+ID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG5cbiAgICB4QWxpZ25tZW50OiBQZXBIb3Jpem9udGFsQWxpZ25tZW50ID0gREVGQVVMVF9IT1JJWk9OVEFMX0FMSUdOTUVOVDtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMiwgcHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLCBwcml2YXRlIHBlcExheW91dFNlcnZpY2U6IFBlcExheW91dFNlcnZpY2UpIHsgfVxuXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMueEFsaWdubWVudCA9IHRoaXMucGVwTGF5b3V0U2VydmljZS5pc1J0bCgpID8gJ3JpZ2h0JyA6ICdsZWZ0JztcblxuICAgICAgICAvLyBHZXQgdGhlIHdyYXBwZXIgZm9yIHNldCB0aGUgYmFja2dyb3VuZC5cbiAgICAgICAgY29uc3Qgc2xpZGVyV3JhcHBlciA9IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tYXQtc2xpZGVyLXdyYXBwZXInKTtcbiAgICAgICAgaWYgKHNsaWRlcldyYXBwZXIpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUoc2xpZGVyV3JhcHBlciwgJ2JhY2tncm91bmQnLCB0aGlzLmJhY2tncm91bmQubGVuZ3RoID4gMCA/IHRoaXMuYmFja2dyb3VuZCA6ICcjY2NjJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvblZhbHVlQ2hhbmdlKGV2ZW50KSB7XG4gICAgICAgIHRoaXMudmFsdWVDaGFuZ2UuZW1pdChldmVudC52YWx1ZSk7XG4gICAgfVxufVxuIl19