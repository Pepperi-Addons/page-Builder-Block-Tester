import { Directive, ElementRef, HostListener, Input, } from '@angular/core';
import { PepValidatorService } from '@pepperi-addons/ngx-lib';
export class PepQuantitySelectorValidationDirective {
    constructor(hostElement, validatorService) {
        this.hostElement = hostElement;
        this.validatorService = validatorService;
        this.previousValue = '';
    }
    ngOnInit() {
        //
    }
    onChange(e) {
        this.validateValue(this.hostElement.nativeElement.value);
    }
    onKeyDown(e) {
        const originalValue = e.target['value'];
        // save value before keydown event
        this.previousValue = originalValue;
        const isNumber = this.validatorService.isNumber(e, this.allowDecimal);
        if (isNumber)
            return;
        else
            e.preventDefault();
    }
    validateValue(value) {
        const newValue = this.validatorService.validateNumber(value, this.allowDecimal);
        this.hostElement.nativeElement['value'] = newValue ? newValue : 0;
    }
}
PepQuantitySelectorValidationDirective.decorators = [
    { type: Directive, args: [{
                selector: '[pepQsValidation]',
            },] }
];
PepQuantitySelectorValidationDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: PepValidatorService }
];
PepQuantitySelectorValidationDirective.propDecorators = {
    allowDecimal: [{ type: Input }],
    onChange: [{ type: HostListener, args: ['change', ['$event'],] }],
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVhbnRpdHktc2VsZWN0b3ItdmFsaWRhdGlvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtbGliL3F1YW50aXR5LXNlbGVjdG9yL3F1YW50aXR5LXNlbGVjdG9yLXZhbGlkYXRpb24uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixLQUFLLEdBRVIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFLOUQsTUFBTSxPQUFPLHNDQUFzQztJQUsvQyxZQUNZLFdBQXVCLEVBQ3ZCLGdCQUFxQztRQURyQyxnQkFBVyxHQUFYLFdBQVcsQ0FBWTtRQUN2QixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQXFCO1FBSmpELGtCQUFhLEdBQUcsRUFBRSxDQUFDO0lBS2hCLENBQUM7SUFFSixRQUFRO1FBQ0osRUFBRTtJQUNOLENBQUM7SUFHRCxRQUFRLENBQUMsQ0FBQztRQUNOLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUdELFNBQVMsQ0FBQyxDQUFnQjtRQUN0QixNQUFNLGFBQWEsR0FBVyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRWhELGtDQUFrQztRQUNsQyxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUVuQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDdEUsSUFBSSxRQUFRO1lBQUUsT0FBTzs7WUFDaEIsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRCxhQUFhLENBQUMsS0FBYTtRQUN2QixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxDQUNqRCxLQUFLLEVBQ0wsSUFBSSxDQUFDLFlBQVksQ0FDcEIsQ0FBQztRQUNGLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEUsQ0FBQzs7O1lBeENKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsbUJBQW1CO2FBQ2hDOzs7WUFURyxVQUFVO1lBS0wsbUJBQW1COzs7MkJBTXZCLEtBQUs7dUJBYUwsWUFBWSxTQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQzt3QkFLakMsWUFBWSxTQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldExvY2FsZU51bWJlclN5bWJvbCwgTnVtYmVyU3ltYm9sIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7XG4gICAgRGlyZWN0aXZlLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgSG9zdExpc3RlbmVyLFxuICAgIElucHV0LFxuICAgIE9uSW5pdCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQZXBWYWxpZGF0b3JTZXJ2aWNlIH0gZnJvbSAnQHBlcHBlcmktYWRkb25zL25neC1saWInO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1twZXBRc1ZhbGlkYXRpb25dJyxcbn0pXG5leHBvcnQgY2xhc3MgUGVwUXVhbnRpdHlTZWxlY3RvclZhbGlkYXRpb25EaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIEBJbnB1dCgpIGFsbG93RGVjaW1hbDogYm9vbGVhbjtcblxuICAgIHByZXZpb3VzVmFsdWUgPSAnJztcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGhvc3RFbGVtZW50OiBFbGVtZW50UmVmLFxuICAgICAgICBwcml2YXRlIHZhbGlkYXRvclNlcnZpY2U6IFBlcFZhbGlkYXRvclNlcnZpY2VcbiAgICApIHt9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgLy9cbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdjaGFuZ2UnLCBbJyRldmVudCddKVxuICAgIG9uQ2hhbmdlKGUpIHtcbiAgICAgICAgdGhpcy52YWxpZGF0ZVZhbHVlKHRoaXMuaG9zdEVsZW1lbnQubmF0aXZlRWxlbWVudC52YWx1ZSk7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bicsIFsnJGV2ZW50J10pXG4gICAgb25LZXlEb3duKGU6IEtleWJvYXJkRXZlbnQpIHtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxWYWx1ZTogc3RyaW5nID0gZS50YXJnZXRbJ3ZhbHVlJ107XG5cbiAgICAgICAgLy8gc2F2ZSB2YWx1ZSBiZWZvcmUga2V5ZG93biBldmVudFxuICAgICAgICB0aGlzLnByZXZpb3VzVmFsdWUgPSBvcmlnaW5hbFZhbHVlO1xuXG4gICAgICAgIGNvbnN0IGlzTnVtYmVyID0gdGhpcy52YWxpZGF0b3JTZXJ2aWNlLmlzTnVtYmVyKGUsIHRoaXMuYWxsb3dEZWNpbWFsKTtcbiAgICAgICAgaWYgKGlzTnVtYmVyKSByZXR1cm47XG4gICAgICAgIGVsc2UgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIHZhbGlkYXRlVmFsdWUodmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IHRoaXMudmFsaWRhdG9yU2VydmljZS52YWxpZGF0ZU51bWJlcihcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgdGhpcy5hbGxvd0RlY2ltYWxcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5ob3N0RWxlbWVudC5uYXRpdmVFbGVtZW50Wyd2YWx1ZSddID0gbmV3VmFsdWUgPyBuZXdWYWx1ZSA6IDA7XG4gICAgfVxufVxuIl19