import { Component, HostListener, ElementRef, Input, Output, EventEmitter, } from '@angular/core';
import { PepLayoutService, PepScreenSizeType } from '@pepperi-addons/ngx-lib';
export class PepSizeDetectorComponent {
    constructor(hostElement, layoutService) {
        this.hostElement = hostElement;
        this.layoutService = layoutService;
        this.showScreenSize = false;
        this._useAsWebComponent = false;
        this.sizeChange = new EventEmitter();
        this.prefix = 'is-';
        this.sizes = [
            {
                id: PepScreenSizeType.XS,
                name: 'xs',
                css: `d-block d-sm-none`,
            },
            {
                id: PepScreenSizeType.SM,
                name: 'sm',
                css: `d-none d-sm-block d-md-none`,
            },
            {
                id: PepScreenSizeType.MD,
                name: 'md',
                css: `d-none d-md-block d-lg-none`,
            },
            {
                id: PepScreenSizeType.LG,
                name: 'lg',
                css: `d-none d-lg-block d-xl-none`,
            },
            {
                id: PepScreenSizeType.XL,
                name: 'xl',
                css: `d-none d-xl-block`,
            },
        ];
        this.layoutService.onResize$.subscribe((size) => {
            this.currentSize = this.sizes.find((s) => s.id === size);
            this.sizeChange.emit(this.currentSize);
        });
    }
    set useAsWebComponent(value) {
        if (value) {
            this.exportFunctionsOnHostElement();
        }
    }
    get useAsWebComponent() {
        return this._useAsWebComponent;
    }
    onResize(event) {
        this.detectScreenSize();
    }
    ngAfterViewInit() {
        this.detectScreenSize();
    }
    detectScreenSize() {
        this.currentSize = this.sizes.find((x) => {
            const el = this.hostElement.nativeElement.querySelector(`.${this.prefix}${x.id}`);
            const isVisible = window.getComputedStyle(el).display !== 'none';
            return isVisible;
        });
        this.layoutService.onResize(this.currentSize.id);
    }
    exportFunctionsOnHostElement() {
        // This is for web component usage for use those functions.
        this.hostElement.nativeElement.getCurrentSize = this.getCurrentSize.bind(this);
    }
    getCurrentSize() {
        return this.currentSize;
    }
}
PepSizeDetectorComponent.decorators = [
    { type: Component, args: [{
                selector: 'pep-size-detector',
                template: "<!-- Bootstrap -->\n<!-- <div *ngFor=\"let s of sizes\" class=\"{{s.css + ' ' + (prefix + s.id) }}\">{{s.name}}</div> -->\n\n<!-- Angular flex-layout -->\n<div *ngFor=\"let s of sizes\" fxShow.xs=\"{{s.name == 'xs'}}\" fxShow.sm=\"{{s.name == 'sm'}}\"\n  fxShow.md=\"{{s.name == 'md'}}\" fxShow.lg=\"{{s.name == 'lg'}}\" fxShow.xl=\"{{s.name == 'xl'}}\"\n  class=\"{{s.css + ' ' + (prefix + s.id) }}\">\n  <ng-container *ngIf=\"showScreenSize\"> The current screen size is - {{s.name}}</ng-container>\n</div>"
            },] }
];
PepSizeDetectorComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: PepLayoutService }
];
PepSizeDetectorComponent.propDecorators = {
    showScreenSize: [{ type: Input }],
    useAsWebComponent: [{ type: Input }],
    sizeChange: [{ type: Output }],
    onResize: [{ type: HostListener, args: ['window:resize', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2l6ZS1kZXRlY3Rvci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtbGliL3NpemUtZGV0ZWN0b3Ivc2l6ZS1kZXRlY3Rvci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILFNBQVMsRUFHVCxZQUFZLEVBQ1osVUFBVSxFQUNWLEtBQUssRUFDTCxNQUFNLEVBQ04sWUFBWSxHQUNmLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBWTlFLE1BQU0sT0FBTyx3QkFBd0I7SUFnRGpDLFlBQ1ksV0FBdUIsRUFDdkIsYUFBK0I7UUFEL0IsZ0JBQVcsR0FBWCxXQUFXLENBQVk7UUFDdkIsa0JBQWEsR0FBYixhQUFhLENBQWtCO1FBakRsQyxtQkFBYyxHQUFHLEtBQUssQ0FBQztRQUV4Qix1QkFBa0IsR0FBRyxLQUFLLENBQUM7UUFZbkMsZUFBVSxHQUF1QyxJQUFJLFlBQVksRUFBd0IsQ0FBQztRQUUxRixXQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ2YsVUFBSyxHQUFnQztZQUNqQztnQkFDSSxFQUFFLEVBQUUsaUJBQWlCLENBQUMsRUFBRTtnQkFDeEIsSUFBSSxFQUFFLElBQUk7Z0JBQ1YsR0FBRyxFQUFFLG1CQUFtQjthQUMzQjtZQUNEO2dCQUNJLEVBQUUsRUFBRSxpQkFBaUIsQ0FBQyxFQUFFO2dCQUN4QixJQUFJLEVBQUUsSUFBSTtnQkFDVixHQUFHLEVBQUUsNkJBQTZCO2FBQ3JDO1lBQ0Q7Z0JBQ0ksRUFBRSxFQUFFLGlCQUFpQixDQUFDLEVBQUU7Z0JBQ3hCLElBQUksRUFBRSxJQUFJO2dCQUNWLEdBQUcsRUFBRSw2QkFBNkI7YUFDckM7WUFDRDtnQkFDSSxFQUFFLEVBQUUsaUJBQWlCLENBQUMsRUFBRTtnQkFDeEIsSUFBSSxFQUFFLElBQUk7Z0JBQ1YsR0FBRyxFQUFFLDZCQUE2QjthQUNyQztZQUNEO2dCQUNJLEVBQUUsRUFBRSxpQkFBaUIsQ0FBQyxFQUFFO2dCQUN4QixJQUFJLEVBQUUsSUFBSTtnQkFDVixHQUFHLEVBQUUsbUJBQW1CO2FBQzNCO1NBQ0osQ0FBQztRQVFFLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQXVCLEVBQUUsRUFBRTtZQUMvRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLElBQUksQ0FBQyxDQUFDO1lBQ3pELElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUMzQyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFwREQsSUFDSSxpQkFBaUIsQ0FBQyxLQUFjO1FBQ2hDLElBQUksS0FBSyxFQUFFO1lBQ1AsSUFBSSxDQUFDLDRCQUE0QixFQUFFLENBQUM7U0FDdkM7SUFDTCxDQUFDO0lBQ0QsSUFBSSxpQkFBaUI7UUFDakIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUM7SUFDbkMsQ0FBQztJQStDRCxRQUFRLENBQUMsS0FBSztRQUNWLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRCxlQUFlO1FBQ1gsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVPLGdCQUFnQjtRQUNwQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDckMsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUNuRCxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUMzQixDQUFDO1lBQ0YsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sS0FBSyxNQUFNLENBQUM7WUFFakUsT0FBTyxTQUFTLENBQUM7UUFDckIsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFTyw0QkFBNEI7UUFDaEMsMkRBQTJEO1FBQzNELElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FDcEUsSUFBSSxDQUNQLENBQUM7SUFDTixDQUFDO0lBRUQsY0FBYztRQUNWLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUM1QixDQUFDOzs7WUE3RkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxtQkFBbUI7Z0JBQzdCLHdnQkFBNkM7YUFDaEQ7OztZQWhCRyxVQUFVO1lBS0wsZ0JBQWdCOzs7NkJBYXBCLEtBQUs7Z0NBR0wsS0FBSzt5QkFVTCxNQUFNO3VCQTRDTixZQUFZLFNBQUMsZUFBZSxFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDb21wb25lbnQsXG4gICAgT25Jbml0LFxuICAgIEFmdGVyVmlld0luaXQsXG4gICAgSG9zdExpc3RlbmVyLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgSW5wdXQsXG4gICAgT3V0cHV0LFxuICAgIEV2ZW50RW1pdHRlcixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQZXBMYXlvdXRTZXJ2aWNlLCBQZXBTY3JlZW5TaXplVHlwZSB9IGZyb20gJ0BwZXBwZXJpLWFkZG9ucy9uZ3gtbGliJztcblxuaW50ZXJmYWNlIElQZXBTaXplRGV0ZWN0b3JJdGVtIHtcbiAgICBpZDogUGVwU2NyZWVuU2l6ZVR5cGU7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGNzczogc3RyaW5nO1xufVxuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3BlcC1zaXplLWRldGVjdG9yJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vc2l6ZS1kZXRlY3Rvci5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIFBlcFNpemVEZXRlY3RvckNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICAgIEBJbnB1dCgpIHNob3dTY3JlZW5TaXplID0gZmFsc2U7XG5cbiAgICBwcml2YXRlIF91c2VBc1dlYkNvbXBvbmVudCA9IGZhbHNlO1xuICAgIEBJbnB1dCgpXG4gICAgc2V0IHVzZUFzV2ViQ29tcG9uZW50KHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5leHBvcnRGdW5jdGlvbnNPbkhvc3RFbGVtZW50KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IHVzZUFzV2ViQ29tcG9uZW50KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fdXNlQXNXZWJDb21wb25lbnQ7XG4gICAgfVxuXG4gICAgQE91dHB1dCgpXG4gICAgc2l6ZUNoYW5nZTogRXZlbnRFbWl0dGVyPElQZXBTaXplRGV0ZWN0b3JJdGVtPiA9IG5ldyBFdmVudEVtaXR0ZXI8SVBlcFNpemVEZXRlY3Rvckl0ZW0+KCk7XG5cbiAgICBwcmVmaXggPSAnaXMtJztcbiAgICBzaXplczogQXJyYXk8SVBlcFNpemVEZXRlY3Rvckl0ZW0+ID0gW1xuICAgICAgICB7XG4gICAgICAgICAgICBpZDogUGVwU2NyZWVuU2l6ZVR5cGUuWFMsXG4gICAgICAgICAgICBuYW1lOiAneHMnLFxuICAgICAgICAgICAgY3NzOiBgZC1ibG9jayBkLXNtLW5vbmVgLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpZDogUGVwU2NyZWVuU2l6ZVR5cGUuU00sXG4gICAgICAgICAgICBuYW1lOiAnc20nLFxuICAgICAgICAgICAgY3NzOiBgZC1ub25lIGQtc20tYmxvY2sgZC1tZC1ub25lYCxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgaWQ6IFBlcFNjcmVlblNpemVUeXBlLk1ELFxuICAgICAgICAgICAgbmFtZTogJ21kJyxcbiAgICAgICAgICAgIGNzczogYGQtbm9uZSBkLW1kLWJsb2NrIGQtbGctbm9uZWAsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlkOiBQZXBTY3JlZW5TaXplVHlwZS5MRyxcbiAgICAgICAgICAgIG5hbWU6ICdsZycsXG4gICAgICAgICAgICBjc3M6IGBkLW5vbmUgZC1sZy1ibG9jayBkLXhsLW5vbmVgLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpZDogUGVwU2NyZWVuU2l6ZVR5cGUuWEwsXG4gICAgICAgICAgICBuYW1lOiAneGwnLFxuICAgICAgICAgICAgY3NzOiBgZC1ub25lIGQteGwtYmxvY2tgLFxuICAgICAgICB9LFxuICAgIF07XG5cbiAgICBwcml2YXRlIGN1cnJlbnRTaXplOiBJUGVwU2l6ZURldGVjdG9ySXRlbTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGhvc3RFbGVtZW50OiBFbGVtZW50UmVmLFxuICAgICAgICBwcml2YXRlIGxheW91dFNlcnZpY2U6IFBlcExheW91dFNlcnZpY2VcbiAgICApIHtcbiAgICAgICAgdGhpcy5sYXlvdXRTZXJ2aWNlLm9uUmVzaXplJC5zdWJzY3JpYmUoKHNpemU6IFBlcFNjcmVlblNpemVUeXBlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRTaXplID0gdGhpcy5zaXplcy5maW5kKChzKSA9PiBzLmlkID09PSBzaXplKTtcbiAgICAgICAgICAgIHRoaXMuc2l6ZUNoYW5nZS5lbWl0KHRoaXMuY3VycmVudFNpemUpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCd3aW5kb3c6cmVzaXplJywgWyckZXZlbnQnXSlcbiAgICBvblJlc2l6ZShldmVudCk6IHZvaWQge1xuICAgICAgICB0aGlzLmRldGVjdFNjcmVlblNpemUoKTtcbiAgICB9XG5cbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGV0ZWN0U2NyZWVuU2l6ZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZGV0ZWN0U2NyZWVuU2l6ZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jdXJyZW50U2l6ZSA9IHRoaXMuc2l6ZXMuZmluZCgoeCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZWwgPSB0aGlzLmhvc3RFbGVtZW50Lm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICAgICBgLiR7dGhpcy5wcmVmaXh9JHt4LmlkfWBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjb25zdCBpc1Zpc2libGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCkuZGlzcGxheSAhPT0gJ25vbmUnO1xuXG4gICAgICAgICAgICByZXR1cm4gaXNWaXNpYmxlO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmxheW91dFNlcnZpY2Uub25SZXNpemUodGhpcy5jdXJyZW50U2l6ZS5pZCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBleHBvcnRGdW5jdGlvbnNPbkhvc3RFbGVtZW50KCkge1xuICAgICAgICAvLyBUaGlzIGlzIGZvciB3ZWIgY29tcG9uZW50IHVzYWdlIGZvciB1c2UgdGhvc2UgZnVuY3Rpb25zLlxuICAgICAgICB0aGlzLmhvc3RFbGVtZW50Lm5hdGl2ZUVsZW1lbnQuZ2V0Q3VycmVudFNpemUgPSB0aGlzLmdldEN1cnJlbnRTaXplLmJpbmQoXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZ2V0Q3VycmVudFNpemUoKTogSVBlcFNpemVEZXRlY3Rvckl0ZW0ge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50U2l6ZTtcbiAgICB9XG59XG4iXX0=