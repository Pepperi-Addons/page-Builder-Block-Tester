import { Injectable } from '@angular/core';
import { MatDialog, MatDialogConfig, } from '@angular/material/dialog';
import { PepLayoutService } from '@pepperi-addons/ngx-lib';
import { Overlay } from '@angular/cdk/overlay';
import { PepDefaultDialogComponent } from './default-dialog.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@pepperi-addons/ngx-lib";
import * as i3 from "@angular/cdk/overlay";
export class PepDialogService {
    constructor(dialog, layoutService, overlay) {
        this.dialog = dialog;
        this.layoutService = layoutService;
        this.overlay = overlay;
    }
    fixConfigIfNeeded(data, config) {
        if (config.disableClose) {
            if (((!data.showClose || !data.showHeader) && !data.showFooter) ||
                (data.actionsType === 'custom' &&
                    (data.actionButtons === null ||
                        data.actionButtons.length === 0))) {
                config.disableClose = false;
            }
        }
    }
    getDialogConfig(options = {}, size = 'regular') {
        var _a;
        const dialogConfig = new MatDialogConfig();
        dialogConfig.autoFocus = false;
        dialogConfig.direction = this.layoutService.isRtl() ? 'rtl' : 'ltr';
        dialogConfig.disableClose = (_a = options.disableClose) !== null && _a !== void 0 ? _a : true;
        dialogConfig.panelClass = ['pep-dialog', options.panelClass || ''];
        if (size === 'inline') {
            dialogConfig.height = options.height || 'auto';
            dialogConfig.maxWidth = options.maxWidth || '100vw';
            dialogConfig.maxHeight = options.maxHeight || '100vh';
            dialogConfig.minWidth = options.minWidth || '300px';
        }
        dialogConfig.panelClass.push(size);
        dialogConfig.scrollStrategy = this.overlay.scrollStrategies.noop();
        // dialogConfig.scrollStrategy = this.overlay.scrollStrategies.block();
        return dialogConfig;
    }
    openDefaultDialog(data, config = null) {
        if (!config) {
            config = this.getDialogConfig();
        }
        this.fixConfigIfNeeded(data, config);
        config.data = data;
        const dialogRef = this.dialog.open(PepDefaultDialogComponent, config);
        return dialogRef;
    }
    openDialog(componentOrTemplateRef, data = {}, config = null) {
        if (!config) {
            config = this.getDialogConfig();
        }
        this.fixConfigIfNeeded(data, config);
        config.data = data;
        const dialogRef = this.dialog.open(componentOrTemplateRef, config);
        return dialogRef;
    }
}
PepDialogService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PepDialogService_Factory() { return new PepDialogService(i0.ɵɵinject(i1.MatDialog), i0.ɵɵinject(i2.PepLayoutService), i0.ɵɵinject(i3.Overlay)); }, token: PepDialogService, providedIn: "root" });
PepDialogService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
PepDialogService.ctorParameters = () => [
    { type: MatDialog },
    { type: PepLayoutService },
    { type: Overlay }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtbGliL2RpYWxvZy9kaWFsb2cuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFlLE1BQU0sZUFBZSxDQUFDO0FBQ3hELE9BQU8sRUFDSCxTQUFTLEVBQ1QsZUFBZSxHQUVsQixNQUFNLDBCQUEwQixDQUFDO0FBQ2xDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzNELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUcvQyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7Ozs7QUFLdkUsTUFBTSxPQUFPLGdCQUFnQjtJQUN6QixZQUNZLE1BQWlCLEVBQ2pCLGFBQStCLEVBQy9CLE9BQWdCO1FBRmhCLFdBQU0sR0FBTixNQUFNLENBQVc7UUFDakIsa0JBQWEsR0FBYixhQUFhLENBQWtCO1FBQy9CLFlBQU8sR0FBUCxPQUFPLENBQVM7SUFDeEIsQ0FBQztJQUVHLGlCQUFpQixDQUFDLElBQW1CLEVBQUUsTUFBdUI7UUFDbEUsSUFBSSxNQUFNLENBQUMsWUFBWSxFQUFFO1lBQ3JCLElBQ0ksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7Z0JBQzNELENBQUMsSUFBSSxDQUFDLFdBQVcsS0FBSyxRQUFRO29CQUMxQixDQUFDLElBQUksQ0FBQyxhQUFhLEtBQUssSUFBSTt3QkFDeEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFDM0M7Z0JBQ0UsTUFBTSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7YUFDL0I7U0FDSjtJQUNMLENBQUM7SUFFRCxlQUFlLENBQ1gsVUFPSSxFQUFFLEVBQ04sT0FBMEIsU0FBUzs7UUFFbkMsTUFBTSxZQUFZLEdBQUcsSUFBSSxlQUFlLEVBQUUsQ0FBQztRQUUzQyxZQUFZLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUMvQixZQUFZLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ3BFLFlBQVksQ0FBQyxZQUFZLEdBQUcsTUFBQSxPQUFPLENBQUMsWUFBWSxtQ0FBSSxJQUFJLENBQUM7UUFDekQsWUFBWSxDQUFDLFVBQVUsR0FBRyxDQUFDLFlBQVksRUFBRSxPQUFPLENBQUMsVUFBVSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBRW5FLElBQUksSUFBSSxLQUFLLFFBQVEsRUFBRTtZQUNuQixZQUFZLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDO1lBQy9DLFlBQVksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsSUFBSSxPQUFPLENBQUM7WUFDcEQsWUFBWSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUyxJQUFJLE9BQU8sQ0FBQztZQUN0RCxZQUFZLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLElBQUksT0FBTyxDQUFDO1NBQ3ZEO1FBRUQsWUFBWSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFbkMsWUFBWSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDO1FBQ25FLHVFQUF1RTtRQUV2RSxPQUFPLFlBQVksQ0FBQztJQUN4QixDQUFDO0lBRUQsaUJBQWlCLENBQ2IsSUFBbUIsRUFDbkIsU0FBMEIsSUFBSTtRQUU5QixJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1QsTUFBTSxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztTQUNuQztRQUNELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFckMsTUFBTSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDbkIsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMseUJBQXlCLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDdEUsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQztJQUVELFVBQVUsQ0FDTixzQkFBeUQsRUFDekQsT0FBWSxFQUFFLEVBQ2QsU0FBMEIsSUFBSTtRQUU5QixJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1QsTUFBTSxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztTQUNuQztRQUNELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFckMsTUFBTSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDbkIsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDbkUsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQzs7OztZQW5GSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7OztZQVpHLFNBQVM7WUFJSixnQkFBZ0I7WUFDaEIsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIE1hdERpYWxvZyxcbiAgICBNYXREaWFsb2dDb25maWcsXG4gICAgTWF0RGlhbG9nUmVmLFxufSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kaWFsb2cnO1xuaW1wb3J0IHsgUGVwTGF5b3V0U2VydmljZSB9IGZyb20gJ0BwZXBwZXJpLWFkZG9ucy9uZ3gtbGliJztcbmltcG9ydCB7IE92ZXJsYXkgfSBmcm9tICdAYW5ndWxhci9jZGsvb3ZlcmxheSc7XG5pbXBvcnQgeyBDb21wb25lbnRUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BvcnRhbCc7XG5pbXBvcnQgeyBQZXBEaWFsb2dTaXplVHlwZSwgUGVwRGlhbG9nRGF0YSB9IGZyb20gJy4vZGlhbG9nLm1vZGVsJztcbmltcG9ydCB7IFBlcERlZmF1bHREaWFsb2dDb21wb25lbnQgfSBmcm9tICcuL2RlZmF1bHQtZGlhbG9nLmNvbXBvbmVudCc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFBlcERpYWxvZ1NlcnZpY2Uge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGRpYWxvZzogTWF0RGlhbG9nLFxuICAgICAgICBwcml2YXRlIGxheW91dFNlcnZpY2U6IFBlcExheW91dFNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgb3ZlcmxheTogT3ZlcmxheVxuICAgICkgeyB9XG5cbiAgICBwcml2YXRlIGZpeENvbmZpZ0lmTmVlZGVkKGRhdGE6IFBlcERpYWxvZ0RhdGEsIGNvbmZpZzogTWF0RGlhbG9nQ29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcuZGlzYWJsZUNsb3NlKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKCghZGF0YS5zaG93Q2xvc2UgfHwgIWRhdGEuc2hvd0hlYWRlcikgJiYgIWRhdGEuc2hvd0Zvb3RlcikgfHxcbiAgICAgICAgICAgICAgICAoZGF0YS5hY3Rpb25zVHlwZSA9PT0gJ2N1c3RvbScgJiZcbiAgICAgICAgICAgICAgICAgICAgKGRhdGEuYWN0aW9uQnV0dG9ucyA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5hY3Rpb25CdXR0b25zLmxlbmd0aCA9PT0gMCkpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBjb25maWcuZGlzYWJsZUNsb3NlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXREaWFsb2dDb25maWcoXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIGRpc2FibGVDbG9zZT86IGJvb2xlYW47XG4gICAgICAgICAgICBoZWlnaHQ/OiBzdHJpbmc7XG4gICAgICAgICAgICBtaW5XaWR0aD86IHN0cmluZztcbiAgICAgICAgICAgIG1heFdpZHRoPzogc3RyaW5nO1xuICAgICAgICAgICAgbWF4SGVpZ2h0Pzogc3RyaW5nO1xuICAgICAgICAgICAgcGFuZWxDbGFzcz86IHN0cmluZztcbiAgICAgICAgfSA9IHt9LFxuICAgICAgICBzaXplOiBQZXBEaWFsb2dTaXplVHlwZSA9ICdyZWd1bGFyJ1xuICAgICk6IE1hdERpYWxvZ0NvbmZpZyB7XG4gICAgICAgIGNvbnN0IGRpYWxvZ0NvbmZpZyA9IG5ldyBNYXREaWFsb2dDb25maWcoKTtcblxuICAgICAgICBkaWFsb2dDb25maWcuYXV0b0ZvY3VzID0gZmFsc2U7XG4gICAgICAgIGRpYWxvZ0NvbmZpZy5kaXJlY3Rpb24gPSB0aGlzLmxheW91dFNlcnZpY2UuaXNSdGwoKSA/ICdydGwnIDogJ2x0cic7XG4gICAgICAgIGRpYWxvZ0NvbmZpZy5kaXNhYmxlQ2xvc2UgPSBvcHRpb25zLmRpc2FibGVDbG9zZSA/PyB0cnVlO1xuICAgICAgICBkaWFsb2dDb25maWcucGFuZWxDbGFzcyA9IFsncGVwLWRpYWxvZycsIG9wdGlvbnMucGFuZWxDbGFzcyB8fCAnJ107XG5cbiAgICAgICAgaWYgKHNpemUgPT09ICdpbmxpbmUnKSB7XG4gICAgICAgICAgICBkaWFsb2dDb25maWcuaGVpZ2h0ID0gb3B0aW9ucy5oZWlnaHQgfHwgJ2F1dG8nO1xuICAgICAgICAgICAgZGlhbG9nQ29uZmlnLm1heFdpZHRoID0gb3B0aW9ucy5tYXhXaWR0aCB8fCAnMTAwdncnO1xuICAgICAgICAgICAgZGlhbG9nQ29uZmlnLm1heEhlaWdodCA9IG9wdGlvbnMubWF4SGVpZ2h0IHx8ICcxMDB2aCc7XG4gICAgICAgICAgICBkaWFsb2dDb25maWcubWluV2lkdGggPSBvcHRpb25zLm1pbldpZHRoIHx8ICczMDBweCc7XG4gICAgICAgIH1cblxuICAgICAgICBkaWFsb2dDb25maWcucGFuZWxDbGFzcy5wdXNoKHNpemUpO1xuXG4gICAgICAgIGRpYWxvZ0NvbmZpZy5zY3JvbGxTdHJhdGVneSA9IHRoaXMub3ZlcmxheS5zY3JvbGxTdHJhdGVnaWVzLm5vb3AoKTtcbiAgICAgICAgLy8gZGlhbG9nQ29uZmlnLnNjcm9sbFN0cmF0ZWd5ID0gdGhpcy5vdmVybGF5LnNjcm9sbFN0cmF0ZWdpZXMuYmxvY2soKTtcblxuICAgICAgICByZXR1cm4gZGlhbG9nQ29uZmlnO1xuICAgIH1cblxuICAgIG9wZW5EZWZhdWx0RGlhbG9nKFxuICAgICAgICBkYXRhOiBQZXBEaWFsb2dEYXRhLFxuICAgICAgICBjb25maWc6IE1hdERpYWxvZ0NvbmZpZyA9IG51bGxcbiAgICApOiBNYXREaWFsb2dSZWY8UGVwRGVmYXVsdERpYWxvZ0NvbXBvbmVudD4ge1xuICAgICAgICBpZiAoIWNvbmZpZykge1xuICAgICAgICAgICAgY29uZmlnID0gdGhpcy5nZXREaWFsb2dDb25maWcoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZpeENvbmZpZ0lmTmVlZGVkKGRhdGEsIGNvbmZpZyk7XG5cbiAgICAgICAgY29uZmlnLmRhdGEgPSBkYXRhO1xuICAgICAgICBjb25zdCBkaWFsb2dSZWYgPSB0aGlzLmRpYWxvZy5vcGVuKFBlcERlZmF1bHREaWFsb2dDb21wb25lbnQsIGNvbmZpZyk7XG4gICAgICAgIHJldHVybiBkaWFsb2dSZWY7XG4gICAgfVxuXG4gICAgb3BlbkRpYWxvZzxUPihcbiAgICAgICAgY29tcG9uZW50T3JUZW1wbGF0ZVJlZjogQ29tcG9uZW50VHlwZTxUPiB8IFRlbXBsYXRlUmVmPFQ+LFxuICAgICAgICBkYXRhOiBhbnkgPSB7fSxcbiAgICAgICAgY29uZmlnOiBNYXREaWFsb2dDb25maWcgPSBudWxsXG4gICAgKTogTWF0RGlhbG9nUmVmPFQ+IHtcbiAgICAgICAgaWYgKCFjb25maWcpIHtcbiAgICAgICAgICAgIGNvbmZpZyA9IHRoaXMuZ2V0RGlhbG9nQ29uZmlnKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5maXhDb25maWdJZk5lZWRlZChkYXRhLCBjb25maWcpO1xuXG4gICAgICAgIGNvbmZpZy5kYXRhID0gZGF0YTtcbiAgICAgICAgY29uc3QgZGlhbG9nUmVmID0gdGhpcy5kaWFsb2cub3Blbihjb21wb25lbnRPclRlbXBsYXRlUmVmLCBjb25maWcpO1xuICAgICAgICByZXR1cm4gZGlhbG9nUmVmO1xuICAgIH1cbn1cbiJdfQ==