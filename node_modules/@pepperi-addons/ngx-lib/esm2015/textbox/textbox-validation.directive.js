import { Directive, ElementRef, HostListener, Input, } from '@angular/core';
import { PepValidatorService, } from '@pepperi-addons/ngx-lib';
export class PepTextboxValidationDirective {
    constructor(hostElement, validatorService) {
        this.hostElement = hostElement;
        this.validatorService = validatorService;
        this.type = 'text';
        this.previousValue = '';
    }
    ngOnInit() {
        //
    }
    isNumber() {
        return this.isInteger() || this.isDecimal();
    }
    isInteger() {
        return this.type === 'int';
    }
    isDecimal() {
        return (this.type === 'currency' ||
            this.type === 'percentage' ||
            this.type === 'real');
    }
    isPhone() {
        return this.type === 'phone';
    }
    isText() {
        return (this.type === 'email' ||
            this.type === 'link' ||
            this.type === 'text');
    }
    onChange(e) {
        this.validateValue(this.hostElement.nativeElement.value);
    }
    onKeyDown(e) {
        const originalValue = e.target['value'];
        if (this.isNumber()) {
            // save value before keydown event
            this.previousValue = originalValue;
            const isNumber = this.validatorService.isNumber(e, this.isDecimal());
            if (isNumber)
                return;
            else
                e.preventDefault();
        }
        else if (this.isPhone()) {
            const isPhone = this.validatorService.isPhone(e);
            if (isPhone)
                return;
            else
                e.preventDefault();
        }
    }
    validateValue(value) {
        if (this.isNumber()) {
            const newValue = this.validatorService.validateNumber(value, this.isDecimal());
            this.hostElement.nativeElement['value'] = newValue ? newValue : 0;
        }
        else if (this.isPhone()) {
            // test phone with regular expression, when
            // phone is invalid, replace it with the previousValue
            const valid = this.validatorService.validatePhone(value);
            this.hostElement.nativeElement['value'] = valid
                ? value
                : this.previousValue;
        }
        else if (this.isText()) {
            this.hostElement.nativeElement['value'] = value;
        }
    }
}
PepTextboxValidationDirective.decorators = [
    { type: Directive, args: [{
                selector: '[pepTextboxValidation]',
            },] }
];
PepTextboxValidationDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: PepValidatorService }
];
PepTextboxValidationDirective.propDecorators = {
    type: [{ type: Input }],
    onChange: [{ type: HostListener, args: ['change', ['$event'],] }],
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dGJveC12YWxpZGF0aW9uLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1saWIvdGV4dGJveC90ZXh0Ym94LXZhbGlkYXRpb24uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixLQUFLLEdBRVIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUVILG1CQUFtQixHQUN0QixNQUFNLHlCQUF5QixDQUFDO0FBS2pDLE1BQU0sT0FBTyw2QkFBNkI7SUFLdEMsWUFDWSxXQUF1QixFQUN2QixnQkFBcUM7UUFEckMsZ0JBQVcsR0FBWCxXQUFXLENBQVk7UUFDdkIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFxQjtRQU54QyxTQUFJLEdBQXdCLE1BQU0sQ0FBQztRQUU1QyxrQkFBYSxHQUFHLEVBQUUsQ0FBQztJQUtoQixDQUFDO0lBRUosUUFBUTtRQUNKLEVBQUU7SUFDTixDQUFDO0lBRU8sUUFBUTtRQUNaLE9BQU8sSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNoRCxDQUFDO0lBRU8sU0FBUztRQUNiLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLENBQUM7SUFDL0IsQ0FBQztJQUVPLFNBQVM7UUFDYixPQUFPLENBQ0gsSUFBSSxDQUFDLElBQUksS0FBSyxVQUFVO1lBQ3hCLElBQUksQ0FBQyxJQUFJLEtBQUssWUFBWTtZQUMxQixJQUFJLENBQUMsSUFBSSxLQUFLLE1BQU0sQ0FDdkIsQ0FBQztJQUNOLENBQUM7SUFFTyxPQUFPO1FBQ1gsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLE9BQU8sQ0FBQztJQUNqQyxDQUFDO0lBRU8sTUFBTTtRQUNWLE9BQU8sQ0FDSCxJQUFJLENBQUMsSUFBSSxLQUFLLE9BQU87WUFDckIsSUFBSSxDQUFDLElBQUksS0FBSyxNQUFNO1lBQ3BCLElBQUksQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUN2QixDQUFDO0lBQ04sQ0FBQztJQUdELFFBQVEsQ0FBQyxDQUFDO1FBQ04sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBR0QsU0FBUyxDQUFDLENBQWdCO1FBQ3RCLE1BQU0sYUFBYSxHQUFXLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFaEQsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDakIsa0NBQWtDO1lBQ2xDLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO1lBQ25DLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQzNDLENBQUMsRUFDRCxJQUFJLENBQUMsU0FBUyxFQUFFLENBQ25CLENBQUM7WUFFRixJQUFJLFFBQVE7Z0JBQUUsT0FBTzs7Z0JBQ2hCLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUMzQjthQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ3ZCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakQsSUFBSSxPQUFPO2dCQUFFLE9BQU87O2dCQUNmLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUMzQjtJQUNMLENBQUM7SUFFRCxhQUFhLENBQUMsS0FBYTtRQUN2QixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNqQixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxDQUNqRCxLQUFLLEVBQ0wsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUNuQixDQUFDO1lBQ0YsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNyRTthQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ3ZCLDJDQUEyQztZQUMzQyxzREFBc0Q7WUFDdEQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN6RCxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsR0FBRyxLQUFLO2dCQUMzQyxDQUFDLENBQUMsS0FBSztnQkFDUCxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQztTQUM1QjthQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEtBQUssQ0FBQztTQUNuRDtJQUNMLENBQUM7OztZQXhGSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHdCQUF3QjthQUNyQzs7O1lBWkcsVUFBVTtZQU9WLG1CQUFtQjs7O21CQU9sQixLQUFLO3VCQXlDTCxZQUFZLFNBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDO3dCQUtqQyxZQUFZLFNBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBEaXJlY3RpdmUsXG4gICAgRWxlbWVudFJlZixcbiAgICBIb3N0TGlzdGVuZXIsXG4gICAgSW5wdXQsXG4gICAgT25Jbml0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gICAgUGVwVGV4dGJveEZpZWxkVHlwZSxcbiAgICBQZXBWYWxpZGF0b3JTZXJ2aWNlLFxufSBmcm9tICdAcGVwcGVyaS1hZGRvbnMvbmd4LWxpYic7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3BlcFRleHRib3hWYWxpZGF0aW9uXScsXG59KVxuZXhwb3J0IGNsYXNzIFBlcFRleHRib3hWYWxpZGF0aW9uRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBASW5wdXQoKSB0eXBlOiBQZXBUZXh0Ym94RmllbGRUeXBlID0gJ3RleHQnO1xuXG4gICAgcHJldmlvdXNWYWx1ZSA9ICcnO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgaG9zdEVsZW1lbnQ6IEVsZW1lbnRSZWYsXG4gICAgICAgIHByaXZhdGUgdmFsaWRhdG9yU2VydmljZTogUGVwVmFsaWRhdG9yU2VydmljZVxuICAgICkge31cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICAvL1xuICAgIH1cblxuICAgIHByaXZhdGUgaXNOdW1iZXIoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzSW50ZWdlcigpIHx8IHRoaXMuaXNEZWNpbWFsKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc0ludGVnZXIoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnR5cGUgPT09ICdpbnQnO1xuICAgIH1cblxuICAgIHByaXZhdGUgaXNEZWNpbWFsKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy50eXBlID09PSAnY3VycmVuY3knIHx8XG4gICAgICAgICAgICB0aGlzLnR5cGUgPT09ICdwZXJjZW50YWdlJyB8fFxuICAgICAgICAgICAgdGhpcy50eXBlID09PSAncmVhbCdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGlzUGhvbmUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnR5cGUgPT09ICdwaG9uZSc7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc1RleHQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0aGlzLnR5cGUgPT09ICdlbWFpbCcgfHxcbiAgICAgICAgICAgIHRoaXMudHlwZSA9PT0gJ2xpbmsnIHx8XG4gICAgICAgICAgICB0aGlzLnR5cGUgPT09ICd0ZXh0J1xuICAgICAgICApO1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2NoYW5nZScsIFsnJGV2ZW50J10pXG4gICAgb25DaGFuZ2UoZSkge1xuICAgICAgICB0aGlzLnZhbGlkYXRlVmFsdWUodGhpcy5ob3N0RWxlbWVudC5uYXRpdmVFbGVtZW50LnZhbHVlKTtcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdrZXlkb3duJywgWyckZXZlbnQnXSlcbiAgICBvbktleURvd24oZTogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICBjb25zdCBvcmlnaW5hbFZhbHVlOiBzdHJpbmcgPSBlLnRhcmdldFsndmFsdWUnXTtcblxuICAgICAgICBpZiAodGhpcy5pc051bWJlcigpKSB7XG4gICAgICAgICAgICAvLyBzYXZlIHZhbHVlIGJlZm9yZSBrZXlkb3duIGV2ZW50XG4gICAgICAgICAgICB0aGlzLnByZXZpb3VzVmFsdWUgPSBvcmlnaW5hbFZhbHVlO1xuICAgICAgICAgICAgY29uc3QgaXNOdW1iZXIgPSB0aGlzLnZhbGlkYXRvclNlcnZpY2UuaXNOdW1iZXIoXG4gICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICB0aGlzLmlzRGVjaW1hbCgpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpZiAoaXNOdW1iZXIpIHJldHVybjtcbiAgICAgICAgICAgIGVsc2UgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNQaG9uZSgpKSB7XG4gICAgICAgICAgICBjb25zdCBpc1Bob25lID0gdGhpcy52YWxpZGF0b3JTZXJ2aWNlLmlzUGhvbmUoZSk7XG4gICAgICAgICAgICBpZiAoaXNQaG9uZSkgcmV0dXJuO1xuICAgICAgICAgICAgZWxzZSBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YWxpZGF0ZVZhbHVlKHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuaXNOdW1iZXIoKSkge1xuICAgICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSB0aGlzLnZhbGlkYXRvclNlcnZpY2UudmFsaWRhdGVOdW1iZXIoXG4gICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgdGhpcy5pc0RlY2ltYWwoKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuaG9zdEVsZW1lbnQubmF0aXZlRWxlbWVudFsndmFsdWUnXSA9IG5ld1ZhbHVlID8gbmV3VmFsdWUgOiAwO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNQaG9uZSgpKSB7XG4gICAgICAgICAgICAvLyB0ZXN0IHBob25lIHdpdGggcmVndWxhciBleHByZXNzaW9uLCB3aGVuXG4gICAgICAgICAgICAvLyBwaG9uZSBpcyBpbnZhbGlkLCByZXBsYWNlIGl0IHdpdGggdGhlIHByZXZpb3VzVmFsdWVcbiAgICAgICAgICAgIGNvbnN0IHZhbGlkID0gdGhpcy52YWxpZGF0b3JTZXJ2aWNlLnZhbGlkYXRlUGhvbmUodmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5ob3N0RWxlbWVudC5uYXRpdmVFbGVtZW50Wyd2YWx1ZSddID0gdmFsaWRcbiAgICAgICAgICAgICAgICA/IHZhbHVlXG4gICAgICAgICAgICAgICAgOiB0aGlzLnByZXZpb3VzVmFsdWU7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1RleHQoKSkge1xuICAgICAgICAgICAgdGhpcy5ob3N0RWxlbWVudC5uYXRpdmVFbGVtZW50Wyd2YWx1ZSddID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=