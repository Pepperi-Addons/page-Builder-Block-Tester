import { Validators } from '@angular/forms';
/** Default horizontal alignment. */
export const DEFAULT_HORIZONTAL_ALIGNMENT = 'left';
/** Default horizontal alignment. */
export const DEFAULT_VERTICAL_ALIGNMENT = 'top';
export class PepFieldBase {
    // lastFocusField: any;
    constructor(options = {}) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        this.key = options.key || '';
        this.label = options.label || '';
        this.accessory = options.accessory || '';
        this.mandatory = !!options.mandatory;
        this.order = (_a = options.order) !== null && _a !== void 0 ? _a : 1;
        this.controlType = options.controlType || '';
        // this.type = options.type || '';
        this.placeholder = options.placeholder || '';
        this.hidden = !!options.hidden;
        this.row = (_b = options.row) !== null && _b !== void 0 ? _b : 1;
        this.rowSpan = (_c = options.rowSpan) !== null && _c !== void 0 ? _c : 1;
        this.col = (_d = options.col) !== null && _d !== void 0 ? _d : 1;
        this.colSpan = (_e = options.colSpan) !== null && _e !== void 0 ? _e : 1;
        this.xAlignment = (_f = options.xAlignment) !== null && _f !== void 0 ? _f : DEFAULT_HORIZONTAL_ALIGNMENT;
        this.yAlignment = (_g = options.yAlignment) !== null && _g !== void 0 ? _g : DEFAULT_VERTICAL_ALIGNMENT;
        this.maxFieldCharacters = (_h = options.maxFieldCharacters) !== null && _h !== void 0 ? _h : 0;
        this.minValue = (_j = options.minValue) !== null && _j !== void 0 ? _j : 0;
        this.maxValue = (_k = options.maxValue) !== null && _k !== void 0 ? _k : 0;
        this.update(options);
    }
    getBaseValidators(isCheckbox = false) {
        const validators = [];
        if (this.mandatory && !this.readonly && !this.disabled) {
            if (isCheckbox) {
                validators.push(Validators.requiredTrue);
            }
            else {
                validators.push(Validators.required);
            }
        }
        else {
            validators.push(Validators.nullValidator);
        }
        if (this.maxFieldCharacters > 0) {
            validators.push(Validators.maxLength(this.maxFieldCharacters));
        }
        return validators;
    }
    getValidators() {
        const validators = this.getBaseValidators();
        return validators;
    }
    update(options) {
        this.value = options.value;
        this.formattedValue = options.formattedValue;
        this.additionalValue = options.additionalValue;
        this.readonly = !!options.readonly;
        this.disabled = !!options.disabled;
        this.visible = !!options.visible;
        this.textColor = options.textColor || '';
        // this.lastFocusField = options.lastFocusField || null;
    }
}
export class PepPlaceholderField extends PepFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'placeholder';
    }
}
export class PepSeparatorField extends PepFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'separator';
    }
}
export class PepAttachmentField extends PepFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'attachment';
    }
}
export class PepIndicatorsField extends PepFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'indicators';
    }
}
export class PepTextboxField extends PepFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'textbox';
        this.type = 'text';
        this.type = options.type || 'text';
        this.update(options);
    }
    update(options) {
        super.update(options);
        if (this.type === 'link') {
            // DI-11292 - add changes for link field for the "Read Only display value" prop
            this.formattedValue =
                this.disabled && this.formattedValue && this.value
                    ? this.formattedValue
                    : this.value;
        }
    }
    getValidators() {
        const validators = super.getBaseValidators();
        if (this.type === 'email') {
            validators.push(Validators.pattern(/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/));
        }
        else if (this.type === 'phone') {
            validators.push(Validators.pattern(/^[\d\.\-\+\(\)\*\#]+$/));
        }
        else if (this.type === 'int' || this.type === 'real') {
            validators.push(Validators.pattern(/^[\.,\-\+\d]+$/));
            if (!isNaN(this.minValue)) {
                validators.push(Validators.min(this.minValue));
            }
            if (!isNaN(this.maxValue)) {
                validators.push(Validators.max(this.maxValue));
            }
        }
        return validators;
    }
}
export class PepTextareaField extends PepFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'textarea';
        // this.type = 'textarea';
    }
}
export class PepRichHtmlTextareaField extends PepFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'richhtmltextarea';
        // this.type = 'richhtmltextarea';
    }
}
export class PepSignatureField extends PepFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'signature';
        this.options = [];
        this.options = options.options || [];
    }
}
export class PepImageField extends PepFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'image';
        this.hasCampaignField = null;
        this.indicatorsField = null;
        this.menuField = null;
        this.options = [];
        this.sizeLimitMB = 5;
        this.hasCampaignField = options.hasCampaignField || null;
        this.indicatorsField = options.indicatorsField || null;
        this.menuField = options.menuField || null;
        this.options = options.options || [];
        this.sizeLimitMB = options.sizeLimitMB || 5;
    }
}
export class PepImagesField extends PepFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'images';
        this.options = [];
        this.options = options.options || [];
    }
}
export class PepQuantitySelectorField extends PepFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'qs';
        this.notificationInfo = {};
        this.updatedDataCount = 0;
        this.allowDecimal = options.allowDecimal || false;
        this.type = options.type || 'qs';
        this.update(options);
    }
    update(options) {
        super.update(options);
        this.notificationInfo = options.notificationInfo;
        this.updatedDataCount += 1;
    }
}
export class PepDateField extends PepFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'date';
        this.type = options.type || 'date';
    }
}
export class PepCheckboxField extends PepFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'checkbox';
        this.type = options.type || 'checkbox';
    }
    getValidators() {
        const validators = super.getBaseValidators(true);
        return validators;
    }
}
export class PepSelectField extends PepFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'select';
        this.options = [];
        this.type = options.type || 'select';
        this.update(options);
    }
    update(options) {
        super.update(options);
        this.options = options.options || [];
    }
}
export class PepAddressField extends PepFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'address';
        this.groupFields = null;
        this.groupFields = options.groupFields || null;
    }
}
export class PepInternalButtonField extends PepFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'button';
        this.referenceObjectSubType = '';
        this.referenceObjectInternalType = '';
        this.referenceObjectType = options.referenceObjectType || null;
        this.referenceObjectSubType = options.referenceObjectSubType || null;
        this.referenceObjectInternalType =
            options.referenceObjectInternalType || null;
        this.type = options.type || 'button';
    }
}
export class PepInternalPageField extends PepFieldBase {
    constructor(options = {}) {
        super(options);
        this.controlType = 'internalPage';
        this.objectId = '';
        this.parentId = '';
        this.searchCode = '';
        this.objectId = options.objectId || '';
        this.parentId = options.parentId || '';
        this.searchCode = options.searchCode || '';
    }
}
export class PepInternalMenuField extends PepFieldBase {
    // hasSubMenu: boolean = false;
    constructor(options = {}) {
        super(options);
        this.controlType = 'menu';
        this.options = [];
        this.options = options.options || [];
        // this.hasSubMenu = options['hasSubMenu'];
    }
}
//# sourceMappingURL=data:application/json;base64,