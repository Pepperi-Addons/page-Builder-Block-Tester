import { Directive, ElementRef, Input, Renderer2, } from '@angular/core';
export class PepInputAutoWidthDirective {
    constructor(renderer, el) {
        this.renderer = renderer;
        this.el = el;
        this.includePadding = true;
        this.input = null;
    }
    ngAfterViewInit() {
        if (this.el.nativeElement.tagName.toLowerCase() === 'input') {
            this.input = this.el;
        }
        else {
            const list = this.el.nativeElement.querySelectorAll('input');
            this.input = list.length > 0 ? list[0] : null;
        }
        if (this.input) {
            this.input.addEventListener('blur', this.setWidthUsingText.bind(this));
            this.input.addEventListener('keyup', this.setWidthUsingText.bind(this));
        }
        this.setWidthUsingText();
    }
    ngOnDestroy() {
        this.input.removeEventListener('blur', this.setWidthUsingText.bind(this));
        this.input.removeEventListener('keyup', this.setWidthUsingText.bind(this));
    }
    get paddingWidth() {
        return this.includePadding
            ? this._sumPropertyValues(['padding-left', 'padding-right'])
            : 0;
    }
    get style() {
        return getComputedStyle(this.input, '');
    }
    setWidth(width) {
        this.renderer.setStyle(this.input, 'width', width + 'px');
    }
    setWidthUsingText() {
        if (this.input) {
            const text = this.input.value;
            this.setWidth(this.textWidth(text) + this.paddingWidth);
        }
    }
    _sumPropertyValues(properties) {
        return properties
            .map((property) => parseInt(this.style.getPropertyValue(property), 10))
            .reduce((a, b) => a + b, 0);
    }
    textWidth(value) {
        const ctx = this.renderer.createElement('canvas').getContext('2d');
        const { fontStyle, fontVariant, fontWeight, fontSize, fontFamily, } = this.style;
        // font string format: {normal, normal, 700, 20px, Roboto, "Helvetica Neue", sans-serif}
        ctx.font =
            fontStyle +
                ' ' +
                fontVariant +
                ' ' +
                fontWeight +
                ' ' +
                fontSize +
                ' ' +
                fontFamily;
        return ctx ? ctx.measureText(value).width : 0;
    }
}
PepInputAutoWidthDirective.decorators = [
    { type: Directive, args: [{
                selector: '[pepAutoWidth]',
            },] }
];
PepInputAutoWidthDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
PepInputAutoWidthDirective.propDecorators = {
    includePadding: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0by13aWR0aC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtbGliL3NyYy9jb3JlL2NvbW1vbi9kaXJlY3RpdmVzL2F1dG8td2lkdGguZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFSCxTQUFTLEVBQ1QsVUFBVSxFQUVWLEtBQUssRUFFTCxTQUFTLEdBQ1osTUFBTSxlQUFlLENBQUM7QUFLdkIsTUFBTSxPQUFPLDBCQUEwQjtJQUtuQyxZQUFvQixRQUFtQixFQUFVLEVBQWM7UUFBM0MsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUFVLE9BQUUsR0FBRixFQUFFLENBQVk7UUFKdEQsbUJBQWMsR0FBRyxJQUFJLENBQUM7UUFFdkIsVUFBSyxHQUFRLElBQUksQ0FBQztJQUV3QyxDQUFDO0lBRW5FLGVBQWU7UUFDWCxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsS0FBSyxPQUFPLEVBQUU7WUFDekQsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1NBQ3hCO2FBQU07WUFDSCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM3RCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztTQUNqRDtRQUVELElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNaLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQ3ZCLE1BQU0sRUFDTixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUNwQyxDQUFDO1lBQ0YsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FDdkIsT0FBTyxFQUNQLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQ3BDLENBQUM7U0FDTDtRQUVELElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FDMUIsTUFBTSxFQUNOLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQ3BDLENBQUM7UUFDRixJQUFJLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUMxQixPQUFPLEVBQ1AsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FDcEMsQ0FBQztJQUNOLENBQUM7SUFFRCxJQUFJLFlBQVk7UUFDWixPQUFPLElBQUksQ0FBQyxjQUFjO1lBQ3RCLENBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxjQUFjLEVBQUUsZUFBZSxDQUFDLENBQUM7WUFDNUQsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNaLENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDTCxPQUFPLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUFhO1FBQ2xCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRUQsaUJBQWlCO1FBQ2IsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1osTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7WUFDOUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUMzRDtJQUNMLENBQUM7SUFFTyxrQkFBa0IsQ0FBQyxVQUFvQjtRQUMzQyxPQUFPLFVBQVU7YUFDWixHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUNkLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUN0RDthQUNBLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVPLFNBQVMsQ0FBQyxLQUFhO1FBQzNCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuRSxNQUFNLEVBQ0YsU0FBUyxFQUNULFdBQVcsRUFDWCxVQUFVLEVBQ1YsUUFBUSxFQUNSLFVBQVUsR0FDYixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFFZix3RkFBd0Y7UUFDeEYsR0FBRyxDQUFDLElBQUk7WUFDSixTQUFTO2dCQUNULEdBQUc7Z0JBQ0gsV0FBVztnQkFDWCxHQUFHO2dCQUNILFVBQVU7Z0JBQ1YsR0FBRztnQkFDSCxRQUFRO2dCQUNSLEdBQUc7Z0JBQ0gsVUFBVSxDQUFDO1FBQ2YsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEQsQ0FBQzs7O1lBOUZKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsZ0JBQWdCO2FBQzdCOzs7WUFMRyxTQUFTO1lBSlQsVUFBVTs7OzZCQVdULEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIEFmdGVyVmlld0luaXQsXG4gICAgRGlyZWN0aXZlLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgSG9zdExpc3RlbmVyLFxuICAgIElucHV0LFxuICAgIE9uRGVzdHJveSxcbiAgICBSZW5kZXJlcjIsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1twZXBBdXRvV2lkdGhdJyxcbn0pXG5leHBvcnQgY2xhc3MgUGVwSW5wdXRBdXRvV2lkdGhEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICAgIEBJbnB1dCgpIGluY2x1ZGVQYWRkaW5nID0gdHJ1ZTtcblxuICAgIHByaXZhdGUgaW5wdXQ6IGFueSA9IG51bGw7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYpIHt9XG5cbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnKSB7XG4gICAgICAgICAgICB0aGlzLmlucHV0ID0gdGhpcy5lbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGxpc3QgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQnKTtcbiAgICAgICAgICAgIHRoaXMuaW5wdXQgPSBsaXN0Lmxlbmd0aCA+IDAgPyBsaXN0WzBdIDogbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmlucHV0KSB7XG4gICAgICAgICAgICB0aGlzLmlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAgICAgJ2JsdXInLFxuICAgICAgICAgICAgICAgIHRoaXMuc2V0V2lkdGhVc2luZ1RleHQuYmluZCh0aGlzKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICAgICAna2V5dXAnLFxuICAgICAgICAgICAgICAgIHRoaXMuc2V0V2lkdGhVc2luZ1RleHQuYmluZCh0aGlzKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0V2lkdGhVc2luZ1RleHQoKTtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5pbnB1dC5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgJ2JsdXInLFxuICAgICAgICAgICAgdGhpcy5zZXRXaWR0aFVzaW5nVGV4dC5iaW5kKHRoaXMpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuaW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICdrZXl1cCcsXG4gICAgICAgICAgICB0aGlzLnNldFdpZHRoVXNpbmdUZXh0LmJpbmQodGhpcylcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBnZXQgcGFkZGluZ1dpZHRoKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmluY2x1ZGVQYWRkaW5nXG4gICAgICAgICAgICA/IHRoaXMuX3N1bVByb3BlcnR5VmFsdWVzKFsncGFkZGluZy1sZWZ0JywgJ3BhZGRpbmctcmlnaHQnXSlcbiAgICAgICAgICAgIDogMDtcbiAgICB9XG5cbiAgICBnZXQgc3R5bGUoKSB7XG4gICAgICAgIHJldHVybiBnZXRDb21wdXRlZFN0eWxlKHRoaXMuaW5wdXQsICcnKTtcbiAgICB9XG5cbiAgICBzZXRXaWR0aCh3aWR0aDogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5pbnB1dCwgJ3dpZHRoJywgd2lkdGggKyAncHgnKTtcbiAgICB9XG5cbiAgICBzZXRXaWR0aFVzaW5nVGV4dCgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuaW5wdXQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRleHQgPSB0aGlzLmlucHV0LnZhbHVlO1xuICAgICAgICAgICAgdGhpcy5zZXRXaWR0aCh0aGlzLnRleHRXaWR0aCh0ZXh0KSArIHRoaXMucGFkZGluZ1dpZHRoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgX3N1bVByb3BlcnR5VmFsdWVzKHByb3BlcnRpZXM6IHN0cmluZ1tdKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHByb3BlcnRpZXNcbiAgICAgICAgICAgIC5tYXAoKHByb3BlcnR5KSA9PlxuICAgICAgICAgICAgICAgIHBhcnNlSW50KHRoaXMuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSksIDEwKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApO1xuICAgIH1cblxuICAgIHByaXZhdGUgdGV4dFdpZHRoKHZhbHVlOiBzdHJpbmcpOiBudW1iZXIge1xuICAgICAgICBjb25zdCBjdHggPSB0aGlzLnJlbmRlcmVyLmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGZvbnRTdHlsZSxcbiAgICAgICAgICAgIGZvbnRWYXJpYW50LFxuICAgICAgICAgICAgZm9udFdlaWdodCxcbiAgICAgICAgICAgIGZvbnRTaXplLFxuICAgICAgICAgICAgZm9udEZhbWlseSxcbiAgICAgICAgfSA9IHRoaXMuc3R5bGU7XG5cbiAgICAgICAgLy8gZm9udCBzdHJpbmcgZm9ybWF0OiB7bm9ybWFsLCBub3JtYWwsIDcwMCwgMjBweCwgUm9ib3RvLCBcIkhlbHZldGljYSBOZXVlXCIsIHNhbnMtc2VyaWZ9XG4gICAgICAgIGN0eC5mb250ID1cbiAgICAgICAgICAgIGZvbnRTdHlsZSArXG4gICAgICAgICAgICAnICcgK1xuICAgICAgICAgICAgZm9udFZhcmlhbnQgK1xuICAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgIGZvbnRXZWlnaHQgK1xuICAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgIGZvbnRTaXplICtcbiAgICAgICAgICAgICcgJyArXG4gICAgICAgICAgICBmb250RmFtaWx5O1xuICAgICAgICByZXR1cm4gY3R4ID8gY3R4Lm1lYXN1cmVUZXh0KHZhbHVlKS53aWR0aCA6IDA7XG4gICAgfVxufVxuIl19