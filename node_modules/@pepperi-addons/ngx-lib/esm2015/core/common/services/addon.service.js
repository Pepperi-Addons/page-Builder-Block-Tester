import { Injectable } from '@angular/core';
import { PepSessionService } from './session.service';
import { PepHttpService } from '../../http/services/http.service';
import { PepLoaderService } from '../../http/services/loader.service';
import { MultiTranslateHttpLoader } from 'ngx-translate-multi-http-loader';
import * as i0 from "@angular/core";
import * as i1 from "./session.service";
import * as i2 from "../../http/services/http.service";
import * as i3 from "../../http/services/loader.service";
/*
    This service is the webapp api for addon usege.
*/
export class PepAddonService {
    constructor(sessionService, httpService, loaderService) {
        this.sessionService = sessionService;
        this.httpService = httpService;
        this.loaderService = loaderService;
        this.ADDON_ASSETS_PATH_KEY = 'AddonAssetsPath';
        this.ADDONS_DICTIONARY_ASSETS_PATH_KEY = 'AddonsDictionaryAssetsPath';
        this.ADDON_API_RELATIVE_PATH = '/addons/api';
        this.ADDON_API_ASYNC_RELATIVE_PATH = `${this.ADDON_API_RELATIVE_PATH}/async`;
        //
    }
    getAddonBaseRelativePath(isAsync) {
        return isAsync
            ? this.ADDON_API_ASYNC_RELATIVE_PATH
            : this.ADDON_API_RELATIVE_PATH;
    }
    getAddonStaticFolder(subAddonUUID = '') {
        if (subAddonUUID.length > 0) {
            const addonsDictionary = this.sessionService.getObject(this.ADDONS_DICTIONARY_ASSETS_PATH_KEY);
            return addonsDictionary && addonsDictionary[subAddonUUID] ? addonsDictionary[subAddonUUID] : '';
        }
        else {
            return this.sessionService.getObject(this.ADDON_ASSETS_PATH_KEY) || '';
        }
    }
    setAddonStaticFolder(path, subAddonUUID = '') {
        var _a;
        if (subAddonUUID.length > 0) {
            const addonsDictionary = (_a = this.sessionService.getObject(this.ADDONS_DICTIONARY_ASSETS_PATH_KEY)) !== null && _a !== void 0 ? _a : {};
            addonsDictionary[subAddonUUID] = path;
            this.sessionService.setObject(this.ADDONS_DICTIONARY_ASSETS_PATH_KEY, addonsDictionary);
        }
        else {
            return this.sessionService.setObject(this.ADDON_ASSETS_PATH_KEY, path);
        }
    }
    getAddonApiCall(addonUUID, fileName, functionName, httpOptions = {}, isAsync = false) {
        return this.httpService.getPapiApiCall(`${this.getAddonBaseRelativePath(isAsync)}/${addonUUID}/${fileName}/${functionName}`, httpOptions);
    }
    postAddonApiCall(addonUUID, fileName, functionName, body = {}, httpOptions = {}, isAsync = false) {
        return this.httpService.postPapiApiCall(`${this.getAddonBaseRelativePath(isAsync)}/${addonUUID}/${fileName}/${functionName}`, body, httpOptions);
    }
    // TODO: need to chek this if the loader is working.
    fetch(input, init) {
        this.loaderService.show();
        return window.fetch(input, init).finally(() => {
            this.loaderService.hide();
        });
    }
    static createDefaultMultiTranslateLoader(http, fileService, addonService, subAddonUUID = '') {
        const addonStaticFolder = addonService.getAddonStaticFolder(subAddonUUID);
        const translationsPath = fileService.getAssetsTranslationsPath(addonStaticFolder);
        const translationsSuffix = fileService.getAssetsTranslationsSuffix();
        const defaultSubFolder = 'assets/i18n/';
        return new MultiTranslateHttpLoader(http, [
            {
                prefix: translationsPath,
                suffix: translationsSuffix,
            },
            {
                prefix: addonStaticFolder.length > 0 ? `${addonStaticFolder}${defaultSubFolder}` : `/${defaultSubFolder}`,
                suffix: '.json',
            },
        ]);
    }
    setDefaultTranslateLang(translate, urlLangParam = 'userLang') {
        let userLang = 'en';
        translate.setDefaultLang(userLang);
        userLang = translate.getBrowserLang().split('-')[0]; // use navigator lang if available
        if (urlLangParam.length > 0) {
            const index = location.href.indexOf(urlLangParam);
            if (index > -1) {
                // urlLangParam=XX
                const startIndex = index + urlLangParam.length + '='.length;
                userLang = location.href.substring(startIndex, startIndex + 2);
            }
        }
        // the lang to use, if the lang isn't available, it will use the current loader to get them
        translate.use(userLang).subscribe((res) => {
            // In here you can put the code you want. At this point the lang will be loaded
        });
    }
}
PepAddonService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PepAddonService_Factory() { return new PepAddonService(i0.ɵɵinject(i1.PepSessionService), i0.ɵɵinject(i2.PepHttpService), i0.ɵɵinject(i3.PepLoaderService)); }, token: PepAddonService, providedIn: "root" });
PepAddonService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
PepAddonService.ctorParameters = () => [
    { type: PepSessionService },
    { type: PepHttpService },
    { type: PepLoaderService }
];
//# sourceMappingURL=data:application/json;base64,