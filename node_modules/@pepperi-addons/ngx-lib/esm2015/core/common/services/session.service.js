import { Injectable } from '@angular/core';
import { PepJwtHelperService } from './jwt-helper.service';
import * as i0 from "@angular/core";
import * as i1 from "./jwt-helper.service";
export class PepSessionService {
    // private readonly PEPPERI_CONSUMER_TOKEN: 'YY2pAwx6Exo2LWXrUllF9xzSfWF53wqc';
    constructor(jwtHelper) {
        this.jwtHelper = jwtHelper;
        this.IDP_TOKEN_KEY = 'idp_token';
        this.PAPI_BASE_URL_KEY = 'pepperi.baseurl';
        // private readonly WAPI_TOKEN_KEY = 'auth_token';
        this.WAPI_BASE_URL_KEY = 'serverHostURL'; // pepperi.webapibaseurl
    }
    getParseToken() {
        // debugger;
        // const tokenTest = "eyJhbGciOiJSUzI1NiIsImtpZCI6IjRiYTFjNzJmMTI3NThjYzEzMzg3ZWQ3YTBiZjNlODg3IiwidHlwIjoiSldUIn0.eyJuYmYiOjE1OTY3MjU5NjksImV4cCI6MTU5NjcyNjI2OSwiaXNzIjoiaHR0cHM6Ly9pZHAuc2FuZGJveC5wZXBwZXJpLmNvbSIsImF1ZCI6InBlcHBlcmkud2ViYXBwLmFwcC5zYW5kYm94LnBlcHBlcmkuY29tIiwiaWF0IjoxNTk2NzI1OTY5LCJhdF9oYXNoIjoiSGtmRXJ0Q2JzQ3NzOTVKUm05VmJTdyIsInNpZCI6IjJkNzFiM2JiNWUyNjRiNDk2Y2JmZDkzNmYyNTNhNWIzIiwic3ViIjoiZTJkZmQ0MDYtZDM4Yy00ZmYwLThhZGItMWRlMjI3ODIzYWEyIiwiYXV0aF90aW1lIjoxNTk2NzE4ODA5LCJpZHAiOiJsb2NhbCIsIm5hbWUiOiJkYW5pZWwgZGF2aWRvZmYiLCJlbWFpbCI6ImRhbmllbC5kQHBlcHBlcml0ZXN0LmNvbSIsInBlcHBlcmkuaWQiOjg2OTAzMDQsInBlcHBlcmkudXNlcnV1aWQiOiJlMmRmZDQwNi1kMzhjLTRmZjAtOGFkYi0xZGUyMjc4MjNhYTIiLCJwZXBwZXJpLmRpc3RyaWJ1dG9yaWQiOjMwMDEyMzUxLCJwZXBwZXJpLmRpc3RyaWJ1dG9ydXVpZCI6IjBiZDBlZDc5LThlOWUtNDRmYi05NmY0LThlNTNlZDljZTgyYiIsInBlcHBlcmkuZGF0YWNlbnRlciI6InNhbmRib3giLCJwZXBwZXJpLmtlZXBsb2dpbiI6ZmFsc2UsInBlcHBlcmkuaWRsZXRpbWV3ZWIiOjEyMCwidXBkYXRlZF9hdCI6MTU5NjcwMjgwMCwiZ2l2ZW5fbmFtZSI6ImRhbmllbCIsImZhbWlseV9uYW1lIjoiZGF2aWRvZmYiLCJwZXBwZXJpLmFwaW50YmFzZXVybCI6Imh0dHBzOi8vcmVzdGFwaS5zYW5kYm94LnBlcHBlcmkuY29tIiwicGVwcGVyaS53ZWJhcGliYXNldXJsIjoiaHR0cHM6Ly93ZWJhcGkuc2FuZGJveC5wZXBwZXJpLmNvbS9WMTZfNTAvV2ViQXBwXzYiLCJwZXBwZXJpLnB1YmxpY2FwaWJhc2V1cmwiOiJodHRwczovL2FwaS1zYW5kYm94LnBlcHBlcmkuY29tIiwicGVwcGVyaS5iYXNldXJsIjoiaHR0cHM6Ly9wYXBpLnNhbmRib3gucGVwcGVyaS5jb20vVjEuMCIsInBlcHBlcmkuZW1wbG95ZWV0eXBlIjoxLCJhbXIiOlsicHdkIl19.tNtZT3Cl4dMmTQftoaO2KP5BvHOlWGIP-5GpHrAhZoymBkxBSxpKprQGqr0ATtQlNHjX3gDV1W6k_avaSkyJgDiB2hcwr1tNRilasNuMzNV93gxLC9Oh_HdkIN4cZ0hahIcJvf_17PHpS8zD_MRwvGG_i45wRYJAtiGXChxCMzooethRsLOq5TEwuNbE3MxdjZOpImGYyytmsfdsdJRWQn1LQwQBt95ssuypcUzBsVB34P5XuFttjAe9dhTwHIfgsPG-VdfAWH_r-hVe834wKpKrplSWlC_MucgS0X4XP_tN4CtLnHO2wXKPsojqSTH2NQycfqh6YvT6rzRDBEdQIQ";
        const token = this.getIdpToken();
        // token = token || tokenTest;
        const decodedToken = this.jwtHelper.decodeToken(token);
        // const expirationDate = this.jwtHelper.getTokenExpirationDate(token);
        // const isExpired = this.jwtHelper.isTokenExpired(token);
        return decodedToken;
    }
    setObject(key, object) {
        const stringifiedObject = typeof object === 'string' || object instanceof String
            ? object
            : JSON.stringify(object);
        sessionStorage.setItem(key, stringifiedObject.toString());
    }
    getObject(key) {
        let result = null;
        const item = sessionStorage.getItem(key);
        try {
            result = item ? JSON.parse(item) : item;
        }
        catch (_a) {
            result = item;
        }
        return result;
    }
    // setObject(key: string, value: string): void {
    //     sessionStorage.setItem(key, value);
    // }
    // getObject(key: string): string | null {
    //     return sessionStorage.getItem(key);
    // }
    removeObject(key) {
        sessionStorage.removeItem(key);
    }
    // getWapiToken(): string {
    //     return this.getObject(this.WAPI_TOKEN_KEY);
    // }
    getWapiBaseUrl() {
        return this.getObject(this.WAPI_BASE_URL_KEY);
    }
    getIdpToken() {
        return this.getObject(this.IDP_TOKEN_KEY);
    }
    getPapiBaseUrl() {
        const tokenObj = this.getParseToken();
        return tokenObj ? tokenObj[this.PAPI_BASE_URL_KEY] : null;
    }
}
PepSessionService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PepSessionService_Factory() { return new PepSessionService(i0.ɵɵinject(i1.PepJwtHelperService)); }, token: PepSessionService, providedIn: "root" });
PepSessionService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
PepSessionService.ctorParameters = () => [
    { type: PepJwtHelperService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Vzc2lvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWxpYi9zcmMvY29yZS9jb21tb24vc2VydmljZXMvc2Vzc2lvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7OztBQUszRCxNQUFNLE9BQU8saUJBQWlCO0lBSzFCLCtFQUErRTtJQUUvRSxZQUFvQixTQUE4QjtRQUE5QixjQUFTLEdBQVQsU0FBUyxDQUFxQjtRQU5qQyxrQkFBYSxHQUFHLFdBQVcsQ0FBQztRQUM1QixzQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQztRQUN2RCxrREFBa0Q7UUFDakMsc0JBQWlCLEdBQUcsZUFBZSxDQUFDLENBQUMsd0JBQXdCO0lBR3pCLENBQUM7SUFFOUMsYUFBYTtRQUNqQixZQUFZO1FBQ1osMnVEQUEydUQ7UUFDM3VELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNqQyw4QkFBOEI7UUFFOUIsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkQsdUVBQXVFO1FBQ3ZFLDBEQUEwRDtRQUUxRCxPQUFPLFlBQVksQ0FBQztJQUN4QixDQUFDO0lBRUQsU0FBUyxDQUFJLEdBQVcsRUFBRSxNQUFTO1FBQy9CLE1BQU0saUJBQWlCLEdBQ25CLE9BQU8sTUFBTSxLQUFLLFFBQVEsSUFBSSxNQUFNLFlBQVksTUFBTTtZQUNsRCxDQUFDLENBQUMsTUFBTTtZQUNSLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRWpDLGNBQWMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVELFNBQVMsQ0FBVSxHQUFXO1FBQzFCLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQztRQUNsQixNQUFNLElBQUksR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXpDLElBQUk7WUFDQSxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7U0FDbEQ7UUFBQyxXQUFNO1lBQ0osTUFBTSxHQUFHLElBQUksQ0FBQztTQUNqQjtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxnREFBZ0Q7SUFDaEQsMENBQTBDO0lBQzFDLElBQUk7SUFFSiwwQ0FBMEM7SUFDMUMsMENBQTBDO0lBQzFDLElBQUk7SUFFSixZQUFZLENBQUMsR0FBVztRQUNwQixjQUFjLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRCwyQkFBMkI7SUFDM0Isa0RBQWtEO0lBQ2xELElBQUk7SUFFSixjQUFjO1FBQ1YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRCxXQUFXO1FBQ1AsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsY0FBYztRQUNWLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN0QyxPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDOUQsQ0FBQzs7OztZQTFFSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7OztZQUpRLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBlcEp3dEhlbHBlclNlcnZpY2UgfSBmcm9tICcuL2p3dC1oZWxwZXIuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFBlcFNlc3Npb25TZXJ2aWNlIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IElEUF9UT0tFTl9LRVkgPSAnaWRwX3Rva2VuJztcbiAgICBwcml2YXRlIHJlYWRvbmx5IFBBUElfQkFTRV9VUkxfS0VZID0gJ3BlcHBlcmkuYmFzZXVybCc7XG4gICAgLy8gcHJpdmF0ZSByZWFkb25seSBXQVBJX1RPS0VOX0tFWSA9ICdhdXRoX3Rva2VuJztcbiAgICBwcml2YXRlIHJlYWRvbmx5IFdBUElfQkFTRV9VUkxfS0VZID0gJ3NlcnZlckhvc3RVUkwnOyAvLyBwZXBwZXJpLndlYmFwaWJhc2V1cmxcbiAgICAvLyBwcml2YXRlIHJlYWRvbmx5IFBFUFBFUklfQ09OU1VNRVJfVE9LRU46ICdZWTJwQXd4NkV4bzJMV1hyVWxsRjl4elNmV0Y1M3dxYyc7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGp3dEhlbHBlcjogUGVwSnd0SGVscGVyU2VydmljZSkge31cblxuICAgIHByaXZhdGUgZ2V0UGFyc2VUb2tlbigpOiBhbnkge1xuICAgICAgICAvLyBkZWJ1Z2dlcjtcbiAgICAgICAgLy8gY29uc3QgdG9rZW5UZXN0ID0gXCJleUpoYkdjaU9pSlNVekkxTmlJc0ltdHBaQ0k2SWpSaVlURmpOekptTVRJM05UaGpZekV6TXpnM1pXUTNZVEJpWmpObE9EZzNJaXdpZEhsd0lqb2lTbGRVSW4wLmV5SnVZbVlpT2pFMU9UWTNNalU1Tmprc0ltVjRjQ0k2TVRVNU5qY3lOakkyT1N3aWFYTnpJam9pYUhSMGNITTZMeTlwWkhBdWMyRnVaR0p2ZUM1d1pYQndaWEpwTG1OdmJTSXNJbUYxWkNJNkluQmxjSEJsY21rdWQyVmlZWEJ3TG1Gd2NDNXpZVzVrWW05NExuQmxjSEJsY21rdVkyOXRJaXdpYVdGMElqb3hOVGsyTnpJMU9UWTVMQ0poZEY5b1lYTm9Jam9pU0d0bVJYSjBRMkp6UTNOek9UVktVbTA1Vm1KVGR5SXNJbk5wWkNJNklqSmtOekZpTTJKaU5XVXlOalJpTkRrMlkySm1aRGt6Tm1ZeU5UTmhOV0l6SWl3aWMzVmlJam9pWlRKa1ptUTBNRFl0WkRNNFl5MDBabVl3TFRoaFpHSXRNV1JsTWpJM09ESXpZV0V5SWl3aVlYVjBhRjkwYVcxbElqb3hOVGsyTnpFNE9EQTVMQ0pwWkhBaU9pSnNiMk5oYkNJc0ltNWhiV1VpT2lKa1lXNXBaV3dnWkdGMmFXUnZabVlpTENKbGJXRnBiQ0k2SW1SaGJtbGxiQzVrUUhCbGNIQmxjbWwwWlhOMExtTnZiU0lzSW5CbGNIQmxjbWt1YVdRaU9qZzJPVEF6TURRc0luQmxjSEJsY21rdWRYTmxjblYxYVdRaU9pSmxNbVJtWkRRd05pMWtNemhqTFRSbVpqQXRPR0ZrWWkweFpHVXlNamM0TWpOaFlUSWlMQ0p3WlhCd1pYSnBMbVJwYzNSeWFXSjFkRzl5YVdRaU9qTXdNREV5TXpVeExDSndaWEJ3WlhKcExtUnBjM1J5YVdKMWRHOXlkWFZwWkNJNklqQmlaREJsWkRjNUxUaGxPV1V0TkRSbVlpMDVObVkwTFRobE5UTmxaRGxqWlRneVlpSXNJbkJsY0hCbGNta3VaR0YwWVdObGJuUmxjaUk2SW5OaGJtUmliM2dpTENKd1pYQndaWEpwTG10bFpYQnNiMmRwYmlJNlptRnNjMlVzSW5CbGNIQmxjbWt1YVdSc1pYUnBiV1YzWldJaU9qRXlNQ3dpZFhCa1lYUmxaRjloZENJNk1UVTVOamN3TWpnd01Dd2laMmwyWlc1ZmJtRnRaU0k2SW1SaGJtbGxiQ0lzSW1aaGJXbHNlVjl1WVcxbElqb2laR0YyYVdSdlptWWlMQ0p3WlhCd1pYSnBMbUZ3YVc1MFltRnpaWFZ5YkNJNkltaDBkSEJ6T2k4dmNtVnpkR0Z3YVM1ellXNWtZbTk0TG5CbGNIQmxjbWt1WTI5dElpd2ljR1Z3Y0dWeWFTNTNaV0poY0dsaVlYTmxkWEpzSWpvaWFIUjBjSE02THk5M1pXSmhjR2t1YzJGdVpHSnZlQzV3WlhCd1pYSnBMbU52YlM5V01UWmZOVEF2VjJWaVFYQndYellpTENKd1pYQndaWEpwTG5CMVlteHBZMkZ3YVdKaGMyVjFjbXdpT2lKb2RIUndjem92TDJGd2FTMXpZVzVrWW05NExuQmxjSEJsY21rdVkyOXRJaXdpY0dWd2NHVnlhUzVpWVhObGRYSnNJam9pYUhSMGNITTZMeTl3WVhCcExuTmhibVJpYjNndWNHVndjR1Z5YVM1amIyMHZWakV1TUNJc0luQmxjSEJsY21rdVpXMXdiRzk1WldWMGVYQmxJam94TENKaGJYSWlPbHNpY0hka0lsMTkudE50WlQzQ2w0ZE1tVFFmdG9hTzJLUDVCdkhPbFdHSVAtNUdwSHJBaFpveW1Ca3hCU3hwS3ByUUdxcjBBVHRRbE5IalgzZ0RWMVc2a19hdmFTa3lKZ0RpQjJoY3dyMXROUmlsYXNOdU16TlY5M2d4TEM5T2hfSGRrSU40Y1owaGFoSWNKdmZfMTdQSHBTOHpEX01Sd3ZHR19pNDV3UllKQXRpR1hDaHhDTXpvb2V0aFJzTE9xNVRFd3VOYkUzTXhkalpPcEltR1l5eXRtc2Zkc2RKUldRbjFMUXdRQnQ5NXNzdXlwY1V6QnNWQjM0UDVYdUZ0dGpBZTlkaFR3SElmZ3NQRy1WZGZBV0hfci1oVmU4MzR3S3BLcnBsU1dsQ19NdWNnUzBYNFhQX3RONEN0TG5ITzJ3WEtQc29qcVNUSDJOUXljZnFoNll2VDZyelJEQkVkUUlRXCI7XG4gICAgICAgIGNvbnN0IHRva2VuID0gdGhpcy5nZXRJZHBUb2tlbigpO1xuICAgICAgICAvLyB0b2tlbiA9IHRva2VuIHx8IHRva2VuVGVzdDtcblxuICAgICAgICBjb25zdCBkZWNvZGVkVG9rZW4gPSB0aGlzLmp3dEhlbHBlci5kZWNvZGVUb2tlbih0b2tlbik7XG4gICAgICAgIC8vIGNvbnN0IGV4cGlyYXRpb25EYXRlID0gdGhpcy5qd3RIZWxwZXIuZ2V0VG9rZW5FeHBpcmF0aW9uRGF0ZSh0b2tlbik7XG4gICAgICAgIC8vIGNvbnN0IGlzRXhwaXJlZCA9IHRoaXMuand0SGVscGVyLmlzVG9rZW5FeHBpcmVkKHRva2VuKTtcblxuICAgICAgICByZXR1cm4gZGVjb2RlZFRva2VuO1xuICAgIH1cblxuICAgIHNldE9iamVjdDxUPihrZXk6IHN0cmluZywgb2JqZWN0OiBUKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHN0cmluZ2lmaWVkT2JqZWN0ID1cbiAgICAgICAgICAgIHR5cGVvZiBvYmplY3QgPT09ICdzdHJpbmcnIHx8IG9iamVjdCBpbnN0YW5jZW9mIFN0cmluZ1xuICAgICAgICAgICAgICAgID8gb2JqZWN0XG4gICAgICAgICAgICAgICAgOiBKU09OLnN0cmluZ2lmeShvYmplY3QpO1xuXG4gICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oa2V5LCBzdHJpbmdpZmllZE9iamVjdC50b1N0cmluZygpKTtcbiAgICB9XG5cbiAgICBnZXRPYmplY3Q8VCA9IGFueT4oa2V5OiBzdHJpbmcpOiBUIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IG51bGw7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGl0ZW0gPyAoSlNPTi5wYXJzZShpdGVtKSBhcyBUKSA6IGl0ZW07XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgcmVzdWx0ID0gaXRlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8gc2V0T2JqZWN0KGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgLy8gICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWx1ZSk7XG4gICAgLy8gfVxuXG4gICAgLy8gZ2V0T2JqZWN0KGtleTogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgLy8gICAgIHJldHVybiBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gICAgLy8gfVxuXG4gICAgcmVtb3ZlT2JqZWN0KGtleTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcbiAgICB9XG5cbiAgICAvLyBnZXRXYXBpVG9rZW4oKTogc3RyaW5nIHtcbiAgICAvLyAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KHRoaXMuV0FQSV9UT0tFTl9LRVkpO1xuICAgIC8vIH1cblxuICAgIGdldFdhcGlCYXNlVXJsKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9iamVjdCh0aGlzLldBUElfQkFTRV9VUkxfS0VZKTtcbiAgICB9XG5cbiAgICBnZXRJZHBUb2tlbigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPYmplY3QodGhpcy5JRFBfVE9LRU5fS0VZKTtcbiAgICB9XG5cbiAgICBnZXRQYXBpQmFzZVVybCgpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCB0b2tlbk9iaiA9IHRoaXMuZ2V0UGFyc2VUb2tlbigpO1xuICAgICAgICByZXR1cm4gdG9rZW5PYmogPyB0b2tlbk9ialt0aGlzLlBBUElfQkFTRV9VUkxfS0VZXSA6IG51bGw7XG4gICAgfVxufVxuIl19