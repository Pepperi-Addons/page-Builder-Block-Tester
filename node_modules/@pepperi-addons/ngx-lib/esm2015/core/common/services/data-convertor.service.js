import { Injectable } from '@angular/core';
import { FieldLayout, ObjectsDataRow, UIControl, UIControlField, ObjectsDataRowCell, X_ALIGNMENT_TYPE, } from '../model/wapi.model';
import { PepGuid } from '../model/utilities.model';
import * as i0 from "@angular/core";
export class PepFieldData {
    constructor(options = {}) {
        this.ApiName = options.ApiName;
        this.Enabled = !!options.Enabled;
        this.Value = options.Value;
        this.FormattedValue = options.FormattedValue || '';
        this.FieldType = options.FieldType;
        this.ReadOnly = !!options.ReadOnly;
        this.ColumnWidth = options.ColumnWidth;
        this.ColumnWidthType = options.ColumnWidthType;
        this.XAlignment = options.XAlignment || X_ALIGNMENT_TYPE.Left;
        this.Title = options.Title || '';
    }
}
export class PepRowData {
}
export class PepDataConvertorService {
    getUiControl(formData) {
        var _a;
        const uiControl = new UIControl();
        if (((_a = formData === null || formData === void 0 ? void 0 : formData.Fields) === null || _a === void 0 ? void 0 : _a.length) > 0) {
            const uiRow = formData.Fields;
            uiControl.ControlFields = [];
            uiRow.forEach((field) => uiControl.ControlFields.push(this.setUIControlField(field)));
        }
        return uiControl;
    }
    convertFormData(formData) {
        const rowData = new ObjectsDataRow();
        rowData.Fields = [];
        rowData.Type = 0;
        rowData.UID = PepGuid.newGuid();
        formData.Fields.forEach((field) => rowData.Fields.push(this.setDataField(field)));
        return rowData;
    }
    convertListData(tableData, rowUUID = '') {
        const rows = new Array();
        if (tableData.length > 0) {
            tableData.forEach((row) => {
                const rowData = new ObjectsDataRow();
                rowData.Fields = [];
                rowData.Type = 0;
                rowData.UID = rowUUID
                    ? rowUUID
                    : row.UUID
                        ? row.UUID
                        : PepGuid.newGuid();
                row.Fields.forEach((field) => rowData.Fields.push(this.setDataField(field)));
                rows.push(rowData);
            });
        }
        return rows;
    }
    setUIControlField(field) {
        const controlField = new UIControlField();
        controlField.ApiName = field.ApiName;
        controlField.FieldType = field.FieldType;
        controlField.Layout = new FieldLayout({
            X: 1,
            Width: 1,
            XAlignment: field.XAlignment,
            Y: 1,
            Height: 1,
            YAlignment: 1,
        });
        controlField.Title = field.Title;
        controlField.ReadOnly = field.ReadOnly === true ? true : false;
        controlField.ColumnWidth = field.ColumnWidth;
        controlField.ColumnWidthType = field.ColumnWidthType || 1;
        return controlField;
    }
    setDataField(field) {
        const dataField = new ObjectsDataRowCell();
        dataField.AdditionalValue = field.AdditionalValue;
        dataField.ApiName = field.ApiName;
        dataField.Enabled = field.Enabled === false ? false : true;
        dataField.FieldType = field.FieldType;
        dataField.FormattedValue =
            field.FormattedValue || field.Value.toString();
        dataField.GroupFields = null;
        dataField.NotificationInfo = '';
        dataField.OptionalValues = field.OptionalValues;
        dataField.ReferenceObjectSubType = '';
        dataField.TextColor = '';
        dataField.Value = field.Value.toString();
        dataField.Visible = true;
        return dataField;
    }
    setFieldLayout(x, width, xAlignment, y, height, yAlignment, lineNumber) {
        const layout = new FieldLayout({
            X: x,
            Width: width,
            XAlignment: xAlignment,
            Y: y,
            Height: height,
            YAlignment: yAlignment,
            LineNumber: lineNumber,
        });
        return layout;
    }
}
PepDataConvertorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PepDataConvertorService_Factory() { return new PepDataConvertorService(); }, token: PepDataConvertorService, providedIn: "root" });
PepDataConvertorService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
//# sourceMappingURL=data:application/json;base64,