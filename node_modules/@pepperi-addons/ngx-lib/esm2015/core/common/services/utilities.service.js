import { coerceNumberProperty } from '@angular/cdk/coercion';
import { Injectable, Optional } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
export class PepUtilitiesService {
    constructor(translate = null) {
        var _a;
        this.translate = translate;
        this.culture = 'en-US';
        this.culture = ((_a = this.translate) === null || _a === void 0 ? void 0 : _a.getBrowserCultureLang()) || 'en-US';
        this.numberFormatter = new Intl.NumberFormat(this.culture, {
            maximumFractionDigits: 2,
        });
    }
    changeDecimalSeperator(value, reverse = false) {
        // If the decimal separator is ','
        if (this.getDecimalSeparator() === ',') {
            // If reverse change the number from '.' to ',' else do the opposite.
            value = reverse ? value.replace('.', ',') : value.replace(',', '.');
        }
        return value;
    }
    getDecimalSeparator() {
        const numberWithDecimalSeparator = 1.1;
        return numberWithDecimalSeparator
            .toLocaleString(this.culture)
            .substring(1, 2);
    }
    parseDate(dateStr, showTime = false) {
        let retVal = null;
        if (dateStr !== '') {
            retVal = new Date(dateStr);
            // Convert to date with no offset.
            if (!showTime) {
                const index = dateStr.indexOf('T');
                if (index > 0) {
                    dateStr = dateStr.substring(0, index);
                }
                const dateText = dateStr.split('-');
                if (dateText.length === 3) {
                    const year = Number(dateText[0]);
                    const month = Number(dateText[1]) - 1;
                    const day = Number(dateText[2]);
                    retVal = new Date(year, month, day);
                }
            }
        }
        if (retVal && isNaN(retVal.getTime())) {
            retVal = null;
        }
        return retVal;
    }
    stringifyDate(date, showTime = false) {
        if (date) {
            if (showTime) {
                return date.toISOString(); // include - offset
            }
            else {
                const dateText = [];
                dateText.push(date.getFullYear(), '-', date.getMonth() + 1, '-', date.getDate());
                return dateText.join('');
            }
        }
        else {
            return '';
        }
        // if (date) {
        //     const dateText = [];
        //     dateText.push(
        //         date.getFullYear(),
        //         '-',
        //         date.getMonth() + 1,
        //         '-',
        //         date.getDate()
        //     );
        //     if (showTime) {
        //         dateText.push(
        //             'T',
        //             (date.getHours() < 10 ? '0' : '') + date.getHours(),
        //             ':',
        //             (date.getMinutes() < 10 ? '0' : '') + date.getMinutes(),
        //             ':',
        //             (date.getSeconds() < 10 ? '0' : '') + date.getSeconds(),
        //             'Z'
        //         );
        //     }
        //     return dateText.join('');
        // } else {
        //     return '';
        // }
    }
    isValueHtml(value) {
        let res = false;
        const REGEXP = /<\/?[a-z][\s\S]*>/i;
        res = REGEXP.test(value);
        return res;
    }
    isJsonString(str) {
        try {
            JSON.parse(str);
        }
        catch (e) {
            return false;
        }
        return true;
    }
    getSvgElementFromString(document, svgContent) {
        const div = document.createElement('DIV');
        div.innerHTML = svgContent;
        return (div.querySelector('svg') ||
            document.createElementNS('http://www.w3.org/2000/svg', 'path'));
    }
    formatNumber(value) {
        const number = this.coerceNumberProperty(value);
        return this.numberFormatter.format(number);
    }
    incrementNumber(value) {
        let numberValue = this.coerceNumberProperty(value);
        const newNumber = this.changeDecimalSeperator((++numberValue).toString(), true);
        return newNumber;
    }
    decrementNumber(value) {
        let numberValue = this.coerceNumberProperty(value);
        const newNumber = this.changeDecimalSeperator((--numberValue).toString(), true);
        return newNumber;
    }
    coerceNumberProperty(value, fallbackValue = 0) {
        // If the decimal separator is ',' change it to '.'
        value = this.changeDecimalSeperator(value);
        return coerceNumberProperty(value, fallbackValue);
    }
}
PepUtilitiesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PepUtilitiesService_Factory() { return new PepUtilitiesService(i0.ɵɵinject(i1.TranslateService, 8)); }, token: PepUtilitiesService, providedIn: "root" });
PepUtilitiesService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
PepUtilitiesService.ctorParameters = () => [
    { type: TranslateService, decorators: [{ type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,