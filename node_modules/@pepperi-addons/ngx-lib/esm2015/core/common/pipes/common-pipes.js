import { Pipe } from '@angular/core';
import { DomSanitizer, } from '@angular/platform-browser';
export class PepCapitalizePipe {
    transform(value) {
        if (value) {
            return value.charAt(0).toUpperCase() + value.slice(1);
        }
        return value;
    }
}
PepCapitalizePipe.decorators = [
    { type: Pipe, args: [{ name: 'pepCapitalize' },] }
];
export class PepEncodePipe {
    transform(value) {
        if (value) {
            const v = btoa(value);
            return v;
        }
        return value;
    }
}
PepEncodePipe.decorators = [
    { type: Pipe, args: [{ name: 'pepEncode' },] }
];
export class PepEscapePipe {
    transform(value) {
        if (value) {
            const v = escape(value);
            return v;
        }
        return value;
    }
}
PepEscapePipe.decorators = [
    { type: Pipe, args: [{ name: 'pepEscape' },] }
];
export class PepReplaceLineBreaksPipe {
    transform(value) {
        const newValue = value.replace(/(<br\ ?\/?>)/g, ' ');
        return newValue;
    }
}
PepReplaceLineBreaksPipe.decorators = [
    { type: Pipe, args: [{ name: 'pepReplaceLineBreaks' },] }
];
export class PepDateFormatterPipe {
    transform(value, culture, showTime = false) {
        let res = '';
        value = new Date(value);
        if (value) {
            res = value.toLocaleDateString(culture || 'en-US');
            if (showTime) {
                res +=
                    ' ' +
                        value.toLocaleTimeString(culture || 'en-US', {
                            hour: '2-digit',
                            minute: '2-digit',
                        });
            }
        }
        return res;
    }
}
PepDateFormatterPipe.decorators = [
    { type: Pipe, args: [{ name: 'pepDateFormatter' },] }
];
export class PepDateStringFormatterPipe {
    transform(value, culture, showTime = false) {
        let res = '';
        const tmpDate = new Date(value);
        if (value) {
            res = tmpDate.toLocaleDateString(culture || 'en-US');
            if (showTime) {
                res += ' ' + tmpDate.toLocaleTimeString(culture || 'en-US');
            }
        }
        return res;
    }
}
PepDateStringFormatterPipe.decorators = [
    { type: Pipe, args: [{ name: 'pepDateStringFormatter' },] }
];
export class PepSafeHtmlPipe {
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
    }
    transform(html) {
        return this.sanitizer.bypassSecurityTrustHtml(html);
    }
}
PepSafeHtmlPipe.decorators = [
    { type: Pipe, args: [{ name: 'pepSafeHtml' },] }
];
PepSafeHtmlPipe.ctorParameters = () => [
    { type: DomSanitizer }
];
export class PepSafePipe {
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
    }
    transform(value, type) {
        switch (type) {
            case 'html':
                return this.sanitizer.bypassSecurityTrustHtml(value);
            case 'style':
                return this.sanitizer.bypassSecurityTrustStyle(value);
            case 'script':
                return this.sanitizer.bypassSecurityTrustScript(value);
            case 'url':
                return this.sanitizer.bypassSecurityTrustUrl(value);
            case 'resourceUrl':
                return this.sanitizer.bypassSecurityTrustResourceUrl(value);
            default:
                throw new Error(`Invalid safe type specified: ${type}`);
        }
    }
}
PepSafePipe.decorators = [
    { type: Pipe, args: [{ name: 'pepSafe' },] }
];
PepSafePipe.ctorParameters = () => [
    { type: DomSanitizer }
];
export class PepSplitUppercasePipe {
    transform(value) {
        const newValue = value.replace(/([a-z])([A-Z])/g, '$1 $2');
        return newValue;
    }
}
PepSplitUppercasePipe.decorators = [
    { type: Pipe, args: [{ name: 'pepSplitUppercase' },] }
];
export class PepToNumberPipe {
    transform(value) {
        return parseInt(value);
    }
}
PepToNumberPipe.decorators = [
    { type: Pipe, args: [{ name: 'pepToNumber' },] }
];
//# sourceMappingURL=data:application/json;base64,