import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class PepLoaderService {
    constructor() {
        this.counter = 0;
        this.showLoaderSubject = new BehaviorSubject(false);
        // Raise custom event for showing the loader.
        this.onChanged$.subscribe((show) => {
            this.showLoaderChanged(show);
        });
    }
    get onChanged$() {
        return this.showLoaderSubject
            .asObservable()
            .pipe(distinctUntilChanged());
    }
    showLoaderChanged(show) {
        const eventData = {
            detail: {
                showLoader: show,
            },
        };
        const event = new CustomEvent('toggleLoader', eventData);
        window.dispatchEvent(event);
    }
    show() {
        this.counter++;
        this.showLoaderSubject.next(true);
    }
    hide() {
        this.counter--;
        if (this.counter < 0) {
            this.counter = 0;
        }
        if (this.counter === 0) {
            this.showLoaderSubject.next(false);
        }
    }
}
PepLoaderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PepLoaderService_Factory() { return new PepLoaderService(); }, token: PepLoaderService, providedIn: "root" });
PepLoaderService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
PepLoaderService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtbGliL3NyYy9jb3JlL2h0dHAvc2VydmljZXMvbG9hZGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZUFBZSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUt0RCxNQUFNLE9BQU8sZ0JBQWdCO0lBWXpCO1FBWEEsWUFBTyxHQUFHLENBQUMsQ0FBQztRQUNKLHNCQUFpQixHQUE2QixJQUFJLGVBQWUsQ0FDckUsS0FBSyxDQUNSLENBQUM7UUFTRSw2Q0FBNkM7UUFDN0MsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUMvQixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBWEQsSUFBSSxVQUFVO1FBQ1YsT0FBTyxJQUFJLENBQUMsaUJBQWlCO2FBQ3hCLFlBQVksRUFBRTthQUNkLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQVNPLGlCQUFpQixDQUFDLElBQWE7UUFDbkMsTUFBTSxTQUFTLEdBQUc7WUFDZCxNQUFNLEVBQUU7Z0JBQ0osVUFBVSxFQUFFLElBQUk7YUFDbkI7U0FDSixDQUFDO1FBRUYsTUFBTSxLQUFLLEdBQUcsSUFBSSxXQUFXLENBQUMsY0FBYyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3pELE1BQU0sQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELElBQUk7UUFDQSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDZixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRCxJQUFJO1FBQ0EsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRWYsSUFBSSxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsRUFBRTtZQUNsQixJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztTQUNwQjtRQUVELElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxDQUFDLEVBQUU7WUFDcEIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN0QztJQUNMLENBQUM7Ozs7WUFoREosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkaXN0aW5jdFVudGlsQ2hhbmdlZCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgUGVwTG9hZGVyU2VydmljZSB7XG4gICAgY291bnRlciA9IDA7XG4gICAgcHJpdmF0ZSBzaG93TG9hZGVyU3ViamVjdDogQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPihcbiAgICAgICAgZmFsc2VcbiAgICApO1xuXG4gICAgZ2V0IG9uQ2hhbmdlZCQoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNob3dMb2FkZXJTdWJqZWN0XG4gICAgICAgICAgICAuYXNPYnNlcnZhYmxlKClcbiAgICAgICAgICAgIC5waXBlKGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBSYWlzZSBjdXN0b20gZXZlbnQgZm9yIHNob3dpbmcgdGhlIGxvYWRlci5cbiAgICAgICAgdGhpcy5vbkNoYW5nZWQkLnN1YnNjcmliZSgoc2hvdykgPT4ge1xuICAgICAgICAgICAgdGhpcy5zaG93TG9hZGVyQ2hhbmdlZChzaG93KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzaG93TG9hZGVyQ2hhbmdlZChzaG93OiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGV2ZW50RGF0YSA9IHtcbiAgICAgICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgICAgIHNob3dMb2FkZXI6IHNob3csXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCd0b2dnbGVMb2FkZXInLCBldmVudERhdGEpO1xuICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgfVxuXG4gICAgc2hvdygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jb3VudGVyKys7XG4gICAgICAgIHRoaXMuc2hvd0xvYWRlclN1YmplY3QubmV4dCh0cnVlKTtcbiAgICB9XG5cbiAgICBoaWRlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNvdW50ZXItLTtcblxuICAgICAgICBpZiAodGhpcy5jb3VudGVyIDwgMCkge1xuICAgICAgICAgICAgdGhpcy5jb3VudGVyID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmNvdW50ZXIgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuc2hvd0xvYWRlclN1YmplY3QubmV4dChmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=