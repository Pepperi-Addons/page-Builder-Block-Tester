import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, } from '@angular/common/http';
import { throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { PepSessionService } from '../../common/services/session.service';
import { PepCookieService } from '../../common/services/cookie.service';
import * as i0 from "@angular/core";
import * as i1 from "../../common/services/session.service";
import * as i2 from "../../common/services/cookie.service";
import * as i3 from "@angular/common/http";
export class PepHttpService {
    constructor(sessionService, cookieService, http) {
        this.sessionService = sessionService;
        this.cookieService = cookieService;
        this.http = http;
        this.AUTH_HEADER = 'Authorization';
        this.PEPPERI_TOKEN_HEADER = 'PepperiSessionToken';
        this.WAPI_TOKEN_KEY = 'auth_token';
        this.PEPPERI_TOKEN_COOKIE = 'PepperiUserSettings';
    }
    handleError(response) {
        let errorMessage = 'Unknown error!';
        if (response.error instanceof ErrorEvent) {
            // Client-side errors
            errorMessage = `Error: ${response.error.message}`;
        }
        else {
            // Server-side errors
            errorMessage = this.getServerErrorMessage(response);
        }
        return throwError(errorMessage);
    }
    getServerErrorMessage(response) {
        var _a, _b;
        if ((_b = (_a = response === null || response === void 0 ? void 0 : response.error) === null || _a === void 0 ? void 0 : _a.fault) === null || _b === void 0 ? void 0 : _b.faultstring) {
            return `${response.error.fault.faultstring}`;
        }
        else {
            switch (response.status) {
                case 404: {
                    return `Not Found: ${response.message}`;
                }
                case 403: {
                    return `Access Denied: ${response.message}`;
                }
                case 500: {
                    return `Internal Server Error: ${response.message}`;
                }
                default: {
                    return `Unknown Server Error\nError Code: ${response.status}\nMessage: ${response.message}`;
                }
            }
        }
    }
    // Add authorization token if the token exist.
    addAuthorizationToken(httpOptions = {}) {
        if (!httpOptions.headers.has(this.AUTH_HEADER)) {
            const idpToken = this.sessionService.getIdpToken();
            if (idpToken) {
                httpOptions.headers = httpOptions.headers.set(this.AUTH_HEADER, `Bearer ${idpToken}`);
            }
        }
        return httpOptions;
    }
    // Add web api token if calling to wapi domain.
    addWebApiToken(url, httpOptions = {}) {
        if (!httpOptions.headers.has(this.PEPPERI_TOKEN_HEADER)) {
            const wapiBaseUrl = this.sessionService.getWapiBaseUrl();
            if (wapiBaseUrl && url.match(new RegExp(wapiBaseUrl, 'g'))) {
                // TODO:
                // const webApiToken = this.sessionService.getWapiToken();
                try {
                    const userSettingCookie = this.cookieService.get(this.PEPPERI_TOKEN_COOKIE);
                    const webApiToken = JSON.parse(userSettingCookie).values
                        .items[this.WAPI_TOKEN_KEY];
                    if (webApiToken) {
                        httpOptions.headers = httpOptions.headers.set(this.PEPPERI_TOKEN_HEADER, webApiToken);
                    }
                }
                catch (_a) {
                    // Do nothing.
                }
            }
        }
        return httpOptions;
    }
    setDefaultHeaderOptions(url, httpOptions = {}) {
        if (!httpOptions.headers) {
            httpOptions.headers = new HttpHeaders();
        }
        // Add content type
        if (!httpOptions.headers.has('Content-Type')) {
            httpOptions.headers = httpOptions.headers.set('Content-Type', 'application/json');
        }
        httpOptions = this.addAuthorizationToken(httpOptions);
        httpOptions = this.addWebApiToken(url, httpOptions);
        return httpOptions;
    }
    // getTextFile(filename: string): void {
    //     // The Observable returned by get() is of type Observable<string>
    //     // because a text response was specified.
    //     // There's no need to pass a <string> type parameter to get().
    //     // return this.http.get(filename, {responseType: 'text'})
    //     //     .pipe(
    //     //         tap( // Log the result or error
    //     //         data => this.log(filename, data),
    //     //         error => this.logError(filename, error)
    //     //         )
    //     // );
    // }
    getHttpCall(url, httpOptions = {}) {
        httpOptions = this.setDefaultHeaderOptions(url, httpOptions);
        return this.http
            .get(url, httpOptions)
            .pipe(catchError(this.handleError.bind(this)));
        //     .subscribe(
        //         (res) => console.log(''),
        //         (error) => console.log(''),
        //         () => {}
        // );
    }
    postHttpCall(url, body, httpOptions = {}) {
        httpOptions = this.setDefaultHeaderOptions(url, httpOptions);
        return this.http
            .post(url, body, httpOptions)
            .pipe(catchError(this.handleError.bind(this)));
        //     .subscribe(
        //         (res) => console.log(''),
        //         (error) => console.log(''),
        //         () => {}
        // );
    }
    getWapiApiCall(url, httpOptions = {}) {
        const wapiBaseUrl = this.sessionService.getWapiBaseUrl();
        return this.getHttpCall(`${wapiBaseUrl}${url}`, httpOptions);
    }
    postWapiApiCall(url, body, httpOptions = {}) {
        const wapiBaseUrl = this.sessionService.getWapiBaseUrl();
        return this.postHttpCall(`${wapiBaseUrl}${url}`, body, httpOptions);
    }
    getPapiApiCall(url, httpOptions = {}) {
        const papiBaseUrl = this.sessionService.getPapiBaseUrl();
        return this.getHttpCall(`${papiBaseUrl}${url}`, httpOptions);
    }
    postPapiApiCall(url, body, httpOptions = {}) {
        const papiBaseUrl = this.sessionService.getPapiBaseUrl();
        return this.postHttpCall(`${papiBaseUrl}${url}`, body, httpOptions);
    }
}
PepHttpService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PepHttpService_Factory() { return new PepHttpService(i0.ɵɵinject(i1.PepSessionService), i0.ɵɵinject(i2.PepCookieService), i0.ɵɵinject(i3.HttpClient)); }, token: PepHttpService, providedIn: "root" });
PepHttpService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
PepHttpService.ctorParameters = () => [
    { type: PepSessionService },
    { type: PepCookieService },
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,