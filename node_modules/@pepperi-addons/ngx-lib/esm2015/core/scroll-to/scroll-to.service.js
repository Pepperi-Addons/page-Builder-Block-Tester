import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export class PepScrollToService {
    scrollElementTo(element, duration = 500, top = 0) {
        const subject = new Subject();
        if (element instanceof Element || element instanceof Window) {
            this._scrollElementTo(element, duration, top, subject);
        }
        else {
            subject.error("I don't find element");
        }
        return subject;
    }
    _scrollElementTo(el, duration, top, subject) {
        if (el) {
            let startingY;
            if (el instanceof Window) {
                startingY = window.pageYOffset;
            }
            else {
                const viewportOffset = el.getBoundingClientRect();
                startingY = viewportOffset.top;
            }
            this.doScrolling(el, startingY, top, duration, subject);
        }
        else {
            subject.error("I don't find element");
        }
        return subject;
    }
    scrollWindowToElement(element, duration = 500, offset = 0) {
        const subject = new Subject();
        if (typeof element === 'string') {
            const el = document.querySelector(element);
            this._scrollWindowToElement(el, duration, offset, subject);
        }
        else if (element instanceof HTMLElement) {
            this._scrollWindowToElement(element, duration, offset, subject);
        }
        else {
            subject.error("I don't find element");
        }
        return subject;
    }
    _scrollWindowToElement(el, duration, offset, subject) {
        if (el) {
            const viewportOffset = el.getBoundingClientRect();
            const startingY = window.pageYOffset;
            const offsetTop = viewportOffset.top + startingY;
            this.doScrolling(window, startingY, offsetTop + offset, duration, subject);
        }
        else {
            subject.error("I don't find element");
        }
        return subject;
    }
    doScrolling(scrollingElement, startingY, elementY, duration, subject) {
        const diff = elementY - startingY;
        let start;
        requestAnimationFrame(function step(timestamp) {
            start = !start ? timestamp : start;
            const time = timestamp - start;
            const percent = Math.min(time / duration, 1);
            scrollingElement.scrollTo(0, startingY + diff * percent);
            if (time < duration) {
                requestAnimationFrame(step);
                subject.next({});
            }
            else {
                subject.complete();
            }
        });
    }
}
PepScrollToService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PepScrollToService_Factory() { return new PepScrollToService(); }, token: PepScrollToService, providedIn: "root" });
PepScrollToService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
//# sourceMappingURL=data:application/json;base64,