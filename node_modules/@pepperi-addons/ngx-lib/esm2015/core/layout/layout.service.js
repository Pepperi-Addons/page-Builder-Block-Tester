import { Injectable, Optional } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/operators';
import { TranslateService } from '@ngx-translate/core';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
// Const BIDI_RTL_LANGS Array
// BIDI_RTL_LANGS ref: http://en.wikipedia.org/wiki/Right-to-left
// Table of scripts in Unicode: https://en.wikipedia.org/wiki/Script_(Unicode)
const _BIDI_RTL_LANGS = [
    'ae' /* Avestan */,
    'ar' /* 'العربية', Arabic */,
    'arc' /* Aramaic */,
    'bcc' /* 'بلوچی مکرانی', Southern Balochi */,
    'bqi' /* 'بختياري', Bakthiari */,
    'ckb' /* 'Soranî / کوردی', Sorani */,
    'dv' /* Dhivehi */,
    'fa' /* 'فارسی', Persian */,
    'glk' /* 'گیلکی', Gilaki */,
    'he' /* 'עברית', Hebrew */,
    'ku' /* 'Kurdî / كوردی', Kurdish */,
    'mzn' /* 'مازِرونی', Mazanderani */,
    'nqo' /* N'Ko */,
    'pnb' /* 'پنجابی', Western Punjabi */,
    'ps' /* 'پښتو', Pashto, */,
    'sd' /* 'سنڌي', Sindhi */,
    'ug' /* 'Uyghurche / ئۇيغۇرچە', Uyghur */,
    'ur' /* 'اردو', Urdu */,
    'yi' /* 'ייִדיש', Yiddish */,
];
export var PepScreenSizeType;
(function (PepScreenSizeType) {
    PepScreenSizeType[PepScreenSizeType["XL"] = 0] = "XL";
    PepScreenSizeType[PepScreenSizeType["LG"] = 1] = "LG";
    PepScreenSizeType[PepScreenSizeType["MD"] = 2] = "MD";
    PepScreenSizeType[PepScreenSizeType["SM"] = 3] = "SM";
    PepScreenSizeType[PepScreenSizeType["XS"] = 4] = "XS";
})(PepScreenSizeType || (PepScreenSizeType = {}));
// export type PepScreenSizeType = 'xl' | 'lg' | 'md' | 'sm' | 'xs';
export class PepLayoutService {
    constructor(translate = null) {
        this.translate = translate;
        this.documentMouseoverListener = (event) => {
            this.deviceHasMouseSubject.next(true);
            this.deviceHasMouseSubject.complete();
            document.removeEventListener('mouseover', this.documentMouseoverListener, false);
        };
        this.resizeSubject = new BehaviorSubject(PepScreenSizeType.LG);
        this.deviceHasMouseSubject = new BehaviorSubject(false);
        document.addEventListener('mouseover', this.documentMouseoverListener, false);
        // document.addEventListener('touchstart', this._documentTouchstartListener, false);
    }
    get onResize$() {
        return this.resizeSubject.asObservable().pipe(distinctUntilChanged());
    }
    get onMouseOver$() {
        return this.deviceHasMouseSubject
            .asObservable()
            .pipe(distinctUntilChanged());
    }
    // private _documentTouchstartListener = (event: TouchEvent) => {
    //     debugger;
    //     this.isTouchDevice = true;
    //     document.removeEventListener('touchstart', this._documentTouchstartListener, false);
    // }
    /**
     * Set the current screen size.
     * @param size The size to change to.
     */
    onResize(size) {
        this.resizeSubject.next(size);
    }
    getDeviceHasMouse() {
        return this.deviceHasMouseSubject.getValue();
    }
    getOrintation() {
        if (window.innerHeight > window.innerWidth) {
            return 'portrait';
        }
        else {
            return 'landscape';
        }
    }
    getScreenWidth() {
        let retVal = 250.0;
        switch (this.resizeSubject.getValue()) {
            case PepScreenSizeType.XS: {
                retVal = this.getOrintation() === 'landscape' ? 130.0 : 65.0;
                break;
            }
            case PepScreenSizeType.SM:
            case PepScreenSizeType.MD: {
                retVal = this.getOrintation() === 'landscape' ? 220.0 : 140.0;
                break;
            }
            case PepScreenSizeType.LG:
            case PepScreenSizeType.XL: {
                retVal = this.getOrintation() === 'landscape' ? 400.0 : 250.0;
                break;
            }
        }
        return retVal;
    }
    getScreenHeight() {
        let retVal = 250.0;
        switch (this.resizeSubject.getValue()) {
            case PepScreenSizeType.XS: {
                retVal = this.getOrintation() === 'landscape' ? 65.0 : 130.0;
                break;
            }
            case PepScreenSizeType.SM:
            case PepScreenSizeType.MD: {
                retVal = this.getOrintation() === 'landscape' ? 140.0 : 220.0;
                break;
            }
            case PepScreenSizeType.LG:
            case PepScreenSizeType.XL: {
                retVal = this.getOrintation() === 'landscape' ? 250.0 : 400.0;
                break;
            }
        }
        return retVal;
    }
    getScreenHeightPx() {
        return (window.innerHeight ||
            document.documentElement.clientHeight ||
            document.body.clientHeight);
    }
    getScreenWidthPx() {
        return (window.innerWidth ||
            document.documentElement.clientWidth ||
            document.body.clientWidth);
    }
    getScrollbarWidth() {
        // Creating invisible container
        const outer = document.createElement('div');
        outer.style.visibility = 'hidden';
        outer.style.overflow = 'scroll'; // forcing scrollbar to appear
        // outer.style.msOverflowStyle = 'scrollbar'; // needed for WinJS apps
        document.body.appendChild(outer);
        // Creating inner element and placing it in the container
        const inner = document.createElement('div');
        outer.appendChild(inner);
        // Calculating difference between container's full width and the child width
        const scrollbarWidth = (outer.offsetWidth - inner.offsetWidth);
        // Removing temporary elements from the DOM
        outer.parentNode.removeChild(outer);
        return scrollbarWidth;
    }
    getCurrentLanguage() {
        var _a;
        return ((_a = this.translate) === null || _a === void 0 ? void 0 : _a.getBrowserCultureLang()) || navigator.language;
    }
    isRtl() {
        const userLang = this.getCurrentLanguage();
        const isRtl = _BIDI_RTL_LANGS.indexOf(userLang) >= 0;
        return isRtl;
    }
}
PepLayoutService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PepLayoutService_Factory() { return new PepLayoutService(i0.ɵɵinject(i1.TranslateService, 8)); }, token: PepLayoutService, providedIn: "root" });
PepLayoutService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
PepLayoutService.ctorParameters = () => [
    { type: TranslateService, decorators: [{ type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,