import { OnInit, OnChanges, OnDestroy, EventEmitter, ElementRef, ChangeDetectorRef, Renderer2, AfterViewInit } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { PepLayoutType, PepStyleType, PepCustomizationService, PepHorizontalAlignment, IPepFieldClickEvent, PepQuantitySelectorFieldType, PepUtilitiesService } from '@pepperi-addons/ngx-lib';
import { TranslateService } from '@ngx-translate/core';
export declare class PepQuantitySelectorComponent implements OnChanges, OnInit, AfterViewInit, OnDestroy {
    private cd;
    private customizationService;
    private renderer;
    private element;
    private translate;
    private utilitiesService;
    static ENTER_CHILDREN: string;
    static ENTER_PACKAGE: string;
    static PLUS: string;
    static MINUS: string;
    key: string;
    private _value;
    set value(value: string);
    get value(): string;
    private _formattedValue;
    set formattedValue(value: string);
    get formattedValue(): string;
    label: string;
    type: PepQuantitySelectorFieldType;
    mandatory: boolean;
    disabled: boolean;
    readonly: boolean;
    private _textColor;
    set textColor(value: string);
    get textColor(): string;
    xAlignment: PepHorizontalAlignment;
    rowSpan: number;
    allowDecimal: boolean;
    additionalValue: string;
    private _notificationInfo;
    set notificationInfo(value: any);
    get notificationInfo(): any;
    private _visible;
    set visible(visible: boolean);
    get visible(): boolean;
    controlType: string;
    form: FormGroup;
    showTitle: boolean;
    layoutType: PepLayoutType;
    isActive: boolean;
    styleType: PepStyleType;
    valueChange: EventEmitter<string>;
    elementClick: EventEmitter<IPepFieldClickEvent>;
    QSCont: ElementRef;
    QSInput: ElementRef;
    private _calculateFormattedValue;
    get calculateFormattedValue(): boolean;
    private readonly _destroyed;
    private qsWidthSubject;
    lastQsContClientWidth: number;
    showQsBtn: boolean;
    standAlone: boolean;
    isInFocus: boolean;
    isMatrixFocus: boolean;
    isCaution: boolean;
    messages: Array<any>;
    sameElementInTheWantedRow: any;
    isEmptyKey: boolean;
    constructor(cd: ChangeDetectorRef, customizationService: PepCustomizationService, renderer: Renderer2, element: ElementRef, translate: TranslateService, utilitiesService: PepUtilitiesService);
    setForm(): void;
    private setFormattedValue;
    private updateFormFieldValue;
    get displayValue(): string;
    protected getDestroyer(): import("rxjs").MonoTypeOperatorFunction<unknown>;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnChanges(changes: any): void;
    ngOnDestroy(): void;
    get getAdditionalValue(): string;
    getParentByClass(el: any, parentSelector: any): any;
    getSameElementInTheWantedRowByClassName(event: any, isNext?: boolean): any;
    setSameElementInTheWantedRow(event: any, isNext?: boolean): void;
    focusToTheSameElementInTheWantedRow(): void;
    cleanError(): void;
    onMatrixMouseEnter(event: any): void;
    onMatrixMouseleave(event: any): void;
    onMatrixClick(event: any): void;
    onMatrixBlur(event: any): void;
    onFocus(event: any): void;
    isDifferentValue(value: string): boolean;
    onBlur(event: any): void;
    onKeydown(event: any): any;
    increment(event: any): void;
    decrement(event: any): void;
    enterChildren(event: any): void;
    enterPackage(event: any): void;
    setupQsButtons(qsWidth: number): void;
    setQsView(): void;
}
