{"version":3,"file":"pepperi-addons-ngx-lib-dialog.umd.js","sources":["../../../projects/ngx-lib/dialog/dialog.model.ts","../../../projects/ngx-lib/dialog/default-dialog.component.ts","../../../projects/ngx-lib/dialog/dialog.component.ts","../../../projects/ngx-lib/dialog/dialog.module.ts","../../../projects/ngx-lib/dialog/dialog.service.ts","../../../projects/ngx-lib/dialog/public-api.ts","../../../projects/ngx-lib/dialog/pepperi-addons-ngx-lib-dialog.ts"],"sourcesContent":["export type PepDialogSizeType =\n    | 'inline'\n    | 'small'\n    | 'regular'\n    | 'large'\n    | 'full-screen';\n\nexport type PepDialogActionsType =\n    | 'close'\n    | 'cancel-continue'\n    | 'cancel-ok'\n    | 'cancel-delete'\n    | 'custom';\n\nexport class PepDialogActionButton {\n    title = '';\n    className = '';\n    callback: () => void;\n\n    constructor(title = '', className = '', callback: () => void = null) {\n        this.title = title;\n        this.className = className;\n        this.callback = callback;\n    }\n}\n\nexport class PepDialogData {\n    title: string;\n    actionsType: PepDialogActionsType;\n    content: any;\n    showClose: boolean;\n    showHeader: boolean;\n    showFooter: boolean;\n    actionButtons: Array<PepDialogActionButton>;\n\n    constructor(options: {\n        title?: string;\n        actionsType?: PepDialogActionsType;\n        content?: any;\n        contentDisabled?: boolean;\n        showClose?: boolean;\n        showHeader?: boolean;\n        showFooter?: boolean;\n        actionButtons?: Array<PepDialogActionButton>;\n    }) {\n        this.title = options.title || '';\n        this.actionsType = options.actionsType || 'close';\n        this.content = options.content || '';\n        this.showClose = options.showClose ?? true;\n        this.showHeader = options.showHeader ?? true;\n        this.showFooter = options.showFooter ?? true;\n        this.actionButtons = options.actionButtons ?? null;\n    }\n}\n","import { Component, Inject, ViewEncapsulation } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { PepDialogData, PepDialogActionButton } from './dialog.model';\n\n@Component({\n    templateUrl: './default-dialog.component.html',\n    styleUrls: ['./default-dialog.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class PepDefaultDialogComponent {\n    constructor(\n        @Inject(MAT_DIALOG_DATA) public data: PepDialogData,\n        public dialogRef: MatDialogRef<any>\n    ) {}\n\n    onActionButtonClicked(button: PepDialogActionButton): void {\n        this.dialogRef.close(true);\n        this.dialogRef.afterClosed().subscribe((isActionButtonClicked) => {\n            if (isActionButtonClicked && button?.callback) {\n                button.callback();\n            }\n        });\n    }\n}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'pep-dialog',\n    styleUrls: ['./dialog.component.scss'],\n    templateUrl: './dialog.component.html',\n})\nexport class PepDialogComponent {\n    @Input() title: string;\n    @Input() showClose = true;\n    @Input() showHeader = true;\n    @Input() showFooter = true;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatDialogModule } from '@angular/material/dialog';\n\nimport { PepNgxLibModule } from '@pepperi-addons/ngx-lib';\nimport {\n    PepIconModule,\n    PepIconRegistry,\n    pepIconSystemClose,\n} from '@pepperi-addons/ngx-lib/icon';\n\nimport { PepDefaultDialogComponent } from './default-dialog.component';\nimport { PepDialogComponent } from './dialog.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        // Material modules,\n        MatCommonModule,\n        MatButtonModule,\n        MatIconModule,\n        MatDialogModule,\n        // ngx-lib modules\n        PepNgxLibModule,\n        PepIconModule,\n    ],\n    exports: [PepDialogComponent],\n    declarations: [PepDefaultDialogComponent, PepDialogComponent],\n    entryComponents: [PepDefaultDialogComponent],\n})\nexport class PepDialogModule {\n    constructor(private pepIconRegistry: PepIconRegistry) {\n        this.pepIconRegistry.registerIcons([pepIconSystemClose]);\n    }\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport {\n    MatDialog,\n    MatDialogConfig,\n    MatDialogRef,\n} from '@angular/material/dialog';\nimport { PepLayoutService } from '@pepperi-addons/ngx-lib';\nimport { Overlay } from '@angular/cdk/overlay';\nimport { ComponentType } from '@angular/cdk/portal';\nimport { PepDialogSizeType, PepDialogData } from './dialog.model';\nimport { PepDefaultDialogComponent } from './default-dialog.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PepDialogService {\n    constructor(\n        private dialog: MatDialog,\n        private layoutService: PepLayoutService,\n        private overlay: Overlay\n    ) { }\n\n    private fixConfigIfNeeded(data: PepDialogData, config: MatDialogConfig) {\n        if (config.disableClose) {\n            if (\n                ((!data.showClose || !data.showHeader) && !data.showFooter) ||\n                (data.actionsType === 'custom' &&\n                    (data.actionButtons === null ||\n                        data.actionButtons.length === 0))\n            ) {\n                config.disableClose = false;\n            }\n        }\n    }\n\n    getDialogConfig(\n        options: {\n            disableClose?: boolean;\n            height?: string;\n            minWidth?: string;\n            maxWidth?: string;\n            maxHeight?: string;\n            panelClass?: string;\n        } = {},\n        size: PepDialogSizeType = 'regular'\n    ): MatDialogConfig {\n        const dialogConfig = new MatDialogConfig();\n\n        dialogConfig.autoFocus = false;\n        dialogConfig.direction = this.layoutService.isRtl() ? 'rtl' : 'ltr';\n        dialogConfig.disableClose = options.disableClose ?? true;\n        dialogConfig.panelClass = ['pep-dialog', options.panelClass || ''];\n\n        if (size === 'inline') {\n            dialogConfig.height = options.height || 'auto';\n            dialogConfig.maxWidth = options.maxWidth || '100vw';\n            dialogConfig.maxHeight = options.maxHeight || '100vh';\n            dialogConfig.minWidth = options.minWidth || '300px';\n        }\n\n        dialogConfig.panelClass.push(size);\n\n        dialogConfig.scrollStrategy = this.overlay.scrollStrategies.noop();\n        // dialogConfig.scrollStrategy = this.overlay.scrollStrategies.block();\n\n        return dialogConfig;\n    }\n\n    openDefaultDialog(\n        data: PepDialogData,\n        config: MatDialogConfig = null\n    ): MatDialogRef<PepDefaultDialogComponent> {\n        if (!config) {\n            config = this.getDialogConfig();\n        }\n        this.fixConfigIfNeeded(data, config);\n\n        config.data = data;\n        const dialogRef = this.dialog.open(PepDefaultDialogComponent, config);\n        return dialogRef;\n    }\n\n    openDialog<T>(\n        componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n        data: any = {},\n        config: MatDialogConfig = null\n    ): MatDialogRef<T> {\n        if (!config) {\n            config = this.getDialogConfig();\n        }\n        this.fixConfigIfNeeded(data, config);\n\n        config.data = data;\n        const dialogRef = this.dialog.open(componentOrTemplateRef, config);\n        return dialogRef;\n    }\n}\n","/*\n * Public API Surface of ngx-lib/dialog\n */\nexport * from './dialog.module';\nexport * from './dialog.model';\nexport * from './dialog.component';\nexport * from './dialog.service';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {PepDefaultDialogComponent as Éµa} from './default-dialog.component';"],"names":["Component","ViewEncapsulation","Inject","MAT_DIALOG_DATA","MatDialogRef","Input","pepIconSystemClose","NgModule","CommonModule","MatCommonModule","MatButtonModule","MatIconModule","MatDialogModule","PepNgxLibModule","PepIconModule","PepIconRegistry","MatDialogConfig","Injectable","MatDialog","PepLayoutService","Overlay"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAmBI,+BAAY,KAAU,EAAE,SAAc,EAAE,QAA2B;YAAvD,sBAAA,EAAA,UAAU;YAAE,0BAAA,EAAA,cAAc;YAAE,yBAAA,EAAA,eAA2B;YAJnE,UAAK,GAAG,EAAE,CAAC;YACX,cAAS,GAAG,EAAE,CAAC;YAIX,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;YAC3B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC5B;oCACJ;KAAA,IAAA;;QAWG,uBAAY,OASX;;YACG,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC;YACjC,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC;YAClD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;YACrC,IAAI,CAAC,SAAS,GAAG,MAAA,OAAO,CAAC,SAAS,mCAAI,IAAI,CAAC;YAC3C,IAAI,CAAC,UAAU,GAAG,MAAA,OAAO,CAAC,UAAU,mCAAI,IAAI,CAAC;YAC7C,IAAI,CAAC,UAAU,GAAG,MAAA,OAAO,CAAC,UAAU,mCAAI,IAAI,CAAC;YAC7C,IAAI,CAAC,aAAa,GAAG,MAAA,OAAO,CAAC,aAAa,mCAAI,IAAI,CAAC;SACtD;4BACJ;KAAA;;;QC3CG,mCACoC,IAAmB,EAC5C,SAA4B;YADH,SAAI,GAAJ,IAAI,CAAe;YAC5C,cAAS,GAAT,SAAS,CAAmB;SACnC;QAEJ,yDAAqB,GAArB,UAAsB,MAA6B;YAC/C,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC3B,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,UAAC,qBAAqB;gBACzD,IAAI,qBAAqB,KAAI,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,QAAQ,CAAA,EAAE;oBAC3C,MAAM,CAAC,QAAQ,EAAE,CAAC;iBACrB;aACJ,CAAC,CAAC;SACN;;;;gBAlBJA,YAAS,SAAC;oBACP,iqFAA8C;oBAE9C,aAAa,EAAEC,oBAAiB,CAAC,IAAI;;iBACxC;;;gBANQ,aAAa,uBASbC,SAAM,SAACC,kBAAe;gBAVLC,eAAY;;;;QCCtC;YAOa,cAAS,GAAG,IAAI,CAAC;YACjB,eAAU,GAAG,IAAI,CAAC;YAClB,eAAU,GAAG,IAAI,CAAC;SAC9B;;;;gBAVAJ,YAAS,SAAC;oBACP,QAAQ,EAAE,YAAY;oBAEtB,4qBAAsC;;iBACzC;;;wBAEIK,QAAK;4BACLA,QAAK;6BACLA,QAAK;6BACLA,QAAK;;;;QCwBN,yBAAoB,eAAgC;YAAhC,oBAAe,GAAf,eAAe,CAAiB;YAChD,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,CAACC,uBAAkB,CAAC,CAAC,CAAC;SAC5D;;;;gBAnBJC,WAAQ,SAAC;oBACN,OAAO,EAAE;wBACLC,mBAAY;;wBAEZC,oBAAe;wBACfC,sBAAe;wBACfC,oBAAa;wBACbC,kBAAe;;wBAEfC,kBAAe;wBACfC,kBAAa;qBAChB;oBACD,OAAO,EAAE,CAAC,kBAAkB,CAAC;oBAC7B,YAAY,EAAE,CAAC,yBAAyB,EAAE,kBAAkB,CAAC;oBAC7D,eAAe,EAAE,CAAC,yBAAyB,CAAC;iBAC/C;;;gBAtBGC,oBAAe;;;;QCKf,0BACY,MAAiB,EACjB,aAA+B,EAC/B,OAAgB;YAFhB,WAAM,GAAN,MAAM,CAAW;YACjB,kBAAa,GAAb,aAAa,CAAkB;YAC/B,YAAO,GAAP,OAAO,CAAS;SACvB;QAEG,4CAAiB,GAAjB,UAAkB,IAAmB,EAAE,MAAuB;YAClE,IAAI,MAAM,CAAC,YAAY,EAAE;gBACrB,IACI,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,UAAU,KAAK,CAAC,IAAI,CAAC,UAAU;qBACzD,IAAI,CAAC,WAAW,KAAK,QAAQ;yBACzB,IAAI,CAAC,aAAa,KAAK,IAAI;4BACxB,IAAI,CAAC,aAAa,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,EAC3C;oBACE,MAAM,CAAC,YAAY,GAAG,KAAK,CAAC;iBAC/B;aACJ;SACJ;QAED,0CAAe,GAAf,UACI,OAOM,EACN,IAAmC;YARnC,wBAAA,EAAA,YAOM;YACN,qBAAA,EAAA,gBAAmC;;YAEnC,IAAM,YAAY,GAAG,IAAIC,kBAAe,EAAE,CAAC;YAE3C,YAAY,CAAC,SAAS,GAAG,KAAK,CAAC;YAC/B,YAAY,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,GAAG,KAAK,GAAG,KAAK,CAAC;YACpE,YAAY,CAAC,YAAY,GAAG,MAAA,OAAO,CAAC,YAAY,mCAAI,IAAI,CAAC;YACzD,YAAY,CAAC,UAAU,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC,UAAU,IAAI,EAAE,CAAC,CAAC;YAEnE,IAAI,IAAI,KAAK,QAAQ,EAAE;gBACnB,YAAY,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,MAAM,CAAC;gBAC/C,YAAY,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC;gBACpD,YAAY,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC;gBACtD,YAAY,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC;aACvD;YAED,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEnC,YAAY,CAAC,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;;YAGnE,OAAO,YAAY,CAAC;SACvB;QAED,4CAAiB,GAAjB,UACI,IAAmB,EACnB,MAA8B;YAA9B,uBAAA,EAAA,aAA8B;YAE9B,IAAI,CAAC,MAAM,EAAE;gBACT,MAAM,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;aACnC;YACD,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YAErC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;YACnB,IAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,yBAAyB,EAAE,MAAM,CAAC,CAAC;YACtE,OAAO,SAAS,CAAC;SACpB;QAED,qCAAU,GAAV,UACI,sBAAyD,EACzD,IAAc,EACd,MAA8B;YAD9B,qBAAA,EAAA,SAAc;YACd,uBAAA,EAAA,aAA8B;YAE9B,IAAI,CAAC,MAAM,EAAE;gBACT,MAAM,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;aACnC;YACD,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YAErC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;YACnB,IAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC;YACnE,OAAO,SAAS,CAAC;SACpB;;;;;gBAnFJC,aAAU,SAAC;oBACR,UAAU,EAAE,MAAM;iBACrB;;;gBAZGC,YAAS;gBAIJC,mBAAgB;gBAChBC,UAAO;;;ICPhB;;;;ICAA;;;;;;;;;;;;;;;;;"}