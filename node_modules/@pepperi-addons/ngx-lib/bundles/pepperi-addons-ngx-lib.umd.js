(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/common/http'), require('@angular/forms'), require('rxjs'), require('rxjs/operators'), require('@ngx-translate/core'), require('@angular/platform-browser'), require('@angular/cdk/coercion'), require('ngx-translate-multi-http-loader')) :
    typeof define === 'function' && define.amd ? define('@pepperi-addons/ngx-lib', ['exports', '@angular/core', '@angular/common', '@angular/common/http', '@angular/forms', 'rxjs', 'rxjs/operators', '@ngx-translate/core', '@angular/platform-browser', '@angular/cdk/coercion', 'ngx-translate-multi-http-loader'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['pepperi-addons'] = global['pepperi-addons'] || {}, global['pepperi-addons']['ngx-lib'] = {}), global.ng.core, global.ng.common, global.ng.common.http, global.ng.forms, global.rxjs, global.rxjs.operators, global.translate, global.ng.platformBrowser, global.ng.cdk.coercion, global.ngxTranslateMultiHttpLoader));
}(this, (function (exports, i0, i1$1, i3, i3$1, rxjs, operators, i1, platformBrowser, coercion, ngxTranslateMultiHttpLoader) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3$1);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    // import { ToastrService } from 'ngx-toastr';
    var PepErrorInterceptor = /** @class */ (function () {
        function PepErrorInterceptor() {
        }
        // constructor() {} // private toastr: ToastrService
        PepErrorInterceptor.prototype.intercept = function (req, next) {
            // console.warn('ErrorInterceptor');
            return next.handle(req).pipe(
            // retry(2), TODO: Check if we want to retry
            operators.catchError(function (error) {
                // 401 handled in auth.interceptor
                if (error.status !== 401) {
                    // TODO: Show error in dialog.
                    // this.toastr.error(error.message);
                }
                return rxjs.throwError(error);
            }));
        };
        return PepErrorInterceptor;
    }());
    PepErrorInterceptor.decorators = [
        { type: i0.Injectable }
    ];

    var PepLoaderService = /** @class */ (function () {
        function PepLoaderService() {
            var _this = this;
            this.counter = 0;
            this.showLoaderSubject = new rxjs.BehaviorSubject(false);
            // Raise custom event for showing the loader.
            this.onChanged$.subscribe(function (show) {
                _this.showLoaderChanged(show);
            });
        }
        Object.defineProperty(PepLoaderService.prototype, "onChanged$", {
            get: function () {
                return this.showLoaderSubject
                    .asObservable()
                    .pipe(operators.distinctUntilChanged());
            },
            enumerable: false,
            configurable: true
        });
        PepLoaderService.prototype.showLoaderChanged = function (show) {
            var eventData = {
                detail: {
                    showLoader: show,
                },
            };
            var event = new CustomEvent('toggleLoader', eventData);
            window.dispatchEvent(event);
        };
        PepLoaderService.prototype.show = function () {
            this.counter++;
            this.showLoaderSubject.next(true);
        };
        PepLoaderService.prototype.hide = function () {
            this.counter--;
            if (this.counter < 0) {
                this.counter = 0;
            }
            if (this.counter === 0) {
                this.showLoaderSubject.next(false);
            }
        };
        return PepLoaderService;
    }());
    PepLoaderService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PepLoaderService_Factory() { return new PepLoaderService(); }, token: PepLoaderService, providedIn: "root" });
    PepLoaderService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    PepLoaderService.ctorParameters = function () { return []; };

    var PepLoaderInterceptor = /** @class */ (function () {
        function PepLoaderInterceptor(injector) {
            this.injector = injector;
        }
        PepLoaderInterceptor.prototype.intercept = function (req, next) {
            // console.warn('LoaderInterceptor');
            var loaderService = this.injector.get(PepLoaderService);
            loaderService.show();
            return next.handle(req).pipe(
            // delay(3000),
            operators.catchError(function (err) {
                loaderService.hide();
                return rxjs.throwError(err);
            }), operators.finalize(function () { return loaderService.hide(); }));
            // return next.handle(req).pipe(map(event => {
            //     if (event instanceof HttpResponse) {
            //        loaderService.hide();
            //     }
            //     return event;
            // }));
        };
        return PepLoaderInterceptor;
    }());
    PepLoaderInterceptor.decorators = [
        { type: i0.Injectable }
    ];
    PepLoaderInterceptor.ctorParameters = function () { return [
        { type: i0.Injector }
    ]; };

    var PepProfilerInterceptor = /** @class */ (function () {
        function PepProfilerInterceptor() {
        }
        PepProfilerInterceptor.prototype.intercept = function (req, next) {
            // console.warn('ProfilerInterceptor');
            var started = Date.now();
            var ok;
            return next.handle(req).pipe(operators.tap(
            // Succeeds when there is a response; ignore other events
            function (event) {
                if (event instanceof i3.HttpResponse) {
                    ok = 'succeeded';
                }
            }, 
            // Operation failed; error is an HttpErrorResponse
            function (error) { return (ok = 'failed'); }), 
            // Log when response observable either completes or errors
            operators.finalize(function () {
                var elapsed = Date.now() - started;
                var msg = req.method + " \"" + req.urlWithParams + "\" " + ok + " in " + elapsed + " ms.";
                console.log(msg);
            }));
        };
        return PepProfilerInterceptor;
    }());
    PepProfilerInterceptor.decorators = [
        { type: i0.Injectable }
    ];

    var httpInterceptorProviders = [
        // { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },
        //   { provide: HTTP_INTERCEPTORS, useClass: CacheInterceptor, multi: true },
        //   { provide: HTTP_INTERCEPTORS, useClass: ConvertInterceptor, multi: true },
        { provide: i3.HTTP_INTERCEPTORS, useClass: PepErrorInterceptor, multi: true },
        //   { provide: HTTP_INTERCEPTORS, useClass: FakeInterceptor, multi: true },
        //   { provide: HTTP_INTERCEPTORS, useClass: HeaderInterceptor, multi: true },
        { provide: i3.HTTP_INTERCEPTORS, useClass: PepLoaderInterceptor, multi: true },
        {
            provide: i3.HTTP_INTERCEPTORS,
            useClass: PepProfilerInterceptor,
            multi: true,
        },
    ];

    // Import the core angular services.
    // Import the application components and services.
    // import { PepClipboardService } from './clipboard.service';
    // This directive acts as a simple glue layer between the given [clipboard] property
    // and the underlying ClipboardService. Upon the (click) event, the [clipboard] value
    // will be copied to the ClipboardService and a (clipboardCopy) event will be emitted.
    var PepClipboardDirective = /** @class */ (function () {
        function PepClipboardDirective() {
        }
        return PepClipboardDirective;
    }());
    PepClipboardDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[pepClipboard]',
                    inputs: ['value: clipboard'],
                    outputs: ['copyEvent: clipboardCopy', 'errorEvent: clipboardError'],
                    host: {
                        '(click)': 'copyToClipboard()',
                    },
                },] }
    ];

    // Const BIDI_RTL_LANGS Array
    // BIDI_RTL_LANGS ref: http://en.wikipedia.org/wiki/Right-to-left
    // Table of scripts in Unicode: https://en.wikipedia.org/wiki/Script_(Unicode)
    var _BIDI_RTL_LANGS = [
        'ae' /* Avestan */,
        'ar' /* 'العربية', Arabic */,
        'arc' /* Aramaic */,
        'bcc' /* 'بلوچی مکرانی', Southern Balochi */,
        'bqi' /* 'بختياري', Bakthiari */,
        'ckb' /* 'Soranî / کوردی', Sorani */,
        'dv' /* Dhivehi */,
        'fa' /* 'فارسی', Persian */,
        'glk' /* 'گیلکی', Gilaki */,
        'he' /* 'עברית', Hebrew */,
        'ku' /* 'Kurdî / كوردی', Kurdish */,
        'mzn' /* 'مازِرونی', Mazanderani */,
        'nqo' /* N'Ko */,
        'pnb' /* 'پنجابی', Western Punjabi */,
        'ps' /* 'پښتو', Pashto, */,
        'sd' /* 'سنڌي', Sindhi */,
        'ug' /* 'Uyghurche / ئۇيغۇرچە', Uyghur */,
        'ur' /* 'اردو', Urdu */,
        'yi' /* 'ייִדיש', Yiddish */,
    ];
    exports.PepScreenSizeType = void 0;
    (function (PepScreenSizeType) {
        PepScreenSizeType[PepScreenSizeType["XL"] = 0] = "XL";
        PepScreenSizeType[PepScreenSizeType["LG"] = 1] = "LG";
        PepScreenSizeType[PepScreenSizeType["MD"] = 2] = "MD";
        PepScreenSizeType[PepScreenSizeType["SM"] = 3] = "SM";
        PepScreenSizeType[PepScreenSizeType["XS"] = 4] = "XS";
    })(exports.PepScreenSizeType || (exports.PepScreenSizeType = {}));
    // export type PepScreenSizeType = 'xl' | 'lg' | 'md' | 'sm' | 'xs';
    var PepLayoutService = /** @class */ (function () {
        function PepLayoutService(translate) {
            var _this = this;
            if (translate === void 0) { translate = null; }
            this.translate = translate;
            this.documentMouseoverListener = function (event) {
                _this.deviceHasMouseSubject.next(true);
                _this.deviceHasMouseSubject.complete();
                document.removeEventListener('mouseover', _this.documentMouseoverListener, false);
            };
            this.resizeSubject = new rxjs.BehaviorSubject(exports.PepScreenSizeType.LG);
            this.deviceHasMouseSubject = new rxjs.BehaviorSubject(false);
            document.addEventListener('mouseover', this.documentMouseoverListener, false);
            // document.addEventListener('touchstart', this._documentTouchstartListener, false);
        }
        Object.defineProperty(PepLayoutService.prototype, "onResize$", {
            get: function () {
                return this.resizeSubject.asObservable().pipe(operators.distinctUntilChanged());
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PepLayoutService.prototype, "onMouseOver$", {
            get: function () {
                return this.deviceHasMouseSubject
                    .asObservable()
                    .pipe(operators.distinctUntilChanged());
            },
            enumerable: false,
            configurable: true
        });
        // private _documentTouchstartListener = (event: TouchEvent) => {
        //     debugger;
        //     this.isTouchDevice = true;
        //     document.removeEventListener('touchstart', this._documentTouchstartListener, false);
        // }
        /**
         * Set the current screen size.
         * @param size The size to change to.
         */
        PepLayoutService.prototype.onResize = function (size) {
            this.resizeSubject.next(size);
        };
        PepLayoutService.prototype.getDeviceHasMouse = function () {
            return this.deviceHasMouseSubject.getValue();
        };
        PepLayoutService.prototype.getOrintation = function () {
            if (window.innerHeight > window.innerWidth) {
                return 'portrait';
            }
            else {
                return 'landscape';
            }
        };
        PepLayoutService.prototype.getScreenWidth = function () {
            var retVal = 250.0;
            switch (this.resizeSubject.getValue()) {
                case exports.PepScreenSizeType.XS: {
                    retVal = this.getOrintation() === 'landscape' ? 130.0 : 65.0;
                    break;
                }
                case exports.PepScreenSizeType.SM:
                case exports.PepScreenSizeType.MD: {
                    retVal = this.getOrintation() === 'landscape' ? 220.0 : 140.0;
                    break;
                }
                case exports.PepScreenSizeType.LG:
                case exports.PepScreenSizeType.XL: {
                    retVal = this.getOrintation() === 'landscape' ? 400.0 : 250.0;
                    break;
                }
            }
            return retVal;
        };
        PepLayoutService.prototype.getScreenHeight = function () {
            var retVal = 250.0;
            switch (this.resizeSubject.getValue()) {
                case exports.PepScreenSizeType.XS: {
                    retVal = this.getOrintation() === 'landscape' ? 65.0 : 130.0;
                    break;
                }
                case exports.PepScreenSizeType.SM:
                case exports.PepScreenSizeType.MD: {
                    retVal = this.getOrintation() === 'landscape' ? 140.0 : 220.0;
                    break;
                }
                case exports.PepScreenSizeType.LG:
                case exports.PepScreenSizeType.XL: {
                    retVal = this.getOrintation() === 'landscape' ? 250.0 : 400.0;
                    break;
                }
            }
            return retVal;
        };
        PepLayoutService.prototype.getScreenHeightPx = function () {
            return (window.innerHeight ||
                document.documentElement.clientHeight ||
                document.body.clientHeight);
        };
        PepLayoutService.prototype.getScreenWidthPx = function () {
            return (window.innerWidth ||
                document.documentElement.clientWidth ||
                document.body.clientWidth);
        };
        PepLayoutService.prototype.getScrollbarWidth = function () {
            // Creating invisible container
            var outer = document.createElement('div');
            outer.style.visibility = 'hidden';
            outer.style.overflow = 'scroll'; // forcing scrollbar to appear
            // outer.style.msOverflowStyle = 'scrollbar'; // needed for WinJS apps
            document.body.appendChild(outer);
            // Creating inner element and placing it in the container
            var inner = document.createElement('div');
            outer.appendChild(inner);
            // Calculating difference between container's full width and the child width
            var scrollbarWidth = (outer.offsetWidth - inner.offsetWidth);
            // Removing temporary elements from the DOM
            outer.parentNode.removeChild(outer);
            return scrollbarWidth;
        };
        PepLayoutService.prototype.getCurrentLanguage = function () {
            var _a;
            return ((_a = this.translate) === null || _a === void 0 ? void 0 : _a.getBrowserCultureLang()) || navigator.language;
        };
        PepLayoutService.prototype.isRtl = function () {
            var userLang = this.getCurrentLanguage();
            var isRtl = _BIDI_RTL_LANGS.indexOf(userLang) >= 0;
            return isRtl;
        };
        return PepLayoutService;
    }());
    PepLayoutService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PepLayoutService_Factory() { return new PepLayoutService(i0__namespace.ɵɵinject(i1__namespace.TranslateService, 8)); }, token: PepLayoutService, providedIn: "root" });
    PepLayoutService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    PepLayoutService.ctorParameters = function () { return [
        { type: i1.TranslateService, decorators: [{ type: i0.Optional }] }
    ]; };

    var PepRtlClassDirective = /** @class */ (function () {
        function PepRtlClassDirective(layoutService, renderer, element) {
            this.layoutService = layoutService;
            this.renderer = renderer;
            this.element = element;
        }
        PepRtlClassDirective.prototype.ngOnInit = function () {
            var isRtl = this.layoutService.isRtl();
            if (isRtl) {
                this.renderer.addClass(this.element.nativeElement, 'rtl');
            }
        };
        return PepRtlClassDirective;
    }());
    PepRtlClassDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[pepRtlClass]',
                },] }
    ];
    PepRtlClassDirective.ctorParameters = function () { return [
        { type: PepLayoutService },
        { type: i0.Renderer2 },
        { type: i0.ElementRef }
    ]; };
    var PepRtlDirectionDirective = /** @class */ (function () {
        function PepRtlDirectionDirective(layoutService, renderer, element) {
            this.layoutService = layoutService;
            this.renderer = renderer;
            this.element = element;
        }
        PepRtlDirectionDirective.prototype.ngOnInit = function () {
            var isRtl = this.layoutService.isRtl();
            this.renderer.setAttribute(this.element.nativeElement, 'dir', isRtl ? 'rtl' : 'ltr');
        };
        return PepRtlDirectionDirective;
    }());
    PepRtlDirectionDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[pepRtlDirection]',
                },] }
    ];
    PepRtlDirectionDirective.ctorParameters = function () { return [
        { type: PepLayoutService },
        { type: i0.Renderer2 },
        { type: i0.ElementRef }
    ]; };

    var PepCapitalizePipe = /** @class */ (function () {
        function PepCapitalizePipe() {
        }
        PepCapitalizePipe.prototype.transform = function (value) {
            if (value) {
                return value.charAt(0).toUpperCase() + value.slice(1);
            }
            return value;
        };
        return PepCapitalizePipe;
    }());
    PepCapitalizePipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'pepCapitalize' },] }
    ];
    var PepEncodePipe = /** @class */ (function () {
        function PepEncodePipe() {
        }
        PepEncodePipe.prototype.transform = function (value) {
            if (value) {
                var v = btoa(value);
                return v;
            }
            return value;
        };
        return PepEncodePipe;
    }());
    PepEncodePipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'pepEncode' },] }
    ];
    var PepEscapePipe = /** @class */ (function () {
        function PepEscapePipe() {
        }
        PepEscapePipe.prototype.transform = function (value) {
            if (value) {
                var v = escape(value);
                return v;
            }
            return value;
        };
        return PepEscapePipe;
    }());
    PepEscapePipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'pepEscape' },] }
    ];
    var PepReplaceLineBreaksPipe = /** @class */ (function () {
        function PepReplaceLineBreaksPipe() {
        }
        PepReplaceLineBreaksPipe.prototype.transform = function (value) {
            var newValue = value.replace(/(<br\ ?\/?>)/g, ' ');
            return newValue;
        };
        return PepReplaceLineBreaksPipe;
    }());
    PepReplaceLineBreaksPipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'pepReplaceLineBreaks' },] }
    ];
    var PepDateFormatterPipe = /** @class */ (function () {
        function PepDateFormatterPipe() {
        }
        PepDateFormatterPipe.prototype.transform = function (value, culture, showTime) {
            if (showTime === void 0) { showTime = false; }
            var res = '';
            value = new Date(value);
            if (value) {
                res = value.toLocaleDateString(culture || 'en-US');
                if (showTime) {
                    res +=
                        ' ' +
                            value.toLocaleTimeString(culture || 'en-US', {
                                hour: '2-digit',
                                minute: '2-digit',
                            });
                }
            }
            return res;
        };
        return PepDateFormatterPipe;
    }());
    PepDateFormatterPipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'pepDateFormatter' },] }
    ];
    var PepDateStringFormatterPipe = /** @class */ (function () {
        function PepDateStringFormatterPipe() {
        }
        PepDateStringFormatterPipe.prototype.transform = function (value, culture, showTime) {
            if (showTime === void 0) { showTime = false; }
            var res = '';
            var tmpDate = new Date(value);
            if (value) {
                res = tmpDate.toLocaleDateString(culture || 'en-US');
                if (showTime) {
                    res += ' ' + tmpDate.toLocaleTimeString(culture || 'en-US');
                }
            }
            return res;
        };
        return PepDateStringFormatterPipe;
    }());
    PepDateStringFormatterPipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'pepDateStringFormatter' },] }
    ];
    var PepSafeHtmlPipe = /** @class */ (function () {
        function PepSafeHtmlPipe(sanitizer) {
            this.sanitizer = sanitizer;
        }
        PepSafeHtmlPipe.prototype.transform = function (html) {
            return this.sanitizer.bypassSecurityTrustHtml(html);
        };
        return PepSafeHtmlPipe;
    }());
    PepSafeHtmlPipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'pepSafeHtml' },] }
    ];
    PepSafeHtmlPipe.ctorParameters = function () { return [
        { type: platformBrowser.DomSanitizer }
    ]; };
    var PepSafePipe = /** @class */ (function () {
        function PepSafePipe(sanitizer) {
            this.sanitizer = sanitizer;
        }
        PepSafePipe.prototype.transform = function (value, type) {
            switch (type) {
                case 'html':
                    return this.sanitizer.bypassSecurityTrustHtml(value);
                case 'style':
                    return this.sanitizer.bypassSecurityTrustStyle(value);
                case 'script':
                    return this.sanitizer.bypassSecurityTrustScript(value);
                case 'url':
                    return this.sanitizer.bypassSecurityTrustUrl(value);
                case 'resourceUrl':
                    return this.sanitizer.bypassSecurityTrustResourceUrl(value);
                default:
                    throw new Error("Invalid safe type specified: " + type);
            }
        };
        return PepSafePipe;
    }());
    PepSafePipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'pepSafe' },] }
    ];
    PepSafePipe.ctorParameters = function () { return [
        { type: platformBrowser.DomSanitizer }
    ]; };
    var PepSplitUppercasePipe = /** @class */ (function () {
        function PepSplitUppercasePipe() {
        }
        PepSplitUppercasePipe.prototype.transform = function (value) {
            var newValue = value.replace(/([a-z])([A-Z])/g, '$1 $2');
            return newValue;
        };
        return PepSplitUppercasePipe;
    }());
    PepSplitUppercasePipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'pepSplitUppercase' },] }
    ];
    var PepToNumberPipe = /** @class */ (function () {
        function PepToNumberPipe() {
        }
        PepToNumberPipe.prototype.transform = function (value) {
            return parseInt(value);
        };
        return PepToNumberPipe;
    }());
    PepToNumberPipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'pepToNumber' },] }
    ];

    var PepInputAutoWidthDirective = /** @class */ (function () {
        function PepInputAutoWidthDirective(renderer, el) {
            this.renderer = renderer;
            this.el = el;
            this.includePadding = true;
            this.input = null;
        }
        PepInputAutoWidthDirective.prototype.ngAfterViewInit = function () {
            if (this.el.nativeElement.tagName.toLowerCase() === 'input') {
                this.input = this.el;
            }
            else {
                var list = this.el.nativeElement.querySelectorAll('input');
                this.input = list.length > 0 ? list[0] : null;
            }
            if (this.input) {
                this.input.addEventListener('blur', this.setWidthUsingText.bind(this));
                this.input.addEventListener('keyup', this.setWidthUsingText.bind(this));
            }
            this.setWidthUsingText();
        };
        PepInputAutoWidthDirective.prototype.ngOnDestroy = function () {
            this.input.removeEventListener('blur', this.setWidthUsingText.bind(this));
            this.input.removeEventListener('keyup', this.setWidthUsingText.bind(this));
        };
        Object.defineProperty(PepInputAutoWidthDirective.prototype, "paddingWidth", {
            get: function () {
                return this.includePadding
                    ? this._sumPropertyValues(['padding-left', 'padding-right'])
                    : 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PepInputAutoWidthDirective.prototype, "style", {
            get: function () {
                return getComputedStyle(this.input, '');
            },
            enumerable: false,
            configurable: true
        });
        PepInputAutoWidthDirective.prototype.setWidth = function (width) {
            this.renderer.setStyle(this.input, 'width', width + 'px');
        };
        PepInputAutoWidthDirective.prototype.setWidthUsingText = function () {
            if (this.input) {
                var text = this.input.value;
                this.setWidth(this.textWidth(text) + this.paddingWidth);
            }
        };
        PepInputAutoWidthDirective.prototype._sumPropertyValues = function (properties) {
            var _this = this;
            return properties
                .map(function (property) { return parseInt(_this.style.getPropertyValue(property), 10); })
                .reduce(function (a, b) { return a + b; }, 0);
        };
        PepInputAutoWidthDirective.prototype.textWidth = function (value) {
            var ctx = this.renderer.createElement('canvas').getContext('2d');
            var _a = this.style, fontStyle = _a.fontStyle, fontVariant = _a.fontVariant, fontWeight = _a.fontWeight, fontSize = _a.fontSize, fontFamily = _a.fontFamily;
            // font string format: {normal, normal, 700, 20px, Roboto, "Helvetica Neue", sans-serif}
            ctx.font =
                fontStyle +
                    ' ' +
                    fontVariant +
                    ' ' +
                    fontWeight +
                    ' ' +
                    fontSize +
                    ' ' +
                    fontFamily;
            return ctx ? ctx.measureText(value).width : 0;
        };
        return PepInputAutoWidthDirective;
    }());
    PepInputAutoWidthDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[pepAutoWidth]',
                },] }
    ];
    PepInputAutoWidthDirective.ctorParameters = function () { return [
        { type: i0.Renderer2 },
        { type: i0.ElementRef }
    ]; };
    PepInputAutoWidthDirective.propDecorators = {
        includePadding: [{ type: i0.Input }]
    };

    var PepButtonBlurDirective = /** @class */ (function () {
        function PepButtonBlurDirective(element) {
            this.element = element;
        }
        PepButtonBlurDirective.prototype.onClick = function () {
            var _this = this;
            setTimeout(function () {
                _this.element.nativeElement.blur();
            }, 0);
        };
        return PepButtonBlurDirective;
    }());
    PepButtonBlurDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[pepButtonBlur]',
                },] }
    ];
    PepButtonBlurDirective.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    PepButtonBlurDirective.propDecorators = {
        onClick: [{ type: i0.HostListener, args: ['click',] }]
    };

    var PepUtilitiesService = /** @class */ (function () {
        function PepUtilitiesService(translate) {
            if (translate === void 0) { translate = null; }
            var _a;
            this.translate = translate;
            this.culture = 'en-US';
            this.culture = ((_a = this.translate) === null || _a === void 0 ? void 0 : _a.getBrowserCultureLang()) || 'en-US';
            this.numberFormatter = new Intl.NumberFormat(this.culture, {
                maximumFractionDigits: 2,
            });
        }
        PepUtilitiesService.prototype.changeDecimalSeperator = function (value, reverse) {
            if (reverse === void 0) { reverse = false; }
            // If the decimal separator is ','
            if (this.getDecimalSeparator() === ',') {
                // If reverse change the number from '.' to ',' else do the opposite.
                value = reverse ? value.replace('.', ',') : value.replace(',', '.');
            }
            return value;
        };
        PepUtilitiesService.prototype.getDecimalSeparator = function () {
            var numberWithDecimalSeparator = 1.1;
            return numberWithDecimalSeparator
                .toLocaleString(this.culture)
                .substring(1, 2);
        };
        PepUtilitiesService.prototype.parseDate = function (dateStr, showTime) {
            if (showTime === void 0) { showTime = false; }
            var retVal = null;
            if (dateStr !== '') {
                retVal = new Date(dateStr);
                // Convert to date with no offset.
                if (!showTime) {
                    var index = dateStr.indexOf('T');
                    if (index > 0) {
                        dateStr = dateStr.substring(0, index);
                    }
                    var dateText = dateStr.split('-');
                    if (dateText.length === 3) {
                        var year = Number(dateText[0]);
                        var month = Number(dateText[1]) - 1;
                        var day = Number(dateText[2]);
                        retVal = new Date(year, month, day);
                    }
                }
            }
            if (retVal && isNaN(retVal.getTime())) {
                retVal = null;
            }
            return retVal;
        };
        PepUtilitiesService.prototype.stringifyDate = function (date, showTime) {
            if (showTime === void 0) { showTime = false; }
            if (date) {
                if (showTime) {
                    return date.toISOString(); // include - offset
                }
                else {
                    var dateText = [];
                    dateText.push(date.getFullYear(), '-', date.getMonth() + 1, '-', date.getDate());
                    return dateText.join('');
                }
            }
            else {
                return '';
            }
            // if (date) {
            //     const dateText = [];
            //     dateText.push(
            //         date.getFullYear(),
            //         '-',
            //         date.getMonth() + 1,
            //         '-',
            //         date.getDate()
            //     );
            //     if (showTime) {
            //         dateText.push(
            //             'T',
            //             (date.getHours() < 10 ? '0' : '') + date.getHours(),
            //             ':',
            //             (date.getMinutes() < 10 ? '0' : '') + date.getMinutes(),
            //             ':',
            //             (date.getSeconds() < 10 ? '0' : '') + date.getSeconds(),
            //             'Z'
            //         );
            //     }
            //     return dateText.join('');
            // } else {
            //     return '';
            // }
        };
        PepUtilitiesService.prototype.isValueHtml = function (value) {
            var res = false;
            var REGEXP = /<\/?[a-z][\s\S]*>/i;
            res = REGEXP.test(value);
            return res;
        };
        PepUtilitiesService.prototype.isJsonString = function (str) {
            try {
                JSON.parse(str);
            }
            catch (e) {
                return false;
            }
            return true;
        };
        PepUtilitiesService.prototype.getSvgElementFromString = function (document, svgContent) {
            var div = document.createElement('DIV');
            div.innerHTML = svgContent;
            return (div.querySelector('svg') ||
                document.createElementNS('http://www.w3.org/2000/svg', 'path'));
        };
        PepUtilitiesService.prototype.formatNumber = function (value) {
            var number = this.coerceNumberProperty(value);
            return this.numberFormatter.format(number);
        };
        PepUtilitiesService.prototype.incrementNumber = function (value) {
            var numberValue = this.coerceNumberProperty(value);
            var newNumber = this.changeDecimalSeperator((++numberValue).toString(), true);
            return newNumber;
        };
        PepUtilitiesService.prototype.decrementNumber = function (value) {
            var numberValue = this.coerceNumberProperty(value);
            var newNumber = this.changeDecimalSeperator((--numberValue).toString(), true);
            return newNumber;
        };
        PepUtilitiesService.prototype.coerceNumberProperty = function (value, fallbackValue) {
            if (fallbackValue === void 0) { fallbackValue = 0; }
            // If the decimal separator is ',' change it to '.'
            value = this.changeDecimalSeperator(value);
            return coercion.coerceNumberProperty(value, fallbackValue);
        };
        return PepUtilitiesService;
    }());
    PepUtilitiesService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PepUtilitiesService_Factory() { return new PepUtilitiesService(i0__namespace.ɵɵinject(i1__namespace.TranslateService, 8)); }, token: PepUtilitiesService, providedIn: "root" });
    PepUtilitiesService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    PepUtilitiesService.ctorParameters = function () { return [
        { type: i1.TranslateService, decorators: [{ type: i0.Optional }] }
    ]; };

    var PepButtonLoaderDirective = /** @class */ (function () {
        function PepButtonLoaderDirective(renderer, element, utilitiesService, document) {
            this.renderer = renderer;
            this.element = element;
            this.utilitiesService = utilitiesService;
            this.document = document;
            this.loaderTime = 0;
            this.loaderColor = null;
            this.loaderWidth = '1.5rem';
            this.loaderHeight = 'inherit';
            this.ignoreDisabledStyle = false;
            this._isLoading = false;
            this._finish = null;
        }
        Object.defineProperty(PepButtonLoaderDirective.prototype, "finish", {
            set: function (value) {
                this._finish = value;
                if (this._isLoading && value) {
                    this.toggleLoading(false);
                }
            },
            enumerable: false,
            configurable: true
        });
        PepButtonLoaderDirective.prototype.clickEvent = function (event) {
            var _this = this;
            this.toggleLoading(true);
            // In case that the finish input is supplied - init it.
            if (this._finish !== null) {
                this._finish = false;
            }
            else {
                // Init loaderTime if is not supplied (3000 - default 3 seconds).
                if (this.loaderTime === 0) {
                    this.loaderTime = 3000;
                }
            }
            if (this.loaderTime > 0) {
                setTimeout(function () {
                    _this.toggleLoading(false);
                }, this.loaderTime);
            }
        };
        PepButtonLoaderDirective.prototype.ngOnInit = function () {
            this.setButtonStyle();
            var svgData = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 128 128" preserveAspectRatio="xMidYMid" class="lds-ripple" style="background:0 0; "><circle cx="64" cy="64" r="0" fill="none" stroke-width="10"><animate attributeName="r" calcMode="spline" values="0;59" keyTimes="0;1" dur="2.4" keySplines="0 0.3 0.8 0.8" begin="-1.6s" repeatCount="indefinite"/><animate attributeName="opacity" calcMode="spline" values="1;0" keyTimes="0;1" dur="2.4" keySplines="0.3 0 0.8 1" begin="-1.6s" repeatCount="indefinite"/></circle><circle cx="64" cy="64" r="0" fill="none" stroke-width="10"><animate attributeName="r" calcMode="spline" values="0;59" keyTimes="0;1" dur="2.4" keySplines="0 0.3 0.8 0.8" begin="-0.8s" repeatCount="indefinite"/><animate attributeName="opacity" calcMode="spline" values="1;0" keyTimes="0;1" dur="2.4" keySplines="0.3 0 0.8 1" begin="-0.8s" repeatCount="indefinite"/></circle><circle cx="64" cy="64" r="0" fill="none" stroke-width="10"><animate attributeName="r" calcMode="spline" values="0;59" keyTimes="0;1" dur="2.4" keySplines="0 0.3 0.8 0.8" begin="0s" repeatCount="indefinite"/><animate attributeName="opacity" calcMode="spline" values="1;0" keyTimes="0;1" dur="2.4" keySplines="0.3 0 0.8 1" begin="0s" repeatCount="indefinite"/></circle></svg>';
            this.svgIcon = this.utilitiesService.getSvgElementFromString(this.document, svgData);
            this.setIconStyle();
        };
        PepButtonLoaderDirective.prototype.setButtonStyle = function () {
            this.renderer.setStyle(this.element.nativeElement, 'display', 'flex');
            this.renderer.setStyle(this.element.nativeElement, 'justify-content', 'center');
            this.renderer.setStyle(this.element.nativeElement, 'align-items', 'center');
            if (this.ignoreDisabledStyle) {
                this.renderer.addClass(this.element.nativeElement, 'ignore-disabled');
            }
        };
        PepButtonLoaderDirective.prototype.setIconStyle = function () {
            if (this.loaderColor) {
                this.renderer.setStyle(this.svgIcon, 'stroke', this.loaderColor);
            }
            this.renderer.setStyle(this.svgIcon, 'width', this.loaderWidth);
            this.renderer.setStyle(this.svgIcon, 'height', this.loaderHeight);
            this.renderer.setStyle(this.svgIcon, 'margin-inline-start', '0.5rem');
            this.renderer.addClass(this.svgIcon, 'svg-icon');
            this.renderer.addClass(this.svgIcon, 'stroke');
        };
        PepButtonLoaderDirective.prototype.toggleLoading = function (show) {
            if (show) {
                this._isLoading = true;
                this.renderer.appendChild(this.element.nativeElement, this.svgIcon);
                this.renderer.setAttribute(this.element.nativeElement, 'disabled', 'true');
                this.renderer.addClass(this.element.nativeElement, 'lock-events');
            }
            else {
                if (this._isLoading) {
                    this._isLoading = false;
                    this.renderer.removeChild(this.element.nativeElement, this.svgIcon);
                    this.renderer.removeAttribute(this.element.nativeElement, 'disabled');
                    this.renderer.removeClass(this.element.nativeElement, 'lock-events');
                }
            }
        };
        return PepButtonLoaderDirective;
    }());
    PepButtonLoaderDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[pepButtonLoader]',
                },] }
    ];
    PepButtonLoaderDirective.ctorParameters = function () { return [
        { type: i0.Renderer2 },
        { type: i0.ElementRef },
        { type: PepUtilitiesService },
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [i1$1.DOCUMENT,] }] }
    ]; };
    PepButtonLoaderDirective.propDecorators = {
        loaderTime: [{ type: i0.Input }],
        loaderColor: [{ type: i0.Input }],
        loaderWidth: [{ type: i0.Input }],
        loaderHeight: [{ type: i0.Input }],
        ignoreDisabledStyle: [{ type: i0.Input }],
        finish: [{ type: i0.Input }],
        clickEvent: [{ type: i0.HostListener, args: ['click', ['$event'],] }]
    };

    var PepMenuBlurDirective = /** @class */ (function () {
        function PepMenuBlurDirective(element) {
            this.element = element;
        }
        PepMenuBlurDirective.prototype.menuClosedEvent = function () {
            var _this = this;
            setTimeout(function () {
                _this.element.nativeElement.blur();
            }, 0);
        };
        PepMenuBlurDirective.prototype.menuOpenedEvent = function () {
            var _this = this;
            setTimeout(function () {
                _this.element.nativeElement.blur();
            }, 0);
        };
        return PepMenuBlurDirective;
    }());
    PepMenuBlurDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[pepMenuBlur]',
                },] }
    ];
    PepMenuBlurDirective.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    PepMenuBlurDirective.propDecorators = {
        menuClosedEvent: [{ type: i0.HostListener, args: ['menuClosed',] }],
        menuOpenedEvent: [{ type: i0.HostListener, args: ['menuOpened',] }]
    };

    var PepDataQaDirective = /** @class */ (function () {
        function PepDataQaDirective(renderer, element) {
            this.renderer = renderer;
            this.element = element;
        }
        PepDataQaDirective.prototype.ngOnInit = function () {
            this.renderer.setAttribute(this.element.nativeElement, 'data-qa', this.dataQa);
        };
        return PepDataQaDirective;
    }());
    PepDataQaDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[pepDataQa]',
                },] }
    ];
    PepDataQaDirective.ctorParameters = function () { return [
        { type: i0.Renderer2 },
        { type: i0.ElementRef }
    ]; };
    PepDataQaDirective.propDecorators = {
        dataQa: [{ type: i0.Input, args: ['pepDataQa',] }]
    };

    var PepPreventMultiClickDirective = /** @class */ (function () {
        function PepPreventMultiClickDirective() {
            this.disabledTime = 1000;
        }
        PepPreventMultiClickDirective.prototype.clickEvent = function (event) {
            event.srcElement.setAttribute('disabled', true);
            setTimeout(function () {
                event.srcElement.removeAttribute('disabled');
            }, this.disabledTime);
        };
        return PepPreventMultiClickDirective;
    }());
    PepPreventMultiClickDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[pepPreventMultiClick]',
                },] }
    ];
    PepPreventMultiClickDirective.propDecorators = {
        disabledTime: [{ type: i0.Input }],
        clickEvent: [{ type: i0.HostListener, args: ['click', ['$event'],] }]
    };

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var PepPrintDirective = /** @class */ (function () {
        function PepPrintDirective() {
            this._printStyle = [];
            /**
             * @memberof PepPrintDirective
             */
            this.useExistingCss = true;
            /**
             * A delay in milliseconds to force the print dialog to wait before opened. Default: 0
             *
             * @memberof PepPrintDirective
             */
            this.printDelay = 0;
            /**
             * @returns html for the given tag
             *
             * @memberof PepPrintDirective
             */
            this._styleSheetFile = '';
        }
        Object.defineProperty(PepPrintDirective.prototype, "printStyle", {
            /**
             * @memberof PepPrintDirective
             */
            set: function (values) {
                for (var key in values) {
                    if (values.hasOwnProperty(key)) {
                        this._printStyle.push((key + JSON.stringify(values[key])).replace(/['"]+/g, ''));
                    }
                }
                this.returnStyleValues();
            },
            enumerable: false,
            configurable: true
        });
        /**
         *
         *
         * @returns the string that create the stylesheet which will be injected
         * later within <style></style> tag.
         *
         * - join/replace to transform an array objects to css-styled string
         * @memberof PepPrintDirective
         */
        PepPrintDirective.prototype.returnStyleValues = function () {
            return "<style> " + this._printStyle.join(' ').replace(/,/g, ';') + " </style>";
        };
        Object.defineProperty(PepPrintDirective.prototype, "styleSheetFile", {
            /**
             * @memberof PepPrintDirective
             * @param cssList
             */
            set: function (cssList) {
                var e_1, _a;
                var linkTagFn = function (cssFileName) {
                    return "<link rel=\"stylesheet\" type=\"text/css\" href=\"" + cssFileName + "\">";
                };
                if (cssList.indexOf(',') !== -1) {
                    var valueArr = cssList.split(',');
                    try {
                        for (var valueArr_1 = __values(valueArr), valueArr_1_1 = valueArr_1.next(); !valueArr_1_1.done; valueArr_1_1 = valueArr_1.next()) {
                            var val = valueArr_1_1.value;
                            this._styleSheetFile = this._styleSheetFile + linkTagFn(val);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (valueArr_1_1 && !valueArr_1_1.done && (_a = valueArr_1.return)) _a.call(valueArr_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                else {
                    this._styleSheetFile = linkTagFn(cssList);
                }
            },
            enumerable: false,
            configurable: true
        });
        /**
         * @returns string which contains the link tags containing the css which will
         * be injected later within <head></head> tag.
         *
         */
        PepPrintDirective.prototype.returnStyleSheetLinkTags = function () {
            return this._styleSheetFile;
        };
        PepPrintDirective.prototype.getElementTag = function (tag) {
            var html = [];
            var elements = document.getElementsByTagName(tag);
            for (var index = 0; index < elements.length; index++) {
                html.push(elements[index].outerHTML);
            }
            return html.join('\r\n');
        };
        /**
         *
         * @param data the html element collection to save defaults to
         *
         */
        PepPrintDirective.prototype.getFormData = function (data) {
            for (var i = 0; i < data.length; i++) {
                data[i].defaultValue = data[i].value;
                if (data[i].checked) {
                    data[i].defaultChecked = true;
                }
            }
        };
        /**
         * @returns html section to be printed along with some associated inputs
         *
         */
        PepPrintDirective.prototype.getHtmlContents = function () {
            var printContents = document.getElementById(this.printSectionId);
            var innards = printContents.getElementsByTagName('input');
            this.getFormData(innards);
            var txt = printContents.getElementsByTagName('textarea');
            this.getFormData(txt);
            return printContents.innerHTML;
        };
        /**
         * @memberof PepPrintDirective
         */
        PepPrintDirective.prototype.print = function () {
            var styles = '', links = '';
            var baseTag = this.getElementTag('base');
            if (this.useExistingCss) {
                styles = this.getElementTag('style');
                links = this.getElementTag('link');
            }
            var printContents = this.getHtmlContents();
            var popupWin = window.open("", "_blank", "top=0,left=0,height=auto,width=auto");
            popupWin.document.open();
            popupWin.document.write("\n            <html>\n                <head>\n                <title>" + (this.printTitle ? this.printTitle : "") + "</title>\n                " + baseTag + "\n                " + this.returnStyleValues() + "\n                " + this.returnStyleSheetLinkTags() + "\n                " + styles + "\n                " + links + "\n                </head>\n                <body>\n                " + printContents + "\n                <script defer>\n                    function triggerPrint(event) {\n                    window.removeEventListener('load', triggerPrint, false);\n                    setTimeout(function() {\n                        closeWindow(window.print());\n                    }, " + this.printDelay + ");\n                    }\n                    function closeWindow(){\n                        window.close();\n                    }\n                    window.addEventListener('load', triggerPrint, false);\n                </script>\n                </body>\n            </html>");
            popupWin.document.close();
        };
        return PepPrintDirective;
    }());
    PepPrintDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: "[pepPrint]"
                },] }
    ];
    PepPrintDirective.propDecorators = {
        printSectionId: [{ type: i0.Input }],
        printTitle: [{ type: i0.Input }],
        useExistingCss: [{ type: i0.Input }],
        printDelay: [{ type: i0.Input }],
        printStyle: [{ type: i0.Input }],
        styleSheetFile: [{ type: i0.Input }],
        print: [{ type: i0.HostListener, args: ['click',] }]
    };

    var PepPortalService = /** @class */ (function () {
        function PepPortalService() {
            this.targets = new Map();
        }
        PepPortalService.prototype.addTarget = function (targetName, viewContainer) {
            this.targets.set(targetName, viewContainer);
        };
        PepPortalService.prototype.attach = function (targetName, template) {
            var target = this.getTarget(targetName);
            if (target) {
                target.createEmbeddedView(template);
            }
        };
        PepPortalService.prototype.clear = function (targetName) {
            var target = this.getTarget(targetName);
            if (target) {
                target.clear();
            }
        };
        PepPortalService.prototype.getTarget = function (targetName) {
            return this.targets.has(targetName)
                ? this.targets.get(targetName)
                : null;
        };
        return PepPortalService;
    }());
    PepPortalService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PepPortalService_Factory() { return new PepPortalService(); }, token: PepPortalService, providedIn: "root" });
    PepPortalService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    PepPortalService.ctorParameters = function () { return []; };

    var PepAttachDirective = /** @class */ (function () {
        function PepAttachDirective(portalService, templateRef) {
            this.portalService = portalService;
            this.templateRef = templateRef;
        }
        PepAttachDirective.prototype.ngOnInit = function () {
            this.portalService.attach(this.targetName, this.templateRef);
        };
        PepAttachDirective.prototype.ngOnDestroy = function () {
            this.portalService.clear(this.targetName);
        };
        return PepAttachDirective;
    }());
    PepAttachDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[pepAttach]',
                },] }
    ];
    PepAttachDirective.ctorParameters = function () { return [
        { type: PepPortalService },
        { type: i0.TemplateRef }
    ]; };
    PepAttachDirective.propDecorators = {
        targetName: [{ type: i0.Input, args: ['pepAttach',] }]
    };

    var PepTargetDirective = /** @class */ (function () {
        function PepTargetDirective(portalService, viewContainer) {
            this.portalService = portalService;
            this.viewContainer = viewContainer;
        }
        PepTargetDirective.prototype.ngOnInit = function () {
            this.portalService.addTarget(this.targetName, this.viewContainer);
        };
        return PepTargetDirective;
    }());
    PepTargetDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[pepTarget]',
                },] }
    ];
    PepTargetDirective.ctorParameters = function () { return [
        { type: PepPortalService },
        { type: i0.ViewContainerRef }
    ]; };
    PepTargetDirective.propDecorators = {
        targetName: [{ type: i0.Input, args: ['pepTarget',] }]
    };

    var clipboardList = [PepClipboardDirective];
    var layoutList = [PepRtlClassDirective, PepRtlDirectionDirective];
    var pipeList = [
        PepCapitalizePipe,
        PepEncodePipe,
        PepEscapePipe,
        PepReplaceLineBreaksPipe,
        PepDateFormatterPipe,
        PepDateStringFormatterPipe,
        PepSafeHtmlPipe,
        PepSafePipe,
        PepSplitUppercasePipe,
        PepToNumberPipe,
    ];
    var utilitiesList = [
        PepInputAutoWidthDirective,
        PepButtonBlurDirective,
        PepButtonLoaderDirective,
        PepMenuBlurDirective,
        PepDataQaDirective,
        // PreventDoubleClickDirective,
        PepPreventMultiClickDirective,
        PepPrintDirective,
    ];
    var portalList = [PepAttachDirective, PepTargetDirective];
    var PepNgxLibModule = /** @class */ (function () {
        function PepNgxLibModule() {
        }
        return PepNgxLibModule;
    }());
    PepNgxLibModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        pipeList,
                        utilitiesList,
                        clipboardList,
                        layoutList,
                        portalList,
                    ],
                    providers: [
                        httpInterceptorProviders,
                        // TranslateService
                    ],
                    imports: [i1$1.CommonModule, i3.HttpClientModule, i3$1.ReactiveFormsModule],
                    exports: [
                        pipeList,
                        utilitiesList,
                        clipboardList,
                        layoutList,
                        portalList,
                        i1.TranslateModule,
                    ],
                },] }
    ];

    // Import the core angular services.
    var PepClipboardService = /** @class */ (function () {
        function PepClipboardService() {
        }
        return PepClipboardService;
    }());
    PepClipboardService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PepClipboardService_Factory() { return new PepClipboardService(); }, token: PepClipboardService, providedIn: "root" });
    PepClipboardService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];

    /*
     * Public API Surface of ngx-lib/core/clipboard
     */

    /*
     * export from ngx-lib/core/clipboard
     */

    /*
     * Public API Surface of ngx-lib/core/common/directives
     */

    /*
     * export from ngx-lib/core/common/directives
     */

    var Test = /** @class */ (function () {
        function Test() {
        }
        return Test;
    }());

    var PepGuid = /** @class */ (function () {
        function PepGuid() {
        }
        PepGuid.pad4 = function (num) {
            var ret = num.toString(16);
            while (ret.length < 4) {
                ret = '0' + ret;
            }
            return ret;
        };
        PepGuid.random4 = function () {
            return Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1);
        };
        PepGuid.newGuid = function () {
            // This is not build for -prod
            // return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
            //     const r = Math.random() * 16 | 0;
            //     const v = c === 'x' ? r : (r & 0x3 | 0x8);
            //     return v.toString(16);
            // });
            // If we have a cryptographically secure PRNG, use that
            if (typeof window !== 'undefined' &&
                typeof window.crypto !== 'undefined' &&
                typeof window.crypto.getRandomValues !== 'undefined') {
                var buf = new Uint16Array(8);
                window.crypto.getRandomValues(buf);
                return (this.pad4(buf[0]) +
                    this.pad4(buf[1]) +
                    '-' +
                    this.pad4(buf[2]) +
                    '-' +
                    this.pad4(buf[3]) +
                    '-' +
                    this.pad4(buf[4]) +
                    '-' +
                    this.pad4(buf[5]) +
                    this.pad4(buf[6]) +
                    this.pad4(buf[7]));
            }
            else {
                // Otherwise, just use Math.random
                return (this.random4() +
                    this.random4() +
                    '-' +
                    this.random4() +
                    '-' +
                    this.random4() +
                    '-' +
                    this.random4() +
                    '-' +
                    this.random4() +
                    this.random4() +
                    this.random4());
            }
        };
        return PepGuid;
    }());

    exports.FIELD_TYPE = void 0;
    (function (FIELD_TYPE) {
        // specify text field
        FIELD_TYPE[FIELD_TYPE["Default"] = 0] = "Default";
        FIELD_TYPE[FIELD_TYPE["TextBox"] = 1] = "TextBox";
        FIELD_TYPE[FIELD_TYPE["LimitedLengthTextBox"] = 2] = "LimitedLengthTextBox";
        // specify text area field
        FIELD_TYPE[FIELD_TYPE["TextArea"] = 3] = "TextArea";
        FIELD_TYPE[FIELD_TYPE["TextHeader"] = 4] = "TextHeader";
        // specify date field
        FIELD_TYPE[FIELD_TYPE["Date"] = 5] = "Date";
        // specify date & time field
        FIELD_TYPE[FIELD_TYPE["DateAndTime"] = 6] = "DateAndTime";
        // specify integer field
        FIELD_TYPE[FIELD_TYPE["NumberInteger"] = 7] = "NumberInteger";
        // specify decimal field
        FIELD_TYPE[FIELD_TYPE["NumberReal"] = 8] = "NumberReal";
        // specify currency field
        FIELD_TYPE[FIELD_TYPE["Currency"] = 9] = "Currency";
        // specify boolean field
        FIELD_TYPE[FIELD_TYPE["Boolean"] = 10] = "Boolean";
        // specify multiple options field
        FIELD_TYPE[FIELD_TYPE["ComboBox"] = 11] = "ComboBox";
        // specify multiple options field
        FIELD_TYPE[FIELD_TYPE["MultiTickBox"] = 12] = "MultiTickBox";
        // specify separator (view only) field
        FIELD_TYPE[FIELD_TYPE["Separator"] = 13] = "Separator";
        // specify address field
        FIELD_TYPE[FIELD_TYPE["Address"] = 14] = "Address";
        // specify percentage field
        FIELD_TYPE[FIELD_TYPE["Percentage"] = 15] = "Percentage";
        FIELD_TYPE[FIELD_TYPE["EmptyComboBox"] = 16] = "EmptyComboBox";
        FIELD_TYPE[FIELD_TYPE["InternalLink"] = 17] = "InternalLink";
        // specify email field
        FIELD_TYPE[FIELD_TYPE["Email"] = 18] = "Email";
        FIELD_TYPE[FIELD_TYPE["LimitedDate"] = 19] = "LimitedDate";
        // specify image field
        FIELD_TYPE[FIELD_TYPE["Image"] = 20] = "Image";
        FIELD_TYPE[FIELD_TYPE["MultiTickBoxToComboBox"] = 21] = "MultiTickBoxToComboBox";
        FIELD_TYPE[FIELD_TYPE["EmptyMultiTickBox"] = 22] = "EmptyMultiTickBox";
        FIELD_TYPE[FIELD_TYPE["Totals"] = 23] = "Totals";
        // specify attachment field
        FIELD_TYPE[FIELD_TYPE["Attachment"] = 24] = "Attachment";
        FIELD_TYPE[FIELD_TYPE["Signature"] = 25] = "Signature";
        // specify link field
        FIELD_TYPE[FIELD_TYPE["Link"] = 26] = "Link";
        // specify image url field
        FIELD_TYPE[FIELD_TYPE["ImageURL"] = 27] = "ImageURL";
        FIELD_TYPE[FIELD_TYPE["NumberIntegerQuantitySelector"] = 28] = "NumberIntegerQuantitySelector";
        FIELD_TYPE[FIELD_TYPE["NumberRealQuantitySelector"] = 29] = "NumberRealQuantitySelector";
        FIELD_TYPE[FIELD_TYPE["NumberIntegerForMatrix"] = 30] = "NumberIntegerForMatrix";
        FIELD_TYPE[FIELD_TYPE["NumberRealForMatrix"] = 31] = "NumberRealForMatrix";
        FIELD_TYPE[FIELD_TYPE["Images"] = 32] = "Images";
        FIELD_TYPE[FIELD_TYPE["Indicators"] = 33] = "Indicators";
        FIELD_TYPE[FIELD_TYPE["CalculatedReal"] = 34] = "CalculatedReal";
        FIELD_TYPE[FIELD_TYPE["CalculatedInt"] = 35] = "CalculatedInt";
        FIELD_TYPE[FIELD_TYPE["CalculatedString"] = 36] = "CalculatedString";
        FIELD_TYPE[FIELD_TYPE["CalculatedDate"] = 37] = "CalculatedDate";
        FIELD_TYPE[FIELD_TYPE["CalculatedBool"] = 38] = "CalculatedBool";
        FIELD_TYPE[FIELD_TYPE["MapDataDropDown"] = 39] = "MapDataDropDown";
        FIELD_TYPE[FIELD_TYPE["MapDataReal"] = 40] = "MapDataReal";
        FIELD_TYPE[FIELD_TYPE["MapDataString"] = 41] = "MapDataString";
        FIELD_TYPE[FIELD_TYPE["MapDataInt"] = 42] = "MapDataInt";
        FIELD_TYPE[FIELD_TYPE["Sum"] = 43] = "Sum";
        FIELD_TYPE[FIELD_TYPE["Phone"] = 44] = "Phone";
        FIELD_TYPE[FIELD_TYPE["UrlForApi"] = 45] = "UrlForApi";
        FIELD_TYPE[FIELD_TYPE["ManyToManyUrlForApi"] = 46] = "ManyToManyUrlForApi";
        FIELD_TYPE[FIELD_TYPE["ReferenceType"] = 47] = "ReferenceType";
        FIELD_TYPE[FIELD_TYPE["GuidReferenceType"] = 48] = "GuidReferenceType";
        FIELD_TYPE[FIELD_TYPE["Button"] = 49] = "Button";
        FIELD_TYPE[FIELD_TYPE["InternalPage"] = 50] = "InternalPage";
        FIELD_TYPE[FIELD_TYPE["Duration"] = 51] = "Duration";
        FIELD_TYPE[FIELD_TYPE["ListOfObjects"] = 52] = "ListOfObjects";
        FIELD_TYPE[FIELD_TYPE["Package"] = 53] = "Package";
        FIELD_TYPE[FIELD_TYPE["BooleanText"] = 55] = "BooleanText";
        FIELD_TYPE[FIELD_TYPE["RichTextHTML"] = 56] = "RichTextHTML";
    })(exports.FIELD_TYPE || (exports.FIELD_TYPE = {}));
    exports.X_ALIGNMENT_TYPE = void 0;
    (function (X_ALIGNMENT_TYPE) {
        X_ALIGNMENT_TYPE[X_ALIGNMENT_TYPE["None"] = 0] = "None";
        X_ALIGNMENT_TYPE[X_ALIGNMENT_TYPE["Left"] = 1] = "Left";
        X_ALIGNMENT_TYPE[X_ALIGNMENT_TYPE["Right"] = 2] = "Right";
        X_ALIGNMENT_TYPE[X_ALIGNMENT_TYPE["Center"] = 3] = "Center";
    })(exports.X_ALIGNMENT_TYPE || (exports.X_ALIGNMENT_TYPE = {}));
    exports.Y_ALIGNMENT_TYPE = void 0;
    (function (Y_ALIGNMENT_TYPE) {
        Y_ALIGNMENT_TYPE[Y_ALIGNMENT_TYPE["None"] = 0] = "None";
        Y_ALIGNMENT_TYPE[Y_ALIGNMENT_TYPE["Top"] = 1] = "Top";
        Y_ALIGNMENT_TYPE[Y_ALIGNMENT_TYPE["Bottom"] = 2] = "Bottom";
        Y_ALIGNMENT_TYPE[Y_ALIGNMENT_TYPE["Center"] = 3] = "Center";
    })(exports.Y_ALIGNMENT_TYPE || (exports.Y_ALIGNMENT_TYPE = {}));
    var FieldLayout = /** @class */ (function () {
        // constructor(
        //     x = 0,
        //     width = 1,
        //     xAlignment: X_ALIGNMENT_TYPE = 1, y: Y_ALIGNMENT_TYPE = 0, height = 1, yAlignment = 1, lineNumber = 1) {
        //     this.X = x;
        //     this.Width = width;
        //     this.XAlignment = xAlignment;
        //     this.Y = y;
        //     this.Height = height;
        //     this.YAlignment = yAlignment;
        //     this.LineNumber = lineNumber;
        // }
        function FieldLayout(data) {
            Object.assign(this, data);
        }
        return FieldLayout;
    }());
    var UIControlField = /** @class */ (function () {
        function UIControlField() {
            this.MandatoryField = false;
            this.Mandatory = false;
            this.minFieldWidth = 45;
            this.calcColumnWidth = 10;
            this.calcTitleColumnWidthString = '100%';
            this.calcColumnWidthString = '100%';
        }
        return UIControlField;
    }());
    var UIControl = /** @class */ (function () {
        function UIControl() {
        }
        return UIControl;
    }());
    var ObjectsDataRowCell = /** @class */ (function () {
        function ObjectsDataRowCell() {
        }
        return ObjectsDataRowCell;
    }());
    var ObjectsDataRow = /** @class */ (function () {
        function ObjectsDataRow() {
            this.IsEditable = true;
            this.IsSelectableForActions = true;
        }
        return ObjectsDataRow;
    }());
    var ObjectSingleData = /** @class */ (function () {
        function ObjectSingleData(uiControl, data) {
            if (uiControl === void 0) { uiControl = null; }
            if (data === void 0) { data = null; }
            this.Success = true;
            this.ErrorMessage = '';
            this.Type = '';
            this.UIControl = uiControl;
            this.Data = data;
        }
        return ObjectSingleData;
    }());
    var ObjectsData = /** @class */ (function () {
        // AllRows: Array<ObjectsDataRow>;
        // TotalAmount: any;
        // CurrencySymbol: any;
        function ObjectsData() {
            this.ErrorMessage = '';
            this.Success = true;
            // this.TotalAmount = '0';
            // this.CurrencySymbol = '$';
        }
        return ObjectsData;
    }());
    var SmartSearchValues = /** @class */ (function () {
        function SmartSearchValues() {
        }
        return SmartSearchValues;
    }());
    var SmartSearchResponse = /** @class */ (function () {
        function SmartSearchResponse() {
        }
        return SmartSearchResponse;
    }());
    var KeyValuePair = /** @class */ (function () {
        function KeyValuePair() {
        }
        return KeyValuePair;
    }());

    /*
     * Public API Surface of ngx-lib/core/common/model
     */

    /*
     * export from ngx-lib/core/common/model
     */

    /*
     * Public API Surface of ngx-lib/core/common/pipes
     */

    /*
     * export from ngx-lib/core/common/pipes
     */

    var PepJwtHelperService = /** @class */ (function () {
        function PepJwtHelperService() {
        }
        PepJwtHelperService.prototype.urlBase64Decode = function (str) {
            var output = str.replace(/-/g, '+').replace(/_/g, '/');
            switch (output.length % 4) {
                case 0: {
                    break;
                }
                case 2: {
                    output += '==';
                    break;
                }
                case 3: {
                    output += '=';
                    break;
                }
                default: {
                    throw new Error('Illegal base64url string!');
                }
            }
            return this.b64DecodeUnicode(output);
        };
        // credits for decoder goes to https://github.com/atk
        PepJwtHelperService.prototype.b64decode = function (str) {
            var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
            var output = '';
            str = String(str).replace(/=+$/, '');
            if (str.length % 4 === 1) {
                throw new Error("'atob' failed: The string to be decoded is not correctly encoded.");
            }
            for (
            // initialize result and counters
            var bc = 0, bs = void 0, buffer = void 0, idx = 0; 
            // get next character
            (buffer = str.charAt(idx++)); 
            // character found in table? initialize bit storage and add its ascii value;
            ~buffer &&
                ((bs = bc % 4 ? bs * 64 + buffer : buffer),
                    // and if not first of each 4 characters,
                    // convert the first 8 bits to one ascii character
                    bc++ % 4)
                ? (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6))))
                : 0) {
                // try to find character in table (0-63, not found => -1)
                buffer = chars.indexOf(buffer);
            }
            return output;
        };
        PepJwtHelperService.prototype.b64DecodeUnicode = function (str) {
            return decodeURIComponent(Array.prototype.map
                .call(this.b64decode(str), function (c) {
                return ('%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2));
            })
                .join(''));
        };
        PepJwtHelperService.prototype.decodeToken = function (token) {
            if (!token || token === '') {
                return null;
            }
            var parts = token.split('.');
            if (parts.length !== 3) {
                throw new Error("The inspected token doesn't appear to be a JWT. Check to make sure it has three parts and see https://jwt.io for more.");
            }
            var decoded = this.urlBase64Decode(parts[1]);
            if (!decoded) {
                throw new Error('Cannot decode the token.');
            }
            return JSON.parse(decoded);
        };
        PepJwtHelperService.prototype.getTokenExpirationDate = function (token) {
            var decoded = this.decodeToken(token);
            if (!decoded || !decoded.hasOwnProperty('exp')) {
                return null;
            }
            var date = new Date(0);
            date.setUTCSeconds(decoded.exp);
            return date;
        };
        PepJwtHelperService.prototype.isTokenExpired = function (token, offsetSeconds) {
            if (!token || token === '') {
                return true;
            }
            var date = this.getTokenExpirationDate(token);
            offsetSeconds = offsetSeconds || 0;
            if (date === null) {
                return false;
            }
            return !(date.valueOf() > new Date().valueOf() + offsetSeconds * 1000);
        };
        PepJwtHelperService.prototype.getAuthScheme = function (authScheme, request) {
            if (typeof authScheme === 'function') {
                return authScheme(request);
            }
            return authScheme;
        };
        return PepJwtHelperService;
    }());
    PepJwtHelperService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PepJwtHelperService_Factory() { return new PepJwtHelperService(); }, token: PepJwtHelperService, providedIn: "root" });
    PepJwtHelperService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];

    var PepSessionService = /** @class */ (function () {
        // private readonly PEPPERI_CONSUMER_TOKEN: 'YY2pAwx6Exo2LWXrUllF9xzSfWF53wqc';
        function PepSessionService(jwtHelper) {
            this.jwtHelper = jwtHelper;
            this.IDP_TOKEN_KEY = 'idp_token';
            this.PAPI_BASE_URL_KEY = 'pepperi.baseurl';
            // private readonly WAPI_TOKEN_KEY = 'auth_token';
            this.WAPI_BASE_URL_KEY = 'serverHostURL'; // pepperi.webapibaseurl
        }
        PepSessionService.prototype.getParseToken = function () {
            // debugger;
            // const tokenTest = "eyJhbGciOiJSUzI1NiIsImtpZCI6IjRiYTFjNzJmMTI3NThjYzEzMzg3ZWQ3YTBiZjNlODg3IiwidHlwIjoiSldUIn0.eyJuYmYiOjE1OTY3MjU5NjksImV4cCI6MTU5NjcyNjI2OSwiaXNzIjoiaHR0cHM6Ly9pZHAuc2FuZGJveC5wZXBwZXJpLmNvbSIsImF1ZCI6InBlcHBlcmkud2ViYXBwLmFwcC5zYW5kYm94LnBlcHBlcmkuY29tIiwiaWF0IjoxNTk2NzI1OTY5LCJhdF9oYXNoIjoiSGtmRXJ0Q2JzQ3NzOTVKUm05VmJTdyIsInNpZCI6IjJkNzFiM2JiNWUyNjRiNDk2Y2JmZDkzNmYyNTNhNWIzIiwic3ViIjoiZTJkZmQ0MDYtZDM4Yy00ZmYwLThhZGItMWRlMjI3ODIzYWEyIiwiYXV0aF90aW1lIjoxNTk2NzE4ODA5LCJpZHAiOiJsb2NhbCIsIm5hbWUiOiJkYW5pZWwgZGF2aWRvZmYiLCJlbWFpbCI6ImRhbmllbC5kQHBlcHBlcml0ZXN0LmNvbSIsInBlcHBlcmkuaWQiOjg2OTAzMDQsInBlcHBlcmkudXNlcnV1aWQiOiJlMmRmZDQwNi1kMzhjLTRmZjAtOGFkYi0xZGUyMjc4MjNhYTIiLCJwZXBwZXJpLmRpc3RyaWJ1dG9yaWQiOjMwMDEyMzUxLCJwZXBwZXJpLmRpc3RyaWJ1dG9ydXVpZCI6IjBiZDBlZDc5LThlOWUtNDRmYi05NmY0LThlNTNlZDljZTgyYiIsInBlcHBlcmkuZGF0YWNlbnRlciI6InNhbmRib3giLCJwZXBwZXJpLmtlZXBsb2dpbiI6ZmFsc2UsInBlcHBlcmkuaWRsZXRpbWV3ZWIiOjEyMCwidXBkYXRlZF9hdCI6MTU5NjcwMjgwMCwiZ2l2ZW5fbmFtZSI6ImRhbmllbCIsImZhbWlseV9uYW1lIjoiZGF2aWRvZmYiLCJwZXBwZXJpLmFwaW50YmFzZXVybCI6Imh0dHBzOi8vcmVzdGFwaS5zYW5kYm94LnBlcHBlcmkuY29tIiwicGVwcGVyaS53ZWJhcGliYXNldXJsIjoiaHR0cHM6Ly93ZWJhcGkuc2FuZGJveC5wZXBwZXJpLmNvbS9WMTZfNTAvV2ViQXBwXzYiLCJwZXBwZXJpLnB1YmxpY2FwaWJhc2V1cmwiOiJodHRwczovL2FwaS1zYW5kYm94LnBlcHBlcmkuY29tIiwicGVwcGVyaS5iYXNldXJsIjoiaHR0cHM6Ly9wYXBpLnNhbmRib3gucGVwcGVyaS5jb20vVjEuMCIsInBlcHBlcmkuZW1wbG95ZWV0eXBlIjoxLCJhbXIiOlsicHdkIl19.tNtZT3Cl4dMmTQftoaO2KP5BvHOlWGIP-5GpHrAhZoymBkxBSxpKprQGqr0ATtQlNHjX3gDV1W6k_avaSkyJgDiB2hcwr1tNRilasNuMzNV93gxLC9Oh_HdkIN4cZ0hahIcJvf_17PHpS8zD_MRwvGG_i45wRYJAtiGXChxCMzooethRsLOq5TEwuNbE3MxdjZOpImGYyytmsfdsdJRWQn1LQwQBt95ssuypcUzBsVB34P5XuFttjAe9dhTwHIfgsPG-VdfAWH_r-hVe834wKpKrplSWlC_MucgS0X4XP_tN4CtLnHO2wXKPsojqSTH2NQycfqh6YvT6rzRDBEdQIQ";
            var token = this.getIdpToken();
            // token = token || tokenTest;
            var decodedToken = this.jwtHelper.decodeToken(token);
            // const expirationDate = this.jwtHelper.getTokenExpirationDate(token);
            // const isExpired = this.jwtHelper.isTokenExpired(token);
            return decodedToken;
        };
        PepSessionService.prototype.setObject = function (key, object) {
            var stringifiedObject = typeof object === 'string' || object instanceof String
                ? object
                : JSON.stringify(object);
            sessionStorage.setItem(key, stringifiedObject.toString());
        };
        PepSessionService.prototype.getObject = function (key) {
            var result = null;
            var item = sessionStorage.getItem(key);
            try {
                result = item ? JSON.parse(item) : item;
            }
            catch (_a) {
                result = item;
            }
            return result;
        };
        // setObject(key: string, value: string): void {
        //     sessionStorage.setItem(key, value);
        // }
        // getObject(key: string): string | null {
        //     return sessionStorage.getItem(key);
        // }
        PepSessionService.prototype.removeObject = function (key) {
            sessionStorage.removeItem(key);
        };
        // getWapiToken(): string {
        //     return this.getObject(this.WAPI_TOKEN_KEY);
        // }
        PepSessionService.prototype.getWapiBaseUrl = function () {
            return this.getObject(this.WAPI_BASE_URL_KEY);
        };
        PepSessionService.prototype.getIdpToken = function () {
            return this.getObject(this.IDP_TOKEN_KEY);
        };
        PepSessionService.prototype.getPapiBaseUrl = function () {
            var tokenObj = this.getParseToken();
            return tokenObj ? tokenObj[this.PAPI_BASE_URL_KEY] : null;
        };
        return PepSessionService;
    }());
    PepSessionService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PepSessionService_Factory() { return new PepSessionService(i0__namespace.ɵɵinject(PepJwtHelperService)); }, token: PepSessionService, providedIn: "root" });
    PepSessionService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    PepSessionService.ctorParameters = function () { return [
        { type: PepJwtHelperService }
    ]; };

    var PepCookieService = /** @class */ (function () {
        function PepCookieService(document, platformId) {
            this.document = document;
            this.platformId = platformId;
            this.documentIsAccessible = i1$1.isPlatformBrowser(this.platformId);
        }
        /**
         * @param name Cookie name
         * @returns boolean - whether cookie with specified name exists
         */
        PepCookieService.prototype.check = function (name) {
            if (!this.documentIsAccessible) {
                return false;
            }
            name = encodeURIComponent(name);
            var regExp = this.getCookieRegExp(name);
            var exists = regExp.test(this.document.cookie);
            return exists;
        };
        /**
         * @param name Cookie name
         * @returns property value
         */
        PepCookieService.prototype.get = function (name) {
            if (this.documentIsAccessible && this.check(name)) {
                name = encodeURIComponent(name);
                var regExp = this.getCookieRegExp(name);
                var result = regExp.exec(this.document.cookie);
                return this.safeDecodeURIComponent(result[1]);
            }
            else {
                return '';
            }
        };
        /**
         * @returns all the cookies in json
         */
        PepCookieService.prototype.getAll = function () {
            var _this = this;
            if (!this.documentIsAccessible) {
                return {};
            }
            var cookies = {};
            var document = this.document;
            if (document.cookie && document.cookie !== '') {
                document.cookie.split(';').forEach(function (currentCookie) {
                    var _b = __read(currentCookie.split('='), 2), cookieName = _b[0], cookieValue = _b[1];
                    cookies[_this.safeDecodeURIComponent(cookieName.replace(/^ /, ''))] = _this.safeDecodeURIComponent(cookieValue);
                });
            }
            return cookies;
        };
        /**
         * @param name     Cookie name
         * @param value    Cookie value
         * @param expires  Number of days until the cookies expires or an actual `Date`
         * @param path     Cookie path
         * @param domain   Cookie domain
         * @param secure   Secure flag
         * @param sameSite OWASP samesite token `Lax`, `None`, or `Strict`. Defaults to `Lax`
         */
        PepCookieService.prototype.set = function (name, value, expires, path, domain, secure, sameSite) {
            if (sameSite === void 0) { sameSite = 'Lax'; }
            if (!this.documentIsAccessible) {
                return;
            }
            var cookieString = encodeURIComponent(name) + '=' + encodeURIComponent(value) + ';';
            if (expires) {
                if (typeof expires === 'number') {
                    var dateExpires = new Date(new Date().getTime() + expires * 1000 * 60 * 60 * 24);
                    cookieString += 'expires=' + dateExpires.toUTCString() + ';';
                }
                else {
                    cookieString += 'expires=' + expires.toUTCString() + ';';
                }
            }
            if (path) {
                cookieString += 'path=' + path + ';';
            }
            if (domain) {
                cookieString += 'domain=' + domain + ';';
            }
            if (secure === false && sameSite === 'None') {
                secure = true;
            }
            if (secure) {
                cookieString += 'secure;';
            }
            cookieString += 'sameSite=' + sameSite + ';';
            this.document.cookie = cookieString;
        };
        /**
         * @param name   Cookie name
         * @param path   Cookie path
         * @param domain Cookie domain
         */
        PepCookieService.prototype.delete = function (name, path, domain, secure, sameSite) {
            if (sameSite === void 0) { sameSite = 'Lax'; }
            if (!this.documentIsAccessible) {
                return;
            }
            this.set(name, '', new Date('Thu, 01 Jan 1970 00:00:01 GMT'), path, domain, secure, sameSite);
        };
        /**
         * @param path   Cookie path
         * @param domain Cookie domain
         */
        PepCookieService.prototype.deleteAll = function (path, domain, secure, sameSite) {
            if (sameSite === void 0) { sameSite = 'Lax'; }
            if (!this.documentIsAccessible) {
                return;
            }
            var cookies = this.getAll();
            for (var cookieName in cookies) {
                if (cookies.hasOwnProperty(cookieName)) {
                    this.delete(cookieName, path, domain, secure, sameSite);
                }
            }
        };
        /**
         * @param name Cookie name
         * @returns property RegExp
         */
        PepCookieService.prototype.getCookieRegExp = function (name) {
            var escapedName = name.replace(/([\[\]\{\}\(\)\|\=\;\+\?\,\.\*\^\$])/gi, '\\$1');
            return new RegExp('(?:^' + escapedName + '|;\\s*' + escapedName + ')=(.*?)(?:;|$)', 'g');
        };
        PepCookieService.prototype.safeDecodeURIComponent = function (encodedURIComponent) {
            try {
                return decodeURIComponent(encodedURIComponent);
            }
            catch (_a) {
                // probably it is not uri encoded. return as is
                return encodedURIComponent;
            }
        };
        return PepCookieService;
    }());
    PepCookieService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PepCookieService_Factory() { return new PepCookieService(i0__namespace.ɵɵinject(i1__namespace$1.DOCUMENT, 8), i0__namespace.ɵɵinject(i0__namespace.PLATFORM_ID)); }, token: PepCookieService, providedIn: "root" });
    PepCookieService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    PepCookieService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [i1$1.DOCUMENT,] }] },
        { type: i0.InjectionToken, decorators: [{ type: i0.Inject, args: [i0.PLATFORM_ID,] }] }
    ]; };

    var PepHttpService = /** @class */ (function () {
        function PepHttpService(sessionService, cookieService, http) {
            this.sessionService = sessionService;
            this.cookieService = cookieService;
            this.http = http;
            this.AUTH_HEADER = 'Authorization';
            this.PEPPERI_TOKEN_HEADER = 'PepperiSessionToken';
            this.WAPI_TOKEN_KEY = 'auth_token';
            this.PEPPERI_TOKEN_COOKIE = 'PepperiUserSettings';
        }
        PepHttpService.prototype.handleError = function (response) {
            var errorMessage = 'Unknown error!';
            if (response.error instanceof ErrorEvent) {
                // Client-side errors
                errorMessage = "Error: " + response.error.message;
            }
            else {
                // Server-side errors
                errorMessage = this.getServerErrorMessage(response);
            }
            return rxjs.throwError(errorMessage);
        };
        PepHttpService.prototype.getServerErrorMessage = function (response) {
            var _a, _b;
            if ((_b = (_a = response === null || response === void 0 ? void 0 : response.error) === null || _a === void 0 ? void 0 : _a.fault) === null || _b === void 0 ? void 0 : _b.faultstring) {
                return "" + response.error.fault.faultstring;
            }
            else {
                switch (response.status) {
                    case 404: {
                        return "Not Found: " + response.message;
                    }
                    case 403: {
                        return "Access Denied: " + response.message;
                    }
                    case 500: {
                        return "Internal Server Error: " + response.message;
                    }
                    default: {
                        return "Unknown Server Error\nError Code: " + response.status + "\nMessage: " + response.message;
                    }
                }
            }
        };
        // Add authorization token if the token exist.
        PepHttpService.prototype.addAuthorizationToken = function (httpOptions) {
            if (httpOptions === void 0) { httpOptions = {}; }
            if (!httpOptions.headers.has(this.AUTH_HEADER)) {
                var idpToken = this.sessionService.getIdpToken();
                if (idpToken) {
                    httpOptions.headers = httpOptions.headers.set(this.AUTH_HEADER, "Bearer " + idpToken);
                }
            }
            return httpOptions;
        };
        // Add web api token if calling to wapi domain.
        PepHttpService.prototype.addWebApiToken = function (url, httpOptions) {
            if (httpOptions === void 0) { httpOptions = {}; }
            if (!httpOptions.headers.has(this.PEPPERI_TOKEN_HEADER)) {
                var wapiBaseUrl = this.sessionService.getWapiBaseUrl();
                if (wapiBaseUrl && url.match(new RegExp(wapiBaseUrl, 'g'))) {
                    // TODO:
                    // const webApiToken = this.sessionService.getWapiToken();
                    try {
                        var userSettingCookie = this.cookieService.get(this.PEPPERI_TOKEN_COOKIE);
                        var webApiToken = JSON.parse(userSettingCookie).values
                            .items[this.WAPI_TOKEN_KEY];
                        if (webApiToken) {
                            httpOptions.headers = httpOptions.headers.set(this.PEPPERI_TOKEN_HEADER, webApiToken);
                        }
                    }
                    catch (_a) {
                        // Do nothing.
                    }
                }
            }
            return httpOptions;
        };
        PepHttpService.prototype.setDefaultHeaderOptions = function (url, httpOptions) {
            if (httpOptions === void 0) { httpOptions = {}; }
            if (!httpOptions.headers) {
                httpOptions.headers = new i3.HttpHeaders();
            }
            // Add content type
            if (!httpOptions.headers.has('Content-Type')) {
                httpOptions.headers = httpOptions.headers.set('Content-Type', 'application/json');
            }
            httpOptions = this.addAuthorizationToken(httpOptions);
            httpOptions = this.addWebApiToken(url, httpOptions);
            return httpOptions;
        };
        // getTextFile(filename: string): void {
        //     // The Observable returned by get() is of type Observable<string>
        //     // because a text response was specified.
        //     // There's no need to pass a <string> type parameter to get().
        //     // return this.http.get(filename, {responseType: 'text'})
        //     //     .pipe(
        //     //         tap( // Log the result or error
        //     //         data => this.log(filename, data),
        //     //         error => this.logError(filename, error)
        //     //         )
        //     // );
        // }
        PepHttpService.prototype.getHttpCall = function (url, httpOptions) {
            if (httpOptions === void 0) { httpOptions = {}; }
            httpOptions = this.setDefaultHeaderOptions(url, httpOptions);
            return this.http
                .get(url, httpOptions)
                .pipe(operators.catchError(this.handleError.bind(this)));
            //     .subscribe(
            //         (res) => console.log(''),
            //         (error) => console.log(''),
            //         () => {}
            // );
        };
        PepHttpService.prototype.postHttpCall = function (url, body, httpOptions) {
            if (httpOptions === void 0) { httpOptions = {}; }
            httpOptions = this.setDefaultHeaderOptions(url, httpOptions);
            return this.http
                .post(url, body, httpOptions)
                .pipe(operators.catchError(this.handleError.bind(this)));
            //     .subscribe(
            //         (res) => console.log(''),
            //         (error) => console.log(''),
            //         () => {}
            // );
        };
        PepHttpService.prototype.getWapiApiCall = function (url, httpOptions) {
            if (httpOptions === void 0) { httpOptions = {}; }
            var wapiBaseUrl = this.sessionService.getWapiBaseUrl();
            return this.getHttpCall("" + wapiBaseUrl + url, httpOptions);
        };
        PepHttpService.prototype.postWapiApiCall = function (url, body, httpOptions) {
            if (httpOptions === void 0) { httpOptions = {}; }
            var wapiBaseUrl = this.sessionService.getWapiBaseUrl();
            return this.postHttpCall("" + wapiBaseUrl + url, body, httpOptions);
        };
        PepHttpService.prototype.getPapiApiCall = function (url, httpOptions) {
            if (httpOptions === void 0) { httpOptions = {}; }
            var papiBaseUrl = this.sessionService.getPapiBaseUrl();
            return this.getHttpCall("" + papiBaseUrl + url, httpOptions);
        };
        PepHttpService.prototype.postPapiApiCall = function (url, body, httpOptions) {
            if (httpOptions === void 0) { httpOptions = {}; }
            var papiBaseUrl = this.sessionService.getPapiBaseUrl();
            return this.postHttpCall("" + papiBaseUrl + url, body, httpOptions);
        };
        return PepHttpService;
    }());
    PepHttpService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PepHttpService_Factory() { return new PepHttpService(i0__namespace.ɵɵinject(PepSessionService), i0__namespace.ɵɵinject(PepCookieService), i0__namespace.ɵɵinject(i3__namespace.HttpClient)); }, token: PepHttpService, providedIn: "root" });
    PepHttpService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    PepHttpService.ctorParameters = function () { return [
        { type: PepSessionService },
        { type: PepCookieService },
        { type: i3.HttpClient }
    ]; };

    /*
        This service is the webapp api for addon usege.
    */
    var PepAddonService = /** @class */ (function () {
        function PepAddonService(sessionService, httpService, loaderService) {
            this.sessionService = sessionService;
            this.httpService = httpService;
            this.loaderService = loaderService;
            this.ADDON_ASSETS_PATH_KEY = 'AddonAssetsPath';
            this.ADDONS_DICTIONARY_ASSETS_PATH_KEY = 'AddonsDictionaryAssetsPath';
            this.ADDON_API_RELATIVE_PATH = '/addons/api';
            this.ADDON_API_ASYNC_RELATIVE_PATH = this.ADDON_API_RELATIVE_PATH + "/async";
            //
        }
        PepAddonService.prototype.getAddonBaseRelativePath = function (isAsync) {
            return isAsync
                ? this.ADDON_API_ASYNC_RELATIVE_PATH
                : this.ADDON_API_RELATIVE_PATH;
        };
        PepAddonService.prototype.getAddonStaticFolder = function (subAddonUUID) {
            if (subAddonUUID === void 0) { subAddonUUID = ''; }
            if (subAddonUUID.length > 0) {
                var addonsDictionary = this.sessionService.getObject(this.ADDONS_DICTIONARY_ASSETS_PATH_KEY);
                return addonsDictionary && addonsDictionary[subAddonUUID] ? addonsDictionary[subAddonUUID] : '';
            }
            else {
                return this.sessionService.getObject(this.ADDON_ASSETS_PATH_KEY) || '';
            }
        };
        PepAddonService.prototype.setAddonStaticFolder = function (path, subAddonUUID) {
            if (subAddonUUID === void 0) { subAddonUUID = ''; }
            var _a;
            if (subAddonUUID.length > 0) {
                var addonsDictionary = (_a = this.sessionService.getObject(this.ADDONS_DICTIONARY_ASSETS_PATH_KEY)) !== null && _a !== void 0 ? _a : {};
                addonsDictionary[subAddonUUID] = path;
                this.sessionService.setObject(this.ADDONS_DICTIONARY_ASSETS_PATH_KEY, addonsDictionary);
            }
            else {
                return this.sessionService.setObject(this.ADDON_ASSETS_PATH_KEY, path);
            }
        };
        PepAddonService.prototype.getAddonApiCall = function (addonUUID, fileName, functionName, httpOptions, isAsync) {
            if (httpOptions === void 0) { httpOptions = {}; }
            if (isAsync === void 0) { isAsync = false; }
            return this.httpService.getPapiApiCall(this.getAddonBaseRelativePath(isAsync) + "/" + addonUUID + "/" + fileName + "/" + functionName, httpOptions);
        };
        PepAddonService.prototype.postAddonApiCall = function (addonUUID, fileName, functionName, body, httpOptions, isAsync) {
            if (body === void 0) { body = {}; }
            if (httpOptions === void 0) { httpOptions = {}; }
            if (isAsync === void 0) { isAsync = false; }
            return this.httpService.postPapiApiCall(this.getAddonBaseRelativePath(isAsync) + "/" + addonUUID + "/" + fileName + "/" + functionName, body, httpOptions);
        };
        // TODO: need to chek this if the loader is working.
        PepAddonService.prototype.fetch = function (input, init) {
            var _this = this;
            this.loaderService.show();
            return window.fetch(input, init).finally(function () {
                _this.loaderService.hide();
            });
        };
        PepAddonService.createDefaultMultiTranslateLoader = function (http, fileService, addonService, subAddonUUID) {
            if (subAddonUUID === void 0) { subAddonUUID = ''; }
            var addonStaticFolder = addonService.getAddonStaticFolder(subAddonUUID);
            var translationsPath = fileService.getAssetsTranslationsPath(addonStaticFolder);
            var translationsSuffix = fileService.getAssetsTranslationsSuffix();
            var defaultSubFolder = 'assets/i18n/';
            return new ngxTranslateMultiHttpLoader.MultiTranslateHttpLoader(http, [
                {
                    prefix: translationsPath,
                    suffix: translationsSuffix,
                },
                {
                    prefix: addonStaticFolder.length > 0 ? "" + addonStaticFolder + defaultSubFolder : "/" + defaultSubFolder,
                    suffix: '.json',
                },
            ]);
        };
        PepAddonService.prototype.setDefaultTranslateLang = function (translate, urlLangParam) {
            if (urlLangParam === void 0) { urlLangParam = 'userLang'; }
            var userLang = 'en';
            translate.setDefaultLang(userLang);
            userLang = translate.getBrowserLang().split('-')[0]; // use navigator lang if available
            if (urlLangParam.length > 0) {
                var index = location.href.indexOf(urlLangParam);
                if (index > -1) {
                    // urlLangParam=XX
                    var startIndex = index + urlLangParam.length + '='.length;
                    userLang = location.href.substring(startIndex, startIndex + 2);
                }
            }
            // the lang to use, if the lang isn't available, it will use the current loader to get them
            translate.use(userLang).subscribe(function (res) {
                // In here you can put the code you want. At this point the lang will be loaded
            });
        };
        return PepAddonService;
    }());
    PepAddonService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PepAddonService_Factory() { return new PepAddonService(i0__namespace.ɵɵinject(PepSessionService), i0__namespace.ɵɵinject(PepHttpService), i0__namespace.ɵɵinject(PepLoaderService)); }, token: PepAddonService, providedIn: "root" });
    PepAddonService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    PepAddonService.ctorParameters = function () { return [
        { type: PepSessionService },
        { type: PepHttpService },
        { type: PepLoaderService }
    ]; };

    var PepColorService = /** @class */ (function () {
        function PepColorService() {
            this.FLOAT_REGEX = /^\d+(\.\d+)?$/;
            this.THREE_DIGIT_HEX_COLOR_REGEX = /^[0-9a-fA-F]{3}$/;
            this.THREE_DIGIT_HEX_COLOR_WITH_HASH_REGEX = /^#[0-9a-fA-F]{3}$/;
            this.SIX_DIGIT_HEX_COLOR_REGEX = /^[0-9a-fA-F]{6}$/;
            this.SIX_DIGIT_HEX_COLOR_WITH_HASH_REGEX = /^#[0-9a-fA-F]{6}$/;
        }
        /**
         * Convert hex string to 6 digits hex string.
         * @param str The string to convert.
         */
        PepColorService.prototype.hex2sixDigitHex = function (str) {
            if (!str) {
                return null;
            }
            str = str.trim();
            if (this.SIX_DIGIT_HEX_COLOR_WITH_HASH_REGEX.test(str)) {
                return str;
            }
            if (this.SIX_DIGIT_HEX_COLOR_REGEX.test(str)) {
                return '#' + str;
            }
            if (this.THREE_DIGIT_HEX_COLOR_WITH_HASH_REGEX.test(str)) {
                return '#' + str[1] + str[1] + str[2] + str[2] + str[3] + str[3];
            }
            if (this.THREE_DIGIT_HEX_COLOR_REGEX.test(str)) {
                return '#' + str[0] + str[0] + str[1] + str[1] + str[2] + str[2];
            }
            return null;
        };
        /**
         * Convert rgb color to 6 digits hex string.
         * @param color The rgb color to convert.
         */
        PepColorService.prototype.rgb2sixDigitHex = function (color) {
            color.r = color.r.toString(16);
            color.g = color.g.toString(16);
            color.b = color.b.toString(16);
            if (color.r.length === 1) {
                color.r = '0' + color.r;
            }
            if (color.g.length === 1) {
                color.g = '0' + color.g;
            }
            if (color.b.length === 1) {
                color.b = '0' + color.b;
            }
            return '#' + color.r + color.g + color.b;
        };
        /**
         * Convert hex string to rgb color.
         * @param str The hex string to convert.
         */
        PepColorService.prototype.hex2rgb = function (str) {
            var sixDigitHex = this.hex2sixDigitHex(str);
            if (sixDigitHex === null) {
                return null;
            }
            return {
                r: parseInt(sixDigitHex.slice(1, 3), 16),
                g: parseInt(sixDigitHex.slice(3, 5), 16),
                b: parseInt(sixDigitHex.slice(5, 7), 16),
            };
        };
        PepColorService.prototype.rgbString2hsl = function (str) {
            var sep = str.indexOf(',') > -1 ? ',' : ' ';
            var rgbArr = str.substr(4).split(')')[0].split(sep);
            var r = rgbArr[0];
            var g = rgbArr[1].substr(0, rgbArr[1].length).trim();
            var b = rgbArr[2].substr(0, rgbArr[2].length).trim();
            return this.rgb2hsl({ r: r, g: g, b: b });
        };
        PepColorService.prototype.rgb2hsl = function (_a) {
            var r = _a.r, g = _a.g, b = _a.b;
            r /= 255;
            g /= 255;
            b /= 255;
            // Find greatest and smallest channel values
            var cmin = Math.min(r, g, b);
            var cmax = Math.max(r, g, b);
            var delta = cmax - cmin;
            var h = 0;
            var s = 0;
            var l = 0;
            if (delta === 0) {
                h = 0;
            }
            else if (cmax === r) {
                h = ((g - b) / delta) % 6;
            }
            else if (cmax === g) {
                h = (b - r) / delta + 2;
            }
            else {
                h = (r - g) / delta + 4;
            }
            h = Math.round(h * 60);
            if (h < 0) {
                h += 360;
            }
            l = (cmax + cmin) / 2;
            s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));
            s = +(s * 100).toFixed(1);
            l = +(l * 100).toFixed(1);
            return { h: h, s: s, l: l };
        };
        PepColorService.prototype.hslString2hsl = function (str) {
            var sep = str.indexOf(',') > -1 ? ',' : ' ';
            var hslArr = str.substr(4).split(')')[0].split(sep);
            var h = hslArr[0];
            var s = hslArr[1].substr(0, hslArr[1].length).trim();
            var l = hslArr[2].substr(0, hslArr[2].length).trim();
            // Strip label and convert to degrees (if necessary)
            if (h.indexOf('deg') > -1) {
                h = h.substr(0, h.length - 3);
            }
            else if (h.indexOf('rad') > -1) {
                h = Math.round(h.substr(0, h.length - 3) * (180 / Math.PI));
            }
            else if (h.indexOf('turn') > -1) {
                h = Math.round(h.substr(0, h.length - 4) * 360);
            }
            // Keep hue fraction of 360 if ending up over
            if (h >= 360) {
                h %= 360;
            }
            // Remove the %
            if (s.indexOf('%') > -1) {
                s = s.replace(/%/g, '');
            }
            // Remove the %
            if (l.indexOf('%') > -1) {
                l = l.replace(/%/g, '');
            }
            return { h: h, s: s, l: l };
        };
        PepColorService.prototype.hsl2rgb = function (_a) {
            var h = _a.h, s = _a.s, l = _a.l;
            var r;
            var g;
            var b;
            if (!isFinite(h)) {
                h = 0;
            }
            if (!isFinite(s)) {
                s = 0;
            }
            if (!isFinite(l)) {
                l = 0;
            }
            h /= 60;
            if (h < 0) {
                h = 6 - (-h % 6);
            }
            h %= 6;
            s = Math.max(0, Math.min(1, s / 100));
            l = Math.max(0, Math.min(1, l / 100));
            var c = (1 - Math.abs(2 * l - 1)) * s;
            var x = c * (1 - Math.abs((h % 2) - 1));
            if (h < 1) {
                r = c;
                g = x;
                b = 0;
            }
            else if (h < 2) {
                r = x;
                g = c;
                b = 0;
            }
            else if (h < 3) {
                r = 0;
                g = c;
                b = x;
            }
            else if (h < 4) {
                r = 0;
                g = x;
                b = c;
            }
            else if (h < 5) {
                r = x;
                g = 0;
                b = c;
            }
            else {
                r = c;
                g = 0;
                b = x;
            }
            var m = l - c / 2;
            r = Math.round((r + m) * 255);
            g = Math.round((g + m) * 255);
            b = Math.round((b + m) * 255);
            return { r: r, g: g, b: b };
        };
        PepColorService.prototype.hex2hsl = function (str) {
            var sixDigitHex = this.hex2sixDigitHex(str);
            if (sixDigitHex === null) {
                return null;
            }
            var rgb = this.hex2rgb(sixDigitHex);
            if (rgb === null) {
                return null;
            }
            return this.rgb2hsl(rgb);
        };
        PepColorService.prototype.hsl2hex = function (hsl) {
            var rgb = this.hsl2rgb(hsl);
            return this.rgb2sixDigitHex(rgb);
        };
        PepColorService.prototype.relativeLuminance = function (_a) {
            var _b;
            var r = _a.r, g = _a.g, b = _a.b;
            _b = __read([r, g, b].map(function (c) {
                c = c / 255;
                if (c <= 0.03928) {
                    return c / 12.92;
                }
                return Math.pow((c + 0.055) / 1.055, 2.4);
            }), 3), r = _b[0], g = _b[1], b = _b[2];
            return 0.2126 * r + 0.7152 * g + 0.0722 * b;
        };
        PepColorService.prototype.contrast = function (str1, str2) {
            var L1 = this.relativeLuminance(this.hex2rgb(str1));
            var L2 = this.relativeLuminance(this.hex2rgb(str2));
            if (L1 < L2) {
                return (L2 + 0.05) / (L1 + 0.05);
            }
            return (L1 + 0.05) / (L2 + 0.05);
        };
        PepColorService.prototype.findClosestAccessibleDarkerColor = function (adjustableColor, otherColor, contrastRatio) {
            var _a = this.hex2hsl(adjustableColor), h = _a.h, s = _a.s, l = _a.l;
            if (this.contrast(adjustableColor, otherColor) >= contrastRatio) {
                return {
                    color: adjustableColor,
                    lightness: l,
                };
            }
            var minColor = this.hsl2hex({ h: h, s: s, l: 0 });
            if (this.contrast(minColor, otherColor) < contrastRatio) {
                return null;
            }
            var min = 0;
            var max = l;
            var maxColor = this.hsl2hex({ h: h, s: s, l: l });
            var lastMinColor;
            var lastMaxColor;
            var lTemp;
            while (minColor !== lastMinColor || maxColor !== lastMaxColor) {
                lastMinColor = minColor;
                lastMaxColor = maxColor;
                lTemp = (min + max) / 2;
                adjustableColor = this.hsl2hex({ h: h, s: s, l: lTemp });
                if (this.contrast(adjustableColor, otherColor) < contrastRatio) {
                    max = lTemp;
                    maxColor = this.hsl2hex({ h: h, s: s, l: lTemp });
                }
                else {
                    min = lTemp;
                    minColor = this.hsl2hex({ h: h, s: s, l: lTemp });
                }
            }
            return {
                color: minColor,
                lightness: min,
            };
        };
        PepColorService.prototype.findClosestAccessibleLighterColor = function (adjustableColor, otherColor, contrastRatio) {
            var _a = this.hex2hsl(adjustableColor), h = _a.h, s = _a.s, l = _a.l;
            if (this.contrast(adjustableColor, otherColor) >= contrastRatio) {
                return {
                    color: adjustableColor,
                    lightness: l,
                };
            }
            var maxColor = this.hsl2hex({ h: h, s: s, l: 100 });
            if (this.contrast(maxColor, otherColor) < contrastRatio) {
                return null;
            }
            var min = l;
            var max = 100;
            var minColor = this.hsl2hex({ h: h, s: s, l: l });
            var lastMinColor;
            var lastMaxColor;
            var lTemp;
            while (minColor !== lastMinColor || maxColor !== lastMaxColor) {
                lastMinColor = minColor;
                lastMaxColor = maxColor;
                lTemp = (min + max) / 2;
                adjustableColor = this.hsl2hex({ h: h, s: s, l: lTemp });
                if (this.contrast(adjustableColor, otherColor) < contrastRatio) {
                    min = lTemp;
                    minColor = this.hsl2hex({ h: h, s: s, l: lTemp });
                }
                else {
                    max = lTemp;
                    maxColor = this.hsl2hex({ h: h, s: s, l: lTemp });
                }
            }
            return {
                color: maxColor,
                lightness: max,
            };
        };
        PepColorService.prototype.findClosestAccessibleColor = function (adjustableColor, otherColor, contrastRatio) {
            var closestDarkerColor = this.findClosestAccessibleDarkerColor(adjustableColor, otherColor, contrastRatio);
            var closestLighterColor = this.findClosestAccessibleLighterColor(adjustableColor, otherColor, contrastRatio);
            if (closestDarkerColor === null) {
                if (closestLighterColor === null) {
                    return null;
                }
                return closestLighterColor.color;
            }
            if (closestLighterColor === null) {
                return closestDarkerColor.color;
            }
            var l = this.hex2hsl(adjustableColor).l;
            if (closestLighterColor.lightness - l <
                l - closestDarkerColor.lightness) {
                return closestLighterColor.color;
            }
            return closestDarkerColor.color;
        };
        PepColorService.prototype.convertHslToStringHsl = function (hsl) {
            return ('hsl(' +
                (hsl.h < 0 ? hsl.h + 360 : hsl.h) +
                ', ' +
                hsl.s +
                '%, ' +
                hsl.l +
                '%)');
        };
        return PepColorService;
    }());
    PepColorService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PepColorService_Factory() { return new PepColorService(); }, token: PepColorService, providedIn: "root" });
    PepColorService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];

    var PepFieldData = /** @class */ (function () {
        function PepFieldData(options) {
            if (options === void 0) { options = {}; }
            this.ApiName = options.ApiName;
            this.Enabled = !!options.Enabled;
            this.Value = options.Value;
            this.FormattedValue = options.FormattedValue || '';
            this.FieldType = options.FieldType;
            this.ReadOnly = !!options.ReadOnly;
            this.ColumnWidth = options.ColumnWidth;
            this.ColumnWidthType = options.ColumnWidthType;
            this.XAlignment = options.XAlignment || exports.X_ALIGNMENT_TYPE.Left;
            this.Title = options.Title || '';
        }
        return PepFieldData;
    }());
    var PepRowData = /** @class */ (function () {
        function PepRowData() {
        }
        return PepRowData;
    }());
    var PepDataConvertorService = /** @class */ (function () {
        function PepDataConvertorService() {
        }
        PepDataConvertorService.prototype.getUiControl = function (formData) {
            var _this = this;
            var _a;
            var uiControl = new UIControl();
            if (((_a = formData === null || formData === void 0 ? void 0 : formData.Fields) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                var uiRow = formData.Fields;
                uiControl.ControlFields = [];
                uiRow.forEach(function (field) { return uiControl.ControlFields.push(_this.setUIControlField(field)); });
            }
            return uiControl;
        };
        PepDataConvertorService.prototype.convertFormData = function (formData) {
            var _this = this;
            var rowData = new ObjectsDataRow();
            rowData.Fields = [];
            rowData.Type = 0;
            rowData.UID = PepGuid.newGuid();
            formData.Fields.forEach(function (field) { return rowData.Fields.push(_this.setDataField(field)); });
            return rowData;
        };
        PepDataConvertorService.prototype.convertListData = function (tableData, rowUUID) {
            var _this = this;
            if (rowUUID === void 0) { rowUUID = ''; }
            var rows = new Array();
            if (tableData.length > 0) {
                tableData.forEach(function (row) {
                    var rowData = new ObjectsDataRow();
                    rowData.Fields = [];
                    rowData.Type = 0;
                    rowData.UID = rowUUID
                        ? rowUUID
                        : row.UUID
                            ? row.UUID
                            : PepGuid.newGuid();
                    row.Fields.forEach(function (field) { return rowData.Fields.push(_this.setDataField(field)); });
                    rows.push(rowData);
                });
            }
            return rows;
        };
        PepDataConvertorService.prototype.setUIControlField = function (field) {
            var controlField = new UIControlField();
            controlField.ApiName = field.ApiName;
            controlField.FieldType = field.FieldType;
            controlField.Layout = new FieldLayout({
                X: 1,
                Width: 1,
                XAlignment: field.XAlignment,
                Y: 1,
                Height: 1,
                YAlignment: 1,
            });
            controlField.Title = field.Title;
            controlField.ReadOnly = field.ReadOnly === true ? true : false;
            controlField.ColumnWidth = field.ColumnWidth;
            controlField.ColumnWidthType = field.ColumnWidthType || 1;
            return controlField;
        };
        PepDataConvertorService.prototype.setDataField = function (field) {
            var dataField = new ObjectsDataRowCell();
            dataField.AdditionalValue = field.AdditionalValue;
            dataField.ApiName = field.ApiName;
            dataField.Enabled = field.Enabled === false ? false : true;
            dataField.FieldType = field.FieldType;
            dataField.FormattedValue =
                field.FormattedValue || field.Value.toString();
            dataField.GroupFields = null;
            dataField.NotificationInfo = '';
            dataField.OptionalValues = field.OptionalValues;
            dataField.ReferenceObjectSubType = '';
            dataField.TextColor = '';
            dataField.Value = field.Value.toString();
            dataField.Visible = true;
            return dataField;
        };
        PepDataConvertorService.prototype.setFieldLayout = function (x, width, xAlignment, y, height, yAlignment, lineNumber) {
            var layout = new FieldLayout({
                X: x,
                Width: width,
                XAlignment: xAlignment,
                Y: y,
                Height: height,
                YAlignment: yAlignment,
                LineNumber: lineNumber,
            });
            return layout;
        };
        return PepDataConvertorService;
    }());
    PepDataConvertorService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PepDataConvertorService_Factory() { return new PepDataConvertorService(); }, token: PepDataConvertorService, providedIn: "root" });
    PepDataConvertorService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];

    var PepFileService = /** @class */ (function () {
        function PepFileService() {
            this.scripts = new Map();
            this.styles = new Map();
        }
        PepFileService.prototype.loadFiles = function (files) {
            var _this = this;
            var promises = [];
            files.forEach(function (file) {
                if (file.type === 'style') {
                    promises.push(_this.loadStyle(file.path));
                }
                else if (file.type === 'script') {
                    promises.push(_this.loadScript(file.path));
                }
            });
            return Promise.all(promises);
        };
        PepFileService.prototype.removeFiles = function (files) {
            for (var index = 0; index < files.length &&
                files[index].path &&
                files[index].path.trim() !== ''; index++) {
                var name = this.getFileName(files[index].path, true);
                var element = document.getElementById(name);
                element.parentNode.removeChild(element);
                if (files[index].type === 'script' && this.scripts.has(name)) {
                    this.scripts.delete(name);
                }
                else if (files[index].type === 'style' && this.styles.has(name)) {
                    this.styles.delete(name);
                }
            }
        };
        PepFileService.prototype.loadScript = function (path) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var name = _this.getFileName(path, true);
                // If the script isn't exist add it.
                if (!_this.scripts.has(name)) {
                    _this.scripts.set(name, { loaded: false, src: path });
                }
                var scriptItem = _this.scripts.get(name);
                // Resolve if already loaded
                if (scriptItem.loaded) {
                    resolve({
                        script: name,
                        loaded: true,
                        status: 'Already Loaded',
                    });
                }
                else {
                    // Load script
                    var script_1 = document.createElement('script');
                    script_1.type = 'text/javascript';
                    script_1.src = scriptItem.src;
                    script_1.setAttribute('id', name);
                    script_1.async = false;
                    if (script_1.readyState) {
                        // IE
                        script_1.onreadystatechange = function () {
                            if (script_1.readyState === 'loaded' ||
                                script_1.readyState === 'complete') {
                                script_1.onreadystatechange = null;
                                scriptItem.loaded = true;
                                resolve({
                                    path: path,
                                    type: 'script',
                                    loaded: true,
                                    status: 'Loaded',
                                });
                            }
                        };
                    }
                    else {
                        // Others
                        script_1.onload = function () {
                            scriptItem.loaded = true;
                            resolve({
                                path: path,
                                type: 'script',
                                loaded: true,
                                status: 'Loaded',
                            });
                        };
                    }
                    script_1.onerror = function (error) { return resolve({
                        path: path,
                        type: 'script',
                        loaded: false,
                        status: 'Loaded',
                    }); };
                    document.getElementsByTagName('head')[0].appendChild(script_1);
                }
            });
        };
        PepFileService.prototype.loadStyle = function (path) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var name = _this.getFileName(path, true);
                // If the style isn't exist add it.
                if (!_this.styles.has(name)) {
                    _this.styles.set(name, { loaded: false, src: path });
                }
                var styleItem = _this.styles.get(name);
                // Resolve if already loaded
                if (styleItem.loaded) {
                    resolve({
                        path: path,
                        type: 'style',
                        loaded: true,
                        status: 'Already Loaded',
                    });
                }
                else {
                    // Load style
                    var style = document.createElement('link');
                    style.type = 'text/css';
                    style.rel = 'stylesheet';
                    style.href = styleItem.src;
                    style.media = 'all';
                    style.setAttribute('id', name);
                    styleItem.loaded = true;
                    resolve({
                        path: path,
                        type: 'style',
                        loaded: true,
                        status: 'Loaded',
                    });
                    document.getElementsByTagName('head')[0].appendChild(style);
                }
            });
        };
        PepFileService.prototype.loadFontStyle = function (styleId, href) {
            var head = document.getElementsByTagName('head')[0];
            var styleElement = document.getElementById(styleId);
            if (styleElement) {
                styleElement.href = href;
            }
            else {
                var style = document.createElement('link');
                style.id = styleId;
                style.rel = 'stylesheet';
                style.href = "" + href;
                head.appendChild(style);
            }
        };
        PepFileService.prototype.getFileName = function (filePath, withExtenstion) {
            if (withExtenstion === void 0) { withExtenstion = false; }
            var lastIndex = withExtenstion
                ? filePath.length - 1
                : filePath.lastIndexOf('.');
            return filePath.substr(filePath.lastIndexOf('/') + 1, lastIndex);
        };
        PepFileService.prototype.getFileExtension = function (filePath) {
            var fileSplit = filePath.split('.');
            var fileExt = '';
            if (fileSplit.length > 1) {
                fileExt = fileSplit[fileSplit.length - 2];
            }
            return fileExt;
        };
        /* Returns true if url is valid */
        PepFileService.prototype.isValidUrl = function (url) {
            /* Try creating a valid URL */
            try {
                var tmp = new URL(url);
                return true;
            }
            catch (e) {
                return false;
            }
        };
        PepFileService.prototype.convertFromb64toBlob = function (b64Data, contentType, sliceSize) {
            if (contentType === void 0) { contentType = ''; }
            if (sliceSize === void 0) { sliceSize = 512; }
            var byteCharacters = atob(b64Data);
            var byteArrays = [];
            for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
                var slice = byteCharacters.slice(offset, offset + sliceSize);
                var byteNumbers = new Array(slice.length);
                for (var i = 0; i < slice.length; i++) {
                    byteNumbers[i] = slice.charCodeAt(i);
                }
                var byteArray = new Uint8Array(byteNumbers);
                byteArrays.push(byteArray);
            }
            var blob = new Blob(byteArrays, { type: contentType });
            return blob;
        };
        PepFileService.prototype.getAssetsPath = function (assetsDomain) {
            if (assetsDomain === void 0) { assetsDomain = ''; }
            var concatChar = assetsDomain === '' || assetsDomain.endsWith('/') ? '' : '/';
            return "" + assetsDomain + concatChar + "assets/ngx-lib/";
        };
        PepFileService.prototype.getAssetsTranslationsSuffix = function () {
            return '.ngx-lib.json';
        };
        PepFileService.prototype.getAssetsTranslationsPath = function (assetsDomain) {
            if (assetsDomain === void 0) { assetsDomain = ''; }
            return this.getAssetsPath(assetsDomain) + "i18n/";
        };
        PepFileService.prototype.getAssetsImagesPath = function (assetsDomain, image) {
            if (assetsDomain === void 0) { assetsDomain = ''; }
            if (image === void 0) { image = ''; }
            return this.getAssetsPath(assetsDomain) + "images/" + image;
        };
        PepFileService.prototype.getSvgAsImageSrc = function (svg) {
            var blob = new Blob([svg], { type: 'image/svg+xml' });
            var url = URL.createObjectURL(blob);
            return url;
        };
        return PepFileService;
    }());
    PepFileService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PepFileService_Factory() { return new PepFileService(); }, token: PepFileService, providedIn: "root" });
    PepFileService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    PepFileService.ctorParameters = function () { return []; };

    var PepValidatorService = /** @class */ (function () {
        function PepValidatorService(translate) {
            if (translate === void 0) { translate = null; }
            var _a;
            this.translate = translate;
            //  Regular expressions
            this.integerUnsigned = '^[0-9]*$';
            this.integerSigned = '^-?[0-9]+$';
            this.decimalUnsigned = '^[0-9]+(.[0-9]+)?$';
            this.decimalSigned = '^-?[0-9]+(.[0-9]+)?$';
            this.phone = '^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-s./0-9]*$';
            this.decimalSeparator = '.';
            var currentLang = ((_a = this.translate) === null || _a === void 0 ? void 0 : _a.currentLang) || navigator.language;
            // Check for number with thousands seperator and if === ',' then the decimal seperator is '.' else ','
            var tmp = new Intl.NumberFormat(currentLang, {
                maximumSignificantDigits: 2,
            }).format(1000);
            this.decimalSeparator = tmp.indexOf(',') === 1 ? '.' : ',';
            this.decimalUnsigned = "^[0-9]+(" + this.decimalSeparator + "[0-9]+)?$";
            this.decimalSigned = "^-?[0-9]+(" + this.decimalSeparator + "[0-9]+)?$";
        }
        /*
            ValidatorFn functions
        */
        PepValidatorService.prototype.isEqual = function (target) {
            return function (control) {
                if (control.value) {
                    return target.value !== control.value
                        ? { equal: { value: true } }
                        : null;
                }
                else {
                    return null;
                }
            };
        };
        PepValidatorService.prototype.isGreaterThan = function (target) {
            return function (control) {
                if (control.value && typeof target.value === 'number') {
                    return target.value > control.value
                        ? { greater: { value: true } }
                        : null;
                }
                else if (control.value && typeof target.value === 'string') {
                    var controlValueNumer = coercion.coerceNumberProperty(control.value);
                    var targetValueNumer = coercion.coerceNumberProperty(target.value);
                    return targetValueNumer > controlValueNumer
                        ? { greater: { value: true } }
                        : null;
                }
                else {
                    return null;
                }
            };
        };
        PepValidatorService.prototype.isLessThan = function (target) {
            return function (control) {
                if (control.value && typeof target.value === 'number') {
                    return target.value < control.value
                        ? { less: { value: true } }
                        : null;
                }
                else if (control.value && typeof target.value === 'string') {
                    var controlValueNumer = coercion.coerceNumberProperty(control.value);
                    var targetValueNumer = coercion.coerceNumberProperty(target.value);
                    return targetValueNumer < controlValueNumer
                        ? { less: { value: true } }
                        : null;
                }
                else {
                    return null;
                }
            };
        };
        PepValidatorService.prototype.checkEmails = function (separator) {
            return function (control) {
                if (control.value) {
                    var emails = control.value.split(separator ? separator : ',');
                    var ctrl_1 = new i3$1.FormControl('', [
                        i3$1.Validators.required,
                        i3$1.Validators.email,
                    ]);
                    var result = emails.every(function (val) {
                        ctrl_1.setValue(val);
                        return ctrl_1.valid;
                    });
                    return !result ? { emails: { value: true } } : null;
                }
                else {
                    return null;
                }
            };
        };
        PepValidatorService.prototype.zipCodeValidator = function () {
            return i3$1.Validators.pattern(/^(\d{5}(-\d{4})?|[A-Z]\d[A-Z] *\d[A-Z]\d)$/);
        };
        PepValidatorService.prototype.allowableCharactersValidator = function () {
            return i3$1.Validators.pattern(/^[a-zA-Z0-9`~!@#$%^&*()_+}{|":?><,./;'\\\]\[=\- ]+$/);
        };
        PepValidatorService.prototype.allowableCharactersWithoutNumberValidator = function () {
            return i3$1.Validators.pattern(/^[a-zA-Z`~!@#$%^&*()_+}{|":?><,./;'\\\]\[=\- ]+$/);
        };
        PepValidatorService.prototype.allowableCharactersWithoutSpecialValidator = function () {
            return i3$1.Validators.pattern(/^[a-zA-Z0-9 ]+$/);
        };
        PepValidatorService.prototype.dateValidator = function () {
            return i3$1.Validators.pattern(/^(?:(0[1-9]|1[012])[\/.](0[1-9]|[12][0-9]|3[01])[\/.](19|20)[0-9]{2})$/);
        };
        PepValidatorService.prototype.numberValidator = function () {
            return i3$1.Validators.pattern(/^[0-9]*$/);
        };
        /*
            RegExp functions
        */
        PepValidatorService.prototype.validateNumber = function (value, allowDecimal) {
            // choose the appropiate regular expression
            var regex;
            if (allowDecimal) {
                regex = this.decimalSigned;
            }
            else {
                regex = this.integerSigned;
            }
            // when a numbers begins with a decimal separator,
            // fix it adding a zero in the beginning
            var firstCharacter = value.charAt(0);
            if (firstCharacter == this.decimalSeparator)
                value = 0 + value;
            // when a numbers ends with a decimal separator,
            // fix it adding a zero in the end
            var lastCharacter = value.charAt(value.length - 1);
            if (lastCharacter == this.decimalSeparator)
                value = value + 0;
            // test number with regular expression, when
            // number is invalid, replace it with a zero
            var valid = new RegExp(regex).test(value);
            return valid ? value : null;
        };
        PepValidatorService.prototype.validatePhone = function (value) {
            // test phone with regular expression, when
            // phone is invalid, replace it with the previousValue
            var valid = new RegExp(this.phone).test(value);
            return valid;
        };
        PepValidatorService.prototype.getName = function (e) {
            if (e.key) {
                return e.key;
            }
            else {
                // for old browsers
                if (e.keyCode && String.fromCharCode) {
                    switch (e.keyCode) {
                        case 8:
                            return 'Backspace';
                        case 9:
                            return 'Tab';
                        case 27:
                            return 'Escape';
                        case 37:
                            return 'ArrowLeft';
                        case 39:
                            return 'ArrowRight';
                        case 188:
                            return ',';
                        case 190:
                            return '.';
                        case 109:
                            return '-'; // minus in numbpad
                        case 173:
                            return '-'; // minus in alphabet keyboard in firefox
                        case 189:
                            return '-'; // minus in alphabet keyboard in chrome
                        default:
                            return String.fromCharCode(e.keyCode);
                    }
                }
            }
        };
        PepValidatorService.prototype.allowKeyboardNonNumericCharacters = function (allowedKeys, key, controlOrCommand) {
            var defaultAllowedKeys = [
                'Backspace',
                'ArrowLeft',
                'ArrowRight',
                'Escape',
                'Tab',
                'Home',
                'End',
                'Delete',
            ];
            // allow some non-numeric characters
            if (defaultAllowedKeys.indexOf(key) != -1 ||
                allowedKeys.indexOf(key) != -1 ||
                // Allow: Ctrl+A and Command+A
                (key == 'a' && controlOrCommand) ||
                // Allow: Ctrl+C and Command+C
                (key == 'c' && controlOrCommand) ||
                // Allow: Ctrl+V and Command+V
                (key == 'v' && controlOrCommand) ||
                // Allow: Ctrl+X and Command+X
                (key == 'x' && controlOrCommand) ||
                key.startsWith('F')) {
                // let it happen, don't do anything
                return true;
            }
            else {
                return false;
            }
        };
        PepValidatorService.prototype.isPhone = function (e) {
            var key = this.getName(e);
            var controlOrCommand = e.ctrlKey === true || e.metaKey === true;
            // allowed keys apart from numeric characters
            var allowedKeys = ['.', '-', '+', '(', ')', '*', '#'];
            // allow some non-numeric characters
            if (this.allowKeyboardNonNumericCharacters(allowedKeys, key, controlOrCommand)) {
                return true;
            }
            // allow phone characters only
            var isPhone = new RegExp(this.phone).test(key);
            return isPhone;
        };
        PepValidatorService.prototype.isNumber = function (e, allowDecimal) {
            var cursorPosition = e.target['selectionStart'];
            var originalValue = e.target['value'];
            var key = this.getName(e);
            var controlOrCommand = e.ctrlKey === true || e.metaKey === true;
            var signExists = originalValue.includes('-');
            var separatorExists = originalValue.includes(this.decimalSeparator);
            // allowed keys apart from numeric characters
            var allowedKeys = [];
            // when decimals are allowed, add
            // decimal separator to allowed codes when
            // its position is not close to the the sign (-. and .-)
            var separatorIsCloseToSign = signExists && cursorPosition <= 1;
            if (allowDecimal && !separatorIsCloseToSign && !separatorExists) {
                if (this.decimalSeparator == '.')
                    allowedKeys.push('.');
                else
                    allowedKeys.push(',');
            }
            // when minus sign is allowed, add its
            // key to allowed key only when the
            // cursor is in the first position, and
            // first character is different from
            // decimal separator
            var firstCharacterIsSeparator = originalValue.charAt(0) != this.decimalSeparator;
            if (!signExists && firstCharacterIsSeparator && cursorPosition == 0) {
                allowedKeys.push('-');
            }
            // allow some non-numeric characters
            if (this.allowKeyboardNonNumericCharacters(allowedKeys, key, controlOrCommand)) {
                return true;
            }
            // allow number characters only
            var isNumber = new RegExp(this.integerUnsigned).test(key);
            return isNumber;
        };
        return PepValidatorService;
    }());
    PepValidatorService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PepValidatorService_Factory() { return new PepValidatorService(i0__namespace.ɵɵinject(i1__namespace.TranslateService, 8)); }, token: PepValidatorService, providedIn: "root" });
    PepValidatorService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    PepValidatorService.ctorParameters = function () { return [
        { type: i1.TranslateService, decorators: [{ type: i0.Optional }] }
    ]; };

    var PepWindowScrollingService = /** @class */ (function () {
        function PepWindowScrollingService() {
            this.styleTag = this.buildStyleElement();
        }
        // Disable the scrolling feature on the main viewport.
        PepWindowScrollingService.prototype.disable = function () {
            document.body.appendChild(this.styleTag);
        };
        // Re-enable the scrolling feature on the main viewport.
        PepWindowScrollingService.prototype.enable = function () {
            document.body.removeChild(this.styleTag);
        };
        // Return a Style element that will prevent scrolling on the body.
        PepWindowScrollingService.prototype.buildStyleElement = function () {
            var style = document.createElement('style');
            style.type = 'text/css';
            style.setAttribute('data-debug', 'Injected by WindowScrolling service.');
            style.textContent = "\n            body {\n                overflow: hidden !important ;\n            }\n        ";
            return style;
        };
        return PepWindowScrollingService;
    }());
    PepWindowScrollingService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PepWindowScrollingService_Factory() { return new PepWindowScrollingService(); }, token: PepWindowScrollingService, providedIn: "root" });
    PepWindowScrollingService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    PepWindowScrollingService.ctorParameters = function () { return []; };

    /*
     * Public API Surface of ngx-lib/core/common/services
     */

    /*
     * export from ngx-lib/core/common/services
     */

    /*
     * Public API Surface of ngx-lib/core/common
     */

    /*
     * export from ngx-lib/core/common
     */

    /** Default horizontal alignment. */
    var DEFAULT_HORIZONTAL_ALIGNMENT = 'left';
    /** Default horizontal alignment. */
    var DEFAULT_VERTICAL_ALIGNMENT = 'top';
    var PepFieldBase = /** @class */ (function () {
        // lastFocusField: any;
        function PepFieldBase(options) {
            if (options === void 0) { options = {}; }
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
            this.key = options.key || '';
            this.label = options.label || '';
            this.accessory = options.accessory || '';
            this.mandatory = !!options.mandatory;
            this.order = (_a = options.order) !== null && _a !== void 0 ? _a : 1;
            this.controlType = options.controlType || '';
            // this.type = options.type || '';
            this.placeholder = options.placeholder || '';
            this.hidden = !!options.hidden;
            this.row = (_b = options.row) !== null && _b !== void 0 ? _b : 1;
            this.rowSpan = (_c = options.rowSpan) !== null && _c !== void 0 ? _c : 1;
            this.col = (_d = options.col) !== null && _d !== void 0 ? _d : 1;
            this.colSpan = (_e = options.colSpan) !== null && _e !== void 0 ? _e : 1;
            this.xAlignment = (_f = options.xAlignment) !== null && _f !== void 0 ? _f : DEFAULT_HORIZONTAL_ALIGNMENT;
            this.yAlignment = (_g = options.yAlignment) !== null && _g !== void 0 ? _g : DEFAULT_VERTICAL_ALIGNMENT;
            this.maxFieldCharacters = (_h = options.maxFieldCharacters) !== null && _h !== void 0 ? _h : 0;
            this.minValue = (_j = options.minValue) !== null && _j !== void 0 ? _j : 0;
            this.maxValue = (_k = options.maxValue) !== null && _k !== void 0 ? _k : 0;
            this.update(options);
        }
        PepFieldBase.prototype.getBaseValidators = function (isCheckbox) {
            if (isCheckbox === void 0) { isCheckbox = false; }
            var validators = [];
            if (this.mandatory && !this.readonly && !this.disabled) {
                if (isCheckbox) {
                    validators.push(i3$1.Validators.requiredTrue);
                }
                else {
                    validators.push(i3$1.Validators.required);
                }
            }
            else {
                validators.push(i3$1.Validators.nullValidator);
            }
            if (this.maxFieldCharacters > 0) {
                validators.push(i3$1.Validators.maxLength(this.maxFieldCharacters));
            }
            return validators;
        };
        PepFieldBase.prototype.getValidators = function () {
            var validators = this.getBaseValidators();
            return validators;
        };
        PepFieldBase.prototype.update = function (options) {
            this.value = options.value;
            this.formattedValue = options.formattedValue;
            this.additionalValue = options.additionalValue;
            this.readonly = !!options.readonly;
            this.disabled = !!options.disabled;
            this.visible = !!options.visible;
            this.textColor = options.textColor || '';
            // this.lastFocusField = options.lastFocusField || null;
        };
        return PepFieldBase;
    }());
    var PepPlaceholderField = /** @class */ (function (_super) {
        __extends(PepPlaceholderField, _super);
        function PepPlaceholderField(options) {
            if (options === void 0) { options = {}; }
            var _this = _super.call(this, options) || this;
            _this.controlType = 'placeholder';
            return _this;
        }
        return PepPlaceholderField;
    }(PepFieldBase));
    var PepSeparatorField = /** @class */ (function (_super) {
        __extends(PepSeparatorField, _super);
        function PepSeparatorField(options) {
            if (options === void 0) { options = {}; }
            var _this = _super.call(this, options) || this;
            _this.controlType = 'separator';
            return _this;
        }
        return PepSeparatorField;
    }(PepFieldBase));
    var PepAttachmentField = /** @class */ (function (_super) {
        __extends(PepAttachmentField, _super);
        function PepAttachmentField(options) {
            if (options === void 0) { options = {}; }
            var _this = _super.call(this, options) || this;
            _this.controlType = 'attachment';
            return _this;
        }
        return PepAttachmentField;
    }(PepFieldBase));
    var PepIndicatorsField = /** @class */ (function (_super) {
        __extends(PepIndicatorsField, _super);
        function PepIndicatorsField(options) {
            if (options === void 0) { options = {}; }
            var _this = _super.call(this, options) || this;
            _this.controlType = 'indicators';
            return _this;
        }
        return PepIndicatorsField;
    }(PepFieldBase));
    var PepTextboxField = /** @class */ (function (_super) {
        __extends(PepTextboxField, _super);
        function PepTextboxField(options) {
            if (options === void 0) { options = {}; }
            var _this = _super.call(this, options) || this;
            _this.controlType = 'textbox';
            _this.type = 'text';
            _this.type = options.type || 'text';
            _this.update(options);
            return _this;
        }
        PepTextboxField.prototype.update = function (options) {
            _super.prototype.update.call(this, options);
            if (this.type === 'link') {
                // DI-11292 - add changes for link field for the "Read Only display value" prop
                this.formattedValue =
                    this.disabled && this.formattedValue && this.value
                        ? this.formattedValue
                        : this.value;
            }
        };
        PepTextboxField.prototype.getValidators = function () {
            var validators = _super.prototype.getBaseValidators.call(this);
            if (this.type === 'email') {
                validators.push(i3$1.Validators.pattern(/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/));
            }
            else if (this.type === 'phone') {
                validators.push(i3$1.Validators.pattern(/^[\d\.\-\+\(\)\*\#]+$/));
            }
            else if (this.type === 'int' || this.type === 'real') {
                validators.push(i3$1.Validators.pattern(/^[\.,\-\+\d]+$/));
                if (!isNaN(this.minValue)) {
                    validators.push(i3$1.Validators.min(this.minValue));
                }
                if (!isNaN(this.maxValue)) {
                    validators.push(i3$1.Validators.max(this.maxValue));
                }
            }
            return validators;
        };
        return PepTextboxField;
    }(PepFieldBase));
    var PepTextareaField = /** @class */ (function (_super) {
        __extends(PepTextareaField, _super);
        function PepTextareaField(options) {
            if (options === void 0) { options = {}; }
            var _this = _super.call(this, options) || this;
            _this.controlType = 'textarea';
            return _this;
            // this.type = 'textarea';
        }
        return PepTextareaField;
    }(PepFieldBase));
    var PepRichHtmlTextareaField = /** @class */ (function (_super) {
        __extends(PepRichHtmlTextareaField, _super);
        function PepRichHtmlTextareaField(options) {
            if (options === void 0) { options = {}; }
            var _this = _super.call(this, options) || this;
            _this.controlType = 'richhtmltextarea';
            return _this;
            // this.type = 'richhtmltextarea';
        }
        return PepRichHtmlTextareaField;
    }(PepFieldBase));
    var PepSignatureField = /** @class */ (function (_super) {
        __extends(PepSignatureField, _super);
        function PepSignatureField(options) {
            if (options === void 0) { options = {}; }
            var _this = _super.call(this, options) || this;
            _this.controlType = 'signature';
            _this.options = [];
            _this.options = options.options || [];
            return _this;
        }
        return PepSignatureField;
    }(PepFieldBase));
    var PepImageField = /** @class */ (function (_super) {
        __extends(PepImageField, _super);
        function PepImageField(options) {
            if (options === void 0) { options = {}; }
            var _this = _super.call(this, options) || this;
            _this.controlType = 'image';
            _this.hasCampaignField = null;
            _this.indicatorsField = null;
            _this.menuField = null;
            _this.options = [];
            _this.sizeLimitMB = 5;
            _this.hasCampaignField = options.hasCampaignField || null;
            _this.indicatorsField = options.indicatorsField || null;
            _this.menuField = options.menuField || null;
            _this.options = options.options || [];
            _this.sizeLimitMB = options.sizeLimitMB || 5;
            return _this;
        }
        return PepImageField;
    }(PepFieldBase));
    var PepImagesField = /** @class */ (function (_super) {
        __extends(PepImagesField, _super);
        function PepImagesField(options) {
            if (options === void 0) { options = {}; }
            var _this = _super.call(this, options) || this;
            _this.controlType = 'images';
            _this.options = [];
            _this.options = options.options || [];
            return _this;
        }
        return PepImagesField;
    }(PepFieldBase));
    var PepQuantitySelectorField = /** @class */ (function (_super) {
        __extends(PepQuantitySelectorField, _super);
        function PepQuantitySelectorField(options) {
            if (options === void 0) { options = {}; }
            var _this = _super.call(this, options) || this;
            _this.controlType = 'qs';
            _this.notificationInfo = {};
            _this.updatedDataCount = 0;
            _this.allowDecimal = options.allowDecimal || false;
            _this.type = options.type || 'qs';
            _this.update(options);
            return _this;
        }
        PepQuantitySelectorField.prototype.update = function (options) {
            _super.prototype.update.call(this, options);
            this.notificationInfo = options.notificationInfo;
            this.updatedDataCount += 1;
        };
        return PepQuantitySelectorField;
    }(PepFieldBase));
    var PepDateField = /** @class */ (function (_super) {
        __extends(PepDateField, _super);
        function PepDateField(options) {
            if (options === void 0) { options = {}; }
            var _this = _super.call(this, options) || this;
            _this.controlType = 'date';
            _this.type = options.type || 'date';
            return _this;
        }
        return PepDateField;
    }(PepFieldBase));
    var PepCheckboxField = /** @class */ (function (_super) {
        __extends(PepCheckboxField, _super);
        function PepCheckboxField(options) {
            if (options === void 0) { options = {}; }
            var _this = _super.call(this, options) || this;
            _this.controlType = 'checkbox';
            _this.type = options.type || 'checkbox';
            return _this;
        }
        PepCheckboxField.prototype.getValidators = function () {
            var validators = _super.prototype.getBaseValidators.call(this, true);
            return validators;
        };
        return PepCheckboxField;
    }(PepFieldBase));
    var PepSelectField = /** @class */ (function (_super) {
        __extends(PepSelectField, _super);
        function PepSelectField(options) {
            if (options === void 0) { options = {}; }
            var _this = _super.call(this, options) || this;
            _this.controlType = 'select';
            _this.options = [];
            _this.type = options.type || 'select';
            _this.update(options);
            return _this;
        }
        PepSelectField.prototype.update = function (options) {
            _super.prototype.update.call(this, options);
            this.options = options.options || [];
        };
        return PepSelectField;
    }(PepFieldBase));
    var PepAddressField = /** @class */ (function (_super) {
        __extends(PepAddressField, _super);
        function PepAddressField(options) {
            if (options === void 0) { options = {}; }
            var _this = _super.call(this, options) || this;
            _this.controlType = 'address';
            _this.groupFields = null;
            _this.groupFields = options.groupFields || null;
            return _this;
        }
        return PepAddressField;
    }(PepFieldBase));
    var PepInternalButtonField = /** @class */ (function (_super) {
        __extends(PepInternalButtonField, _super);
        function PepInternalButtonField(options) {
            if (options === void 0) { options = {}; }
            var _this = _super.call(this, options) || this;
            _this.controlType = 'button';
            _this.referenceObjectSubType = '';
            _this.referenceObjectInternalType = '';
            _this.referenceObjectType = options.referenceObjectType || null;
            _this.referenceObjectSubType = options.referenceObjectSubType || null;
            _this.referenceObjectInternalType =
                options.referenceObjectInternalType || null;
            _this.type = options.type || 'button';
            return _this;
        }
        return PepInternalButtonField;
    }(PepFieldBase));
    var PepInternalPageField = /** @class */ (function (_super) {
        __extends(PepInternalPageField, _super);
        function PepInternalPageField(options) {
            if (options === void 0) { options = {}; }
            var _this = _super.call(this, options) || this;
            _this.controlType = 'internalPage';
            _this.objectId = '';
            _this.parentId = '';
            _this.searchCode = '';
            _this.objectId = options.objectId || '';
            _this.parentId = options.parentId || '';
            _this.searchCode = options.searchCode || '';
            return _this;
        }
        return PepInternalPageField;
    }(PepFieldBase));
    var PepInternalMenuField = /** @class */ (function (_super) {
        __extends(PepInternalMenuField, _super);
        // hasSubMenu: boolean = false;
        function PepInternalMenuField(options) {
            if (options === void 0) { options = {}; }
            var _this = _super.call(this, options) || this;
            _this.controlType = 'menu';
            _this.options = [];
            _this.options = options.options || [];
            return _this;
            // this.hasSubMenu = options['hasSubMenu'];
        }
        return PepInternalMenuField;
    }(PepFieldBase));

    var PepCustomizationService = /** @class */ (function () {
        function PepCustomizationService(sessionService, fileService, fb) {
            this.sessionService = sessionService;
            this.fileService = fileService;
            this.fb = fb;
            this.hasCustomHomepage = null;
            this.hasCustomHeader = null;
            this.customHeaderHeight = PepCustomizationService.DEFAULT_HEADER_HEIGHT;
            this.mainContHeight = 0;
            this.footerHeight = new rxjs.BehaviorSubject(0);
            this.settingsWidth = new rxjs.BehaviorSubject(0);
            this.hideFooter();
            //
        }
        PepCustomizationService.prototype.getDefaultFromGroup = function (field, withValidators) {
            if (withValidators === void 0) { withValidators = true; }
            var validators = withValidators ? field.getValidators() : [];
            var group = {};
            group[field.key] = [
                { value: field.value, disabled: field.disabled },
                validators,
            ];
            return this.fb.group(group);
        };
        PepCustomizationService.prototype.getFormControl = function (form, fieldKey, parentFieldKey) {
            if (parentFieldKey === void 0) { parentFieldKey = null; }
            var formControl = null;
            if (form && form.controls) {
                if (parentFieldKey === null) {
                    formControl = form.controls[fieldKey];
                }
                else {
                    formControl = form.controls[parentFieldKey].get(fieldKey);
                }
            }
            return formControl;
        };
        PepCustomizationService.prototype.updateFormFieldValue = function (form, fieldKey, value, parentFieldKey) {
            if (value === void 0) { value = ''; }
            if (parentFieldKey === void 0) { parentFieldKey = null; }
            var formControl = this.getFormControl(form, fieldKey, parentFieldKey);
            if (formControl) {
                formControl.setValue(value);
            }
        };
        PepCustomizationService.prototype.updateFormField = function (form, field, value, parentField) {
            if (value === void 0) { value = ''; }
            if (parentField === void 0) { parentField = null; }
            var formControl = this.getFormControl(form, field.key, parentField === null || parentField === void 0 ? void 0 : parentField.key);
            if (formControl) {
                formControl.setValue(value);
                // If disabled has changed.
                if (formControl.disabled !== field.disabled) {
                    field.disabled ? formControl.disable() : formControl.enable();
                    var validators = field.getValidators();
                    formControl.setValidators(validators);
                }
            }
        };
        PepCustomizationService.prototype.calculateFormFieldHeight = function (withTitle, rowSpan, standAlone) {
            if (withTitle === void 0) { withTitle = true; }
            if (rowSpan === void 0) { rowSpan = 1; }
            if (standAlone === void 0) { standAlone = false; }
            var themeVars = this.getThemeVariables();
            var rowFieldHeight = this.getNumberThemeVariable(themeVars, PepCustomizationService.FORM_FIELD_HEIGHT_KEY);
            var rowFieldTitleHeight = this.getNumberThemeVariable(themeVars, PepCustomizationService.FORM_FIELD_TITLE_HEIGHT_KEY);
            var rowFieldSpacingBottom = this.getNumberThemeVariable(themeVars, PepCustomizationService.FORM_SPACEING_KEY);
            var fieldHeight = 0;
            if (rowSpan === 1) {
                fieldHeight =
                    (withTitle ? rowFieldTitleHeight : 0) + rowFieldHeight;
            }
            else {
                var rowSpanCalc = withTitle ? rowSpan : rowSpan - 1;
                fieldHeight =
                    rowSpan * rowFieldHeight +
                        rowSpanCalc * rowFieldTitleHeight +
                        (standAlone ? 0 : rowSpanCalc * rowFieldSpacingBottom);
            }
            return fieldHeight;
        };
        PepCustomizationService.prototype.calculateCardRowsHeight = function (rowsCount, withSpacing) {
            if (rowsCount === void 0) { rowsCount = 1; }
            if (withSpacing === void 0) { withSpacing = true; }
            var themeVars = this.getThemeVariables();
            var cardFieldHeight = this.getNumberThemeVariable(themeVars, PepCustomizationService.CARD_FIELD_HEIGHT_KEY);
            var cardFieldSpacing = this.getNumberThemeVariable(themeVars, PepCustomizationService.CARD_SPACEING_KEY);
            var fieldHeight = rowsCount * cardFieldHeight +
                (rowsCount - 1) * (withSpacing ? cardFieldSpacing : 0);
            return fieldHeight;
        };
        PepCustomizationService.prototype.calculateTableRowsHeight = function (rowsCount, withSpacing) {
            if (rowsCount === void 0) { rowsCount = 1; }
            if (withSpacing === void 0) { withSpacing = true; }
            var themeVars = this.getThemeVariables();
            var tableFieldHeight = this.getNumberThemeVariable(themeVars, PepCustomizationService.TABLE_FIELD_HEIGHT_KEY);
            var tableFieldSpacing = this.getNumberThemeVariable(themeVars, PepCustomizationService.TABLE_SPACEING_KEY);
            var fieldHeight = rowsCount *
                (tableFieldHeight + (withSpacing ? tableFieldSpacing * 2 : 0));
            return fieldHeight;
        };
        PepCustomizationService.prototype.calculateFieldHeight = function (layoutType, rowSpan, standAlone) {
            if (layoutType === void 0) { layoutType = 'form'; }
            var fieldHeight = 'inherit'; // Default for card (with no title)
            if (layoutType === 'table') {
                fieldHeight = this.getThemeVariable(PepCustomizationService.TABLE_FIELD_HEIGHT_KEY);
            }
            else if (layoutType === 'card') {
                fieldHeight =
                    this.calculateCardRowsHeight(rowSpan, !standAlone) +
                        PepCustomizationService.REM_STRING;
            }
            else {
                // Form
                fieldHeight =
                    this.calculateFormFieldHeight(false, rowSpan, standAlone) +
                        PepCustomizationService.REM_STRING;
            }
            return fieldHeight;
        };
        PepCustomizationService.prototype.getBrandingTheme = function () {
            var themeObj = this.sessionService.getObject(PepCustomizationService.USER_THEME);
            return (themeObj && themeObj.Theme) || 'default-theme'; // 'light-theme';
        };
        PepCustomizationService.prototype.getDefaultThemeLayoutVariables = function (themeVars) {
            // Declare default screen sizes.
            themeVars['--pep-screen-max-size-2xs'] =
                '460' + PepCustomizationService.PX_STRING;
            themeVars['--pep-screen-max-size-xs'] =
                '767' + PepCustomizationService.PX_STRING;
            themeVars['--pep-screen-max-size-sm'] =
                '991' + PepCustomizationService.PX_STRING;
            themeVars['--pep-screen-max-size-md'] =
                '1199' + PepCustomizationService.PX_STRING;
            themeVars['--pep-screen-max-size-lg'] =
                '1366' + PepCustomizationService.PX_STRING;
            themeVars['--pep-screen-max-size-xl'] =
                '1920' + PepCustomizationService.PX_STRING;
            // Declare default top bar.
            themeVars[PepCustomizationService.SIDE_BAR_WIDTH_KEY] =
                '16' + PepCustomizationService.REM_STRING;
            // Declare default top bar.
            themeVars[PepCustomizationService.TOP_BAR_SPACING_TOP_KEY] =
                '1.5' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.TOP_BAR_SPACING_BOTTOM_KEY] =
                '0.5' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.TOP_BAR_FIELD_HEIGHT_KEY] =
                '2.5' + PepCustomizationService.REM_STRING;
            // Declare default footer.
            themeVars[PepCustomizationService.FOOTER_BAR_SPACING_TOP_KEY] =
                '0.75' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.FOOTER_BAR_SPACING_BOTTOM_KEY] =
                '1.25' + PepCustomizationService.REM_STRING;
        };
        PepCustomizationService.prototype.getDefaultThemeBorderRadiusVariables = function (themeVars) {
            themeVars[PepCustomizationService.BORDER_RADIUS_SM_KEY] =
                '0.125' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.BORDER_RADIUS_MD_KEY] =
                '0.25' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.BORDER_RADIUS_LG_KEY] =
                '0.5' + PepCustomizationService.REM_STRING;
        };
        PepCustomizationService.prototype.getDefaultThemeSpacingVariables = function (themeVars) {
            themeVars[PepCustomizationService.SPACING_SIZE_2XS_KEY] =
                '0.125' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.SPACING_SIZE_XS_KEY] =
                '0.25' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.SPACING_SIZE_SM_KEY] =
                '0.5' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.SPACING_SIZE_MD_KEY] =
                '0.75' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.SPACING_SIZE_LG_KEY] =
                '1' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.SPACING_SIZE_XL_KEY] =
                '1.5' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.SPACING_SIZE_2XL_KEY] =
                '2' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.SPACING_SIZE_3XL_KEY] =
                '2.5' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.SPACING_SIZE_4XL_KEY] =
                '3' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.SPACING_SIZE_5XL_KEY] =
                '3.5' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.SPACING_SIZE_6XL_KEY] =
                '5' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.SPACING_SIZE_7XL_KEY] =
                '6' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.SPACING_SIZE_8XL_KEY] =
                '8' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.SPACING_SIZE_9XL_KEY] =
                '16' + PepCustomizationService.REM_STRING;
        };
        PepCustomizationService.prototype.getDefaultThemeFontsVariables = function (themeVars) {
            // Title font family
            themeVars[PepCustomizationService.FONT_FAMILY_TITLE_KEY] = 'Nexa';
            // Body font family
            themeVars[PepCustomizationService.FONT_FAMILY_BODY_KEY] = 'Inter';
            // Font sizes
            themeVars[PepCustomizationService.FONT_SIZE_2XS_KEY] =
                '0.625' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.FONT_SIZE_XS_KEY] =
                '0.75' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.FONT_SIZE_SM_KEY] =
                '0.875' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.FONT_SIZE_MD_KEY] =
                '1' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.FONT_SIZE_LG_KEY] =
                '1.125' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.FONT_SIZE_XL_KEY] =
                '1.25' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.FONT_SIZE_2XL_KEY] =
                '1.5' + PepCustomizationService.REM_STRING;
            // Line height
            themeVars[PepCustomizationService.LINE_HEIGHT_2XS_KEY] =
                '0.75' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.LINE_HEIGHT_XS_KEY] =
                '1' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.LINE_HEIGHT_SM_KEY] =
                '1.25' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.LINE_HEIGHT_MD_KEY] =
                '1.5' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.LINE_HEIGHT_LG_KEY] =
                '1.75' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.LINE_HEIGHT_XL_KEY] =
                '2' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.LINE_HEIGHT_2XL_KEY] =
                '2.25' + PepCustomizationService.REM_STRING;
            // Font weight
            themeVars['--pep-font-weight-normal'] = 400;
            themeVars['--pep-font-weight-bold'] = 600;
            themeVars['--pep-font-weight-bolder'] = 800;
        };
        PepCustomizationService.prototype.getDefaultThemeButtonsVariables = function (themeVars) {
            themeVars['--pep-button-2xs-horizontal-spacing'] =
                '0.25' + PepCustomizationService.REM_STRING;
            themeVars['--pep-button-2xs-min-width'] =
                '1' + PepCustomizationService.REM_STRING;
            themeVars['--pep-button-2xs-height'] =
                '1' + PepCustomizationService.REM_STRING;
            themeVars['--pep-button-2xs-font-size'] =
                'var(' + PepCustomizationService.FONT_SIZE_2XS_KEY + ')';
            // themeVars['--pep-button-2xs-icon-horizontal-spacing'] = '0.125' + PepCustomizationService.REM_STRING;
            themeVars['--pep-button-xs-horizontal-spacing'] =
                '0.5' + PepCustomizationService.REM_STRING;
            themeVars['--pep-button-xs-min-width'] =
                '1.5' + PepCustomizationService.REM_STRING;
            themeVars['--pep-button-xs-height'] =
                '1.5' + PepCustomizationService.REM_STRING;
            themeVars['--pep-button-xs-font-size'] =
                'var(' + PepCustomizationService.FONT_SIZE_XS_KEY + ')';
            // themeVars['--pep-button-xs-icon-horizontal-spacing'] = '0.25' + PepCustomizationService.REM_STRING;
            themeVars['--pep-button-sm-horizontal-spacing'] =
                '0.75' + PepCustomizationService.REM_STRING;
            themeVars['--pep-button-sm-min-width'] =
                '2' + PepCustomizationService.REM_STRING;
            themeVars['--pep-button-sm-height'] =
                '2' + PepCustomizationService.REM_STRING;
            themeVars['--pep-button-sm-font-size'] =
                'var(' + PepCustomizationService.FONT_SIZE_SM_KEY + ')';
            // themeVars['--pep-button-sm-icon-horizontal-spacing'] = '0.5' + PepCustomizationService.REM_STRING;
            themeVars['--pep-button-md-horizontal-spacing'] =
                '1' + PepCustomizationService.REM_STRING;
            themeVars['--pep-button-md-min-width'] =
                '2.5' + PepCustomizationService.REM_STRING;
            themeVars['--pep-button-md-height'] =
                '2.5' + PepCustomizationService.REM_STRING;
            themeVars['--pep-button-md-font-size'] =
                'var(' + PepCustomizationService.FONT_SIZE_MD_KEY + ')';
            // themeVars['--pep-button-md-icon-horizontal-spacing'] = '0.5' + PepCustomizationService.REM_STRING;
            themeVars['--pep-button-lg-horizontal-spacing'] =
                '1' + PepCustomizationService.REM_STRING;
            themeVars['--pep-button-lg-min-width'] =
                '3' + PepCustomizationService.REM_STRING;
            themeVars['--pep-button-lg-height'] =
                '3' + PepCustomizationService.REM_STRING;
            themeVars['--pep-button-lg-font-size'] =
                'var(' + PepCustomizationService.FONT_SIZE_LG_KEY + ')';
            // themeVars['--pep-button-lg-icon-horizontal-spacing'] = '0.75' + PepCustomizationService.REM_STRING;
            themeVars['--pep-button-xl-horizontal-spacing'] =
                '1.5' + PepCustomizationService.REM_STRING;
            themeVars['--pep-button-xl-min-width'] =
                '4' + PepCustomizationService.REM_STRING;
            themeVars['--pep-button-xl-height'] =
                '4' + PepCustomizationService.REM_STRING;
            themeVars['--pep-button-xl-font-size'] =
                'var(' + PepCustomizationService.FONT_SIZE_XL_KEY + ')';
            // themeVars['--pep-button-xl-icon-horizontal-spacing'] = '1' + PepCustomizationService.REM_STRING;
        };
        PepCustomizationService.prototype.getSystemPrimaryInvertColorsVariables = function (themeVars) {
            themeVars[PepCustomizationService.COLOR_SYSTEM_PRIMARY_INVERT_KEY + '-h'] = '255';
            themeVars[PepCustomizationService.COLOR_SYSTEM_PRIMARY_INVERT_KEY + '-s'] = '100%';
            themeVars[PepCustomizationService.COLOR_SYSTEM_PRIMARY_INVERT_KEY + '-l'] = '100%';
        };
        PepCustomizationService.prototype.getSystemPrimaryColorsVariables = function (themeVars) {
            themeVars[PepCustomizationService.COLOR_SYSTEM_PRIMARY_KEY + '-h'] =
                '0';
            themeVars[PepCustomizationService.COLOR_SYSTEM_PRIMARY_KEY + '-s'] =
                '0%';
            themeVars[PepCustomizationService.COLOR_SYSTEM_PRIMARY_KEY + '-l'] =
                '10%';
        };
        PepCustomizationService.prototype.getSystemSuccessColorsVariables = function (themeVars) {
            themeVars[PepCustomizationService.COLOR_SYSTEM_SUCCESS_KEY + '-h'] =
                '100';
            themeVars[PepCustomizationService.COLOR_SYSTEM_SUCCESS_KEY + '-s'] =
                '100%';
            themeVars[PepCustomizationService.COLOR_SYSTEM_SUCCESS_KEY + '-l'] =
                '25%';
        };
        PepCustomizationService.prototype.getSystemCautionColorsVariables = function (themeVars) {
            themeVars[PepCustomizationService.COLOR_SYSTEM_CAUTION_KEY + '-h'] =
                '360';
            themeVars[PepCustomizationService.COLOR_SYSTEM_CAUTION_KEY + '-s'] =
                '100%';
            themeVars[PepCustomizationService.COLOR_SYSTEM_CAUTION_KEY + '-l'] =
                '40%';
        };
        PepCustomizationService.prototype.getUserPrimaryColorsVariables = function (themeVars) {
            themeVars[PepCustomizationService.COLOR_USER_PRIMARY_KEY + '-h'] = '78';
            themeVars[PepCustomizationService.COLOR_USER_PRIMARY_KEY + '-s'] =
                '87%';
            themeVars[PepCustomizationService.COLOR_USER_PRIMARY_KEY + '-l'] =
                '27%';
        };
        PepCustomizationService.prototype.getUserSecondaryColorsVariables = function (themeVars) {
            themeVars[PepCustomizationService.COLOR_USER_SECONDARY_KEY + '-h'] =
                '77';
            themeVars[PepCustomizationService.COLOR_USER_SECONDARY_KEY + '-s'] =
                '87%';
            themeVars[PepCustomizationService.COLOR_USER_SECONDARY_KEY + '-l'] =
                '42%';
        };
        PepCustomizationService.prototype.getWeakColorsVariables = function (themeVars) {
            themeVars[PepCustomizationService.COLOR_WEAK_KEY + '-h'] =
                'var(' + PepCustomizationService.COLOR_SYSTEM_PRIMARY_KEY + '-h)';
            themeVars[PepCustomizationService.COLOR_WEAK_KEY + '-s'] =
                'var(' + PepCustomizationService.COLOR_SYSTEM_PRIMARY_KEY + '-s)';
            themeVars[PepCustomizationService.COLOR_WEAK_KEY + '-l'] =
                'var(' + PepCustomizationService.COLOR_SYSTEM_PRIMARY_KEY + '-l)';
        };
        PepCustomizationService.prototype.getRegularColorsVariables = function (themeVars) {
            themeVars[PepCustomizationService.COLOR_REGULAR_KEY + '-h'] =
                'var(' + PepCustomizationService.COLOR_SYSTEM_PRIMARY_KEY + '-h)';
            themeVars[PepCustomizationService.COLOR_REGULAR_KEY + '-s'] =
                'var(' + PepCustomizationService.COLOR_SYSTEM_PRIMARY_KEY + '-s)';
            themeVars[PepCustomizationService.COLOR_REGULAR_KEY + '-l'] =
                'var(' + PepCustomizationService.COLOR_SYSTEM_PRIMARY_KEY + '-l)';
        };
        PepCustomizationService.prototype.getStrongColorsVariables = function (themeVars) {
            themeVars[PepCustomizationService.COLOR_STRONG_KEY + '-h'] =
                'var(' + PepCustomizationService.COLOR_USER_PRIMARY_KEY + '-h)';
            themeVars[PepCustomizationService.COLOR_STRONG_KEY + '-s'] =
                'var(' + PepCustomizationService.COLOR_USER_PRIMARY_KEY + '-s)';
            themeVars[PepCustomizationService.COLOR_STRONG_KEY + '-l'] =
                'var(' + PepCustomizationService.COLOR_USER_PRIMARY_KEY + '-l)';
        };
        PepCustomizationService.prototype.getTextColorsVariables = function (themeVars) {
            themeVars[PepCustomizationService.COLOR_TEXT_LINK_KEY + '-h'] = '207';
            themeVars[PepCustomizationService.COLOR_TEXT_LINK_KEY + '-s'] = '76%';
            themeVars[PepCustomizationService.COLOR_TEXT_LINK_KEY + '-l'] = '37%';
        };
        PepCustomizationService.prototype.getDefaultThemeColorsVariables = function (themeVars) {
            // System primary invert colors.
            this.getSystemPrimaryInvertColorsVariables(themeVars);
            // System primary colors.
            this.getSystemPrimaryColorsVariables(themeVars);
            // System success colors.
            this.getSystemSuccessColorsVariables(themeVars);
            // System caution colors.
            this.getSystemCautionColorsVariables(themeVars);
            // User primary colors.
            this.getUserPrimaryColorsVariables(themeVars);
            // User secondary colors.
            this.getUserSecondaryColorsVariables(themeVars);
            // Weak colors.
            this.getWeakColorsVariables(themeVars);
            // Regular colors.
            this.getRegularColorsVariables(themeVars);
            // Strong colors.
            this.getStrongColorsVariables(themeVars);
            // Text colors.
            this.getTextColorsVariables(themeVars);
        };
        PepCustomizationService.prototype.getDefaultThemeShadowsVariables = function (themeVars) {
            var noneOffset = '0';
            themeVars[PepCustomizationService.SHADOW_NONE_OFFSET_KEY] = noneOffset;
            var xsOffset = '0 0.125rem 0.25rem 0';
            themeVars[PepCustomizationService.SHADOW_XS_OFFSET_KEY] = xsOffset;
            var smOffset = '0 0.25rem 0.5rem 0';
            themeVars[PepCustomizationService.SHADOW_SM_OFFSET_KEY] = smOffset;
            var mdOffset = '0 0.5rem 1rem 0';
            themeVars[PepCustomizationService.SHADOW_MD_OFFSET_KEY] = mdOffset;
            var lgOffset = '0 1rem 2rem 0';
            themeVars[PepCustomizationService.SHADOW_LG_OFFSET_KEY] = lgOffset;
            var xlOffset = '0 2rem 4rem 0';
            themeVars[PepCustomizationService.SHADOW_XL_OFFSET_KEY] = xlOffset;
        };
        PepCustomizationService.prototype.getDefaultThemeFormCustomizationVariables = function (themeVars) {
            var formFieldSpacing = 1;
            themeVars[PepCustomizationService.FORM_FIELD_HEIGHT_KEY] =
                '2.5' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.FORM_FIELD_TITLE_HEIGHT_KEY] =
                '1.5' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.FORM_SPACEING_KEY] =
                formFieldSpacing + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.FORM_FIELD_SPACEING_KEY] =
                formFieldSpacing + PepCustomizationService.REM_STRING;
        };
        PepCustomizationService.prototype.getDefaultThemeCardCustomizationVariables = function (themeVars) {
            themeVars[PepCustomizationService.CARD_FIELD_HEIGHT_KEY] =
                '1.5' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.CARD_SPACEING_KEY] =
                'var(' + PepCustomizationService.SPACING_SIZE_XS_KEY + ')';
            themeVars[PepCustomizationService.CARD_BORDER_RADIUS_KEY] =
                'var(' + PepCustomizationService.BORDER_RADIUS_MD_KEY + ')';
            themeVars[PepCustomizationService.CARD_SHADOW_OFFSET_KEY] =
                'var(' + PepCustomizationService.SHADOW_MD_OFFSET_KEY + ')';
        };
        PepCustomizationService.prototype.getDefaultThemeTableCustomizationVariables = function (themeVars) {
            themeVars[PepCustomizationService.TABLE_FIELD_HEIGHT_KEY] =
                '2' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.TABLE_SPACEING_KEY] =
                '0.5' + PepCustomizationService.REM_STRING;
            themeVars[PepCustomizationService.TABLE_BORDER_RADIUS_KEY] =
                'var(' + PepCustomizationService.BORDER_RADIUS_MD_KEY + ')';
        };
        PepCustomizationService.prototype.getDefaultThemeQSCustomizationVariables = function (themeVars) {
            var qsState = 'regular';
            themeVars[PepCustomizationService.STYLE_QS_KEY] = qsState;
            themeVars[PepCustomizationService.COLOR_QS_KEY + '-h'] =
                'var(' + PepCustomizationService.COLOR_SYSTEM_PRIMARY_KEY + '-h)';
            themeVars[PepCustomizationService.COLOR_QS_KEY + '-s'] =
                'var(' + PepCustomizationService.COLOR_SYSTEM_PRIMARY_KEY + '-s)';
            themeVars[PepCustomizationService.COLOR_QS_KEY + '-l'] =
                'var(' + PepCustomizationService.COLOR_SYSTEM_PRIMARY_KEY + '-l)';
        };
        PepCustomizationService.prototype.getDefaultThemeTopHeaderCustomizationVariables = function (themeVars) {
            var topHeaderState = 'strong';
            themeVars[PepCustomizationService.STYLE_TOP_HEADER_KEY] = topHeaderState;
            themeVars[PepCustomizationService.COLOR_TOP_HEADER_KEY + '-h'] = '';
            themeVars[PepCustomizationService.COLOR_TOP_HEADER_KEY + '-s'] = '';
            themeVars[PepCustomizationService.COLOR_TOP_HEADER_KEY + '-l'] = '';
        };
        PepCustomizationService.prototype.getDefaultThemeVariables = function () {
            var themeVars = {};
            // Declare default layout.
            this.getDefaultThemeLayoutVariables(themeVars);
            // Declare default border radius.
            this.getDefaultThemeBorderRadiusVariables(themeVars);
            // Declare default spacing.
            this.getDefaultThemeSpacingVariables(themeVars);
            // Declare default fonts size & line height.
            this.getDefaultThemeFontsVariables(themeVars);
            // Declare default buttons.
            this.getDefaultThemeButtonsVariables(themeVars);
            // Declare default colors.
            this.getDefaultThemeColorsVariables(themeVars);
            // Declare default shadows.
            this.getDefaultThemeShadowsVariables(themeVars);
            // Declare default form customization.
            this.getDefaultThemeFormCustomizationVariables(themeVars);
            // Declare default card customization.
            this.getDefaultThemeCardCustomizationVariables(themeVars);
            // Declare default table customization.
            this.getDefaultThemeTableCustomizationVariables(themeVars);
            // Declare default qs customization.
            this.getDefaultThemeQSCustomizationVariables(themeVars);
            // Declare default top header customization.
            this.getDefaultThemeTopHeaderCustomizationVariables(themeVars);
            return themeVars;
        };
        PepCustomizationService.prototype.getThemeVariables = function () {
            var ret = this.getDefaultThemeVariables();
            var themeVars = this.sessionService.getObject(PepCustomizationService.USER_THEME_VARIABLES);
            // Override defaults.
            if (themeVars) {
                for (var key in themeVars) {
                    ret[key] = themeVars[key];
                }
            }
            return ret;
        };
        PepCustomizationService.prototype.setThemeVariables = function (themeVariablesToSet) {
            if (themeVariablesToSet === void 0) { themeVariablesToSet = null; }
            var themeVariables = this.getThemeVariables();
            // Override defaults.
            if (themeVariablesToSet) {
                for (var key in themeVariablesToSet) {
                    themeVariables[key] = themeVariablesToSet[key];
                }
            }
            this.sessionService.setObject(PepCustomizationService.USER_THEME_VARIABLES, JSON.stringify(themeVariables));
            for (var key in themeVariables) {
                if (this.isFontUrlKey(key)) {
                    this.fileService.loadFontStyle(key, themeVariables[key]);
                }
                else {
                    document.documentElement.style.setProperty(key, themeVariables[key]);
                }
            }
        };
        PepCustomizationService.prototype.isFontUrlKey = function (key) {
            var res = false;
            if (key === PepCustomizationService.FONT_FAMILY_TITLE_NORMAL_URL_KEY ||
                key === PepCustomizationService.FONT_FAMILY_TITLE_BOLD_URL_KEY ||
                key === PepCustomizationService.FONT_FAMILY_BODY_NORMAL_URL_KEY ||
                key === PepCustomizationService.FONT_FAMILY_BODY_BOLD_URL_KEY) {
                res = true;
            }
            return res;
        };
        PepCustomizationService.prototype.getThemeVariable = function (key) {
            var themeVars = this.getThemeVariables();
            if (themeVars.hasOwnProperty(key)) {
                return themeVars[key];
            }
            else {
                return '';
            }
        };
        PepCustomizationService.prototype.getNumberThemeVariable = function (themeVars, key) {
            if (themeVars && themeVars.hasOwnProperty(key)) {
                // If it's reference to another key.
                if (themeVars[key].indexOf('var(') === 0) {
                    key = themeVars[key].substr(4).split(')')[0];
                }
                var tmp = Number(themeVars[key].replace(PepCustomizationService.REM_STRING, ''));
                return tmp;
            }
            else {
                return 0;
            }
        };
        PepCustomizationService.prototype.setFooterHeight = function (height) {
            var _this = this;
            if (this.footerHeight.getValue() !== height) {
                // it is publishing this value to all the subscribers that have already subscribed to this message
                setTimeout(function () {
                    _this.footerHeight.next(height);
                }, 0);
            }
            document.documentElement.style.setProperty(PepCustomizationService.FOOTER_HEIGHT_KEY, height + PepCustomizationService.REM_STRING);
        };
        PepCustomizationService.prototype.hideFooter = function () {
            this.setFooterHeight(0);
        };
        PepCustomizationService.prototype.showFooter = function () {
            var themeVars = this.getThemeVariables();
            var res = this.getNumberThemeVariable(themeVars, PepCustomizationService.FOOTER_BAR_SPACING_TOP_KEY) +
                this.getNumberThemeVariable(themeVars, PepCustomizationService.FOOTER_BAR_SPACING_BOTTOM_KEY) +
                this.getNumberThemeVariable(themeVars, PepCustomizationService.TOP_BAR_FIELD_HEIGHT_KEY);
            this.setFooterHeight(res);
        };
        PepCustomizationService.prototype.setSettingsWidth = function (width) {
            var _this = this;
            if (this.settingsWidth.getValue() !== width) {
                // it is publishing this value to all the subscribers that have already subscribed to this message
                setTimeout(function () {
                    _this.settingsWidth.next(width);
                }, 0);
            }
            document.documentElement.style.setProperty(PepCustomizationService.SETTINGS_WIDTH_KEY, width + PepCustomizationService.REM_STRING);
        };
        PepCustomizationService.prototype.hideSettings = function () {
            this.setSettingsWidth(0);
        };
        PepCustomizationService.prototype.showSettings = function () {
            var themeVars = this.getThemeVariables();
            var res = this.getNumberThemeVariable(themeVars, PepCustomizationService.SIDE_BAR_WIDTH_KEY);
            this.setSettingsWidth(res);
        };
        PepCustomizationService.prototype.getTopBarHeight = function () {
            var themeVars = this.getThemeVariables();
            var res = this.getNumberThemeVariable(themeVars, PepCustomizationService.TOP_BAR_SPACING_TOP_KEY) +
                this.getNumberThemeVariable(themeVars, PepCustomizationService.TOP_BAR_SPACING_BOTTOM_KEY) +
                this.getNumberThemeVariable(themeVars, PepCustomizationService.TOP_BAR_FIELD_HEIGHT_KEY);
            return res;
        };
        PepCustomizationService.prototype.setOldUserTheme = function (res) {
            // Added user theme.
            var themeObj = {
                Theme: res.Theme || 'default-theme',
            };
            this.sessionService.setObject(PepCustomizationService.USER_THEME, JSON.stringify(themeObj));
            var spinnerColor;
            var brandingFontColor;
            if (this.isLightColor(res.BrandingMainColor)) {
                spinnerColor = PepCustomizationService.DEFAULT_SPINNER_COLOR;
                brandingFontColor = '#222';
            }
            else {
                spinnerColor = res.BrandingMainColor;
                brandingFontColor = PepCustomizationService.DEFAULT_BRANDING_COLOR;
            }
            var color = {
                BrandingSecondaryColor: res.BrandingSecondaryColor,
                BrandingMainColor: res.BrandingMainColor,
                BrandingFontColor: brandingFontColor,
                SpinnerColor: spinnerColor,
            };
            this.sessionService.setObject(PepCustomizationService.USER_COLOR, JSON.stringify(color));
            this.hasCustomHeader =
                res.TopHeaderFiles &&
                    res.TopHeaderFiles.length > 0 &&
                    res.TopHeaderFiles[0] !== ''
                    ? true
                    : false;
            this.hasCustomHomepage =
                res.UserRole === 'Buyer' &&
                    res.TopHeaderFiles &&
                    res.TopHeaderFiles.length > 1 &&
                    res.TopHeaderFiles[1] !== '';
        };
        PepCustomizationService.prototype.isLegacyColor = function () {
            var h = document.documentElement.style.getPropertyValue(PepCustomizationService.COLOR_TOP_HEADER_KEY + '-h');
            var s = document.documentElement.style.getPropertyValue(PepCustomizationService.COLOR_TOP_HEADER_KEY + '-s');
            var l = document.documentElement.style.getPropertyValue(PepCustomizationService.COLOR_TOP_HEADER_KEY + '-l');
            return !(h && s && l);
        };
        PepCustomizationService.prototype.getLoadingSpinnerColor = function () {
            var spinnerColor = '';
            if (this.isLegacyColor()) {
                var color = this.sessionService.getObject(PepCustomizationService.USER_COLOR);
                if (color && color.SpinnerColor) {
                    spinnerColor = color.SpinnerColor;
                }
                else {
                    spinnerColor = PepCustomizationService.DEFAULT_SPINNER_COLOR;
                }
            }
            return spinnerColor;
        };
        PepCustomizationService.prototype.getBrandingMainColor = function () {
            var brandingMainColor = '';
            if (this.isLegacyColor()) {
                var color = this.sessionService.getObject(PepCustomizationService.USER_COLOR);
                if (color && color.BrandingMainColor) {
                    brandingMainColor = color.BrandingMainColor;
                }
                else {
                    brandingMainColor =
                        PepCustomizationService.DEFAULT_BRANDING_COLOR;
                }
            }
            return brandingMainColor;
        };
        PepCustomizationService.prototype.isLightColor = function (hexColor) {
            if (!hexColor) {
                return;
            }
            var isBright = false;
            var sum = 0;
            var c = hexColor.replace(/^#/, '');
            sum = parseInt(c[0] + c[1], 16);
            sum += parseInt(c[2] + c[3], 16);
            sum += parseInt(c[4] + c[5], 16);
            if (sum > 382.6) {
                // it's bright color
                isBright = true;
            }
            return isBright;
        };
        return PepCustomizationService;
    }());
    PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME = 'pep-field';
    PepCustomizationService.REM_STRING = 'rem';
    PepCustomizationService.PX_STRING = 'px';
    PepCustomizationService.USER_THEME = 'user_theme';
    PepCustomizationService.USER_COLOR = 'user_color';
    PepCustomizationService.USER_THEME_VARIABLES = 'user_theme_variables';
    // Header height
    PepCustomizationService.HEADER_HEIGHT_KEY = '--pep-header-height';
    // Side bar variables keys
    PepCustomizationService.SIDE_BAR_WIDTH_KEY = '--pep-side-bar-width';
    // Settings width
    PepCustomizationService.SETTINGS_WIDTH_KEY = '--pep-settings-bar-width';
    // Top bar variables keys
    PepCustomizationService.TOP_BAR_SPACING_TOP_KEY = '--pep-top-bar-spacing-top';
    PepCustomizationService.TOP_BAR_SPACING_BOTTOM_KEY = '--pep-top-bar-spacing-bottom';
    PepCustomizationService.TOP_BAR_FIELD_HEIGHT_KEY = '--pep-top-bar-field-height';
    // Footer variables keys
    PepCustomizationService.FOOTER_HEIGHT_KEY = '--pep-footer-bar-height';
    PepCustomizationService.FOOTER_BAR_SPACING_TOP_KEY = '--pep-footer-bar-spacing-top';
    PepCustomizationService.FOOTER_BAR_SPACING_BOTTOM_KEY = '--pep-footer-bar-spacing-bottom';
    // Main container height
    PepCustomizationService.MAIN_HEIGHT_KEY = '--pep-main-height';
    // Colors variables keys
    PepCustomizationService.COLOR_USER_PRIMARY_KEY = '--pep-color-user-primary';
    PepCustomizationService.COLOR_USER_SECONDARY_KEY = '--pep-color-user-secondary';
    PepCustomizationService.COLOR_SYSTEM_PRIMARY_INVERT_KEY = '--pep-color-system-primary-invert';
    PepCustomizationService.COLOR_SYSTEM_PRIMARY_KEY = '--pep-color-system-primary';
    PepCustomizationService.COLOR_TEXT_LINK_KEY = '--pep-color-text-link';
    PepCustomizationService.COLOR_SYSTEM_CAUTION_KEY = '--pep-color-system-caution';
    PepCustomizationService.COLOR_SYSTEM_SUCCESS_KEY = '--pep-color-system-success';
    PepCustomizationService.COLOR_STRONG_KEY = '--pep-color-strong';
    PepCustomizationService.COLOR_REGULAR_KEY = '--pep-color-regular';
    PepCustomizationService.COLOR_WEAK_KEY = '--pep-color-weak';
    // Top header variables keys
    PepCustomizationService.COLOR_TOP_HEADER_KEY = '--pep-color-top-header';
    PepCustomizationService.STYLE_TOP_HEADER_KEY = '--pep-style-top-header';
    // QS variables keys
    PepCustomizationService.COLOR_QS_KEY = '--pep-color-qs';
    PepCustomizationService.STYLE_QS_KEY = '--pep-style-qs';
    // Fonts variables keys
    PepCustomizationService.FONT_FAMILY_TITLE_KEY = '--pep-font-family-title';
    PepCustomizationService.FONT_FAMILY_TITLE_NORMAL_URL_KEY = '--pep-font-family-title-normal-url';
    PepCustomizationService.FONT_FAMILY_TITLE_BOLD_URL_KEY = '--pep-font-family-title-bold-url';
    PepCustomizationService.FONT_FAMILY_BODY_KEY = '--pep-font-family-body';
    PepCustomizationService.FONT_FAMILY_BODY_NORMAL_URL_KEY = '--pep-font-family-body-normal-url';
    PepCustomizationService.FONT_FAMILY_BODY_BOLD_URL_KEY = '--pep-font-family-body-bold-url';
    // Border radius variables keys
    PepCustomizationService.BORDER_RADIUS_KEY = '--pep-border-radius';
    PepCustomizationService.BORDER_RADIUS_SM_KEY = PepCustomizationService.BORDER_RADIUS_KEY + '-sm';
    PepCustomizationService.BORDER_RADIUS_MD_KEY = PepCustomizationService.BORDER_RADIUS_KEY + '-md';
    PepCustomizationService.BORDER_RADIUS_LG_KEY = PepCustomizationService.BORDER_RADIUS_KEY + '-lg';
    // Fonts variables keys
    PepCustomizationService.FONT_SIZE_2XS_KEY = '--pep-font-size-2xs';
    PepCustomizationService.FONT_SIZE_XS_KEY = '--pep-font-size-xs';
    PepCustomizationService.FONT_SIZE_SM_KEY = '--pep-font-size-sm';
    PepCustomizationService.FONT_SIZE_MD_KEY = '--pep-font-size-md';
    PepCustomizationService.FONT_SIZE_LG_KEY = '--pep-font-size-lg';
    PepCustomizationService.FONT_SIZE_XL_KEY = '--pep-font-size-xl';
    PepCustomizationService.FONT_SIZE_2XL_KEY = '--pep-font-size-2xl';
    // Line height variables keys
    PepCustomizationService.LINE_HEIGHT_2XS_KEY = '--pep-line-height-2xs';
    PepCustomizationService.LINE_HEIGHT_XS_KEY = '--pep-line-height-xs';
    PepCustomizationService.LINE_HEIGHT_SM_KEY = '--pep-line-height-sm';
    PepCustomizationService.LINE_HEIGHT_MD_KEY = '--pep-line-height-md';
    PepCustomizationService.LINE_HEIGHT_LG_KEY = '--pep-line-height-lg';
    PepCustomizationService.LINE_HEIGHT_XL_KEY = '--pep-line-height-xl';
    PepCustomizationService.LINE_HEIGHT_2XL_KEY = '--pep-line-height-2xl';
    // Shadows offset variables keys
    PepCustomizationService.SHADOW_NONE_OFFSET_KEY = '--pep-shadow-none-offset';
    PepCustomizationService.SHADOW_XS_OFFSET_KEY = '--pep-shadow-xs-offset';
    PepCustomizationService.SHADOW_SM_OFFSET_KEY = '--pep-shadow-sm-offset';
    PepCustomizationService.SHADOW_MD_OFFSET_KEY = '--pep-shadow-md-offset';
    PepCustomizationService.SHADOW_LG_OFFSET_KEY = '--pep-shadow-lg-offset';
    PepCustomizationService.SHADOW_XL_OFFSET_KEY = '--pep-shadow-xl-offset';
    // Spacing variables keys
    PepCustomizationService.SPACING_SIZE_2XS_KEY = '--pep-spacing-2xs';
    PepCustomizationService.SPACING_SIZE_XS_KEY = '--pep-spacing-xs';
    PepCustomizationService.SPACING_SIZE_SM_KEY = '--pep-spacing-sm';
    PepCustomizationService.SPACING_SIZE_MD_KEY = '--pep-spacing-md';
    PepCustomizationService.SPACING_SIZE_LG_KEY = '--pep-spacing-lg';
    PepCustomizationService.SPACING_SIZE_XL_KEY = '--pep-spacing-xl';
    PepCustomizationService.SPACING_SIZE_2XL_KEY = '--pep-spacing-2xl';
    PepCustomizationService.SPACING_SIZE_3XL_KEY = '--pep-spacing-3xl';
    PepCustomizationService.SPACING_SIZE_4XL_KEY = '--pep-spacing-4xl';
    PepCustomizationService.SPACING_SIZE_5XL_KEY = '--pep-spacing-5xl';
    PepCustomizationService.SPACING_SIZE_6XL_KEY = '--pep-spacing-6xl';
    PepCustomizationService.SPACING_SIZE_7XL_KEY = '--pep-spacing-7xl';
    PepCustomizationService.SPACING_SIZE_8XL_KEY = '--pep-spacing-8xl';
    PepCustomizationService.SPACING_SIZE_9XL_KEY = '--pep-spacing-9xl';
    // Form variables keys
    PepCustomizationService.FORM_FIELD_HEIGHT_KEY = '--pep-form-field-height';
    PepCustomizationService.FORM_FIELD_TITLE_HEIGHT_KEY = '--pep-form-field-title-height';
    PepCustomizationService.FORM_FIELD_SPACEING_KEY = '--pep-form-field-spacing';
    PepCustomizationService.FORM_SPACEING_KEY = '--pep-form-spacing';
    // Card variables keys
    PepCustomizationService.CARD_FIELD_HEIGHT_KEY = '--pep-card-field-height';
    PepCustomizationService.CARD_SPACEING_KEY = '--pep-card-spacing';
    PepCustomizationService.CARD_SHADOW_OFFSET_KEY = '--pep-shadow-card-offset';
    PepCustomizationService.CARD_BORDER_RADIUS_KEY = '--pep-card-border-radius';
    // Table variables keys
    PepCustomizationService.TABLE_FIELD_HEIGHT_KEY = '--pep-table-field-height';
    PepCustomizationService.TABLE_SPACEING_KEY = '--pep-table-spacing';
    PepCustomizationService.TABLE_BORDER_RADIUS_KEY = '--pep-table-border-radius';
    PepCustomizationService.DEFAULT_HEADER_HEIGHT = 64; // Default
    PepCustomizationService.DEFAULT_SPINNER_COLOR = '#78aa00';
    PepCustomizationService.DEFAULT_BRANDING_COLOR = '#fff';
    PepCustomizationService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PepCustomizationService_Factory() { return new PepCustomizationService(i0__namespace.ɵɵinject(PepSessionService), i0__namespace.ɵɵinject(PepFileService), i0__namespace.ɵɵinject(i3__namespace$1.FormBuilder)); }, token: PepCustomizationService, providedIn: "root" });
    PepCustomizationService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    PepCustomizationService.ctorParameters = function () { return [
        { type: PepSessionService },
        { type: PepFileService },
        { type: i3$1.FormBuilder }
    ]; };

    /*
     * Public API Surface of ngx-lib/core/customizatin
     */

    /*
     * export from ngx-lib/core/customization
     */

    /*
     * Public API Surface of ngx-lib/core/http
     */

    /*
     * export from ngx-lib/core/http
     */

    /*
     * Public API Surface of ngx-lib/core/layout
     */

    /*
     * export from ngx-lib/core/layout
     */

    /*
     * Public API Surface of ngx-lib/core/portal
     */

    /*
     * export from ngx-lib/core/portal
     */

    var PepScrollToService = /** @class */ (function () {
        function PepScrollToService() {
        }
        PepScrollToService.prototype.scrollElementTo = function (element, duration, top) {
            if (duration === void 0) { duration = 500; }
            if (top === void 0) { top = 0; }
            var subject = new rxjs.Subject();
            if (element instanceof Element || element instanceof Window) {
                this._scrollElementTo(element, duration, top, subject);
            }
            else {
                subject.error("I don't find element");
            }
            return subject;
        };
        PepScrollToService.prototype._scrollElementTo = function (el, duration, top, subject) {
            if (el) {
                var startingY = void 0;
                if (el instanceof Window) {
                    startingY = window.pageYOffset;
                }
                else {
                    var viewportOffset = el.getBoundingClientRect();
                    startingY = viewportOffset.top;
                }
                this.doScrolling(el, startingY, top, duration, subject);
            }
            else {
                subject.error("I don't find element");
            }
            return subject;
        };
        PepScrollToService.prototype.scrollWindowToElement = function (element, duration, offset) {
            if (duration === void 0) { duration = 500; }
            if (offset === void 0) { offset = 0; }
            var subject = new rxjs.Subject();
            if (typeof element === 'string') {
                var el = document.querySelector(element);
                this._scrollWindowToElement(el, duration, offset, subject);
            }
            else if (element instanceof HTMLElement) {
                this._scrollWindowToElement(element, duration, offset, subject);
            }
            else {
                subject.error("I don't find element");
            }
            return subject;
        };
        PepScrollToService.prototype._scrollWindowToElement = function (el, duration, offset, subject) {
            if (el) {
                var viewportOffset = el.getBoundingClientRect();
                var startingY = window.pageYOffset;
                var offsetTop = viewportOffset.top + startingY;
                this.doScrolling(window, startingY, offsetTop + offset, duration, subject);
            }
            else {
                subject.error("I don't find element");
            }
            return subject;
        };
        PepScrollToService.prototype.doScrolling = function (scrollingElement, startingY, elementY, duration, subject) {
            var diff = elementY - startingY;
            var start;
            requestAnimationFrame(function step(timestamp) {
                start = !start ? timestamp : start;
                var time = timestamp - start;
                var percent = Math.min(time / duration, 1);
                scrollingElement.scrollTo(0, startingY + diff * percent);
                if (time < duration) {
                    requestAnimationFrame(step);
                    subject.next({});
                }
                else {
                    subject.complete();
                }
            });
        };
        return PepScrollToService;
    }());
    PepScrollToService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PepScrollToService_Factory() { return new PepScrollToService(); }, token: PepScrollToService, providedIn: "root" });
    PepScrollToService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];

    /*
     * Public API Surface of ngx-lib/core/scroll-to
     */

    /*
     * export from ngx-lib/core/scroll-to
     */

    /*
     * Public API Surface of ngx-lib/core
     */

    /*
     * export from ngx-lib/core
     */

    /*
     * Public API Surface of ngx-lib
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DEFAULT_HORIZONTAL_ALIGNMENT = DEFAULT_HORIZONTAL_ALIGNMENT;
    exports.DEFAULT_VERTICAL_ALIGNMENT = DEFAULT_VERTICAL_ALIGNMENT;
    exports.FieldLayout = FieldLayout;
    exports.KeyValuePair = KeyValuePair;
    exports.ObjectSingleData = ObjectSingleData;
    exports.ObjectsData = ObjectsData;
    exports.ObjectsDataRow = ObjectsDataRow;
    exports.ObjectsDataRowCell = ObjectsDataRowCell;
    exports.PepAddonService = PepAddonService;
    exports.PepAddressField = PepAddressField;
    exports.PepAttachDirective = PepAttachDirective;
    exports.PepAttachmentField = PepAttachmentField;
    exports.PepButtonBlurDirective = PepButtonBlurDirective;
    exports.PepButtonLoaderDirective = PepButtonLoaderDirective;
    exports.PepCapitalizePipe = PepCapitalizePipe;
    exports.PepCheckboxField = PepCheckboxField;
    exports.PepClipboardDirective = PepClipboardDirective;
    exports.PepClipboardService = PepClipboardService;
    exports.PepColorService = PepColorService;
    exports.PepCookieService = PepCookieService;
    exports.PepCustomizationService = PepCustomizationService;
    exports.PepDataConvertorService = PepDataConvertorService;
    exports.PepDataQaDirective = PepDataQaDirective;
    exports.PepDateField = PepDateField;
    exports.PepDateFormatterPipe = PepDateFormatterPipe;
    exports.PepDateStringFormatterPipe = PepDateStringFormatterPipe;
    exports.PepEncodePipe = PepEncodePipe;
    exports.PepEscapePipe = PepEscapePipe;
    exports.PepFieldBase = PepFieldBase;
    exports.PepFieldData = PepFieldData;
    exports.PepFileService = PepFileService;
    exports.PepGuid = PepGuid;
    exports.PepHttpService = PepHttpService;
    exports.PepImageField = PepImageField;
    exports.PepImagesField = PepImagesField;
    exports.PepIndicatorsField = PepIndicatorsField;
    exports.PepInputAutoWidthDirective = PepInputAutoWidthDirective;
    exports.PepInternalButtonField = PepInternalButtonField;
    exports.PepInternalMenuField = PepInternalMenuField;
    exports.PepInternalPageField = PepInternalPageField;
    exports.PepJwtHelperService = PepJwtHelperService;
    exports.PepLayoutService = PepLayoutService;
    exports.PepLoaderService = PepLoaderService;
    exports.PepMenuBlurDirective = PepMenuBlurDirective;
    exports.PepNgxLibModule = PepNgxLibModule;
    exports.PepPlaceholderField = PepPlaceholderField;
    exports.PepPortalService = PepPortalService;
    exports.PepPreventMultiClickDirective = PepPreventMultiClickDirective;
    exports.PepPrintDirective = PepPrintDirective;
    exports.PepQuantitySelectorField = PepQuantitySelectorField;
    exports.PepReplaceLineBreaksPipe = PepReplaceLineBreaksPipe;
    exports.PepRichHtmlTextareaField = PepRichHtmlTextareaField;
    exports.PepRowData = PepRowData;
    exports.PepRtlClassDirective = PepRtlClassDirective;
    exports.PepRtlDirectionDirective = PepRtlDirectionDirective;
    exports.PepSafeHtmlPipe = PepSafeHtmlPipe;
    exports.PepSafePipe = PepSafePipe;
    exports.PepScrollToService = PepScrollToService;
    exports.PepSelectField = PepSelectField;
    exports.PepSeparatorField = PepSeparatorField;
    exports.PepSessionService = PepSessionService;
    exports.PepSignatureField = PepSignatureField;
    exports.PepSplitUppercasePipe = PepSplitUppercasePipe;
    exports.PepTargetDirective = PepTargetDirective;
    exports.PepTextareaField = PepTextareaField;
    exports.PepTextboxField = PepTextboxField;
    exports.PepToNumberPipe = PepToNumberPipe;
    exports.PepUtilitiesService = PepUtilitiesService;
    exports.PepValidatorService = PepValidatorService;
    exports.PepWindowScrollingService = PepWindowScrollingService;
    exports.SmartSearchResponse = SmartSearchResponse;
    exports.SmartSearchValues = SmartSearchValues;
    exports.Test = Test;
    exports.UIControl = UIControl;
    exports.UIControlField = UIControlField;
    exports.ɵa = httpInterceptorProviders;
    exports.ɵb = PepErrorInterceptor;
    exports.ɵc = PepLoaderInterceptor;
    exports.ɵd = PepProfilerInterceptor;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=pepperi-addons-ngx-lib.umd.js.map
