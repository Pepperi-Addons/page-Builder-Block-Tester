(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('@angular/material/core'), require('@angular/material/button'), require('@angular/material/form-field'), require('@angular/material/input'), require('@angular/material/icon'), require('@angular/material/dialog'), require('ngx-signaturepad'), require('@pepperi-addons/ngx-lib'), require('@pepperi-addons/ngx-lib/icon'), require('@pepperi-addons/ngx-lib/field-title'), require('@pepperi-addons/ngx-lib/files-uploader'), require('@pepperi-addons/ngx-lib/dialog')) :
    typeof define === 'function' && define.amd ? define('@pepperi-addons/ngx-lib/signature', ['exports', '@angular/core', '@angular/common', '@angular/forms', '@angular/material/core', '@angular/material/button', '@angular/material/form-field', '@angular/material/input', '@angular/material/icon', '@angular/material/dialog', 'ngx-signaturepad', '@pepperi-addons/ngx-lib', '@pepperi-addons/ngx-lib/icon', '@pepperi-addons/ngx-lib/field-title', '@pepperi-addons/ngx-lib/files-uploader', '@pepperi-addons/ngx-lib/dialog'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['pepperi-addons'] = global['pepperi-addons'] || {}, global['pepperi-addons']['ngx-lib'] = global['pepperi-addons']['ngx-lib'] || {}, global['pepperi-addons']['ngx-lib'].signature = {}), global.ng.core, global.ng.common, global.ng.forms, global.ng.material.core, global.ng.material.button, global.ng.material.formField, global.ng.material.input, global.ng.material.icon, global.ng.material.dialog, global.signaturepad, global['pepperi-addons']['ngx-lib'], global['pepperi-addons']['ngx-lib'].icon, global['pepperi-addons']['ngx-lib']['field-title'], global['pepperi-addons']['ngx-lib']['files-uploader'], global['pepperi-addons']['ngx-lib'].dialog));
}(this, (function (exports, core, common, forms, core$1, button, formField, input, icon$1, dialog$1, ngxSignaturepad, ngxLib, icon, fieldTitle, filesUploader, dialog) { 'use strict';

    var PepSignatureComponent = /** @class */ (function () {
        function PepSignatureComponent(dialogService, customizationService, fileService, cd, renderer, element) {
            this.dialogService = dialogService;
            this.customizationService = customizationService;
            this.fileService = fileService;
            this.cd = cd;
            this.renderer = renderer;
            this.element = element;
            this.key = '';
            this.src = '';
            this.label = '';
            this.mandatory = false;
            this.disabled = false;
            this.readonly = false;
            this.xAlignment = ngxLib.DEFAULT_HORIZONTAL_ALIGNMENT;
            this._rowSpan = 1;
            this.signatureURL = '';
            // @Input() inDialog = false;
            this._visible = true;
            this.controlType = 'signature';
            this.form = null;
            this.showTitle = true;
            this._layoutType = 'form';
            this.isActive = false;
            this.fileChange = new core.EventEmitter();
            this.fieldHeight = '';
            this.standAlone = false;
            this.dataURI = null;
            this.showActionBtn = true;
            this.isVisibleModal = false;
            this.acceptSignatureType = 'png';
            this.signaturePadOptions = {
                // passed through to szimek/signature_pad constructor
                minWidth: 2,
                canvasWidth: 500,
                canvasHeight: 300,
                penColor: 'rgb(151, 151, 151)',
            };
        }
        Object.defineProperty(PepSignatureComponent.prototype, "rowSpan", {
            get: function () {
                return this._rowSpan;
            },
            set: function (value) {
                this._rowSpan = value;
                this.setFieldHeight();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PepSignatureComponent.prototype, "visible", {
            get: function () {
                return this._visible;
            },
            set: function (visible) {
                this._visible = visible;
                if (visible) {
                    this.renderer.removeClass(this.element.nativeElement, 'hidden-element');
                }
                else {
                    this.renderer.addClass(this.element.nativeElement, 'hidden-element');
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PepSignatureComponent.prototype, "layoutType", {
            get: function () {
                return this._layoutType;
            },
            set: function (value) {
                this._layoutType = value;
                this.setFieldHeight();
            },
            enumerable: false,
            configurable: true
        });
        PepSignatureComponent.prototype.setFieldHeight = function () {
            this.fieldHeight = this.customizationService.calculateFieldHeight(this.layoutType, this.rowSpan, this.standAlone);
        };
        PepSignatureComponent.prototype.setDefaultForm = function () {
            var pepField = new ngxLib.PepSignatureField({
                key: this.key,
                value: this.src,
                mandatory: this.mandatory,
                readonly: this.readonly,
                disabled: this.disabled,
            });
            this.form = this.customizationService.getDefaultFromGroup(pepField);
        };
        PepSignatureComponent.prototype.ngOnInit = function () {
            if (this.form === null) {
                this.standAlone = true;
                this.setFieldHeight();
                this.setDefaultForm();
                this.renderer.addClass(this.element.nativeElement, ngxLib.PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME);
            }
        };
        PepSignatureComponent.prototype.ngOnChanges = function (changes) {
            if (this.standAlone) {
                this.setDefaultForm();
            }
            if (changes.src && changes.src.currentValue.length > 0) {
                // Empty dataURI if there is change in the src.
                this.dataURI = null;
                // For clean the cache.
                // this.src = this.src ? this.src + '?t=' + new Date().toTimeString() : '';
            }
        };
        PepSignatureComponent.prototype.ngOnDestroy = function () {
            //
        };
        PepSignatureComponent.prototype.drawComplete = function () {
            // will be notified of szimek/signature_pad's onEnd event
        };
        PepSignatureComponent.prototype.drawStart = function () {
            // will be notified of szimek/signature_pad's onBegin event
        };
        PepSignatureComponent.prototype.openSignModal = function () {
            // If the signature is not empty open it in image viewer.
            if (this.standAlone && this.dataURI) {
                var fileStrArr = this.dataURI.fileStr.split(';');
                if (fileStrArr.length === 2) {
                    var win = window.open('', '_blank');
                    var contentType = fileStrArr[0].split(':')[1];
                    var base64 = fileStrArr[1].split(',')[1];
                    var blob = this.fileService.convertFromb64toBlob(base64, contentType);
                    var url = URL.createObjectURL(blob);
                    win.location.href = url;
                }
                // signature allready exits
            }
            else {
                this.signatureURL = this.src;
                this.openSignatoreDlg(this.signatureURL);
            }
        };
        PepSignatureComponent.prototype.openSignatoreDlg = function (src) {
            var _this = this;
            if (src === void 0) { src = ''; }
            this.showActionBtn =
                this.signatureURL && this.signatureURL !== '' ? false : true;
            this.dialogRef = this.dialogService.openDialog(this.signaturePopupPad);
            this.dialogRef.afterOpened().subscribe(function () {
                _this.afterDialogOpened();
            });
        };
        PepSignatureComponent.prototype.afterDialogOpened = function () {
            if (this.signatureURL && this.signatureURL !== '') {
                this.signaturePad.fromDataURL(this.signatureURL);
                this.signaturePad.off();
            }
        };
        PepSignatureComponent.prototype.clearSignModal = function () {
            this.signatureURL = '';
            this.signaturePad.clear();
            this.signaturePad.on();
        };
        PepSignatureComponent.prototype.deleteSignature = function (event) {
            this.signatureURL = '';
            this.changeValue(this.signatureURL);
            this.cd.detectChanges();
        };
        PepSignatureComponent.prototype.saveSignModal = function (event) {
            if (!this.signaturePad.isEmpty()) {
                this.signatureURL = this.signaturePad.toDataURL('image/png');
                var fileValue = {
                    acceptedExtensions: this.acceptSignatureType,
                    fileStr: this.signatureURL,
                    fileExt: this.acceptSignatureType,
                };
                this.changeValue(fileValue);
            }
            else {
                this.signatureURL = '';
                this.changeValue(this.signatureURL);
            }
            this.dialogRef.close(this.signatureURL);
        };
        PepSignatureComponent.prototype.errorHandler = function (event) {
            this.signatureURL = this.src = ''; // this.blankImage;
        };
        PepSignatureComponent.prototype.changeValue = function (fileData) {
            this.dataURI = fileData;
            this.src = this.standAlone && this.dataURI ? this.dataURI.fileStr : '';
            this.customizationService.updateFormFieldValue(this.form, this.key, this.dataURI ? this.dataURI.fileExt : '');
            // this.valueChange.emit({
            //     key: this.key,
            //     value,
            // });
            this.fileChange.emit(fileData);
            // this.fileChange.emit(value.length > 0 ? JSON.parse(value) : value);
        };
        PepSignatureComponent.prototype.onKeyPress_OpenSignModal = function (event) {
            var e = event;
            if ([13, 32].indexOf(e.which) !== -1) {
                this.openSignModal();
            }
            e.preventDefault();
        };
        return PepSignatureComponent;
    }());
    PepSignatureComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'pep-signature',
                    template: "<ng-container [formGroup]=\"form\">\n    <ng-container>\n        <ng-template #pepTemplate>\n            <mat-form-field [formGroup]=\"form\" appearance=\"outline\">\n                <div class=\"pep-file-wrapper\">\n                    <div class=\"pep-file body-sm\" [ngClass]=\"{ disable: disabled }\" [style.height]=\"fieldHeight\">\n                        <ng-container *ngIf=\"src != ''; then withImg; else noImg\"></ng-container>\n                        <ng-template #withImg>\n                            <button *ngIf=\"!disabled\" mat-button (click)=\"deleteSignature($event)\"\n                                class=\"pep-button icon-button weak md delete\" tabindex=\"-1\"\n                                [ngClass]=\"{ 'right-alignment': xAlignment == 'right' }\">\n                                <mat-icon>\n                                    <pep-icon name=\"system_bin\"></pep-icon>\n                                </mat-icon>\n                            </button>\n                            <div class=\"pep-file-preview\" (click)=\"openSignModal()\">\n                                <img [src]=\"src\" [style.max-height]=\"fieldHeight\" class=\"pep-file-preview-img\"\n                                    (error)=\"errorHandler($event)\" [alt]=\"label\"\n                                    [ngClass]=\"['text-align-' + xAlignment]\" />\n                            </div>\n                        </ng-template>\n                        <ng-template #noImg>\n                            <div class=\"ellipsis pep-file-message\">\n                                <mat-icon class=\"pep-spacing-element\">\n                                    <pep-icon name=\"system_signature\"></pep-icon>\n                                </mat-icon>\n                                <span class=\"body-sm ellipsis\">\n                                    {{ (disabled ? 'MESSAGES.INFO_MISSING_SIGNATURE' : 'SIGNATURE.HINT') | translate }}\n                                </span>\n                            </div>\n                        </ng-template>\n                    </div>\n                    <input [id]=\"key\" matInput [formControlName]=\"key\" class=\"hidden-input signature\" type=\"text\"\n                        [value]=\"src\" (click)=\"openSignModal()\" (keypress)=\"onKeyPress_OpenSignModal($event)\"\n                        autocomplete=\"off\" readonly />\n                </div>\n\n                <mat-error><span class=\"body-xs\"\n                        [title]=\"mandatory && src.length == 0 ? ('MESSAGES.ERROR_IS_REQUIRED' | translate: { field: label }) : ('MESSAGES.ERROR_IS_NOT_VALID' | translate: { field: label })\"\n                        [innerText]=\"mandatory && src.length == 0 ? ('MESSAGES.ERROR_IS_REQUIRED' | translate: { field: label }) : ('MESSAGES.ERROR_IS_NOT_VALID' | translate: { field: label })\"></span>\n                </mat-error>\n            </mat-form-field>\n        </ng-template>\n\n        <ng-container *ngIf=\"layoutType === 'form'\">\n            <div class=\"pep-file-container\" [ngClass]=\"{ 'one-row': rowSpan == 1, 'stand-alone': standAlone}\">\n                <pep-field-title [label]=\"label\" [mandatory]=\"mandatory\" [disabled]=\"disabled\" [xAlignment]=\"xAlignment\"\n                    [showTitle]=\"showTitle\">\n                </pep-field-title>\n                <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n            </div>\n        </ng-container>\n\n        <ng-container *ngIf=\"layoutType === 'card'\">\n            <ng-container *ngIf=\"false && isActive && !disabled; then selectedBlock; else notSelectedBlock\">\n            </ng-container>\n            <ng-template #selectedBlock>\n                <div class=\"pep-file-container\" [ngClass]=\"{ 'one-row': rowSpan == 1}\">\n                    <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n                </div>\n            </ng-template>\n            <ng-template #notSelectedBlock>\n                <div class=\"pep-file-container\" [ngClass]=\"{ 'one-row': rowSpan == 1 }\">\n                    <ng-container *ngTemplateOutlet=\"pepReadonlyTemplate; context: { isTableView: false}\">\n                    </ng-container>\n                </div>\n            </ng-template>\n        </ng-container>\n\n        <ng-container *ngIf=\"layoutType === 'table'\">\n            <ng-container *ngIf=\"false && isActive && !disabled; then selectedBlock; else notSelectedBlock\">\n            </ng-container>\n            <ng-template #selectedBlock>\n                <div class=\"pep-file-container one-row\">\n                    <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n                </div>\n            </ng-template>\n            <ng-template #notSelectedBlock>\n                <div class=\"pep-file-container one-row\">\n                    <ng-container *ngTemplateOutlet=\"pepReadonlyTemplate; context: { isTableView: true}\">\n                    </ng-container>\n                </div>\n            </ng-template>\n        </ng-container>\n    </ng-container>\n\n    <!-- <ng-container *ngIf=\"inDialog === true\">\n        <ng-container *ngTemplateOutlet=\"signaturePopupPad\"></ng-container>\n    </ng-container> -->\n\n    <!-- <div *ngIf=\"inDialog === false\" class=\"signature-backdrop modal\" [ngClass]=\"{ fade: !isVisibleModal }\" tabindex=\"-1\"\n        role=\"dialog\" aria-labelledby=\"gridModalLabel\" aria-hidden=\"true\"\n        [ngStyle]=\"{ display: isVisibleModal ? 'block' : 'none' }\">\n        <div class=\"signature-modal modal-dialog\" role=\"document\">\n            <div class=\"modal-content\">\n                <ng-container *ngTemplateOutlet=\"signaturePopupPad\"></ng-container>\n            </div>\n        </div>\n    </div> -->\n\n    <ng-template #pepReadonlyTemplate let-isTableView=\"isTableView\">\n        <div class=\"pep-file-container\">\n            <div class=\"pep-file-wrapper\">\n                <div class=\"pep-file body-sm disable\">\n                    <ng-container *ngIf=\"src != ''; then withImg; else noImg\"></ng-container>\n                    <ng-template #withImg>\n                        <div class=\"pep-file-preview\" (click)=\"openSignModal()\">\n                            <img *ngIf=\"!isTableView\" [src]=\"src\" [style.max-height]=\"fieldHeight\"\n                                class=\"pep-file-preview-img\" (error)=\"errorHandler($event)\" [alt]=\"label\"\n                                [ngClass]=\"['text-align-' + xAlignment]\" />\n                            <img *ngIf=\"isTableView\" [src]=\"src\" [style.max-height]=\"fieldHeight\"\n                                class=\"pep-report-file pep-file-preview-img\" (error)=\"errorHandler($event)\"\n                                [alt]=\"label\" [ngClass]=\"['text-align-' + xAlignment]\" />\n                        </div>\n                    </ng-template>\n                    <ng-template #noImg></ng-template>\n                </div>\n            </div>\n        </div>\n    </ng-template>\n\n    <ng-template #signaturePopupPad>\n        <pep-dialog [title]=\"'SIGNATURE.DIALOG_TITLE' | translate\" [showFooter]=\"showActionBtn\">\n            <ng-container pep-dialog-content>\n                <signature-pad #signaturePad [options]=\"signaturePadOptions\" (onBeginEvent)=\"drawStart()\"\n                    (onEndEvent)=\"drawComplete()\">\n                </signature-pad>\n            </ng-container>\n            <div pep-dialog-actions class=\"pep-spacing-element-negative\">\n                <button mat-button class=\"pep-spacing-element pep-button md weak\" [disabled]=\"readonly || disabled\"\n                    (click)=\"clearSignModal()\">\n                    {{ 'ACTIONS.CLEAR' | translate }}\n                </button>\n                <button mat-button class=\"pep-spacing-element pep-button md strong\" [disabled]=\"readonly || disabled\"\n                    (click)=\"saveSignModal($event)\">\n                    {{ 'ACTIONS.DONE' | translate }}\n                </button>\n            </div>\n        </pep-dialog>\n    </ng-template>\n\n</ng-container>",
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    styles: [":host{display:block}signature-pad{display:grid;width:inherit;height:inherit}"]
                },] }
    ];
    PepSignatureComponent.ctorParameters = function () { return [
        { type: dialog.PepDialogService },
        { type: ngxLib.PepCustomizationService },
        { type: ngxLib.PepFileService },
        { type: core.ChangeDetectorRef },
        { type: core.Renderer2 },
        { type: core.ElementRef }
    ]; };
    PepSignatureComponent.propDecorators = {
        key: [{ type: core.Input }],
        src: [{ type: core.Input }],
        label: [{ type: core.Input }],
        mandatory: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        readonly: [{ type: core.Input }],
        xAlignment: [{ type: core.Input }],
        rowSpan: [{ type: core.Input }],
        signatureURL: [{ type: core.Input }],
        visible: [{ type: core.Input }],
        form: [{ type: core.Input }],
        showTitle: [{ type: core.Input }],
        layoutType: [{ type: core.Input }],
        isActive: [{ type: core.Input }],
        fileChange: [{ type: core.Output }],
        signaturePad: [{ type: core.ViewChild, args: ['signaturePad',] }],
        signaturePopupPad: [{ type: core.ViewChild, args: ['signaturePopupPad', { read: core.TemplateRef },] }]
    };

    var PepSignatureModule = /** @class */ (function () {
        function PepSignatureModule(pepIconRegistry) {
            this.pepIconRegistry = pepIconRegistry;
            this.pepIconRegistry.registerIcons([
                icon.pepIconSystemBin,
                icon.pepIconSystemSignature,
                icon.pepIconSystemClose,
            ]);
        }
        return PepSignatureModule;
    }());
    PepSignatureModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.ReactiveFormsModule,
                        // Material modules
                        core$1.MatCommonModule,
                        button.MatButtonModule,
                        formField.MatFormFieldModule,
                        input.MatInputModule,
                        icon$1.MatIconModule,
                        dialog$1.MatDialogModule,
                        // External modules
                        ngxSignaturepad.SignaturePadModule,
                        // ngx-lib modules
                        ngxLib.PepNgxLibModule,
                        icon.PepIconModule,
                        fieldTitle.PepFieldTitleModule,
                        filesUploader.PepFilesUploaderModule,
                        dialog.PepDialogModule,
                    ],
                    exports: [PepSignatureComponent],
                    declarations: [PepSignatureComponent],
                },] }
    ];
    PepSignatureModule.ctorParameters = function () { return [
        { type: icon.PepIconRegistry }
    ]; };

    /*
     * Public API Surface of ngx-lib/signature
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.PepSignatureComponent = PepSignatureComponent;
    exports.PepSignatureModule = PepSignatureModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=pepperi-addons-ngx-lib-signature.umd.js.map
