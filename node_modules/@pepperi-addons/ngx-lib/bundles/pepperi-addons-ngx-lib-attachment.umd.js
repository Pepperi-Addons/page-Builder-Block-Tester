(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('@angular/material/core'), require('@angular/material/form-field'), require('@pepperi-addons/ngx-lib'), require('@pepperi-addons/ngx-lib/field-title'), require('@pepperi-addons/ngx-lib/files-uploader')) :
    typeof define === 'function' && define.amd ? define('@pepperi-addons/ngx-lib/attachment', ['exports', '@angular/core', '@angular/common', '@angular/forms', '@angular/material/core', '@angular/material/form-field', '@pepperi-addons/ngx-lib', '@pepperi-addons/ngx-lib/field-title', '@pepperi-addons/ngx-lib/files-uploader'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['pepperi-addons'] = global['pepperi-addons'] || {}, global['pepperi-addons']['ngx-lib'] = global['pepperi-addons']['ngx-lib'] || {}, global['pepperi-addons']['ngx-lib'].attachment = {}), global.ng.core, global.ng.common, global.ng.forms, global.ng.material.core, global.ng.material.formField, global['pepperi-addons']['ngx-lib'], global['pepperi-addons']['ngx-lib']['field-title'], global['pepperi-addons']['ngx-lib']['files-uploader']));
}(this, (function (exports, core, common, forms, core$1, formField, ngxLib, fieldTitle, filesUploader) { 'use strict';

    var PepAttachmentComponent = /** @class */ (function () {
        function PepAttachmentComponent(customizationService, renderer, element, fileService) {
            this.customizationService = customizationService;
            this.renderer = renderer;
            this.element = element;
            this.fileService = fileService;
            /**
             * The attachment key.
             *
             * @memberof PepAttachmentComponent
             */
            this.key = '';
            this._src = '';
            /**
             * The title of the attachment.
             *
             * @memberof PepAttachmentComponent
             */
            this.label = '';
            /**
             * If the attachment is mandatory
             *
             * @memberof PepAttachmentComponent
             */
            this.mandatory = false;
            /**
             * If the attachment is disabled
             *
             * @memberof PepAttachmentComponent
             */
            this.disabled = false;
            /**
             * If the attachment is readonly
             *
             * @memberof PepAttachmentComponent
             */
            this.readonly = false;
            /**
             * The horizontal alignment of the attachment
             *
             * @type {PepHorizontalAlignment}
             * @memberof PepAttachmentComponent
             */
            this.xAlignment = ngxLib.DEFAULT_HORIZONTAL_ALIGNMENT;
            this._rowSpan = 1;
            this._visible = true;
            this.controlType = 'attachment';
            this.form = null;
            this.showTitle = true;
            this._layoutType = 'form';
            this.isActive = false;
            this.fileChange = new core.EventEmitter();
            this.elementClick = new core.EventEmitter();
            this.fieldHeight = '';
            this.standAlone = false;
            this.dataURI = null;
            this.acceptAttachmentType = 'application/pdf,application/json,text/csv,text/csv-schema,application/msword,application/vnd.ms-excel,text/plain,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/vnd.openxmlformats-officedocument.wordprocessingml.document,image/bmp,image/jpg, image/jpeg, image/png, image/tif, image/tiff, txt, json';
        }
        Object.defineProperty(PepAttachmentComponent.prototype, "src", {
            get: function () {
                return this._src;
            },
            /**
             * The src of the attachment.
             *
             * @memberof PepAttachmentComponent
             */
            set: function (value) {
                if (!value) {
                    value = '';
                }
                this._src = value;
                if (this._src.length > 0) {
                    // Empty dataURI.
                    this.dataURI = null;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PepAttachmentComponent.prototype, "rowSpan", {
            get: function () {
                return this._rowSpan;
            },
            set: function (value) {
                this._rowSpan = value;
                this.setFieldHeight();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PepAttachmentComponent.prototype, "visible", {
            get: function () {
                return this._visible;
            },
            set: function (visible) {
                this._visible = visible;
                if (visible) {
                    this.renderer.removeClass(this.element.nativeElement, 'hidden-element');
                }
                else {
                    this.renderer.addClass(this.element.nativeElement, 'hidden-element');
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PepAttachmentComponent.prototype, "layoutType", {
            get: function () {
                return this._layoutType;
            },
            set: function (value) {
                this._layoutType = value;
                this.setFieldHeight();
            },
            enumerable: false,
            configurable: true
        });
        PepAttachmentComponent.prototype.setFieldHeight = function () {
            this.fieldHeight = this.customizationService.calculateFieldHeight(this.layoutType, this.rowSpan, this.standAlone);
        };
        PepAttachmentComponent.prototype.setDefaultForm = function () {
            var pepField = new ngxLib.PepAttachmentField({
                key: this.key,
                value: this.src,
                mandatory: this.mandatory,
                readonly: this.readonly,
                disabled: this.disabled,
            });
            this.form = this.customizationService.getDefaultFromGroup(pepField);
        };
        PepAttachmentComponent.prototype.ngOnDestroy = function () {
            //
        };
        PepAttachmentComponent.prototype.ngOnInit = function () {
            if (this.form === null) {
                this.standAlone = true;
                this.setFieldHeight();
                this.setDefaultForm();
                this.renderer.addClass(this.element.nativeElement, ngxLib.PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME);
            }
        };
        PepAttachmentComponent.prototype.ngOnChanges = function (changes) {
            if (this.standAlone) {
                this.setDefaultForm();
            }
            // Moved to src input
            // if (changes.src && changes.src.currentValue.length > 0) {
            //     // Empty dataURI if there is change in the src.
            //     this.dataURI = null;
            // }
        };
        PepAttachmentComponent.prototype.onFileChanged = function (fileData) {
            // const tmp = value.length > 0 ? JSON.parse(value) : null;
            // set this.dataURI after this.src cause it initialize in the src setter.
            this.src = fileData ? fileData.fileStr : '';
            this.dataURI = fileData;
            this.customizationService.updateFormFieldValue(this.form, this.key, this.dataURI ? this.dataURI.fileExt : '');
            // this.valueChange.emit({
            //     key: this.key,
            //     value,
            // });
            this.fileChange.emit(fileData);
            // this.fileChange.emit(value.length > 0 ? JSON.parse(value) : value);
        };
        PepAttachmentComponent.prototype.onFileClicked = function (event) {
            if (this.dataURI != null) {
                var fileStrArr = this.dataURI.fileStr.split(';');
                if (fileStrArr.length === 2) {
                    var win = window.open('', '_blank');
                    var contentType = fileStrArr[0].split(':')[1];
                    var base64 = fileStrArr[1].split(',')[1];
                    var blob = this.fileService.convertFromb64toBlob(base64, contentType);
                    var url = URL.createObjectURL(blob);
                    win.location.href = url;
                }
            }
            else {
                if (this.fileService.isValidUrl(this.src)) {
                    var win = window.open('', '_blank');
                    win.location.href = this.src;
                }
            }
            this.elementClick.emit(event);
        };
        return PepAttachmentComponent;
    }());
    PepAttachmentComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'pep-attachment',
                    template: "<ng-template #pepTemplate>\n    <pep-files-uploader [key]=\"key\" [src]=\"src\" [label]=\"label\" [mandatory]=\"mandatory\" [disabled]=\"disabled\"\n        [xAlignment]=\"xAlignment\" [rowSpan]=\"rowSpan\" [fieldHeight]=\"fieldHeight\" [controlType]=\"controlType\"\n        [form]=\"form\" [layoutType]=\"layoutType\" [standAlone]=\"standAlone\" (fileChange)=\"onFileChanged($event)\"\n        (elementClick)=\"onFileClicked($event)\" [acceptedExtensions]=\"acceptAttachmentType\">\n    </pep-files-uploader>\n</ng-template>\n\n<ng-template #pepReadonlyTemplate>\n    <ng-container *ngIf=\"src?.length > 0; then notEmptyBlock; else emptyBlock\"></ng-container>\n    <ng-template #notEmptyBlock>\n        <div class=\"pep-file-container\">\n            <a [id]=\"key\" class=\"color-link body-sm pep-card-input \" *ngIf=\"src != null\" title=\"{{ src }}\"\n                target=\"_blank\" href=\"{{ src }}\">{{ src }}</a>\n        </div>\n    </ng-template>\n    <ng-template #emptyBlock>\n        <span>&nbsp;</span>\n    </ng-template>\n</ng-template>\n\n<ng-container *ngIf=\"layoutType === 'form'\">\n    <div class=\"pep-file-container\" [ngClass]=\"{ 'one-row': rowSpan == 1, 'stand-alone': standAlone }\">\n        <pep-field-title [label]=\"label\" [mandatory]=\"mandatory\" [disabled]=\"disabled\" [xAlignment]=\"xAlignment\"\n            [showTitle]=\"showTitle\">\n        </pep-field-title>\n        <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n    </div>\n</ng-container>\n\n<ng-container *ngIf=\"layoutType === 'card'\">\n    <ng-container *ngIf=\"false && isActive && !disabled; then selectedBlock; else notSelectedBlock\"></ng-container>\n    <ng-template #selectedBlock>\n        <div class=\"pep-file-container\" [ngClass]=\"{ 'one-row': rowSpan == 1, 'stand-alone': standAlone}\">\n            <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n        </div>\n    </ng-template>\n    <ng-template #notSelectedBlock>\n        <ng-container *ngTemplateOutlet=\"pepReadonlyTemplate\"></ng-container>\n    </ng-template>\n</ng-container>\n\n\n<ng-container *ngIf=\"layoutType === 'table'\">\n    <ng-container *ngIf=\"false && isActive && !disabled; then selectedBlock; else notSelectedBlock\"></ng-container>\n    <ng-template #selectedBlock>\n        <div class=\"pep-file-container one-row\">\n            <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n        </div>\n    </ng-template>\n    <ng-template #notSelectedBlock>\n        <ng-container *ngTemplateOutlet=\"pepReadonlyTemplate\"></ng-container>\n    </ng-template>\n</ng-container>",
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    styles: [":host{display:block}"]
                },] }
    ];
    PepAttachmentComponent.ctorParameters = function () { return [
        { type: ngxLib.PepCustomizationService },
        { type: core.Renderer2 },
        { type: core.ElementRef },
        { type: ngxLib.PepFileService }
    ]; };
    PepAttachmentComponent.propDecorators = {
        key: [{ type: core.Input }],
        src: [{ type: core.Input }],
        label: [{ type: core.Input }],
        mandatory: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        readonly: [{ type: core.Input }],
        xAlignment: [{ type: core.Input }],
        rowSpan: [{ type: core.Input }],
        visible: [{ type: core.Input }],
        form: [{ type: core.Input }],
        showTitle: [{ type: core.Input }],
        layoutType: [{ type: core.Input }],
        isActive: [{ type: core.Input }],
        fileChange: [{ type: core.Output }],
        elementClick: [{ type: core.Output }]
    };

    var PepAttachmentModule = /** @class */ (function () {
        function PepAttachmentModule() {
        }
        return PepAttachmentModule;
    }());
    PepAttachmentModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.ReactiveFormsModule,
                        // Material modules
                        core$1.MatCommonModule,
                        formField.MatFormFieldModule,
                        // ngx-lib modules
                        ngxLib.PepNgxLibModule,
                        fieldTitle.PepFieldTitleModule,
                        filesUploader.PepFilesUploaderModule,
                    ],
                    exports: [PepAttachmentComponent],
                    declarations: [PepAttachmentComponent],
                },] }
    ];

    /*
     * Public API Surface of ngx-lib/attachment
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.PepAttachmentComponent = PepAttachmentComponent;
    exports.PepAttachmentModule = PepAttachmentModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=pepperi-addons-ngx-lib-attachment.umd.js.map
