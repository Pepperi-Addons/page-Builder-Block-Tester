(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('@angular/material/core'), require('@angular/material/button'), require('@angular/material/datepicker'), require('@angular/material/form-field'), require('@angular/material/input'), require('@angular/material/icon'), require('@mat-datetimepicker/core'), require('@pepperi-addons/ngx-lib'), require('@pepperi-addons/ngx-lib/icon'), require('@pepperi-addons/ngx-lib/textbox-icon'), require('@pepperi-addons/ngx-lib/field-title'), require('moment/moment'), require('@angular/material-moment-adapter'), require('@mat-datetimepicker/moment')) :
    typeof define === 'function' && define.amd ? define('@pepperi-addons/ngx-lib/date', ['exports', '@angular/core', '@angular/common', '@angular/forms', '@angular/material/core', '@angular/material/button', '@angular/material/datepicker', '@angular/material/form-field', '@angular/material/input', '@angular/material/icon', '@mat-datetimepicker/core', '@pepperi-addons/ngx-lib', '@pepperi-addons/ngx-lib/icon', '@pepperi-addons/ngx-lib/textbox-icon', '@pepperi-addons/ngx-lib/field-title', 'moment/moment', '@angular/material-moment-adapter', '@mat-datetimepicker/moment'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['pepperi-addons'] = global['pepperi-addons'] || {}, global['pepperi-addons']['ngx-lib'] = global['pepperi-addons']['ngx-lib'] || {}, global['pepperi-addons']['ngx-lib'].date = {}), global.ng.core, global.ng.common, global.ng.forms, global.ng.material.core, global.ng.material.button, global.ng.material.datepicker, global.ng.material.formField, global.ng.material.input, global.ng.material.icon, global['datetimepicker-core'], global['pepperi-addons']['ngx-lib'], global['pepperi-addons']['ngx-lib'].icon, global['pepperi-addons']['ngx-lib']['textbox-icon'], global['pepperi-addons']['ngx-lib']['field-title'], global.moment$1, global.ng.materialMomentAdapter, global['datetimepicker-moment']));
}(this, (function (exports, core, common, forms, core$1, button, datepicker, formField, input, icon$1, core$2, ngxLib, icon, textboxIcon, fieldTitle, moment$1, materialMomentAdapter, moment) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var MomentUtcDateAdapter = /** @class */ (function (_super) {
        __extends(MomentUtcDateAdapter, _super);
        function MomentUtcDateAdapter(dateLocale) {
            return _super.call(this, dateLocale) || this;
        }
        return MomentUtcDateAdapter;
    }(materialMomentAdapter.MomentDateAdapter));
    MomentUtcDateAdapter.decorators = [
        { type: core.Injectable }
    ];
    MomentUtcDateAdapter.ctorParameters = function () { return [
        { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [core$1.MAT_DATE_LOCALE,] }] }
    ]; };
    var MomentUtcDateTimeAdapter = /** @class */ (function (_super) {
        __extends(MomentUtcDateTimeAdapter, _super);
        function MomentUtcDateTimeAdapter(dateLocale) {
            return _super.call(this, dateLocale, { strict: false, useUtc: false }, new MomentUtcDateAdapter(dateLocale)) || this;
        }
        return MomentUtcDateTimeAdapter;
    }(moment.MomentDatetimeAdapter));
    MomentUtcDateTimeAdapter.decorators = [
        { type: core.Injectable }
    ];
    MomentUtcDateTimeAdapter.ctorParameters = function () { return [
        { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [core$1.MAT_DATE_LOCALE,] }] }
    ]; };
    var MY_DATE_FORMATS = {
        parse: {
            dateInput: 'L',
            monthInput: 'MMMM',
            timeInput: 'LT',
            datetimeInput: 'L LT',
        },
        display: {
            dateInput: 'L',
            monthInput: 'MMMM',
            timeInput: 'LT',
            datetimeInput: 'L LT',
            monthYearLabel: 'MMM YYYY',
            dateA11yLabel: 'LL',
            monthYearA11yLabel: 'MMMM YYYY',
            popupHeaderDateLabel: 'ddd, DD MMM',
        },
    };

    var ɵ0 = MY_DATE_FORMATS, ɵ1 = MY_DATE_FORMATS;
    var PepDateComponent = /** @class */ (function () {
        function PepDateComponent(adapter, element, layoutService, utilitiesService, customizationService, renderer) {
            this.adapter = adapter;
            this.element = element;
            this.layoutService = layoutService;
            this.utilitiesService = utilitiesService;
            this.customizationService = customizationService;
            this.renderer = renderer;
            this.key = '';
            this._value = '';
            this.formattedValue = '';
            this.label = '';
            this._type = 'date';
            this.mandatory = false;
            this.disabled = false;
            this.readonly = false;
            this.textColor = '';
            this.xAlignment = ngxLib.DEFAULT_HORIZONTAL_ALIGNMENT;
            this.rowSpan = 1;
            this._visible = true;
            this.controlType = 'date';
            this.form = null;
            this.isActive = false;
            this.showTitle = true;
            this.renderTitle = true;
            this.renderError = true;
            this.renderSymbol = true;
            this.layoutType = 'form';
            this.valueChange = new core.EventEmitter();
            this.standAlone = false;
            this.isInEditMode = false;
            this.showDatepicker = false;
            this.showTime = false;
        }
        Object.defineProperty(PepDateComponent.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (value) {
                this._value = value;
                this.setDateModel();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PepDateComponent.prototype, "type", {
            get: function () {
                return this._type;
            },
            set: function (type) {
                this._type = type;
                this.showTime = type === 'datetime';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PepDateComponent.prototype, "visible", {
            get: function () {
                return this._visible;
            },
            set: function (visible) {
                this._visible = visible;
                if (visible) {
                    this.renderer.removeClass(this.element.nativeElement, 'hidden-element');
                }
                else {
                    this.renderer.addClass(this.element.nativeElement, 'hidden-element');
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PepDateComponent.prototype, "minValue", {
            // Minimum in thicks
            set: function (value) {
                if (value > 0) {
                    this.minDate = new Date(value * 1000 * 60 * 60 * 24);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PepDateComponent.prototype, "maxValue", {
            // Maximum in thicks
            set: function (value) {
                if (value > 0) {
                    this.maxDate = new Date(value * 1000 * 60 * 60 * 24);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PepDateComponent.prototype, "minDateValue", {
            // Minimum in date
            set: function (date) {
                this.minDate = date ? new Date(date) : null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PepDateComponent.prototype, "maxDateValue", {
            // Maximum in date
            set: function (date) {
                this.maxDate = date ? new Date(date) : null;
            },
            enumerable: false,
            configurable: true
        });
        PepDateComponent.prototype.setDefaultForm = function () {
            var pepField = new ngxLib.PepDateField({
                key: this.key,
                value: this.value,
                mandatory: this.mandatory,
                readonly: this.readonly,
                disabled: this.disabled,
            });
            this.form = this.customizationService.getDefaultFromGroup(pepField);
        };
        PepDateComponent.prototype.ngOnInit = function () {
            if (this.form === null) {
                this.standAlone = true;
                this.setDefaultForm();
                this.renderer.addClass(this.element.nativeElement, ngxLib.PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME);
            }
            var culture = this.layoutService.getCurrentLanguage();
            this.adapter.setLocale(culture);
            this.setDateModel();
        };
        PepDateComponent.prototype.ngOnChanges = function (changes) {
            if (this.standAlone) {
                this.setDefaultForm();
            }
        };
        PepDateComponent.prototype.ngOnDestroy = function () {
            //
        };
        PepDateComponent.prototype.setFormattedValueFromModel = function () {
            if (this.dateModel === null || !this.dateModel.isValid()) {
                this.formattedValue = '';
            }
            else {
                var format = this.showTime
                    ? MY_DATE_FORMATS.display.datetimeInput
                    : MY_DATE_FORMATS.display.dateInput;
                this.formattedValue = this.adapter.format(this.dateModel, format);
            }
        };
        PepDateComponent.prototype.setDateModel = function () {
            if (this.value === null ||
                this.value === '' ||
                this.value.indexOf('1900-1-1') >= 0 ||
                this.value.indexOf('1900-01-01') >= 0 ||
                this.value.indexOf('1970-1-1') >= 0 ||
                this.value.indexOf('1970-01-01') >= 0) {
                this._value = '';
                this.dateModel = null;
            }
            else {
                this.dateModel = moment$1.utc(this.utilitiesService.parseDate(this.value, this.showTime));
            }
            this.setFormattedValueFromModel();
        };
        PepDateComponent.prototype.openDatetimePicker = function (datetimePicker) {
            datetimePicker.opened = false;
            datetimePicker.open();
        };
        PepDateComponent.prototype.onBlur = function (event) {
            var _this = this;
            // Don't remove the timeout cause a bug DI-17819.
            setTimeout(function () {
                if (_this.isInEditMode && !_this.datetimePicker.opened) {
                    _this.isInEditMode = false;
                }
            }, 0);
        };
        PepDateComponent.prototype.onDateChange = function (event) {
            var _this = this;
            var value = '';
            if (event.value != null) {
                var date = event.value.toDate();
                value = this.utilitiesService.stringifyDate(date, this.showTime);
                // Update the formatted value.
                this.setFormattedValueFromModel();
            }
            this.customizationService.updateFormFieldValue(this.form, this.key, 
            // this.formattedValue
            value);
            this.valueChange.emit(value);
            setTimeout(function () {
                if (_this.isInEditMode) {
                    _this.isInEditMode = false;
                }
            }, 0);
        };
        PepDateComponent.prototype.cardTemplateClicked = function (event) {
            var _this = this;
            this.isInEditMode = true;
            setTimeout(function () {
                _this.input.nativeElement.focus();
                _this.openDatetimePicker(_this.datetimePicker);
            }, 0);
        };
        return PepDateComponent;
    }());
    PepDateComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'pep-date',
                    template: "<ng-container [formGroup]=\"form\">\n    <ng-template #pepTemplate let-showIcon=\"showIcon\">\n        <mat-form-field appearance=\"outline\">\n            <input #input [id]=\"key\" title=\"{{ formattedValue }}\" matInput class=\"body-sm\" autocomplete=\"false\"\n                [ngStyle]=\"{ color: textColor, 'text-align': xAlignment == 'center' ? 'center' : xAlignment == 'right' ? 'right' : 'left'}\"\n                [(ngModel)]=\"dateModel\" [ngModelOptions]=\"{standalone: true}\" [matDatetimepicker]=\"datetimePicker\"\n                [min]=\"minDate\" [max]=\"maxDate\" [required]=\"mandatory\" [disabled]=\"disabled\"\n                (dateChange)=\"onDateChange($event)\" (click)=\"openDatetimePicker(datetimePicker)\"\n                (blur)=\"onBlur($event)\" />\n            <mat-error *ngIf=\"renderError\"><span class=\"body-xs\"\n                    [title]=\"mandatory && formattedValue.length == 0 ? ('MESSAGES.ERROR_IS_REQUIRED' | translate: {field: label}) : ('MESSAGES.ERROR_IS_NOT_VALID' | translate: {field: label})\"\n                    [innerText]=\"mandatory && formattedValue.length == 0 ? ('MESSAGES.ERROR_IS_REQUIRED' | translate: {field: label}) : ('MESSAGES.ERROR_IS_NOT_VALID' | translate: {field: label})\"></span>\n            </mat-error>\n            <pep-textbox-icon *ngIf=\"renderSymbol && showIcon && xAlignment == 'right'\" matPrefix [value]=\"value\"\n                [label]=\"label\" [type]=\"type\" [disabled]=\"disabled\" (iconClick)=\"openDatetimePicker(datetimePicker)\">\n            </pep-textbox-icon>\n            <pep-textbox-icon *ngIf=\"renderSymbol && showIcon && xAlignment == 'left'\" matSuffix [value]=\"value\"\n                [label]=\"label\" [type]=\"type\" [disabled]=\"disabled\" (iconClick)=\"openDatetimePicker(datetimePicker)\">\n            </pep-textbox-icon>\n            <mat-datetimepicker #datetimePicker [type]=\"showTime ? 'datetime' : 'date'\" [openOnFocus]=\"false\"\n                [touchUi]=\"true\" [timeInterval]=\"1\"></mat-datetimepicker>\n        </mat-form-field>\n    </ng-template>\n\n    <ng-container *ngIf=\"layoutType === 'form'\">\n        <pep-field-title *ngIf=\"renderTitle\" [label]=\"label\" [mandatory]=\"mandatory\" [disabled]=\"disabled\"\n            [xAlignment]=\"xAlignment\" [showTitle]=\"showTitle\">\n        </pep-field-title>\n        <ng-container *ngTemplateOutlet=\"pepTemplate; context: {showIcon: true}\"></ng-container>\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'card'\">\n        <ng-container *ngIf=\"isInEditMode; then editBlock; else readOnlyBlock\"></ng-container>\n        <ng-template #editBlock>\n            <div [ngClass]=\"{'one-row': rowSpan === 1}\">\n                <ng-container *ngTemplateOutlet=\"pepTemplate; context: {showIcon: false}\"></ng-container>\n            </div>\n        </ng-template>\n        <ng-template #readOnlyBlock>\n            <div class=\"pep-card-input card-flex-container\"\n                [ngClass]=\"{'one-row': rowSpan === 1, 'pep-button weak': isActive && !disabled }\"\n                [ngStyle]=\"{ color: textColor }\" [class]=\"'text-align-' + xAlignment\"\n                (click)=\"!disabled ? cardTemplateClicked($event) : ''\">\n                <span *ngIf=\"showTitle && label != ''\" class=\"body-xs title\" title=\"{{ label }}\">{{ label\n                    }}&nbsp;</span>\n                <span [id]=\"key\" title=\"{{ formattedValue }}\" class=\"body-sm value\">{{ formattedValue }}</span>\n                <button *ngIf=\"isActive && !disabled\" class=\"pep-button weak card-edit-button\" mat-button>\n                    <mat-icon>\n                        <pep-icon name=\"system_edit\">\n                        </pep-icon>\n                    </mat-icon>\n                </button>\n            </div>\n        </ng-template>\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'table'\">\n        <ng-container *ngIf=\"isActive && !disabled; then selectedBlock; else notSelectedBlock\"></ng-container>\n        <ng-template #selectedBlock>\n            <ng-container *ngTemplateOutlet=\"pepTemplate; context: {showIcon: true}\"></ng-container>\n        </ng-template>\n        <ng-template #notSelectedBlock>\n            <ng-container *ngIf=\"formattedValue?.length > 0; then notEmptyBlock; else emptyBlock\"></ng-container>\n            <ng-template #notEmptyBlock>\n                <ng-container [ngSwitch]=\"type\">\n                    <ng-container *ngSwitchDefault>\n                        <span [id]=\"key\" class=\"body-sm pep-report-input\" [ngStyle]=\"{ color: textColor }\"\n                            [ngClass]=\"{readonly: disabled}\" title=\"{{ formattedValue }}\">{{ formattedValue }}</span>\n                    </ng-container>\n                </ng-container>\n            </ng-template>\n            <ng-template #emptyBlock>\n                <span [id]=\"key\">&nbsp;</span>\n            </ng-template>\n        </ng-template>\n    </ng-container>\n</ng-container>",
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    providers: [
                        // CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR,
                        // The locale would typically be provided on the root module of your application. We do it at
                        // the component level here, due to limitations of our example generation script.
                        //{ provide: MAT_DATE_LOCALE, useValue: 'en-US' },
                        // `MomentDateAdapter` and `MAT_MOMENT_DATE_FORMATS` can be automatically provided by importing
                        // `MatMomentDateModule` in your applications root module. We provide it at the component level
                        // here, due to limitations of our example generation script.
                        //{ provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE] },
                        //{ provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS },
                        { provide: core$1.DateAdapter, useClass: MomentUtcDateAdapter },
                        { provide: core$1.MAT_DATE_FORMATS, useValue: ɵ0 },
                        { provide: core$2.DatetimeAdapter, useClass: MomentUtcDateTimeAdapter },
                        //{ provide: MAT_DATETIME_FORMATS, useValue: MAT_NATIVE_DATETIME_FORMATS }
                        { provide: core$2.MAT_DATETIME_FORMATS, useValue: ɵ1 },
                    ],
                    styles: [":host{height:inherit;display:grid}:host>*{align-self:center}"]
                },] }
    ];
    PepDateComponent.ctorParameters = function () { return [
        { type: core$1.DateAdapter },
        { type: core.ElementRef },
        { type: ngxLib.PepLayoutService },
        { type: ngxLib.PepUtilitiesService },
        { type: ngxLib.PepCustomizationService },
        { type: core.Renderer2 }
    ]; };
    PepDateComponent.propDecorators = {
        key: [{ type: core.Input }],
        value: [{ type: core.Input }],
        formattedValue: [{ type: core.Input }],
        label: [{ type: core.Input }],
        type: [{ type: core.Input }],
        mandatory: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        readonly: [{ type: core.Input }],
        textColor: [{ type: core.Input }],
        xAlignment: [{ type: core.Input }],
        rowSpan: [{ type: core.Input }],
        visible: [{ type: core.Input }],
        minValue: [{ type: core.Input }],
        maxValue: [{ type: core.Input }],
        minDateValue: [{ type: core.Input }],
        maxDateValue: [{ type: core.Input }],
        form: [{ type: core.Input }],
        isActive: [{ type: core.Input }],
        showTitle: [{ type: core.Input }],
        renderTitle: [{ type: core.Input }],
        renderError: [{ type: core.Input }],
        renderSymbol: [{ type: core.Input }],
        layoutType: [{ type: core.Input }],
        valueChange: [{ type: core.Output }],
        datetimePicker: [{ type: core.ViewChild, args: ['datetimePicker',] }],
        input: [{ type: core.ViewChild, args: ['input',] }]
    };

    var PepDateModule = /** @class */ (function () {
        function PepDateModule(pepIconRegistry) {
            this.pepIconRegistry = pepIconRegistry;
            this.pepIconRegistry.registerIcons([icon.pepIconSystemEdit]);
        }
        return PepDateModule;
    }());
    PepDateModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.ReactiveFormsModule,
                        forms.FormsModule,
                        // Material modules,
                        core$1.MatCommonModule,
                        button.MatButtonModule,
                        core$1.MatNativeDateModule,
                        datepicker.MatDatepickerModule,
                        core$2.MatDatetimepickerModule,
                        core$2.MatNativeDatetimeModule,
                        formField.MatFormFieldModule,
                        input.MatInputModule,
                        icon$1.MatIconModule,
                        // ngx-lib modules
                        ngxLib.PepNgxLibModule,
                        icon.PepIconModule,
                        fieldTitle.PepFieldTitleModule,
                        textboxIcon.PepTextboxIconModule,
                    ],
                    exports: [PepDateComponent],
                    declarations: [PepDateComponent],
                },] }
    ];
    PepDateModule.ctorParameters = function () { return [
        { type: icon.PepIconRegistry }
    ]; };

    /*
     * Public API Surface of ngx-lib/date
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.PepDateComponent = PepDateComponent;
    exports.PepDateModule = PepDateModule;
    exports.ɵ0 = ɵ0;
    exports.ɵ1 = ɵ1;
    exports.ɵa = MomentUtcDateAdapter;
    exports.ɵb = MomentUtcDateTimeAdapter;
    exports.ɵc = MY_DATE_FORMATS;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=pepperi-addons-ngx-lib-date.umd.js.map
