(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('@angular/material/core'), require('@angular/material/form-field'), require('@angular/material/input'), require('@angular/material/button'), require('@angular/material/badge'), require('@angular/material/icon'), require('@pepperi-addons/ngx-lib'), require('@pepperi-addons/ngx-lib/icon'), require('@pepperi-addons/ngx-lib/field-title'), require('@angular/animations'), require('rxjs'), require('rxjs/operators'), require('@ngx-translate/core')) :
    typeof define === 'function' && define.amd ? define('@pepperi-addons/ngx-lib/quantity-selector', ['exports', '@angular/core', '@angular/common', '@angular/forms', '@angular/material/core', '@angular/material/form-field', '@angular/material/input', '@angular/material/button', '@angular/material/badge', '@angular/material/icon', '@pepperi-addons/ngx-lib', '@pepperi-addons/ngx-lib/icon', '@pepperi-addons/ngx-lib/field-title', '@angular/animations', 'rxjs', 'rxjs/operators', '@ngx-translate/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['pepperi-addons'] = global['pepperi-addons'] || {}, global['pepperi-addons']['ngx-lib'] = global['pepperi-addons']['ngx-lib'] || {}, global['pepperi-addons']['ngx-lib']['quantity-selector'] = {}), global.ng.core, global.ng.common, global.ng.forms, global.ng.material.core, global.ng.material.formField, global.ng.material.input, global.ng.material.button, global.ng.material.badge, global.ng.material.icon, global['pepperi-addons']['ngx-lib'], global['pepperi-addons']['ngx-lib'].icon, global['pepperi-addons']['ngx-lib']['field-title'], global.ng.animations, global.rxjs, global.rxjs.operators, global.translate));
}(this, (function (exports, core, common, forms, core$2, formField, input, button, badge, icon$1, ngxLib, icon, fieldTitle, animations, rxjs, operators, core$1) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var PepQuantitySelectorComponent = /** @class */ (function () {
        function PepQuantitySelectorComponent(cd, customizationService, renderer, element, translate, utilitiesService) {
            this.cd = cd;
            this.customizationService = customizationService;
            this.renderer = renderer;
            this.element = element;
            this.translate = translate;
            this.utilitiesService = utilitiesService;
            this.key = '';
            this._value = null;
            this._formattedValue = null;
            this.label = '';
            this.type = 'qs';
            this.mandatory = false;
            this.disabled = false;
            this.readonly = false;
            this._textColor = '';
            this.xAlignment = ngxLib.DEFAULT_HORIZONTAL_ALIGNMENT;
            this.rowSpan = 1;
            this.allowDecimal = false;
            this.additionalValue = '';
            this._visible = true;
            this.controlType = 'qs';
            this.form = null;
            this.showTitle = true;
            this.layoutType = 'form';
            this.isActive = false;
            // Get default style from theme.
            this.styleType = document.documentElement.style.getPropertyValue(ngxLib.PepCustomizationService.STYLE_QS_KEY); //'strong';
            this.valueChange = new core.EventEmitter();
            this.elementClick = new core.EventEmitter();
            this._calculateFormattedValue = true;
            this.lastQsContClientWidth = 0;
            this.showQsBtn = true;
            this.standAlone = false;
            this.isInFocus = false;
            this.isMatrixFocus = false;
            this.isCaution = false;
            this.messages = null;
            this.sameElementInTheWantedRow = null;
            this.isEmptyKey = false;
            this._destroyed = new rxjs.Subject();
            this.qsWidthSubject = new rxjs.BehaviorSubject(0);
        }
        Object.defineProperty(PepQuantitySelectorComponent.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (value) {
                if (!value) {
                    value = '';
                }
                this._value = value;
                if (this._calculateFormattedValue) {
                    this.setFormattedValue(value);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PepQuantitySelectorComponent.prototype, "formattedValue", {
            get: function () {
                return this._formattedValue;
            },
            set: function (value) {
                if (!value) {
                    value = '';
                }
                if (this._calculateFormattedValue) {
                    this._calculateFormattedValue = false;
                }
                this.setFormattedValue(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PepQuantitySelectorComponent.prototype, "textColor", {
            get: function () {
                return this._textColor;
            },
            set: function (value) {
                this._textColor = value;
                this.isCaution = value === '#FF0000';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PepQuantitySelectorComponent.prototype, "notificationInfo", {
            get: function () {
                return this._notificationInfo;
            },
            set: function (value) {
                var e_1, _b;
                var _this = this;
                this._notificationInfo = value;
                var messages = value && value > 0 ? JSON.parse(value).Messages : '';
                if (messages && messages.length > 0) {
                    try {
                        // Replace the msg keys.
                        for (var messages_1 = __values(messages), messages_1_1 = messages_1.next(); !messages_1_1.done; messages_1_1 = messages_1.next()) {
                            var msg = messages_1_1.value;
                            if (msg.Key === 'Inventory_Limit_Msg') {
                                msg.Key = 'MESSAGES.ERROR_INVENTORY_LIMIT';
                            }
                            else if (msg.Key === 'Case_Quantity_Limit_Msg') {
                                msg.Key = 'MESSAGES.ERROR_CASE_QUANTITY_LIMIT';
                            }
                            else if (msg.Key === 'Min_Quantity_Limit_Msg') {
                                msg.Key = 'MESSAGES.ERROR_MIN_QUANTITY_LIMIT';
                            }
                            else if (msg.Key === 'Max_Quantity_Limit_Msg') {
                                msg.Key = 'MESSAGES.ERROR_MAX_QUANTITY_LIMIT';
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (messages_1_1 && !messages_1_1.done && (_b = messages_1.return)) _b.call(messages_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    this.messages = messages;
                    var fieldControl = this.form.controls[this.key];
                    fieldControl.setErrors({
                        serverError: 'Error',
                    });
                    this.sameElementInTheWantedRow = null;
                    setTimeout(function () {
                        if (_this.QSInput && _this.QSInput.nativeElement) {
                            _this.QSInput.nativeElement.focus();
                        }
                    }, 150);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PepQuantitySelectorComponent.prototype, "visible", {
            get: function () {
                return this._visible;
            },
            set: function (visible) {
                this._visible = visible;
                if (visible) {
                    this.renderer.removeClass(this.element.nativeElement, 'hidden-element');
                }
                else {
                    this.renderer.addClass(this.element.nativeElement, 'hidden-element');
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PepQuantitySelectorComponent.prototype, "calculateFormattedValue", {
            get: function () {
                return this._calculateFormattedValue;
            },
            enumerable: false,
            configurable: true
        });
        PepQuantitySelectorComponent.prototype.setForm = function () {
            var pepField = new ngxLib.PepQuantitySelectorField({
                key: this.key,
                value: this.value,
                mandatory: this.mandatory,
                readonly: this.readonly,
                disabled: this.disabled,
            });
            this.form = this.customizationService.getDefaultFromGroup(pepField);
        };
        PepQuantitySelectorComponent.prototype.setFormattedValue = function (value) {
            if (this._calculateFormattedValue) {
                this._formattedValue = this.utilitiesService.formatNumber(value);
            }
            else {
                this._formattedValue = value;
            }
            this.updateFormFieldValue();
        };
        PepQuantitySelectorComponent.prototype.updateFormFieldValue = function () {
            this.customizationService.updateFormFieldValue(this.form, this.key, this.formattedValue);
        };
        Object.defineProperty(PepQuantitySelectorComponent.prototype, "displayValue", {
            get: function () {
                var res = this.isInFocus
                    ? parseFloat(this.value).toString()
                    : this.formattedValue;
                return res;
            },
            enumerable: false,
            configurable: true
        });
        PepQuantitySelectorComponent.prototype.getDestroyer = function () {
            return operators.takeUntil(this._destroyed);
        };
        PepQuantitySelectorComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.form === null) {
                if (this.key === '') {
                    this.isEmptyKey = true;
                }
                this.standAlone = true;
                this.setForm();
                this.renderer.addClass(this.element.nativeElement, ngxLib.PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME);
            }
            this.qsWidthSubject
                .asObservable()
                .pipe(this.getDestroyer(), operators.distinctUntilChanged())
                .subscribe(function (qsWidth) {
                _this.setupQsButtons(qsWidth);
            });
            this.updateFormFieldValue();
        };
        PepQuantitySelectorComponent.prototype.ngAfterViewInit = function () {
            //
        };
        PepQuantitySelectorComponent.prototype.ngAfterViewChecked = function () {
            this.setQsView();
        };
        PepQuantitySelectorComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            // Bug fix for addons when the key is '' in the ngOnInit for some reson
            if (this.isEmptyKey && this.key !== '') {
                this.setForm();
            }
            setTimeout(function () {
                _this.focusToTheSameElementInTheWantedRow();
            }, 150);
        };
        PepQuantitySelectorComponent.prototype.ngOnDestroy = function () {
            this._destroyed.next();
            this._destroyed.complete();
        };
        Object.defineProperty(PepQuantitySelectorComponent.prototype, "getAdditionalValue", {
            get: function () {
                return this.additionalValue.length > 0 ? 'show' : 'hide';
            },
            enumerable: false,
            configurable: true
        });
        PepQuantitySelectorComponent.prototype.getParentByClass = function (el, parentSelector /* optional */) {
            var _a;
            // If no parentSelector defined will bubble up all the way to *document*
            if (parentSelector === undefined) {
                parentSelector = document;
            }
            var p = el.parentNode;
            while (p &&
                !((_a = p === null || p === void 0 ? void 0 : p.classList) === null || _a === void 0 ? void 0 : _a.contains(parentSelector)) &&
                parentSelector !== document) {
                var o = p;
                p = (o === null || o === void 0 ? void 0 : o.parentNode) || null;
            }
            return (p === null || p === void 0 ? void 0 : p.className.indexOf(parentSelector)) > -1 ? p : null;
        };
        PepQuantitySelectorComponent.prototype.getSameElementInTheWantedRowByClassName = function (event, isNext) {
            if (isNext === void 0) { isNext = true; }
            var eventTarget = event.target || event.srcElement;
            var sameElementInTheWantedRowByClassName;
            var parentSelector;
            if (this.layoutType === 'table') {
                parentSelector = this.getParentByClass(eventTarget, 'table-row');
            }
            else if (this.layoutType === 'card') {
                parentSelector = this.getParentByClass(eventTarget, 'card-view');
                if (!parentSelector) {
                    parentSelector = this.getParentByClass(eventTarget, 'line-view');
                }
            }
            if (parentSelector.nextElementSibling === null &&
                parentSelector.previousElementSibling === null) {
                sameElementInTheWantedRowByClassName = null;
            }
            else {
                if (isNext) {
                    if (parentSelector.nextElementSibling === null) {
                        sameElementInTheWantedRowByClassName = parentSelector.parentElement.querySelectorAll('[name=' + this.key + ']')[0];
                    }
                    else {
                        sameElementInTheWantedRowByClassName = parentSelector.nextElementSibling.querySelectorAll('[name=' + this.key + ']')[0];
                    }
                }
                else {
                    if (parentSelector.previousElementSibling === null) {
                        var elementsList = parentSelector.parentElement.querySelectorAll('[name=' + this.key + ']');
                        sameElementInTheWantedRowByClassName =
                            elementsList[elementsList.length - 1];
                    }
                    else {
                        sameElementInTheWantedRowByClassName = parentSelector.previousElementSibling.querySelectorAll('[name=' + this.key + ']')[0];
                    }
                }
            }
            return sameElementInTheWantedRowByClassName;
        };
        PepQuantitySelectorComponent.prototype.setSameElementInTheWantedRow = function (event, isNext) {
            if (isNext === void 0) { isNext = true; }
            // Navigate to the QS in the next row.
            if (this.layoutType === 'card' || this.layoutType === 'table') {
                this.sameElementInTheWantedRow = this.getSameElementInTheWantedRowByClassName(event, isNext);
            }
            this.QSInput.nativeElement.blur();
        };
        PepQuantitySelectorComponent.prototype.focusToTheSameElementInTheWantedRow = function () {
            if (this.sameElementInTheWantedRow) {
                var elem = this.sameElementInTheWantedRow;
                // If this is regular item (qs and not button) .
                if (elem instanceof HTMLInputElement && elem.type === 'text') {
                    elem.click();
                    elem.select();
                }
                else {
                    var parentElem = elem.parentNode;
                    parentElem.click();
                    elem.focus();
                }
                this.sameElementInTheWantedRow = null;
            }
        };
        PepQuantitySelectorComponent.prototype.cleanError = function () {
            var fieldControl = this.form.controls[this.key];
            // Clean the error message
            if (this.messages && this.messages.length > 0) {
                this.messages = this.notificationInfo = null;
                fieldControl.setErrors(null);
            }
        };
        PepQuantitySelectorComponent.prototype.onMatrixMouseEnter = function (event) {
            this.isMatrixFocus = true;
        };
        PepQuantitySelectorComponent.prototype.onMatrixMouseleave = function (event) {
            this.isMatrixFocus = false;
        };
        PepQuantitySelectorComponent.prototype.onMatrixClick = function (event) {
            this.isInFocus = true;
            if (this.QSInput && this.QSInput.nativeElement) {
                this.QSInput.nativeElement.focus();
            }
        };
        PepQuantitySelectorComponent.prototype.onMatrixBlur = function (event) {
            if (!event.relatedTarget ||
                event.relatedTarget.className.indexOf('qs') < 0) {
                this.isMatrixFocus = false;
            }
            this.onBlur(event);
        };
        PepQuantitySelectorComponent.prototype.onFocus = function (event) {
            this.isInFocus = true;
        };
        PepQuantitySelectorComponent.prototype.isDifferentValue = function (value) {
            var res = false;
            var currentValue = this.utilitiesService.coerceNumberProperty(this.value);
            var newValue = this.utilitiesService.coerceNumberProperty(value);
            res = currentValue !== newValue;
            return res;
        };
        PepQuantitySelectorComponent.prototype.onBlur = function (event) {
            this.isInFocus = false;
            this.cleanError();
            var value = event.target ? event.target.value : event;
            if (value !== this.value && this.isDifferentValue(value)) {
                this.value = value;
                // If the user is setting the formatted value then set the value till the user format it and return it back.
                if (!this._calculateFormattedValue) {
                    this._formattedValue = value;
                }
                this.valueChange.emit(this.value);
            }
            else {
                this.focusToTheSameElementInTheWantedRow();
            }
        };
        PepQuantitySelectorComponent.prototype.onKeydown = function (event) {
            var keyboardEvent = event;
            if (keyboardEvent.key === 'Enter') {
                this.setSameElementInTheWantedRow(keyboardEvent, !keyboardEvent.shiftKey);
                return true;
            }
        };
        PepQuantitySelectorComponent.prototype.increment = function (event) {
            if (this.standAlone) {
                this.value = this.utilitiesService.incrementNumber(this.value);
            }
            this.elementClick.emit({
                key: this.key,
                value: PepQuantitySelectorComponent.PLUS,
                controlType: this.controlType,
                eventWhich: event.which,
            });
            event.stopPropagation();
        };
        PepQuantitySelectorComponent.prototype.decrement = function (event) {
            if (this.standAlone) {
                this.value = this.utilitiesService.decrementNumber(this.value);
            }
            this.elementClick.emit({
                key: this.key,
                value: PepQuantitySelectorComponent.MINUS,
                controlType: this.controlType,
                eventWhich: event.which,
            });
            event.stopPropagation();
        };
        PepQuantitySelectorComponent.prototype.enterChildren = function (event) {
            this.elementClick.emit({
                key: this.key,
                value: PepQuantitySelectorComponent.ENTER_CHILDREN,
                controlType: this.controlType,
                eventWhich: event.which,
            });
        };
        PepQuantitySelectorComponent.prototype.enterPackage = function (event) {
            this.elementClick.emit({
                key: this.key,
                value: PepQuantitySelectorComponent.ENTER_PACKAGE,
                controlType: this.controlType,
                eventWhich: event.which,
                otherData: this.notificationInfo,
            });
        };
        PepQuantitySelectorComponent.prototype.setupQsButtons = function (qsWidth) {
            this.showQsBtn = qsWidth > 120;
            if (!this.cd['destroyed']) {
                this.cd.detectChanges();
            }
        };
        PepQuantitySelectorComponent.prototype.setQsView = function () {
            var _this = this;
            if (this.QSCont &&
                this.QSCont.nativeElement &&
                this.QSCont.nativeElement.clientWidth > 0) {
                setTimeout(function () {
                    _this.qsWidthSubject.next(_this.QSCont.nativeElement.clientWidth);
                }, 0);
            }
        };
        return PepQuantitySelectorComponent;
    }());
    PepQuantitySelectorComponent.ENTER_CHILDREN = '[EnterChildren]';
    PepQuantitySelectorComponent.ENTER_PACKAGE = '[EnterPackage]';
    PepQuantitySelectorComponent.PLUS = '[+]';
    PepQuantitySelectorComponent.MINUS = '[-]';
    PepQuantitySelectorComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'pep-quantity-selector',
                    template: "<ng-container [formGroup]=\"form\">\n    <ng-template #pepTemplate>\n        <div #QSCont class=\"pep-quantity-selector-container {{ styleType }}\" [ngClass]=\"{\n                'hide-qs-actions' : layoutType === 'card' && rowSpan <= 1,\n                'pep-table-quantity-selector': layoutType === 'table',\n                'one-row': rowSpan === 1,\n                caution: isCaution,\n                'matrix-qs': type === 'qsForMatrix',\n                'zero-quantity': formattedValue === '0'\n            }\">\n            <pep-field-title *ngIf=\"layoutType !== 'table' && layoutType !== 'card'\" [label]=\"label\"\n                [mandatory]=\"mandatory\" [disabled]=\"disabled\" [showTitle]=\"showTitle\" [xAlignment]=\"xAlignment\">\n            </pep-field-title>\n\n            <ng-container *ngIf=\"type == 'qs'\">\n                <ng-container *ngIf=\"readonly; then readonlyBlock; else editableQSBlock\"></ng-container>\n                <ng-template #readonlyBlock>\n                    <button [id]=\"key\" mat-button class=\"pep-button {{ styleType }} disable \"\n                        [ngClass]=\"{caution: isCaution, md: rowSpan !== 1, xs: rowSpan === 1}\"\n                        title=\"{{ formattedValue }}\" disabled=\"true\">\n                        <span class=\"ellipsis\">\n                            {{ formattedValue }}\n                        </span>\n                    </button>\n                </ng-template>\n                <ng-template #editableQSBlock>\n                    <mat-form-field appearance=\"outline\">\n                        <input pepQsValidation [allowDecimal]=\"allowDecimal\" type=\"decimalNumber\" inputmode=\"decimal\"\n                            matInput #QSInput name=\"{{ key }}\" class=\"body-lg ellipsis\" title=\"{{ formattedValue }}\"\n                            autocomplete=\"off\" [id]=\"key\" [formControlName]=\"key\" [value]=\"displayValue\"\n                            (click)=\"$event.target.setSelectionRange(0, 999)\" (keydown)=\"onKeydown($event)\"\n                            (blur)=\"onBlur($event)\" (focus)=\"onFocus($event)\" />\n                        <button *ngIf=\"showQsBtn\" mat-button matPrefix (click)=\"decrement($event)\"\n                            class=\"pep-button icon-button sm weak qs-action\" [disabled]=\"disabled\" [ngClass]=\"{ disable: disabled, caution: isCaution && styleType !== 'strong',\n                                'keep-background-on-focus': styleType === 'strong'}\">\n                            <mat-icon>\n                                <pep-icon name=\"number_minus\">\n                                </pep-icon>\n                            </mat-icon>\n                        </button>\n                        <button *ngIf=\"showQsBtn\" mat-button matSuffix (click)=\"increment($event)\"\n                            class=\"pep-button icon-button sm weak qs-action\" [disabled]=\"disabled\" [ngClass]=\"{ disable: disabled, caution: isCaution && styleType !== 'strong',\n                                'keep-background-on-focus': styleType === 'strong'}\">\n                            <mat-icon>\n                                <pep-icon name=\"number_plus\">\n                                </pep-icon>\n                            </mat-icon>\n                        </button>\n                        <mat-error *ngIf=\"messages?.length > 0\">\n                            <span class=\"qs-error body-xs\" *ngFor=\"let msg of messages\"> {{ msg.Key | translate }} :\n                                {{ msg.Value }} </span>\n                        </mat-error>\n                    </mat-form-field>\n                </ng-template>\n            </ng-container>\n\n            <ng-container *ngIf=\"type == 'qsForMatrix'\">\n                <ng-container *ngIf=\"readonly; then readonlyBlock; else editableQSBlock\"></ng-container>\n                <ng-template #readonlyBlock>\n                    <button [id]=\"key\" mat-button class=\"pep-button {{ styleType }} disable\" disabled=\"true\"\n                        [ngClass]=\"{caution: isCaution, md: rowSpan !== 1, xs: rowSpan === 1}\">\n                        X\n                    </button>\n                </ng-template>\n                <ng-template #editableQSBlock>\n                    <span *ngIf=\" xAlignment=='right'\" class=\" body-sm additional-value prefix\"\n                        matBadge=\"{{ additionalValue }}\" matBadgePosition=\"before\"\n                        matBadgeSize=\"rowSpan === 1 ? small : medium\" [@showHide]=\"getAdditionalValue\"></span>\n\n                    <mat-form-field appearance=\"outline\" (mouseleave)=\"!isInFocus ? onMatrixMouseleave($event) : null\">\n                        <input pepQsValidation [allowDecimal]=\"allowDecimal\" type=\"decimalNumber\" inputmode=\"decimal\"\n                            matInput #QSInput name=\"{{ key }}\" title=\"{{ formattedValue }}\" class=\"body-sm ellipsis\"\n                            autocomplete=\"off\" [id]=\"key\" [formControlName]=\"key\" [value]=\"displayValue\"\n                            (click)=\"onMatrixClick($event); $event.target.setSelectionRange(0, 999)\"\n                            (keydown)=\"onKeydown($event)\" (blur)=\"onMatrixBlur($event)\"\n                            (focus)=\"onMatrixMouseEnter($event); onFocus($event)\"\n                            (mouseenter)=\"onMatrixMouseEnter($event)\" />\n\n                        <mat-error *ngIf=\"messages?.length > 0\">\n                            <span class=\"qs-error body-xs\" *ngFor=\"let msg of messages\"> {{ msg.Key | translate }} :\n                                {{ msg.Value }} </span>\n                        </mat-error>\n                    </mat-form-field>\n\n                    <span *ngIf=\"xAlignment != 'right'\" class=\"body-sm additional-value suffix\"\n                        matBadge=\"{{ additionalValue }}\" matBadgePosition=\"before\"\n                        matBadgeSize=\"rowSpan === 1 ? small : medium\" [@showHide]=\"getAdditionalValue\"></span>\n                </ng-template>\n            </ng-container>\n\n            <ng-container *ngIf=\"type == 'button'\">\n                <ng-container *ngIf=\"(value | pepToNumber) == 0; then regularBlock; else withBadgeBlock\">\n                </ng-container>\n                <ng-template #regularBlock>\n                    <button mat-button [disabled]=\"disabled\" class=\"pep-button {{ styleType }} \" [id]=\"key\"\n                        name=\"{{ key }}\"\n                        [ngClass]=\"{ disable: disabled, caution: isCaution, md: rowSpan !== 1, xs: rowSpan === 1}\"\n                        [title]=\"'QS.ORDER' | translate\" (click)=\"enterChildren($event)\">\n                        <span class=\"ellipsis\">\n                            {{ 'QS.ORDER' | translate }}\n                        </span>\n                    </button>\n                </ng-template>\n                <ng-template #withBadgeBlock>\n                    <button mat-button matBadge=\"{{ formattedValue }}\"\n                        matBadgePosition=\"{{xAlignment == 'right' ? 'before' : 'after'}}\"\n                        [matBadgeSize]=\"layoutType === 'card' && rowSpan === 1 ? 'small' : 'medium'\"\n                        class=\"pep-button {{ styleType }} \" [id]=\"key\" name=\"{{ key }}\" [ngClass]=\"{ disable: disabled, caution: isCaution, md: rowSpan !== 1, xs: rowSpan === 1,\n                            'right-alignment': xAlignment == 'right', 'left-alignment': xAlignment != 'right'}\"\n                        [title]=\"'QS.ORDER' | translate\" (click)=\"enterChildren($event)\" [disabled]=\"disabled\">\n                        <span class=\"ellipsis\">\n                            {{ 'QS.ORDER' | translate }}\n                        </span>\n                    </button>\n                </ng-template>\n            </ng-container>\n            <ng-container *ngIf=\"type == 'packageButton'\">\n                <button mat-button class=\"pep-button {{ styleType }} \" [id]=\"key\" name=\"{{ key }}\"\n                    [ngClass]=\"{ disable: disabled, caution: isCaution, md: rowSpan !== 1, xs: rowSpan === 1}\"\n                    [title]=\"'QS.ORDER' | translate\" (click)=\"enterPackage($event)\" [disabled]=\"disabled\">\n                    <span class=\"ellipsis\">\n                        {{ 'QS.ORDER' | translate }} &#40;{{ formattedValue }}&#41;\n                    </span>\n                </button>\n            </ng-container>\n        </div>\n    </ng-template>\n\n    <ng-container *ngIf=\"layoutType === 'form'\">\n        <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'card'\">\n        <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'table'\">\n        <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n    </ng-container>\n</ng-container>",
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    animations: [
                        animations.trigger('showHide', [
                            animations.state('show', animations.style({
                                opacity: 1,
                                transform: 'scale(1)',
                            })),
                            animations.state('hide', animations.style({
                                opacity: 0,
                                transform: 'scale(0)',
                            })),
                            animations.transition('show => hide', animations.animate('250ms ease-out')),
                            animations.transition('hide => show', animations.animate('250ms ease-in')),
                        ]),
                    ],
                    styles: [":host{height:inherit;display:grid}.pep-quantity-selector-container,.pepperi-quantity-selector-container{display:flex;flex-flow:wrap;align-items:center;min-width:2rem;width:100%;height:inherit}.pep-quantity-selector-container input::-webkit-inner-spin-button,.pep-quantity-selector-container input::-webkit-outer-spin-button,.pepperi-quantity-selector-container input::-webkit-inner-spin-button,.pepperi-quantity-selector-container input::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}.pep-quantity-selector-container input[type=number],.pepperi-quantity-selector-container input[type=number]{-moz-appearance:textfield}.pep-quantity-selector-container .mat-input-element,.pepperi-quantity-selector-container .mat-input-element{padding:0 .25rem;text-align:center;font-weight:600;font-weight:var(--pep-font-weight-bold,600);width:100%}.pep-quantity-selector-container .mat-form-field .mat-form-field-wrapper .mat-form-field-subscript-wrapper,.pepperi-quantity-selector-container .mat-form-field .mat-form-field-wrapper .mat-form-field-subscript-wrapper{height:unset}.pep-quantity-selector-container .pep-button,.pep-quantity-selector-container .pepperi-button,.pepperi-quantity-selector-container .pep-button,.pepperi-quantity-selector-container .pepperi-button{width:100%}.pep-quantity-selector-container .pep-button.qs-action,.pep-quantity-selector-container .pepperi-button.qs-action,.pepperi-quantity-selector-container .pep-button.qs-action,.pepperi-quantity-selector-container .pepperi-button.qs-action{min-width:2rem;line-height:2rem;width:2rem!important;height:2rem!important}.pep-quantity-selector-container .pep-button.qs-action .mat-icon,.pep-quantity-selector-container .pepperi-button.qs-action .mat-icon,.pepperi-quantity-selector-container .pep-button.qs-action .mat-icon,.pepperi-quantity-selector-container .pepperi-button.qs-action .mat-icon{height:inherit;width:inherit}.pep-quantity-selector-container .qs-error,.pepperi-quantity-selector-container .qs-error{display:block}.pep-quantity-selector-container.hide-qs-actions .pep-button.qs-action,.pep-quantity-selector-container.hide-qs-actions .pepperi-button.qs-action,.pepperi-quantity-selector-container.hide-qs-actions .pep-button.qs-action,.pepperi-quantity-selector-container.hide-qs-actions .pepperi-button.qs-action{display:none}.pep-quantity-selector-container.matrix-qs .additional-value,.pepperi-quantity-selector-container.matrix-qs .additional-value{height:1.25rem;top:calc(.25rem * -1);top:calc(var(--pep-spacing-xs, .25rem) * -1);transform:unset!important;display:flex;align-self:flex-start;justify-content:flex-end}.pep-quantity-selector-container.matrix-qs .additional-value.prefix,.pepperi-quantity-selector-container.matrix-qs .additional-value.prefix{left:calc(.5rem * -1)!important;left:calc(var(--pep-spacing-sm, .5rem) * -1)!important}.pep-quantity-selector-container.matrix-qs .additional-value.suffix,.pepperi-quantity-selector-container.matrix-qs .additional-value.suffix{right:calc(.5rem * -1)!important;right:calc(var(--pep-spacing-sm, .5rem) * -1)!important}.pep-quantity-selector-container.matrix-qs .additional-value .mat-badge-content,.pepperi-quantity-selector-container.matrix-qs .additional-value .mat-badge-content{z-index:97;min-width:1.5rem;width:-webkit-fit-content!important;width:-moz-fit-content!important;width:fit-content!important;border-radius:.625rem;padding:0 .5rem;top:calc(.5rem * -1)!important;top:calc(var(--pep-spacing-sm, .5rem) * -1)!important;text-overflow:ellipsis;overflow:hidden;white-space:nowrap;max-width:inherit}.pep-quantity-selector-container.matrix-qs .disable,.pepperi-quantity-selector-container.matrix-qs .disable{min-width:.5rem;padding:0 .25rem}.pep-quantity-selector-container.pep-table-quantity-selector .pep-button:not(.qs-action),.pep-quantity-selector-container.pep-table-quantity-selector .pepperi-button:not(.qs-action),.pep-quantity-selector-container.pepperi-table-quantity-selector .pep-button:not(.qs-action),.pep-quantity-selector-container.pepperi-table-quantity-selector .pepperi-button:not(.qs-action),.pepperi-quantity-selector-container.pep-table-quantity-selector .pep-button:not(.qs-action),.pepperi-quantity-selector-container.pep-table-quantity-selector .pepperi-button:not(.qs-action),.pepperi-quantity-selector-container.pepperi-table-quantity-selector .pep-button:not(.qs-action),.pepperi-quantity-selector-container.pepperi-table-quantity-selector .pepperi-button:not(.qs-action){height:2rem;line-height:2rem}.pep-quantity-selector-container.pep-table-quantity-selector .pep-button.qs-action,.pep-quantity-selector-container.pep-table-quantity-selector .pepperi-button.qs-action,.pep-quantity-selector-container.pepperi-table-quantity-selector .pep-button.qs-action,.pep-quantity-selector-container.pepperi-table-quantity-selector .pepperi-button.qs-action,.pepperi-quantity-selector-container.pep-table-quantity-selector .pep-button.qs-action,.pepperi-quantity-selector-container.pep-table-quantity-selector .pepperi-button.qs-action,.pepperi-quantity-selector-container.pepperi-table-quantity-selector .pep-button.qs-action,.pepperi-quantity-selector-container.pepperi-table-quantity-selector .pepperi-button.qs-action{min-width:1.5rem;line-height:1.5rem;width:1.5rem!important;height:1.5rem!important}"]
                },] }
    ];
    PepQuantitySelectorComponent.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: ngxLib.PepCustomizationService },
        { type: core.Renderer2 },
        { type: core.ElementRef },
        { type: core$1.TranslateService },
        { type: ngxLib.PepUtilitiesService }
    ]; };
    PepQuantitySelectorComponent.propDecorators = {
        key: [{ type: core.Input }],
        value: [{ type: core.Input }],
        formattedValue: [{ type: core.Input }],
        label: [{ type: core.Input }],
        type: [{ type: core.Input }],
        mandatory: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        readonly: [{ type: core.Input }],
        textColor: [{ type: core.Input }],
        xAlignment: [{ type: core.Input }],
        rowSpan: [{ type: core.Input }],
        allowDecimal: [{ type: core.Input }],
        additionalValue: [{ type: core.Input }],
        notificationInfo: [{ type: core.Input }],
        visible: [{ type: core.Input }],
        form: [{ type: core.Input }],
        showTitle: [{ type: core.Input }],
        layoutType: [{ type: core.Input }],
        isActive: [{ type: core.Input }],
        styleType: [{ type: core.Input }],
        valueChange: [{ type: core.Output }],
        elementClick: [{ type: core.Output }],
        QSCont: [{ type: core.ViewChild, args: ['QSCont',] }],
        QSInput: [{ type: core.ViewChild, args: ['QSInput',] }]
    };

    var PepQuantitySelectorValidationDirective = /** @class */ (function () {
        function PepQuantitySelectorValidationDirective(hostElement, validatorService) {
            this.hostElement = hostElement;
            this.validatorService = validatorService;
            this.previousValue = '';
        }
        PepQuantitySelectorValidationDirective.prototype.ngOnInit = function () {
            //
        };
        PepQuantitySelectorValidationDirective.prototype.onChange = function (e) {
            this.validateValue(this.hostElement.nativeElement.value);
        };
        PepQuantitySelectorValidationDirective.prototype.onKeyDown = function (e) {
            var originalValue = e.target['value'];
            // save value before keydown event
            this.previousValue = originalValue;
            var isNumber = this.validatorService.isNumber(e, this.allowDecimal);
            if (isNumber)
                return;
            else
                e.preventDefault();
        };
        PepQuantitySelectorValidationDirective.prototype.validateValue = function (value) {
            var newValue = this.validatorService.validateNumber(value, this.allowDecimal);
            this.hostElement.nativeElement['value'] = newValue ? newValue : 0;
        };
        return PepQuantitySelectorValidationDirective;
    }());
    PepQuantitySelectorValidationDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[pepQsValidation]',
                },] }
    ];
    PepQuantitySelectorValidationDirective.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: ngxLib.PepValidatorService }
    ]; };
    PepQuantitySelectorValidationDirective.propDecorators = {
        allowDecimal: [{ type: core.Input }],
        onChange: [{ type: core.HostListener, args: ['change', ['$event'],] }],
        onKeyDown: [{ type: core.HostListener, args: ['keydown', ['$event'],] }]
    };

    var PepQuantitySelectorNumberPipe = /** @class */ (function () {
        function PepQuantitySelectorNumberPipe() {
        }
        PepQuantitySelectorNumberPipe.prototype.transform = function (value, allowDecimal) {
            var tmpValue = parseFloat(value);
            if (tmpValue === 0) {
                return '0';
            }
            else if (allowDecimal) {
                return tmpValue.toString();
            }
            else {
                return parseInt(value).toString();
            }
        };
        return PepQuantitySelectorNumberPipe;
    }());
    PepQuantitySelectorNumberPipe.decorators = [
        { type: core.Pipe, args: [{ name: 'pepQuantitySelectorNumber' },] }
    ];

    var PepQuantitySelectorModule = /** @class */ (function () {
        function PepQuantitySelectorModule(pepIconRegistry) {
            this.pepIconRegistry = pepIconRegistry;
            this.pepIconRegistry.registerIcons([
                icon.pepIconNumberMinus,
                icon.pepIconNumberPlus,
            ]);
        }
        return PepQuantitySelectorModule;
    }());
    PepQuantitySelectorModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.ReactiveFormsModule,
                        // Material modules
                        core$2.MatCommonModule,
                        formField.MatFormFieldModule,
                        input.MatInputModule,
                        button.MatButtonModule,
                        badge.MatBadgeModule,
                        icon$1.MatIconModule,
                        // ngx-lib modules
                        ngxLib.PepNgxLibModule,
                        icon.PepIconModule,
                        fieldTitle.PepFieldTitleModule,
                    ],
                    exports: [PepQuantitySelectorComponent],
                    declarations: [
                        PepQuantitySelectorComponent,
                        PepQuantitySelectorNumberPipe,
                        PepQuantitySelectorValidationDirective,
                    ],
                },] }
    ];
    PepQuantitySelectorModule.ctorParameters = function () { return [
        { type: icon.PepIconRegistry }
    ]; };

    /*
     * Public API Surface of ngx-lib/quantity-selector
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.PepQuantitySelectorComponent = PepQuantitySelectorComponent;
    exports.PepQuantitySelectorModule = PepQuantitySelectorModule;
    exports.ɵa = PepQuantitySelectorNumberPipe;
    exports.ɵb = PepQuantitySelectorValidationDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=pepperi-addons-ngx-lib-quantity-selector.umd.js.map
