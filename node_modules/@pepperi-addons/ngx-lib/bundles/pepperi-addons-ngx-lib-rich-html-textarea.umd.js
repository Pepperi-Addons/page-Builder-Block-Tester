(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('@angular/material/core'), require('@angular/material/button'), require('@angular/material/form-field'), require('@angular/material/input'), require('@angular/material/menu'), require('@angular/material/icon'), require('@angular/material/dialog'), require('@pepperi-addons/ngx-lib'), require('@pepperi-addons/ngx-lib/icon'), require('@pepperi-addons/ngx-lib/textbox-icon'), require('@pepperi-addons/ngx-lib/field-title'), require('@pepperi-addons/ngx-lib/dialog'), require('ngx-quill'), require('@angular/platform-browser')) :
    typeof define === 'function' && define.amd ? define('@pepperi-addons/ngx-lib/rich-html-textarea', ['exports', '@angular/core', '@angular/common', '@angular/forms', '@angular/material/core', '@angular/material/button', '@angular/material/form-field', '@angular/material/input', '@angular/material/menu', '@angular/material/icon', '@angular/material/dialog', '@pepperi-addons/ngx-lib', '@pepperi-addons/ngx-lib/icon', '@pepperi-addons/ngx-lib/textbox-icon', '@pepperi-addons/ngx-lib/field-title', '@pepperi-addons/ngx-lib/dialog', 'ngx-quill', '@angular/platform-browser'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['pepperi-addons'] = global['pepperi-addons'] || {}, global['pepperi-addons']['ngx-lib'] = global['pepperi-addons']['ngx-lib'] || {}, global['pepperi-addons']['ngx-lib']['rich-html-textarea'] = {}), global.ng.core, global.ng.common, global.ng.forms, global.ng.material.core, global.ng.material.button, global.ng.material.formField, global.ng.material.input, global.ng.material.menu, global.ng.material.icon, global.ng.material.dialog, global['pepperi-addons']['ngx-lib'], global['pepperi-addons']['ngx-lib'].icon, global['pepperi-addons']['ngx-lib']['textbox-icon'], global['pepperi-addons']['ngx-lib']['field-title'], global['pepperi-addons']['ngx-lib'].dialog, global.quill, global.ng.platformBrowser));
}(this, (function (exports, core, common, forms, core$1, button, formField, input, menu, icon$1, dialog$1, ngxLib, icon, textboxIcon, fieldTitle, dialog, ngxQuill, platformBrowser) { 'use strict';

    var PepRichHtmlTextareaComponent = /** @class */ (function () {
        function PepRichHtmlTextareaComponent(sanitizer, dialogService, customizationService, renderer, element) {
            this.sanitizer = sanitizer;
            this.dialogService = dialogService;
            this.customizationService = customizationService;
            this.renderer = renderer;
            this.element = element;
            this.key = '';
            this.value = '';
            this.label = '';
            this.mandatory = false;
            this.disabled = false;
            this.readonly = false;
            this.xAlignment = ngxLib.DEFAULT_HORIZONTAL_ALIGNMENT;
            this._rowSpan = 1;
            this._visible = true;
            this.controlType = 'richhtmltextarea';
            this.form = null;
            this.isActive = false;
            this.showTitle = true;
            this._layoutType = 'form';
            this.inlineMode = false;
            this.valueChange = new core.EventEmitter();
            this.quillContent = '';
            this.quillContentDialog = '';
            this.fieldHeight = '';
            this.standAlone = false;
            this.active = false;
            this.toolbarOptions = this.getDefaultToolbarOptions();
        }
        Object.defineProperty(PepRichHtmlTextareaComponent.prototype, "rowSpan", {
            get: function () {
                return this._rowSpan;
            },
            set: function (value) {
                this._rowSpan = value;
                this.setFieldHeight();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PepRichHtmlTextareaComponent.prototype, "visible", {
            get: function () {
                return this._visible;
            },
            set: function (visible) {
                this._visible = visible;
                if (visible) {
                    this.renderer.removeClass(this.element.nativeElement, 'hidden-element');
                }
                else {
                    this.renderer.addClass(this.element.nativeElement, 'hidden-element');
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PepRichHtmlTextareaComponent.prototype, "layoutType", {
            get: function () {
                return this._layoutType;
            },
            set: function (value) {
                this._layoutType = value;
                this.setFieldHeight();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PepRichHtmlTextareaComponent.prototype, "toolbarOptions", {
            get: function () {
                return this._toolbarOptions;
            },
            set: function (options) {
                if (options) {
                    this._toolbarOptions = options;
                }
            },
            enumerable: false,
            configurable: true
        });
        PepRichHtmlTextareaComponent.prototype.setFieldHeight = function () {
            this.fieldHeight = this.customizationService.calculateFieldHeight(this.layoutType, this.rowSpan, this.standAlone);
        };
        PepRichHtmlTextareaComponent.prototype.setDefaultForm = function () {
            var pepField = new ngxLib.PepRichHtmlTextareaField({
                key: this.key,
                value: this.value,
                mandatory: this.mandatory,
                readonly: this.readonly,
                disabled: this.disabled,
                maxFieldCharacters: this.maxFieldCharacters,
            });
            this.form = this.customizationService.getDefaultFromGroup(pepField);
        };
        PepRichHtmlTextareaComponent.prototype.ngOnInit = function () {
            if (this.form === null) {
                this.standAlone = true;
                this.setFieldHeight();
                this.setDefaultForm();
                this.renderer.addClass(this.element.nativeElement, ngxLib.PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME);
            }
            this.quillContent = this.value;
        };
        PepRichHtmlTextareaComponent.prototype.ngOnChanges = function () {
            if (this.standAlone) {
                this.setDefaultForm();
            }
        };
        PepRichHtmlTextareaComponent.prototype.ngOnDestroy = function () {
            //
        };
        PepRichHtmlTextareaComponent.prototype.getDefaultToolbarOptions = function () {
            return {
                font: false,
                size: false,
                header: true,
                bold: true,
                italic: true,
                underline: true,
                strike: false,
                link: true,
                image: true,
                ordered: true,
                bullet: true,
                color: true,
                background: false,
                align: true,
            };
        };
        PepRichHtmlTextareaComponent.prototype.changeValue = function (value) {
            if (value !== this.value) {
                this.value = value;
                this.quillContent = value;
                this.customizationService.updateFormFieldValue(this.form, this.key, value);
                this.valueChange.emit(value);
            }
        };
        PepRichHtmlTextareaComponent.prototype.cardTemplateClicked = function (event) {
            this.openDialog();
        };
        PepRichHtmlTextareaComponent.prototype.openDialog = function () {
            var _this = this;
            var config = this.dialogService.getDialogConfig({
            // minWidth: '50vw',
            // maxWidth: '90vw',
            // maxHeight: '90vh',
            }, 'large');
            // If disabled open regular modal as html mode.
            if (this.disabled || this.readonly) {
                var data = new dialog.PepDialogData({
                    title: this.label,
                    content: this.quillContent,
                    showFooter: false,
                });
                this.dialogService.openDefaultDialog(data, config);
            }
            else {
                this.quillContentDialog = this.quillContent;
                var dialogRef = this.dialogService.openDialog(this.richTextEditorDialogTemplate, {}, config);
                dialogRef.afterClosed().subscribe(function (value) {
                    if (value !== undefined && value !== null) {
                        _this.changeValue(value);
                    }
                });
            }
        };
        // Init quillContent in case that there are html tags...
        PepRichHtmlTextareaComponent.prototype.onEditorCreated = function (quill, inDialog) {
            if (!inDialog) {
                this.quillContent = quill.getText();
            }
        };
        PepRichHtmlTextareaComponent.prototype.onContentChanged = function (obj, inDialog) {
            if (inDialog) {
                this.quillContentDialog = obj.html;
            }
            else {
                this.quillContent = obj.html;
            }
        };
        PepRichHtmlTextareaComponent.prototype.onBlur = function (obj, inDialog) {
            if (!inDialog) {
                this.active = false;
                this.changeValue(this.quillContent);
            }
        };
        PepRichHtmlTextareaComponent.prototype.onFocus = function (obj, inDialog) {
            if (!inDialog) {
                this.active = true;
            }
        };
        return PepRichHtmlTextareaComponent;
    }());
    PepRichHtmlTextareaComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'pep-rich-html-textarea',
                    template: "<ng-container [formGroup]=\"form\">\n    <ng-template #pepTemplate let-isFormView=\"isFormView\">\n        <div class=\"pep-textarea-container pep-report-textarea\" [ngClass]=\"{ 'stand-alone': standAlone,\n            'right-alignment': xAlignment == 'right', 'one-row': !isFormView && rowSpan === 1,\n            'pep-textarea-card-container': layoutType === 'card'}\">\n            <pep-field-title *ngIf=\"isFormView\" [label]=\"label\" [mandatory]=\"mandatory\" [disabled]=\"disabled\"\n                [maxFieldCharacters]=\"inlineMode && !disabled && !readonly ? maxFieldCharacters : 0\"\n                [xAlignment]=\"xAlignment\" [showTitle]=\"showTitle\" [inputLength]=\"quillContent?.length\">\n            </pep-field-title>\n            <mat-form-field appearance=\"outline\" dir=\"{{ xAlignment == 'right' ? 'rtl' : 'ltr' }}\"\n                [ngClass]=\"{ 'pep-table-textarea': layoutType === 'table', 'active': active, 'ignore-disabled': disabled }\">\n                <textarea [hidden]=\"true\" matInput [formControlName]=\"key\"></textarea>\n\n                <ng-container *ngIf=\"inlineMode; then inlineBlock; else notInlineBlock\"></ng-container>\n\n                <ng-template #inlineBlock>\n                    <ng-container *ngTemplateOutlet=\"quilTemplate; context: {inDialog: false}\"></ng-container>\n                </ng-template>\n                <ng-template #notInlineBlock>\n\n                    <!-- We can use the quill-view-html\n                    <quill-view-html class=\"body-sm rich-text-cont \"\n                    [ngStyle]=\"{ 'text-align': xAlignment == 'right' ? 'right' : 'left' }\" [content]=\"value | pepSafeHtml\"\n                    theme=\"snow\" [style.height]=\"fieldHeight\"></quill-view-html> \n                -->\n\n                    <div class=\"body-sm rich-text-cont \"\n                        [ngStyle]=\"{ 'text-align': xAlignment == 'right' ? 'right' : 'left' }\"\n                        [innerHtml]=\"value | pepSafeHtml\" [style.height]=\"fieldHeight\">\n                    </div>\n                </ng-template>\n                <pep-textbox-icon matSuffix [value]=\"value\" [label]=\"label\" [type]=\"controlType\"\n                    [disabled]=\"disabled || readonly\"\n                    [ngClass]=\"{ 'card-one-row-icon': layoutType === 'card' && rowSpan === 1 }\"\n                    (iconClick)=\"openDialog()\">\n                </pep-textbox-icon>\n                <mat-error>\n                    <span class=\"body-xs\"\n                        [title]=\"mandatory && value.length == 0 ? ('MESSAGES.ERROR_IS_REQUIRED' | translate: { field: label }) : ('MESSAGES.ERROR_IS_NOT_VALID' | translate: { field: label })\"\n                        [innerText]=\"mandatory && value.length == 0 ? ('MESSAGES.ERROR_IS_REQUIRED' | translate: { field: label }) : ('MESSAGES.ERROR_IS_NOT_VALID' | translate: { field: label })\"></span>\n                </mat-error>\n\n            </mat-form-field>\n        </div>\n    </ng-template>\n\n    <ng-container *ngIf=\"layoutType === 'form'\">\n        <ng-container *ngTemplateOutlet=\"pepTemplate; context: { isFormView: true }\"></ng-container>\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'card'\">\n        <div class=\"pep-textarea-card-container card-flex-container\"\n            [ngClass]=\"{'one-row': rowSpan === 1, 'pep-button weak': isActive && !disabled}\"\n            [ngStyle]=\"{ '-webkit-line-clamp': rowSpan }\" [class]=\"'text-align-' + xAlignment\"\n            (click)=\"!disabled ? cardTemplateClicked($event) : ''\" [style.height]=\"fieldHeight\">\n            <span *ngIf=\"showTitle && label != ''\" class=\"body-xs title no-shrink\" title=\"{{ label }}\">{{ label\n                }}:&nbsp;</span>\n            <span [id]=\"key\" class=\"body-sm value wrap\" [innerHtml]=\"value | pepSafeHtml\"></span>\n            <button *ngIf=\"isActive && !disabled\" class=\"pep-button weak card-edit-button self-start\"\n                [ngClass]=\"{'self-end' : value && value !== ''}\" mat-button>\n                <mat-icon>\n                    <pep-icon name=\"system_edit\">\n                    </pep-icon>\n                </mat-icon>\n            </button>\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'table'\">\n        <ng-container *ngIf=\"isActive && !disabled; then selectedBlock; else notSelectedBlock\"></ng-container>\n        <ng-template #selectedBlock>\n            <ng-container *ngTemplateOutlet=\"pepTemplate; context: { isFormView: false }\"></ng-container>\n        </ng-template>\n        <ng-template #notSelectedBlock>\n            <ng-container *ngIf=\"value?.length > 0; then notEmptyBlock; else emptyBlock\"></ng-container>\n            <ng-template #notEmptyBlock>\n                <div class=\"pep-textarea-card-container card-flex-container one-row\">\n                    <span [id]=\"key\" class=\"wrap\" [innerHtml]=\"value | pepSafeHtml\"></span>\n                </div>\n            </ng-template>\n            <ng-template #emptyBlock>\n                <span>&nbsp;</span>\n            </ng-template>\n        </ng-template>\n    </ng-container>\n</ng-container>\n\n<ng-template #richTextEditorDialogTemplate>\n    <div class=\"rich-text-editor-container\">\n        <button mat-button [mat-dialog-close]=\"null\" class=\"pep-button icon-button md weak pull-right flip\">\n            <mat-icon>\n                <pep-icon name=\"system_close\">\n                </pep-icon>\n            </mat-icon>\n        </button>\n        <ng-container *ngTemplateOutlet=\"quilTemplate; context: {inDialog: true}\"></ng-container>\n        <div mat-dialog-actions class=\" pep-border-top\">\n            <div class=\"pep-spacing-element-negative\">\n                <button mat-button [mat-dialog-close]=\"null\" class=\"pep-spacing-element pep-button md weak\">\n                    {{'ACTIONS.CANCEL' | translate}}\n                </button>\n                <button mat-button [mat-dialog-close]=\"quillContentDialog || ''\" [disabled]=\"disabled\"\n                    class=\"pep-spacing-element pep-button md strong \">\n                    {{'ACTIONS.SAVE' | translate}}\n                </button>\n            </div>\n        </div>\n    </div>\n</ng-template>\n\n<ng-template #quilTemplate let-inDialog=\"inDialog\">\n    <quill-editor id=\"{{inDialog ? 'quill-editor-dialog' : 'quill-editor-inline'}}\"\n        [class]=\"inDialog ? 'dialog-quill' : 'inline-quill'\" [ngClass]=\"{ 'rich-text-cont': !inDialog }\"\n        placeholder=\"{{'RICH_TEXTAREA.HINT' | translate}}\" [ngModel]=\"inDialog ? quillContentDialog : quillContent\"\n        [sanitize]=\"true\" [readOnly]=\"disabled\" [maxLength]=\"maxFieldCharacters\" [required]=\"mandatory\"\n        (onEditorCreated)=\"onEditorCreated($event, inDialog)\" (onContentChanged)=\"onContentChanged($event, inDialog)\"\n        (onBlur)=\"onBlur($event, inDialog)\" (onFocus)=\"onFocus($event, inDialog)\" theme=\"\">\n        <div *ngIf=\"!disabled\" quill-editor-toolbar>\n            <div class=\"pep-spacing-element-negative\">\n                <span class=\"ql-formats\">\n                    <select *ngIf=\"toolbarOptions?.font\"\n                        class=\"pep-spacing-element pep-button icon-button md weak ql-font select-arrow\">\n                        <option selected></option>\n                        <option value=\"serif\"></option>\n                        <option value=\"monospace\"></option>\n                    </select>\n                    <select *ngIf=\"toolbarOptions?.size\"\n                        class=\"pep-spacing-element pep-button icon-button md weak ql-size select-arrow\">\n                        <option value=\"small\"></option>\n                        <option selected></option>\n                        <option value=\"large\"></option>\n                        <option value=\"huge\"></option>\n                    </select>\n                </span>\n                <span class=\"ql-formats\">\n                    <select *ngIf=\"toolbarOptions?.header\"\n                        class=\"pep-spacing-element pep-button icon-button md weak ql-header select-arrow\">\n                        <option value=\"1\"></option>\n                        <option value=\"2\"></option>\n                        <option value=\"3\"></option>\n                        <!-- \n                        <option value=\"4\"></option>\n                        <option value=\"5\"></option>\n                        <option value=\"6\"></option> \n                        -->\n                        <option value=\"false\" selected></option>\n                    </select>\n                </span>\n                <!-- <hr class=\"vertical-separator\" /> -->\n                <span class=\"ql-formats\">\n                    <button mat-button *ngIf=\"toolbarOptions?.bold\"\n                        class=\"pep-spacing-element pep-button icon-button md weak ql-bold\"></button>\n                    <button mat-button *ngIf=\"toolbarOptions?.italic\"\n                        class=\"pep-spacing-element pep-button icon-button md weak ql-italic\"></button>\n                    <button mat-button *ngIf=\"toolbarOptions?.underline\"\n                        class=\"pep-spacing-element pep-button icon-button md weak ql-underline\"></button>\n                    <button mat-button *ngIf=\"toolbarOptions?.strike\"\n                        class=\"pep-spacing-element pep-button icon-button md weak ql-strike\"></button>\n                </span>\n                <span class=\"ql-formats\">\n                    <button mat-button *ngIf=\"toolbarOptions?.link\"\n                        class=\"pep-spacing-element pep-button icon-button md weak ql-link\"></button>\n                    <button mat-button *ngIf=\"toolbarOptions?.image\"\n                        class=\"pep-spacing-element pep-button icon-button md weak ql-image\"></button>\n                </span>\n                <!-- <hr class=\"vertical-separator\" /> -->\n                <span class=\"ql-formats\">\n                    <button mat-button *ngIf=\"toolbarOptions?.ordered\"\n                        class=\"pep-spacing-element pep-button icon-button md weak ql-list\" value=\"ordered\"></button>\n                    <button mat-button *ngIf=\"toolbarOptions?.bullet\"\n                        class=\"pep-spacing-element pep-button icon-button md weak ql-list\" value=\"bullet\"></button>\n                </span>\n                <!-- <hr class=\"vertical-separator\" /> -->\n                <span class=\"ql-formats\">\n                    <select *ngIf=\"toolbarOptions?.color\"\n                        class=\"pep-spacing-element pep-button icon-button md weak ql-color\"></select>\n                    <select *ngIf=\"toolbarOptions?.background\"\n                        class=\"pep-spacing-element pep-button icon-button md weak ql-background\"></select>\n                </span>\n                <span class=\"ql-formats\">\n                    <select *ngIf=\"toolbarOptions?.align\"\n                        class=\"pep-spacing-element pep-button icon-button md weak ql-align\">\n                        <option selected></option>\n                        <option value=\"center\"></option>\n                        <option value=\"right\"></option>\n                        <option value=\"justify\"></option>\n                    </select>\n                </span>\n            </div>\n        </div>\n    </quill-editor>\n</ng-template>",
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    styles: [":host{height:inherit;display:block}.pep-textarea-container ::ng-deep.mat-form-field-infix,.pepperi-textarea-container ::ng-deep.mat-form-field-infix{margin-left:calc(.75rem * -1);margin-left:calc(var(--pep-spacing-md, .75rem) * -1)}.pep-textarea-container.right-alignment ::ng-deep.mat-form-field-infix,.pepperi-textarea-container.right-alignment ::ng-deep.mat-form-field-infix{margin-left:unset;margin-right:calc(.75rem * -1);margin-right:calc(var(--pep-spacing-md, .75rem) * -1)}.vertical-separator{display:none}"]
                },] }
    ];
    PepRichHtmlTextareaComponent.ctorParameters = function () { return [
        { type: platformBrowser.DomSanitizer },
        { type: dialog.PepDialogService },
        { type: ngxLib.PepCustomizationService },
        { type: core.Renderer2 },
        { type: core.ElementRef }
    ]; };
    PepRichHtmlTextareaComponent.propDecorators = {
        key: [{ type: core.Input }],
        value: [{ type: core.Input }],
        label: [{ type: core.Input }],
        mandatory: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        readonly: [{ type: core.Input }],
        maxFieldCharacters: [{ type: core.Input }],
        xAlignment: [{ type: core.Input }],
        rowSpan: [{ type: core.Input }],
        visible: [{ type: core.Input }],
        form: [{ type: core.Input }],
        isActive: [{ type: core.Input }],
        showTitle: [{ type: core.Input }],
        layoutType: [{ type: core.Input }],
        inlineMode: [{ type: core.Input }],
        toolbarOptions: [{ type: core.Input }],
        valueChange: [{ type: core.Output }],
        richTextEditorDialogTemplate: [{ type: core.ViewChild, args: ['richTextEditorDialogTemplate', { read: core.TemplateRef },] }]
    };

    var PepRichHtmlTextareaModule = /** @class */ (function () {
        function PepRichHtmlTextareaModule(pepIconRegistry) {
            this.pepIconRegistry = pepIconRegistry;
            this.pepIconRegistry.registerIcons([
                icon.pepIconSystemEdit,
                icon.pepIconSystemClose,
            ]);
        }
        return PepRichHtmlTextareaModule;
    }());
    PepRichHtmlTextareaModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.ReactiveFormsModule,
                        forms.FormsModule,
                        // Material modules,
                        core$1.MatCommonModule,
                        button.MatButtonModule,
                        formField.MatFormFieldModule,
                        input.MatInputModule,
                        menu.MatMenuModule,
                        icon$1.MatIconModule,
                        dialog$1.MatDialogModule,
                        // External modules
                        ngxQuill.QuillModule.forRoot(),
                        // ngx-lib modules
                        ngxLib.PepNgxLibModule,
                        icon.PepIconModule,
                        fieldTitle.PepFieldTitleModule,
                        textboxIcon.PepTextboxIconModule,
                        dialog.PepDialogModule,
                    ],
                    exports: [PepRichHtmlTextareaComponent],
                    declarations: [PepRichHtmlTextareaComponent],
                },] }
    ];
    PepRichHtmlTextareaModule.ctorParameters = function () { return [
        { type: icon.PepIconRegistry }
    ]; };

    /*
     * Public API Surface of ngx-lib/rich-html-textarea
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.PepRichHtmlTextareaComponent = PepRichHtmlTextareaComponent;
    exports.PepRichHtmlTextareaModule = PepRichHtmlTextareaModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=pepperi-addons-ngx-lib-rich-html-textarea.umd.js.map
