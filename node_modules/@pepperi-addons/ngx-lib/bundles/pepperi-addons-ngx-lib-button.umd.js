(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/material/core'), require('@angular/material/button'), require('@angular/material/icon'), require('@pepperi-addons/ngx-lib/icon'), require('@pepperi-addons/ngx-lib')) :
    typeof define === 'function' && define.amd ? define('@pepperi-addons/ngx-lib/button', ['exports', '@angular/core', '@angular/common', '@angular/material/core', '@angular/material/button', '@angular/material/icon', '@pepperi-addons/ngx-lib/icon', '@pepperi-addons/ngx-lib'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['pepperi-addons'] = global['pepperi-addons'] || {}, global['pepperi-addons']['ngx-lib'] = global['pepperi-addons']['ngx-lib'] || {}, global['pepperi-addons']['ngx-lib'].button = {}), global.ng.core, global.ng.common, global.ng.material.core, global.ng.material.button, global.ng.material.icon, global['pepperi-addons']['ngx-lib'].icon, global['pepperi-addons']['ngx-lib']));
}(this, (function (exports, core, common, core$1, button, icon, icon$1, ngxLib) { 'use strict';

    var PepButton = /** @class */ (function () {
        function PepButton(data) {
            Object.assign(this, data);
        }
        return PepButton;
    }());

    /**
     * This is a button component that support pepperi theme
     * style & state & sizes
     *
     * @export
     * @class PepButtonComponent
     * @implements {OnDestroy}
     */
    var PepButtonComponent = /** @class */ (function () {
        function PepButtonComponent(renderer, element) {
            this.renderer = renderer;
            this.element = element;
            /**
             * The style of the button.
             *
             * @type {PepStyleType}
             * @memberof PepButtonComponent
             */
            this.styleType = 'weak';
            /**
             * The style state of the button.
             *
             * @type {PepStyleStateType}
             * @memberof PepButtonComponent
             */
            this.styleStateType = 'system';
            /**
             * The size of the button.
             *
             * @type {PepSizeType}
             * @memberof PepButtonComponent
             */
            this.sizeType = 'md';
            /**
             * Class names that should be on the button element tag like classNames="class1 class2"
             *
             * @memberof PepButtonComponent
             */
            this.classNames = '';
            /**
             * If the button is disable or not.
             *
             * @type {boolean}
             * @memberof PepButtonComponent
             */
            this.disabled = false;
            /**
             * The icon position.
             *
             * @type {('start' | 'end')}
             * @memberof PepButtonComponent
             */
            this.iconPosition = 'end';
            this._visible = true;
            /**
             * The button click event.
             *
             * @type {EventEmitter<IPepButtonClickEvent>}
             * @memberof PepButtonComponent
             */
            this.buttonClick = new core.EventEmitter();
        }
        Object.defineProperty(PepButtonComponent.prototype, "visible", {
            get: function () {
                return this._visible;
            },
            /**
             * If the button is visible or not.
             *
             * @memberof PepButtonComponent
             */
            set: function (visible) {
                if (visible !== undefined) {
                    this._visible = !!visible;
                    if (visible) {
                        this.renderer.removeClass(this.element.nativeElement, 'hidden-element');
                    }
                    else {
                        this.renderer.addClass(this.element.nativeElement, 'hidden-element');
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        PepButtonComponent.prototype.ngOnDestroy = function () {
            // if (this.buttonClick) {
            //     this.buttonClick.unsubscribe();
            // }
        };
        /**
         * The button click
         */
        PepButtonComponent.prototype.onButtonClicked = function (event) {
            var button = new PepButton({
                key: this.key,
                value: this.value,
            });
            var buttonClick = {
                source: button,
                event: event,
            };
            this.buttonClick.emit(buttonClick);
        };
        return PepButtonComponent;
    }());
    PepButtonComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'pep-button',
                    template: "<button mat-button [pepDataQa]=\"key ? key : value\"\n    class=\"pep-button {{ sizeType }} {{ styleType }} {{ styleStateType }} {{ classNames }}\"\n    [ngClass]=\"{ 'icon-button': iconName && !value }\" [disabled]=\"disabled\" (click)=\"onButtonClicked($event)\">\n    <ng-container *ngTemplateOutlet=\"contentTemplate\">\n    </ng-container>\n</button>\n\n<ng-template #contentTemplate>\n    <mat-icon *ngIf=\"iconName && iconPosition === 'start'\" [ngClass]=\"{ 'pull-left flip': value }\">\n        <pep-icon name=\"{{iconName}}\"></pep-icon>\n    </mat-icon>\n    <span *ngIf=\"value\" class=\"ellipsis pull-left flip\"\n        [ngClass]=\"{ 'button-title-with-icon': iconName, 'icon-before': iconPosition === 'start' }\" [title]=\"value\">\n        {{value}}\n    </span>\n    <mat-icon *ngIf=\"iconName && iconPosition === 'end'\" [ngClass]=\"{ 'pull-left flip': value }\">\n        <pep-icon name=\"{{iconName}}\"></pep-icon>\n    </mat-icon>\n</ng-template>",
                    styles: [":host{display:grid}"]
                },] }
    ];
    PepButtonComponent.ctorParameters = function () { return [
        { type: core.Renderer2 },
        { type: core.ElementRef }
    ]; };
    PepButtonComponent.propDecorators = {
        key: [{ type: core.Input }],
        value: [{ type: core.Input }],
        styleType: [{ type: core.Input }],
        styleStateType: [{ type: core.Input }],
        sizeType: [{ type: core.Input }],
        classNames: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        iconName: [{ type: core.Input }],
        iconPosition: [{ type: core.Input }],
        visible: [{ type: core.Input }],
        buttonClick: [{ type: core.Output }]
    };

    var PepButtonModule = /** @class */ (function () {
        function PepButtonModule() {
        }
        return PepButtonModule;
    }());
    PepButtonModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        // Material modules
                        core$1.MatCommonModule,
                        button.MatButtonModule,
                        icon.MatIconModule,
                        // ngx-lib modules
                        ngxLib.PepNgxLibModule,
                        icon$1.PepIconModule,
                    ],
                    exports: [PepButtonComponent],
                    declarations: [PepButtonComponent],
                },] }
    ];

    /*
     * Public API Surface of ngx-lib/button
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.PepButton = PepButton;
    exports.PepButtonComponent = PepButtonComponent;
    exports.PepButtonModule = PepButtonModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=pepperi-addons-ngx-lib-button.umd.js.map
