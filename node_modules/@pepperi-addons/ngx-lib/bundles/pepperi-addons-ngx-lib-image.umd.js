(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('@angular/material/core'), require('@angular/material/form-field'), require('@angular/material/icon'), require('@pepperi-addons/ngx-lib'), require('@pepperi-addons/ngx-lib/icon'), require('@pepperi-addons/ngx-lib/field-title'), require('@pepperi-addons/ngx-lib/files-uploader'), require('@pepperi-addons/ngx-lib/images-filmstrip'), require('@ngx-translate/core'), require('@pepperi-addons/ngx-lib/dialog')) :
    typeof define === 'function' && define.amd ? define('@pepperi-addons/ngx-lib/image', ['exports', '@angular/core', '@angular/common', '@angular/forms', '@angular/material/core', '@angular/material/form-field', '@angular/material/icon', '@pepperi-addons/ngx-lib', '@pepperi-addons/ngx-lib/icon', '@pepperi-addons/ngx-lib/field-title', '@pepperi-addons/ngx-lib/files-uploader', '@pepperi-addons/ngx-lib/images-filmstrip', '@ngx-translate/core', '@pepperi-addons/ngx-lib/dialog'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['pepperi-addons'] = global['pepperi-addons'] || {}, global['pepperi-addons']['ngx-lib'] = global['pepperi-addons']['ngx-lib'] || {}, global['pepperi-addons']['ngx-lib'].image = {}), global.ng.core, global.ng.common, global.ng.forms, global.ng.material.core, global.ng.material.formField, global.ng.material.icon, global['pepperi-addons']['ngx-lib'], global['pepperi-addons']['ngx-lib'].icon, global['pepperi-addons']['ngx-lib']['field-title'], global['pepperi-addons']['ngx-lib']['files-uploader'], global['pepperi-addons']['ngx-lib']['images-filmstrip'], global.translate, global['pepperi-addons']['ngx-lib'].dialog));
}(this, (function (exports, core, common, forms, core$2, formField, icon$1, ngxLib, icon, fieldTitle, filesUploader, imagesFilmstrip, core$1, dialog) { 'use strict';

    var PepImageComponent = /** @class */ (function () {
        function PepImageComponent(dialogService, customizationService, fileService, renderer, element, translate) {
            this.dialogService = dialogService;
            this.customizationService = customizationService;
            this.fileService = fileService;
            this.renderer = renderer;
            this.element = element;
            this.translate = translate;
            this.key = '';
            this.srcLarge = '';
            this.src = '';
            this.options = [];
            this.label = '';
            // @Input() type = 'image';
            this.mandatory = false;
            this.disabled = false;
            this.readonly = false;
            this.xAlignment = ngxLib.DEFAULT_HORIZONTAL_ALIGNMENT;
            this._rowSpan = 1;
            this.indicatorsField = null;
            this.menuField = null;
            this.hasCampaignField = null;
            this._visible = true;
            this.controlType = 'image';
            this.form = null;
            this.uid = '';
            this.showTitle = true;
            this._layoutType = 'form';
            this.isActive = false;
            this.sizeLimitMB = 5;
            this.acceptImagesType = 'bmp,jpg,jpeg,png,gif'; // "image/bmp, image/jpg, image/jpeg, image/png, image/tif, image/tiff";
            this.fileChange = new core.EventEmitter();
            this.elementClick = new core.EventEmitter();
            this.fieldHeight = '';
            this.standAlone = false;
            this.dataURI = null;
        }
        Object.defineProperty(PepImageComponent.prototype, "rowSpan", {
            get: function () {
                return this._rowSpan;
            },
            set: function (value) {
                this._rowSpan = value;
                this.setFieldHeight();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PepImageComponent.prototype, "visible", {
            get: function () {
                return this._visible;
            },
            set: function (visible) {
                this._visible = visible;
                if (visible) {
                    this.renderer.removeClass(this.element.nativeElement, 'hidden-element');
                }
                else {
                    this.renderer.addClass(this.element.nativeElement, 'hidden-element');
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PepImageComponent.prototype, "layoutType", {
            get: function () {
                return this._layoutType;
            },
            set: function (value) {
                this._layoutType = value;
                this.setFieldHeight();
            },
            enumerable: false,
            configurable: true
        });
        PepImageComponent.prototype.ngOnInit = function () {
            if (this.form === null) {
                this.standAlone = true;
                this.setFieldHeight();
                this.setDefaultForm();
                this.renderer.addClass(this.element.nativeElement, ngxLib.PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME);
            }
        };
        PepImageComponent.prototype.setFieldHeight = function () {
            this.fieldHeight = this.customizationService.calculateFieldHeight(this.layoutType, this.rowSpan, this.standAlone);
        };
        PepImageComponent.prototype.setDefaultForm = function () {
            var pepField = new ngxLib.PepImageField({
                key: this.key,
                value: this.src,
                mandatory: this.mandatory,
                readonly: this.readonly,
                disabled: this.disabled,
            });
            this.form = this.customizationService.getDefaultFromGroup(pepField);
        };
        PepImageComponent.prototype.ngOnChanges = function (changes) {
            var _a, _b;
            if (this.standAlone) {
                this.setDefaultForm();
            }
            if (((_b = (_a = changes.src) === null || _a === void 0 ? void 0 : _a.currentValue) === null || _b === void 0 ? void 0 : _b.length) > 0) {
                // Empty dataURI if there is change in the src.
                this.dataURI = null;
            }
        };
        PepImageComponent.prototype.ngOnDestroy = function () {
            //
        };
        PepImageComponent.prototype.errorHandler = function (event) {
            event.target.src = this.fileService.getSvgAsImageSrc(icon.pepIconNoImage2.data);
            event.target.title = this.translate.instant('IMAGE.NO_IMAGE');
        };
        PepImageComponent.prototype.onImageLoad = function (event) {
            event.target.style.visibility = 'visible';
            event.target.title =
                event.target.title.length === 0
                    ? this.translate.instant('IMAGE.CLICK_TO_ENLARGE')
                    : event.target.title;
        };
        PepImageComponent.prototype.onMenuClick = function (event) {
            this.elementClick.emit({
                key: this.key,
                value: PepImageComponent.MENU_CLICKED,
                controlType: this.controlType,
                eventWhich: event.which,
            });
        };
        PepImageComponent.prototype.onFileChanged = function (fileData) {
            this.dataURI = fileData;
            this.src = this.srcLarge =
                this.standAlone && this.dataURI ? this.dataURI.fileStr : '';
            this.customizationService.updateFormFieldValue(this.form, this.key, this.dataURI ? this.dataURI.fileExt : '');
            // this.valueChange.emit({
            //     key: this.key,
            //     value,
            // });
            this.fileChange.emit(fileData);
            // this.fileChange.emit(value.length > 0 ? JSON.parse(value) : value);
        };
        PepImageComponent.prototype.objectIdIsNotEmpty = function () {
            var _a;
            return ((_a = this.uid) === null || _a === void 0 ? void 0 : _a.length) > 0 && this.uid !== '0';
        };
        PepImageComponent.prototype.onFileClicked = function (event) {
            var hasParentImage = true;
            if (
            // this.objectIdIsNotEmpty() &&
            this.src &&
                this.src.indexOf('no-image') > -1) {
                hasParentImage = false;
            }
            this.openImageModal(hasParentImage);
            this.elementClick.emit(event);
        };
        PepImageComponent.prototype.itemImageClick = function (event) {
            var hasParentImage = true;
            var elemTarget = event.target || event.srcElement;
            var nextElement = elemTarget.nextElementSibling || null;
            var imageSRC = elemTarget.src || null;
            var nextElementSRC = nextElement && nextElement.src ? nextElement.src : null;
            if ((imageSRC && imageSRC.indexOf('no-image') > -1) ||
                (nextElementSRC && nextElementSRC.src.indexOf('no-image') > -1)) {
                hasParentImage = false;
            }
            this.openImageModal(hasParentImage);
        };
        PepImageComponent.prototype.openImageModal = function (hasParentImage) {
            if (this.dataURI) {
                var fileStrArr = this.dataURI.fileStr.split(';');
                if (fileStrArr.length === 2) {
                    var win = window.open('', '_blank');
                    var contentType = fileStrArr[0].split(':')[1];
                    var base64 = fileStrArr[1].split(',')[1];
                    var blob = this.fileService.convertFromb64toBlob(base64, contentType);
                    var url = URL.createObjectURL(blob);
                    win.location.href = url;
                }
            }
            else {
                var arr = [this.srcLarge || this.src].concat((this.options || []).map(function (opt) { return opt.value; }));
                var imagesValue = arr.join(';');
                // Show image in modal.
                var config = this.dialogService.getDialogConfig({}, 'inline');
                config.maxWidth = '75vw';
                config.height = '95vh';
                this.dialogService.openDialog(imagesFilmstrip.PepImagesFilmstripComponent, {
                    currIndex: 0,
                    key: this.key,
                    value: imagesValue,
                    label: this.label,
                    uid: this.uid,
                    showThumbnails: arr.length > 1,
                }, config);
            }
        };
        return PepImageComponent;
    }());
    PepImageComponent.MENU_CLICKED = '[MenuClicked]';
    PepImageComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'pep-image',
                    template: "<ng-container [formGroup]=\"form\">\n    <ng-container>\n        <ng-template #readonlyTemplate>\n            <div class=\"img-wrapper\" [ngClass]=\"{\n                'left-alignment': xAlignment == 'left',\n                'right-alignment': xAlignment == 'right',\n                'center-alignment': xAlignment == 'center'\n            }\">\n                <img [id]=\"key\" [style.max-height]=\"fieldHeight\" class=\"pep-report-file\" [alt]=\"label\" [src]=\"src\"\n                    (click)=\"itemImageClick($event)\" (error)=\"errorHandler($event)\" (load)=\"onImageLoad($event)\" />\n            </div>\n        </ng-template>\n\n        <ng-container *ngIf=\"layoutType === 'form'\">\n            <pep-field-title [label]=\"label\" [mandatory]=\"mandatory\" [disabled]=\"disabled\" [xAlignment]=\"xAlignment\"\n                [showTitle]=\"showTitle\">\n            </pep-field-title>\n            <ng-container *ngIf=\"disabled || readonly; then disabledTemplate; else editableTemplate\"></ng-container>\n            <ng-template #disabledTemplate>\n                <div class=\"pep-file body-sm\" [style.height]=\"fieldHeight\" [ngClass]=\"{'one-row': rowSpan == 1}\">\n                    <ng-container *ngTemplateOutlet=\"readonlyTemplate\"></ng-container>\n                </div>\n            </ng-template>\n            <ng-template #editableTemplate>\n                <div class=\"pep-file-container image-container\" [ngClass]=\"{ 'one-row': rowSpan == 1}\">\n                    <pep-files-uploader [id]=\"key\" [key]=\"key\" [fieldHeight]=\"fieldHeight\" [layoutType]=\"layoutType\"\n                        [standAlone]=\"standAlone\" [src]=\"srcLarge || src\" [label]=\"label\" [mandatory]=\"mandatory\"\n                        [disabled]=\"disabled\" [xAlignment]=\"xAlignment\" [rowSpan]=\"rowSpan\" [controlType]=\"controlType\"\n                        [form]=\"form\" [acceptedExtensions]=\"acceptImagesType\" (fileChange)=\"onFileChanged($event)\"\n                        (elementClick)=\"onFileClicked($event)\" [sizeLimitMB]=\"sizeLimitMB\">\n                    </pep-files-uploader>\n                </div>\n            </ng-template>\n        </ng-container>\n\n        <ng-container *ngIf=\"layoutType === 'card'\">\n            <ng-container *ngTemplateOutlet=\"readonlyTemplate\"></ng-container>\n            <!-- <div class=\"img-wrapper\"\n                [ngClass]=\"{\n                    'left-alignment': xAlignment == 'left',\n                    'right-alignment': xAlignment == 'right',\n                    'center-alignment': xAlignment == 'center'\n                }\">\n                <img [id]=\"key\" [style.max-height]=\"fieldHeight\" class=\"pep-report-file\" [alt]=\"label\" [src]=\"src\"\n                    (click)=\"itemImageClick($event)\" (error)=\"errorHandler($event)\" />\n            </div> -->\n        </ng-container>\n\n        <ng-container *ngIf=\"layoutType === 'table'\">\n            <ng-container *ngTemplateOutlet=\"readonlyTemplate\"></ng-container>\n            <!-- <div class=\"img-wrapper\" [ngClass]=\"{\n                    'left-alignment': xAlignment == 'left',\n                    'right-alignment': xAlignment == 'right',\n                    'center-alignment': xAlignment == 'center'\n                }\">\n                <img [id]=\"key\" [style.max-height]=\"fieldHeight\" class=\"pep-report-file pep-report-img\"\n                    [ngClass]=\"['text-align-' + xAlignment]\" [alt]=\"label\" [src]=\"src\" (click)=\"itemImageClick($event)\"\n                    (error)=\"errorHandler($event)\" (load)=\"onImageLoad($event)\" />\n            </div> -->\n        </ng-container>\n    </ng-container>\n\n    <!-- Menu -->\n    <ng-container *ngIf=\"menuField\">\n        <button [id]=\"key\" (click)=\"onMenuClick($event)\" class=\"floating-field pep-button icon-button weak invert\"\n            [ngClass]=\"{\n                bottom: menuField?.Layout?.YAlignment == '2',\n                top: menuField?.Layout?.YAlignment == '1',\n                left: menuField?.Layout?.XAlignment == '1',\n                right: menuField?.Layout?.XAlignment == '2'\n            }\">\n            <mat-icon>\n                <pep-icon name=\"system_menu\"></pep-icon>\n            </mat-icon>\n        </button>\n    </ng-container>\n\n    <!-- Campaign -->\n    <ng-container *ngIf=\"hasCampaignField && hasCampaignField?.FormattedValue\">\n        <span [id]=\"key\" class=\"campaign floating-field\" title=\"{{ hasCampaignField?.FormattedValue }}\" [ngClass]=\"{\n                bottom: hasCampaignField?.Layout?.YAlignment == '2',\n                top: hasCampaignField?.Layout?.YAlignment == '1',\n                left: hasCampaignField?.Layout?.XAlignment == '1',\n                right: hasCampaignField?.Layout?.XAlignment == '2'\n            }\">\n            <mat-icon class=\"has-active-campaign\">\n                <pep-icon name=\"system_bolt\"></pep-icon>\n            </mat-icon>\n        </span>\n    </ng-container>\n\n    <!-- Indicators -->\n    <ng-container *ngIf=\"indicatorsField && indicatorsField?.FormattedValue != ''\">\n        <span [id]=\"key\" class=\"indicators-container floating-field\" [ngClass]=\"{\n                bottom: indicatorsField?.Layout?.YAlignment == '2',\n                top: indicatorsField?.Layout?.YAlignment == '1',\n                left: indicatorsField?.Layout?.XAlignment == '1',\n                right: indicatorsField?.Layout?.XAlignment == '2'\n            }\">\n            <mat-icon>\n                <ng-container *ngFor=\"let value of indicatorsField?.FormattedValue?.split(';')\">\n                    <pep-icon class=\"pull-left flip\" name=\"indicator_dot_placeholder\" [fill]=\"value\"></pep-icon>\n                </ng-container>\n                <ng-container *ngIf=\"indicatorsField?.FormattedValue?.split(';').length < 4\">\n                    <pep-icon class=\"pull-left flip\" name=\"indicator_dot_placeholder\"></pep-icon>\n                </ng-container>\n            </mat-icon>\n        </span>\n    </ng-container>\n</ng-container>",
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    styles: [":host{width:100%;height:inherit;display:grid}:host>*{align-self:center}.img-wrapper{display:flex;align-items:center;height:100%;max-width:100%}.img-wrapper.left-alignment{justify-content:flex-start}.img-wrapper.center-alignment{justify-content:center}.img-wrapper.right-alignment{justify-content:flex-end}.img-wrapper img{max-width:100%;height:100%;-o-object-fit:contain;object-fit:contain}.pep-file-container,.pepperi-file-container{height:100%}.pep-file-container .img-wrapper,.pepperi-file-container .img-wrapper{height:calc(100% - 1.5rem)}.pep-file-container img,.pepperi-file-container img{cursor:pointer}.indicators-container{padding:0!important}.indicators-container mat-icon{height:100%;width:100%;padding:.4rem}.indicators-container mat-icon pep-icon{height:.75rem!important;width:.75rem!important;margin:.05rem}.floating-field{width:2.5rem;height:2.5rem;border-radius:.25rem;border-radius:var(--pep-border-radius-md,.25rem);padding:.5rem;cursor:pointer;position:absolute!important}.top{top:0}.bottom{bottom:0}.left{left:0}.right{right:0}"]
                },] }
    ];
    PepImageComponent.ctorParameters = function () { return [
        { type: dialog.PepDialogService },
        { type: ngxLib.PepCustomizationService },
        { type: ngxLib.PepFileService },
        { type: core.Renderer2 },
        { type: core.ElementRef },
        { type: core$1.TranslateService }
    ]; };
    PepImageComponent.propDecorators = {
        key: [{ type: core.Input }],
        srcLarge: [{ type: core.Input }],
        src: [{ type: core.Input }],
        options: [{ type: core.Input }],
        label: [{ type: core.Input }],
        mandatory: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        readonly: [{ type: core.Input }],
        xAlignment: [{ type: core.Input }],
        rowSpan: [{ type: core.Input }],
        indicatorsField: [{ type: core.Input }],
        menuField: [{ type: core.Input }],
        hasCampaignField: [{ type: core.Input }],
        visible: [{ type: core.Input }],
        form: [{ type: core.Input }],
        uid: [{ type: core.Input }],
        showTitle: [{ type: core.Input }],
        layoutType: [{ type: core.Input }],
        isActive: [{ type: core.Input }],
        sizeLimitMB: [{ type: core.Input }],
        acceptImagesType: [{ type: core.Input }],
        fileChange: [{ type: core.Output }],
        elementClick: [{ type: core.Output }]
    };

    var PepImageModule = /** @class */ (function () {
        function PepImageModule(pepIconRegistry) {
            this.pepIconRegistry = pepIconRegistry;
            this.pepIconRegistry.registerIcons([
                icon.pepIconSystemMenu,
                icon.pepIconSystemBolt,
                icon.pepIconIndicatorDotPlaceholder,
            ]);
        }
        return PepImageModule;
    }());
    PepImageModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.ReactiveFormsModule,
                        // Material modules,
                        core$2.MatCommonModule,
                        formField.MatFormFieldModule,
                        icon$1.MatIconModule,
                        // ngx-lib modules
                        ngxLib.PepNgxLibModule,
                        icon.PepIconModule,
                        fieldTitle.PepFieldTitleModule,
                        imagesFilmstrip.PepImagesFilmstripModule,
                        filesUploader.PepFilesUploaderModule,
                    ],
                    exports: [PepImageComponent],
                    declarations: [PepImageComponent],
                    entryComponents: [imagesFilmstrip.PepImagesFilmstripComponent],
                },] }
    ];
    PepImageModule.ctorParameters = function () { return [
        { type: icon.PepIconRegistry }
    ]; };

    /*
     * Public API Surface of ngx-lib/image
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.PepImageComponent = PepImageComponent;
    exports.PepImageModule = PepImageModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=pepperi-addons-ngx-lib-image.umd.js.map
