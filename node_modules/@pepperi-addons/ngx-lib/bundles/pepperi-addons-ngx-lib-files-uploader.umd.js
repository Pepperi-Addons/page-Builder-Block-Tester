(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('@angular/material/core'), require('@angular/material/button'), require('@angular/material/form-field'), require('@angular/material/input'), require('@angular/material/icon'), require('ng2-file-upload'), require('@pepperi-addons/ngx-lib'), require('@pepperi-addons/ngx-lib/icon'), require('@pepperi-addons/ngx-lib/dialog'), require('@ngx-translate/core')) :
    typeof define === 'function' && define.amd ? define('@pepperi-addons/ngx-lib/files-uploader', ['exports', '@angular/core', '@angular/common', '@angular/forms', '@angular/material/core', '@angular/material/button', '@angular/material/form-field', '@angular/material/input', '@angular/material/icon', 'ng2-file-upload', '@pepperi-addons/ngx-lib', '@pepperi-addons/ngx-lib/icon', '@pepperi-addons/ngx-lib/dialog', '@ngx-translate/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['pepperi-addons'] = global['pepperi-addons'] || {}, global['pepperi-addons']['ngx-lib'] = global['pepperi-addons']['ngx-lib'] || {}, global['pepperi-addons']['ngx-lib']['files-uploader'] = {}), global.ng.core, global.ng.common, global.ng.forms, global.ng.material.core, global.ng.material.button, global.ng.material.formField, global.ng.material.input, global.ng.material.icon, global['file-upload'], global['pepperi-addons']['ngx-lib'], global['pepperi-addons']['ngx-lib'].icon, global['pepperi-addons']['ngx-lib'].dialog, global.translate));
}(this, (function (exports, core, common, forms, core$2, button, formField, input, icon$1, ng2FileUpload, ngxLib, icon, dialog, core$1) { 'use strict';

    var PepFilesUploaderComponent = /** @class */ (function () {
        function PepFilesUploaderComponent(dialogService, customizationService, fileService, translate) {
            var _this = this;
            this.dialogService = dialogService;
            this.customizationService = customizationService;
            this.fileService = fileService;
            this.translate = translate;
            this.key = '';
            this.src = '';
            this.label = '';
            this.mandatory = false;
            this.disabled = false;
            this.xAlignment = ngxLib.DEFAULT_HORIZONTAL_ALIGNMENT;
            this._rowSpan = 1;
            this.controlType = '';
            this.sizeLimitMB = 5;
            this.standAlone = false;
            this.acceptedExtensions = 'bmp,jpg,jpeg,png,gif,ico,svg,html,css';
            this.layoutType = 'form';
            this.fileChange = new core.EventEmitter();
            this.elementClick = new core.EventEmitter();
            this.fieldHeight = '';
            this.progress = 0;
            // response: string;
            this.intervalID = null;
            this.uploader = new ng2FileUpload.FileUploader({ removeAfterUpload: true });
            this.uploader.onAfterAddingFile = function (item) {
                var _a;
                if ((_a = _this.fileInput) === null || _a === void 0 ? void 0 : _a.nativeElement) {
                    _this.fileInput.nativeElement.value = '';
                }
                var reader = new FileReader();
                reader.onload = function (event) {
                    var fileNameArray = item._file.name.split('.');
                    var fileName = fileNameArray[0];
                    var fileExt = fileNameArray[1]; // item._file.name.split('.').pop();
                    var target = event.target || event.srcElement;
                    var fileStr = target.result;
                    var errorMsg = _this.isValidFile(fileStr, fileExt, _this.acceptedExtensions, _this.sizeLimitMB);
                    if (errorMsg === '') {
                        _this.src = fileStr;
                        // this.setIntervalX(25, 75);
                        // this.setProgress(5);
                        _this.fileChange.emit({
                            acceptedExtensions: _this.acceptedExtensions,
                            fileStr: fileStr,
                            fileName: fileName,
                            fileExt: fileExt,
                        });
                    }
                    else {
                        var title = _this.translate.instant('MESSAGES.TITLE_NOTICE');
                        var data = new dialog.PepDialogData({
                            title: title,
                            content: errorMsg,
                        });
                        _this.dialogService.openDefaultDialog(data);
                    }
                };
                reader.readAsDataURL(item._file);
            };
        }
        Object.defineProperty(PepFilesUploaderComponent.prototype, "rowSpan", {
            get: function () {
                return this._rowSpan;
            },
            set: function (value) {
                this._rowSpan = value;
            },
            enumerable: false,
            configurable: true
        });
        PepFilesUploaderComponent.prototype.ngOnInit = function () {
            /*this.uploader.onCompleteAll = () => {
                this.fileInput.nativeElement.value = '';
            }*/
        };
        PepFilesUploaderComponent.prototype.isValidFile = function (fileStr, fileExtension, acceptedExtensions, sizeLimitMB) {
            if (sizeLimitMB === void 0) { sizeLimitMB = 5; }
            var file = fileStr;
            var fileSize = 0;
            var content = '';
            // check if got file as Base64
            if (typeof fileStr === 'string' && fileStr.indexOf('data:') > -1) {
                fileSize = this.getBase64FileSize(fileStr);
            }
            else {
                fileSize = file.size;
            }
            // check the size and the extension
            var sizeOK = fileSize !== -1 && file != null && fileSize < sizeLimitMB * 1048576;
            var extensionOK = acceptedExtensions === '' ||
                acceptedExtensions.indexOf(fileExtension.toLowerCase()) !== -1;
            if (!extensionOK) {
                content = this.translate.instant('MESSAGES.ERROR_FAILD_TO_LOAD_EXTENSION', {
                    fileExtension: "<label class='uppercase bold'>" +
                        fileExtension +
                        '</label>',
                });
            }
            else if (!sizeOK) {
                content = this.translate.instant('MESSAGES.ERROR_FAILD_TO_LOAD_SIZE', {
                    fileSize: "<label class='uppercase bold'>" +
                        sizeLimitMB.toString() +
                        '</label>',
                });
            }
            return content;
        };
        PepFilesUploaderComponent.prototype.getBase64FileSize = function (base64String) {
            var fileSize;
            try {
                base64String = base64String.substr(base64String.indexOf(',') + 1);
                fileSize = atob(base64String).length;
            }
            catch (e) {
                fileSize = -1;
            }
            return fileSize; // return size in bytes;
        };
        // setIntervalX(delay, repetitions): void {
        //     let x = 0;
        //     this.intervalID = window.setInterval(() => {
        //         // this.setProgress(this.progress + 5);
        //         if (++x === repetitions || this.uploader.progress >= 100) {
        //             window.clearInterval(this.intervalID);
        //         }
        //     }, delay);
        // }
        PepFilesUploaderComponent.prototype.errorHandler = function (event) {
            event.target.src = this.fileService.getSvgAsImageSrc(icon.pepIconNoImage2.data);
            event.target.title = this.translate.instant('IMAGE.NO_IMAGE');
        };
        PepFilesUploaderComponent.prototype.setProgress = function (progress) {
            this.progress = progress;
            this.uploader.progress = progress;
        };
        PepFilesUploaderComponent.prototype.deleteFile = function () {
            this.uploader.clearQueue();
            window.clearInterval(this.intervalID);
            this.setProgress(0);
            var empltValue = '';
            this.src = empltValue;
            this.fileChange.emit(null);
            // this.fileChange.emit({
            //     acceptedExtensions: this.acceptedExtensions,
            //     fileStr: null,
            //     fileExt: null,
            // });
        };
        PepFilesUploaderComponent.prototype.onElementClicked = function (event) {
            this.elementClick.emit({
                key: this.key,
                controlType: this.controlType,
                eventWhich: event.which,
            });
        };
        PepFilesUploaderComponent.prototype.onClick_ChooseFile = function (event) {
            var _a;
            if ((_a = this.fileInput) === null || _a === void 0 ? void 0 : _a.nativeElement) {
                this.fileInput.nativeElement.click();
            }
        };
        PepFilesUploaderComponent.prototype.onKeyPress_ChooseFile = function (event) {
            var _a;
            var e = event;
            if ([13, 32].indexOf(e.which) !== -1) {
                if ((_a = this.fileInput) === null || _a === void 0 ? void 0 : _a.nativeElement) {
                    this.fileInput.nativeElement.click();
                }
            }
            e.preventDefault();
        };
        return PepFilesUploaderComponent;
    }());
    PepFilesUploaderComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'pep-files-uploader',
                    template: "<ng-template #pepTemplate>\n    <mat-form-field [formGroup]=\"form\" appearance=\"outline\">\n        <div class=\"pep-file-wrapper\">\n            <div class=\"pep-file body-sm\" [style.height]=\"fieldHeight\" [ngClass]=\"{\n                    'one-row': rowSpan == 1,\n                    disable: disabled\n                }\">\n                <ng-container *ngIf=\"src != ''; then withImg; else noImg\"></ng-container>\n                <ng-template #withImg>\n                    <button *ngIf=\"!disabled\" mat-button (click)=\"deleteFile()\"\n                        class=\"pep-button icon-button weak md delete\" tabindex=\"-1\"\n                        [ngClass]=\"{ 'right-alignment': xAlignment == 'right' }\">\n                        <mat-icon>\n                            <pep-icon name=\"system_bin\"></pep-icon>\n                        </mat-icon>\n                    </button>\n                    <div class=\"pep-file-preview\" (click)=\"onElementClicked($event)\">\n                        <img *ngIf=\"controlType === 'image'\" #imagePreview [src]=\"src\" class=\"pep-file-preview-img\"\n                            [style.max-height]=\"fieldHeight\" (error)=\"errorHandler($event)\" [alt]=\"label\"\n                            [ngClass]=\"['text-align-' + xAlignment]\" />\n                        <div *ngIf=\"controlType === 'attachment'\" class=\"ellipsis pep-file-message\">\n                            <a *ngIf=\"src != ''\" href=\"javascript:void(0)\">\n                                <mat-icon class=\"pep-spacing-element\">\n                                    <pep-icon name=\"system_attach\"></pep-icon>\n                                </mat-icon>\n                                <span class=\"body-sm ellipsis\">{{ 'FILE.SEE_ORIGINAL' | translate }}</span>\n                            </a>\n                        </div>\n                    </div>\n                </ng-template>\n                <ng-template #noImg>\n                    <div class=\"ellipsis pep-file-message\">\n                        <mat-icon *ngIf=\"controlType === 'attachment'\" class=\"pep-spacing-element\">\n                            <pep-icon name=\"system_attach\"></pep-icon>\n                        </mat-icon>\n                        <mat-icon *ngIf=\"controlType === 'image'\" class=\"pep-spacing-element\">\n                            <pep-icon name=\"system_file_upload_cloud\"></pep-icon>\n                        </mat-icon>\n                        <span class=\"body-sm ellipsis\" *ngIf=\"progress == 0\">\n                            {{ (disabled ? (controlType === 'image' ? 'MESSAGES.INFO_MISSING_IMAGE' :\n                            'MESSAGES.INFO_MISSING_FILE') : 'FILE.HINT') | translate }}\n                        </span>\n                        <!-- <p *ngIf=\"progress != 0\" class=\"pull-left flip\"\n                            [ngClass]=\"{ 'pull-left flip': rowSpan == 1, image: controlType == 'image', attachment: controlType == 'attachment' }\">\n                            {{ 'FILE.UPLOADING_FILE' | translate }}\n                        </p> -->\n                    </div>\n                    <ng-container *ngIf=\"!disabled\">\n                        <input #fileInput id=\"pep-file-{{ key }}\" tabindex=\"-1\" type=\"file\" accept=\"acceptedExtensions\"\n                            ng2FileSelect [uploader]=\"uploader\" autocomplete=\"off\" />\n                        <button *ngIf=\"progress != 0\" mat-button class=\"pep-button icon-button weak md delete\"\n                            [ngClass]=\"{ 'right-alignment': xAlignment == 'right' }\">\n                            <mat-icon>\n                                <pep-icon name=\"system_processing\" [spin]=\"true\">\n                                </pep-icon>\n                            </mat-icon>\n                        </button>\n                    </ng-container>\n                </ng-template>\n            </div>\n            <input [id]=\"key\" matInput [name]=\"key\" [formControlName]=\"key\" class=\"hidden-input\" type=\"text\"\n                [value]=\"src\" (click)=\"onClick_ChooseFile($event)\" (keypress)=\"onKeyPress_ChooseFile($event)\"\n                autocomplete=\"off\" />\n        </div>\n\n        <mat-error><span class=\"body-xs\"\n                [title]=\"mandatory && src.length == 0 ? ('MESSAGES.ERROR_IS_REQUIRED' | translate: { field: label }) : ('MESSAGES.ERROR_IS_NOT_VALID' | translate: { field: label })\"\n                [innerText]=\"mandatory && src.length == 0 ? ('MESSAGES.ERROR_IS_REQUIRED' | translate: { field: label }) : ('MESSAGES.ERROR_IS_NOT_VALID' | translate: { field: label })\"></span>\n        </mat-error>\n    </mat-form-field>\n</ng-template>\n\n<ng-container *ngIf=\"layoutType === 'form'\">\n    <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"layoutType === 'card'\">\n    <!-- <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container> -->\n</ng-container>\n\n<ng-container *ngIf=\"layoutType === 'table'\">\n    <!-- <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container> -->\n</ng-container>",
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    styles: [":host{display:grid;height:inherit}"]
                },] },
        { type: core.Injectable }
    ];
    PepFilesUploaderComponent.ctorParameters = function () { return [
        { type: dialog.PepDialogService },
        { type: ngxLib.PepCustomizationService },
        { type: ngxLib.PepFileService },
        { type: core$1.TranslateService }
    ]; };
    PepFilesUploaderComponent.propDecorators = {
        key: [{ type: core.Input }],
        src: [{ type: core.Input }],
        label: [{ type: core.Input }],
        mandatory: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        xAlignment: [{ type: core.Input }],
        rowSpan: [{ type: core.Input }],
        controlType: [{ type: core.Input }],
        sizeLimitMB: [{ type: core.Input }],
        form: [{ type: core.Input }],
        standAlone: [{ type: core.Input }],
        acceptedExtensions: [{ type: core.Input }],
        layoutType: [{ type: core.Input }],
        fileChange: [{ type: core.Output }],
        elementClick: [{ type: core.Output }],
        fileInput: [{ type: core.ViewChild, args: ['fileInput',] }],
        imagePreview: [{ type: core.ViewChild, args: ['imagePreview',] }],
        fieldHeight: [{ type: core.Input }]
    };

    var PepFilesUploaderModule = /** @class */ (function () {
        function PepFilesUploaderModule(pepIconRegistry) {
            this.pepIconRegistry = pepIconRegistry;
            this.pepIconRegistry.registerIcons([
                icon.pepIconSystemBin,
                icon.pepIconSystemAttach,
                icon.pepIconSystemFileUploadCloud,
                icon.pepIconSystemProcessing,
            ]);
        }
        return PepFilesUploaderModule;
    }());
    PepFilesUploaderModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.ReactiveFormsModule,
                        // Material modules,
                        core$2.MatCommonModule,
                        button.MatButtonModule,
                        formField.MatFormFieldModule,
                        input.MatInputModule,
                        icon$1.MatIconModule,
                        // External modules
                        ng2FileUpload.FileUploadModule,
                        // ngx-lib modules
                        ngxLib.PepNgxLibModule,
                        icon.PepIconModule,
                        dialog.PepDialogModule,
                    ],
                    exports: [PepFilesUploaderComponent],
                    declarations: [PepFilesUploaderComponent],
                },] }
    ];
    PepFilesUploaderModule.ctorParameters = function () { return [
        { type: icon.PepIconRegistry }
    ]; };

    /*
     * Public API Surface of ngx-lib/files-uploader
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.PepFilesUploaderComponent = PepFilesUploaderComponent;
    exports.PepFilesUploaderModule = PepFilesUploaderModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=pepperi-addons-ngx-lib-files-uploader.umd.js.map
