(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('@angular/material/core'), require('@angular/material/form-field'), require('@pepperi-addons/ngx-lib'), require('@pepperi-addons/ngx-lib/textbox'), require('@pepperi-addons/ngx-lib/select'), require('@pepperi-addons/ngx-lib/field-title')) :
    typeof define === 'function' && define.amd ? define('@pepperi-addons/ngx-lib/address', ['exports', '@angular/core', '@angular/common', '@angular/forms', '@angular/material/core', '@angular/material/form-field', '@pepperi-addons/ngx-lib', '@pepperi-addons/ngx-lib/textbox', '@pepperi-addons/ngx-lib/select', '@pepperi-addons/ngx-lib/field-title'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['pepperi-addons'] = global['pepperi-addons'] || {}, global['pepperi-addons']['ngx-lib'] = global['pepperi-addons']['ngx-lib'] || {}, global['pepperi-addons']['ngx-lib'].address = {}), global.ng.core, global.ng.common, global.ng.forms, global.ng.material.core, global.ng.material.formField, global['pepperi-addons']['ngx-lib'], global['pepperi-addons']['ngx-lib'].textbox, global['pepperi-addons']['ngx-lib'].select, global['pepperi-addons']['ngx-lib']['field-title']));
}(this, (function (exports, core, common, forms, core$1, formField, ngxLib, textbox, select, fieldTitle) { 'use strict';

    var PepAddressComponent = /** @class */ (function () {
        function PepAddressComponent(element, renderer) {
            this.element = element;
            this.renderer = renderer;
            this.key = '';
            // @Input() value = '';
            this.formattedValue = '';
            this.label = '';
            this.mandatory = false;
            this.disabled = false;
            this.readonly = false;
            this.xAlignment = ngxLib.DEFAULT_HORIZONTAL_ALIGNMENT;
            this.rowSpan = 1;
            this.form = null;
            this.layoutType = 'form';
            this._visible = true;
            this.addressValueChange = new core.EventEmitter();
        }
        Object.defineProperty(PepAddressComponent.prototype, "visible", {
            get: function () {
                return this._visible;
            },
            set: function (visible) {
                this._visible = visible;
                if (visible) {
                    this.renderer.removeClass(this.element.nativeElement, 'hidden-element');
                }
                else {
                    this.renderer.addClass(this.element.nativeElement, 'hidden-element');
                }
            },
            enumerable: false,
            configurable: true
        });
        PepAddressComponent.prototype.ngOnInit = function () {
            this.renderer.addClass(this.element.nativeElement, 'pep-grouped-field');
        };
        PepAddressComponent.prototype.ngOnChanges = function (changes) {
            //
        };
        PepAddressComponent.prototype.ngOnDestroy = function () {
            //
        };
        // Not in use anymore comment in 16.55.
        // onBlur(e: any, key: string): void {
        //     const value = e.target ? e.target.value : e;
        //     this.changeValue({ key, value }, e.relatedTarget);
        // }
        PepAddressComponent.prototype.onValueChange = function (value, key) {
            // if (e.target) {
            //     const input = e.target ? e.target.value : e;
            //     this.changeValue({ key, value: input.value });
            // } else {
            //     this.changeValue(e);
            // }
            var currentGroupField = this.groupFields.find(function (gf) { return gf.key === key; });
            if (currentGroupField && currentGroupField.value !== value) {
                // Set the value in the form controls
                if (this.form) {
                    var formCtrl = this.form.get(this.key);
                    if (formCtrl) {
                        formCtrl.get(key).setValue(value);
                    }
                }
                this.addressValueChange.emit({
                    key: key,
                    value: value,
                });
            }
        };
        return PepAddressComponent;
    }());
    PepAddressComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'pep-address',
                    template: "<ng-container [formGroup]=\"form\">\n    <ng-container *ngIf=\"layoutType === 'form'\">\n        <pep-field-title [label]=\"label\" [mandatory]=\"mandatory\" [disabled]=\"disabled\" class=\"header\">\n        </pep-field-title>\n        <div [formGroupName]=\"key\" [id]=\"key\" class=\"pep-address-container\"\n            dir=\"{{ xAlignment === 'right' ? 'rtl' : 'ltr' }}\">\n            <div [ngSwitch]=\"groupField.controlType\" *ngFor=\"let groupField of groupFields; let i = index\"\n                class=\"pep-address-field columns-{{ groupField.colSpan }}\">\n                <pep-textbox *ngSwitchCase=\"'textbox'\" [layoutType]=\"layoutType\" title=\"{{ groupField.formattedValue }}\"\n                    [form]=\"form\" [key]=\"groupField.key\" [value]=\"groupField.value\"\n                    [formattedValue]=\"groupField.formattedValue\" [label]=\"groupField.label\"\n                    [placeholder]=\"groupField.placeholder\" [type]=\"groupField.type\" [mandatory]=\"groupField.mandatory\"\n                    [disabled]=\"groupField.disabled\" [readonly]=\"groupField.readonly\"\n                    [xAlignment]=\"groupField.xAlignment\" [rowSpan]=\"groupField.rowSpan\" [parentFieldKey]=\"key\"\n                    (valueChange)=\"onValueChange($event, groupField.key)\">\n                </pep-textbox>\n\n                <pep-select *ngSwitchCase=\"'select'\" [layoutType]=\"layoutType\" title=\"{{ groupField.formattedValue }}\"\n                    [form]=\"form\" [key]=\"groupField.key\" [value]=\"groupField.value\" [label]=\"groupField.label\"\n                    [type]=\"groupField.type\" [mandatory]=\"groupField.mandatory\" [disabled]=\"groupField.disabled\"\n                    [readonly]=\"groupField.readonly\" [xAlignment]=\"groupField.xAlignment\" [rowSpan]=\"groupField.rowSpan\"\n                    [options]=\"groupField.options\" [parentFieldKey]=\"key\"\n                    (valueChange)=\"onValueChange($event, groupField.key)\">\n                </pep-select>\n            </div>\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'card'\">\n        <div class=\"pep-card-input \" title=\"{{ label }}&nbsp;{{ formattedValue }}\"\n            [ngClass]=\"['text-align-' + xAlignment]\">\n            <span *ngIf=\"label != ''\" class=\"body-xs title\">{{ label }}&nbsp;</span>\n            <ng-container *ngFor=\"let groupField of groupFields; let i = index\">\n                <span *ngIf=\"groupField?.formattedValue != ''\" class=\"body-sm\">{{ groupField.formattedValue\n                    }},&nbsp;</span>\n            </ng-container>\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'table'\">\n        <div class=\"pep-card-input \" title=\"{{ formattedValue }}\" [ngClass]=\"['text-align-' + xAlignment]\">\n            <ng-container *ngFor=\"let groupField of groupFields; let i = index\">\n                <span *ngIf=\"groupField?.formattedValue != ''\" class=\"body-sm\">{{ groupField.formattedValue\n                    }},&nbsp;</span>\n            </ng-container>\n        </div>\n    </ng-container>\n</ng-container>",
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    styles: [".header{grid-column:1/span 3}.pep-address-container{padding:.875rem .75rem;padding:.875rem var(--pep-spacing-md,.75rem);border-radius:.25rem;border-radius:var(--pep-border-radius-md,.25rem);display:-ms-grid;display:grid;grid-template-columns:repeat(3,1fr);grid-column-gap:.75rem;grid-column-gap:var(--pep-spacing-md,.75rem);grid-row-gap:.75rem;grid-row-gap:var(--pep-spacing-md,.75rem)}.pep-address-container .columns-2{grid-column:1/span 2}.pep-address-container .columns-3{grid-column:1/span 3}"]
                },] }
    ];
    PepAddressComponent.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: core.Renderer2 }
    ]; };
    PepAddressComponent.propDecorators = {
        key: [{ type: core.Input }],
        formattedValue: [{ type: core.Input }],
        label: [{ type: core.Input }],
        mandatory: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        readonly: [{ type: core.Input }],
        xAlignment: [{ type: core.Input }],
        rowSpan: [{ type: core.Input }],
        groupFields: [{ type: core.Input }],
        form: [{ type: core.Input }],
        layoutType: [{ type: core.Input }],
        visible: [{ type: core.Input }],
        addressValueChange: [{ type: core.Output }]
    };

    var PepAddressModule = /** @class */ (function () {
        function PepAddressModule() {
        }
        return PepAddressModule;
    }());
    PepAddressModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.ReactiveFormsModule,
                        // Material modules
                        core$1.MatCommonModule,
                        formField.MatFormFieldModule,
                        // ngx-lib modules
                        ngxLib.PepNgxLibModule,
                        textbox.PepTextboxModule,
                        select.PepSelectModule,
                        fieldTitle.PepFieldTitleModule,
                    ],
                    exports: [PepAddressComponent],
                    declarations: [PepAddressComponent],
                },] }
    ];

    /*
     * Public API Surface of ngx-lib/address
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.PepAddressComponent = PepAddressComponent;
    exports.PepAddressModule = PepAddressModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=pepperi-addons-ngx-lib-address.umd.js.map
