(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/material/core'), require('@angular/material/button'), require('@angular/material/icon'), require('@angular/material/dialog'), require('@pepperi-addons/ngx-lib'), require('@pepperi-addons/ngx-lib/icon'), require('@angular/cdk/overlay')) :
    typeof define === 'function' && define.amd ? define('@pepperi-addons/ngx-lib/dialog', ['exports', '@angular/core', '@angular/common', '@angular/material/core', '@angular/material/button', '@angular/material/icon', '@angular/material/dialog', '@pepperi-addons/ngx-lib', '@pepperi-addons/ngx-lib/icon', '@angular/cdk/overlay'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['pepperi-addons'] = global['pepperi-addons'] || {}, global['pepperi-addons']['ngx-lib'] = global['pepperi-addons']['ngx-lib'] || {}, global['pepperi-addons']['ngx-lib'].dialog = {}), global.ng.core, global.ng.common, global.ng.material.core, global.ng.material.button, global.ng.material.icon, global.ng.material.dialog, global['pepperi-addons']['ngx-lib'], global['pepperi-addons']['ngx-lib'].icon, global.ng.cdk.overlay));
}(this, (function (exports, i0, common, core, button, icon$1, i1, i2, icon, i3) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);

    var PepDialogActionButton = /** @class */ (function () {
        function PepDialogActionButton(title, className, callback) {
            if (title === void 0) { title = ''; }
            if (className === void 0) { className = ''; }
            if (callback === void 0) { callback = null; }
            this.title = '';
            this.className = '';
            this.title = title;
            this.className = className;
            this.callback = callback;
        }
        return PepDialogActionButton;
    }());
    var PepDialogData = /** @class */ (function () {
        function PepDialogData(options) {
            var _a, _b, _c, _d;
            this.title = options.title || '';
            this.actionsType = options.actionsType || 'close';
            this.content = options.content || '';
            this.showClose = (_a = options.showClose) !== null && _a !== void 0 ? _a : true;
            this.showHeader = (_b = options.showHeader) !== null && _b !== void 0 ? _b : true;
            this.showFooter = (_c = options.showFooter) !== null && _c !== void 0 ? _c : true;
            this.actionButtons = (_d = options.actionButtons) !== null && _d !== void 0 ? _d : null;
        }
        return PepDialogData;
    }());

    var PepDefaultDialogComponent = /** @class */ (function () {
        function PepDefaultDialogComponent(data, dialogRef) {
            this.data = data;
            this.dialogRef = dialogRef;
        }
        PepDefaultDialogComponent.prototype.onActionButtonClicked = function (button) {
            this.dialogRef.close(true);
            this.dialogRef.afterClosed().subscribe(function (isActionButtonClicked) {
                if (isActionButtonClicked && (button === null || button === void 0 ? void 0 : button.callback)) {
                    button.callback();
                }
            });
        };
        return PepDefaultDialogComponent;
    }());
    PepDefaultDialogComponent.decorators = [
        { type: i0.Component, args: [{
                    template: "<pep-dialog [showClose]=\"data?.showClose\" [showHeader]=\"data?.showHeader\" [showFooter]=\"data?.showFooter\"\n    [title]=\"data?.title\">\n    <div pep-dialog-content [innerHtml]=\"data?.content | pepSafeHtml\"></div>\n    <div pep-dialog-actions class=\"pep-spacing-element-negative\">\n        <ng-container [ngSwitch]=\"data?.actionsType\">\n            <ng-container *ngSwitchCase=\"'close'\">\n                <button mat-button [mat-dialog-close]=\"true\" class=\"pep-spacing-element pep-button md weak\">\n                    {{ 'ACTIONS.CLOSE' | translate }}\n                </button>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'cancel-continue'\">\n                <button mat-button [mat-dialog-close]=\"false\" class=\"pep-spacing-element pep-button md weak\">\n                    {{ 'ACTIONS.CANCEL' | translate }}\n                </button>\n                <button mat-button [mat-dialog-close]=\"true\" class=\"pep-spacing-element pep-button md strong\">\n                    {{ 'ACTIONS.CONTINUE' | translate }}\n                </button>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'cancel-ok'\">\n                <button mat-button [mat-dialog-close]=\"false\" class=\"pep-spacing-element pep-button md weak\">\n                    {{ 'ACTIONS.CANCEL' | translate }}\n                </button>\n                <button mat-button [mat-dialog-close]=\"true\" class=\"pep-spacing-element pep-button md strong\">\n                    {{ 'ACTIONS.OK' | translate }}\n                </button>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'cancel-delete'\">\n                <button mat-button [mat-dialog-close]=\"false\" class=\"pep-spacing-element pep-button md weak\">\n                    {{ 'ACTIONS.CANCEL' | translate }}\n                </button>\n                <button mat-button [mat-dialog-close]=\"true\" class=\"pep-spacing-element pep-button md strong caution\">\n                    {{ 'ACTIONS.DELETE' | translate }}\n                </button>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'custom'\">\n                <ng-container *ngFor=\"let btn of data?.actionButtons\">\n                    <!-- [mat-dialog-close]=\"btn?.callback ? btn.callback : null\" -->\n                    <button mat-button (click)=\"onActionButtonClicked(btn)\" class=\"pep-spacing-element pep-button md\"\n                        [ngClass]=\"btn?.className != '' ? btn?.className : 'weak'\">\n                        {{ btn?.title }}\n                    </button>\n                </ng-container>\n            </ng-container>\n        </ng-container>\n    </div>\n</pep-dialog>",
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [""]
                },] }
    ];
    PepDefaultDialogComponent.ctorParameters = function () { return [
        { type: PepDialogData, decorators: [{ type: i0.Inject, args: [i1.MAT_DIALOG_DATA,] }] },
        { type: i1.MatDialogRef }
    ]; };

    var PepDialogComponent = /** @class */ (function () {
        function PepDialogComponent() {
            this.showClose = true;
            this.showHeader = true;
            this.showFooter = true;
        }
        return PepDialogComponent;
    }());
    PepDialogComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'pep-dialog',
                    template: "<div mat-dialog-title *ngIf=\"showHeader\" class=\"dialog-header-container\">\n    <span class=\"dialog-title\" *ngIf=\"title?.length\">\n        {{ title }}\n    </span>\n    <button mat-button *ngIf=\"showClose\" [mat-dialog-close]=\"null\" class=\"pep-button icon-button md weak dialog-close\">\n        <mat-icon>\n            <pep-icon name=\"system_close\">\n            </pep-icon>\n        </mat-icon>\n    </button>\n</div>\n<div mat-dialog-content>\n    <ng-content select=\"[pep-dialog-content]\"></ng-content>\n</div>\n<div mat-dialog-actions *ngIf=\"showFooter\" class=\"pep-border-top\">\n    <ng-content select=\"[pep-dialog-actions]\"></ng-content>\n</div>",
                    styles: [""]
                },] }
    ];
    PepDialogComponent.propDecorators = {
        title: [{ type: i0.Input }],
        showClose: [{ type: i0.Input }],
        showHeader: [{ type: i0.Input }],
        showFooter: [{ type: i0.Input }]
    };

    var PepDialogModule = /** @class */ (function () {
        function PepDialogModule(pepIconRegistry) {
            this.pepIconRegistry = pepIconRegistry;
            this.pepIconRegistry.registerIcons([icon.pepIconSystemClose]);
        }
        return PepDialogModule;
    }());
    PepDialogModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        // Material modules,
                        core.MatCommonModule,
                        button.MatButtonModule,
                        icon$1.MatIconModule,
                        i1.MatDialogModule,
                        // ngx-lib modules
                        i2.PepNgxLibModule,
                        icon.PepIconModule,
                    ],
                    exports: [PepDialogComponent],
                    declarations: [PepDefaultDialogComponent, PepDialogComponent],
                    entryComponents: [PepDefaultDialogComponent],
                },] }
    ];
    PepDialogModule.ctorParameters = function () { return [
        { type: icon.PepIconRegistry }
    ]; };

    var PepDialogService = /** @class */ (function () {
        function PepDialogService(dialog, layoutService, overlay) {
            this.dialog = dialog;
            this.layoutService = layoutService;
            this.overlay = overlay;
        }
        PepDialogService.prototype.fixConfigIfNeeded = function (data, config) {
            if (config.disableClose) {
                if (((!data.showClose || !data.showHeader) && !data.showFooter) ||
                    (data.actionsType === 'custom' &&
                        (data.actionButtons === null ||
                            data.actionButtons.length === 0))) {
                    config.disableClose = false;
                }
            }
        };
        PepDialogService.prototype.getDialogConfig = function (options, size) {
            if (options === void 0) { options = {}; }
            if (size === void 0) { size = 'regular'; }
            var _a;
            var dialogConfig = new i1.MatDialogConfig();
            dialogConfig.autoFocus = false;
            dialogConfig.direction = this.layoutService.isRtl() ? 'rtl' : 'ltr';
            dialogConfig.disableClose = (_a = options.disableClose) !== null && _a !== void 0 ? _a : true;
            dialogConfig.panelClass = ['pep-dialog', options.panelClass || ''];
            if (size === 'inline') {
                dialogConfig.height = options.height || 'auto';
                dialogConfig.maxWidth = options.maxWidth || '100vw';
                dialogConfig.maxHeight = options.maxHeight || '100vh';
                dialogConfig.minWidth = options.minWidth || '300px';
            }
            dialogConfig.panelClass.push(size);
            dialogConfig.scrollStrategy = this.overlay.scrollStrategies.noop();
            // dialogConfig.scrollStrategy = this.overlay.scrollStrategies.block();
            return dialogConfig;
        };
        PepDialogService.prototype.openDefaultDialog = function (data, config) {
            if (config === void 0) { config = null; }
            if (!config) {
                config = this.getDialogConfig();
            }
            this.fixConfigIfNeeded(data, config);
            config.data = data;
            var dialogRef = this.dialog.open(PepDefaultDialogComponent, config);
            return dialogRef;
        };
        PepDialogService.prototype.openDialog = function (componentOrTemplateRef, data, config) {
            if (data === void 0) { data = {}; }
            if (config === void 0) { config = null; }
            if (!config) {
                config = this.getDialogConfig();
            }
            this.fixConfigIfNeeded(data, config);
            config.data = data;
            var dialogRef = this.dialog.open(componentOrTemplateRef, config);
            return dialogRef;
        };
        return PepDialogService;
    }());
    PepDialogService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function PepDialogService_Factory() { return new PepDialogService(i0__namespace.ɵɵinject(i1__namespace.MatDialog), i0__namespace.ɵɵinject(i2__namespace.PepLayoutService), i0__namespace.ɵɵinject(i3__namespace.Overlay)); }, token: PepDialogService, providedIn: "root" });
    PepDialogService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    PepDialogService.ctorParameters = function () { return [
        { type: i1.MatDialog },
        { type: i2.PepLayoutService },
        { type: i3.Overlay }
    ]; };

    /*
     * Public API Surface of ngx-lib/dialog
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.PepDialogActionButton = PepDialogActionButton;
    exports.PepDialogComponent = PepDialogComponent;
    exports.PepDialogData = PepDialogData;
    exports.PepDialogModule = PepDialogModule;
    exports.PepDialogService = PepDialogService;
    exports.ɵa = PepDefaultDialogComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=pepperi-addons-ngx-lib-dialog.umd.js.map
