(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/material/core'), require('@angular/material/slider'), require('@pepperi-addons/ngx-lib/field-title'), require('@pepperi-addons/ngx-lib')) :
    typeof define === 'function' && define.amd ? define('@pepperi-addons/ngx-lib/slider', ['exports', '@angular/core', '@angular/common', '@angular/material/core', '@angular/material/slider', '@pepperi-addons/ngx-lib/field-title', '@pepperi-addons/ngx-lib'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['pepperi-addons'] = global['pepperi-addons'] || {}, global['pepperi-addons']['ngx-lib'] = global['pepperi-addons']['ngx-lib'] || {}, global['pepperi-addons']['ngx-lib'].slider = {}), global.ng.core, global.ng.common, global.ng.material.core, global.ng.material.slider, global['pepperi-addons']['ngx-lib']['field-title'], global['pepperi-addons']['ngx-lib']));
}(this, (function (exports, core, common, core$1, slider, fieldTitle, ngxLib) { 'use strict';

    /**
     * This is a slider component that support pepperi theme
     * style & state & sizes
     *
     * @export
     * @class PepSliderComponent
     * @implements {OnDestroy}
     */
    var PepSliderComponent = /** @class */ (function () {
        function PepSliderComponent(renderer, element, pepLayoutService) {
            this.renderer = renderer;
            this.element = element;
            this.pepLayoutService = pepLayoutService;
            this.label = '';
            this.disabled = false;
            this.hint = '';
            this.background = '';
            this.step = 1;
            this.minValue = NaN;
            this.maxValue = NaN;
            this._value = null;
            this.valueChange = new core.EventEmitter();
            this.xAlignment = ngxLib.DEFAULT_HORIZONTAL_ALIGNMENT;
        }
        Object.defineProperty(PepSliderComponent.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (value) {
                if (!value) {
                    value = '';
                }
                this._value = value;
            },
            enumerable: false,
            configurable: true
        });
        PepSliderComponent.prototype.ngOnInit = function () {
            this.xAlignment = this.pepLayoutService.isRtl() ? 'right' : 'left';
            // Get the wrapper for set the background.
            var sliderWrapper = this.element.nativeElement.querySelector('.mat-slider-wrapper');
            if (sliderWrapper) {
                this.renderer.setStyle(sliderWrapper, 'background', this.background.length > 0 ? this.background : '#ccc');
            }
        };
        PepSliderComponent.prototype.onValueChange = function (event) {
            this.valueChange.emit(event.value);
        };
        return PepSliderComponent;
    }());
    PepSliderComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'pep-slider',
                    template: "<div class=\"pep-slider-container\">\n    <pep-field-title [label]=\"label\" [disabled]=\"disabled\" [hint]=\"hint\" [xAlignment]=\"xAlignment\">\n    </pep-field-title>\n    <mat-slider [min]=\"minValue\" [max]=\"maxValue\" [step]=\"step\" [value]=\"value\" [disabled]=\"disabled\"\n        (change)=\"onValueChange($event)\">\n    </mat-slider>\n</div>",
                    styles: [""]
                },] }
    ];
    PepSliderComponent.ctorParameters = function () { return [
        { type: core.Renderer2 },
        { type: core.ElementRef },
        { type: ngxLib.PepLayoutService }
    ]; };
    PepSliderComponent.propDecorators = {
        label: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        hint: [{ type: core.Input }],
        background: [{ type: core.Input }],
        step: [{ type: core.Input }],
        minValue: [{ type: core.Input }],
        maxValue: [{ type: core.Input }],
        value: [{ type: core.Input }],
        valueChange: [{ type: core.Output }]
    };

    var PepSliderModule = /** @class */ (function () {
        function PepSliderModule() {
        }
        return PepSliderModule;
    }());
    PepSliderModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        // Material modules
                        core$1.MatCommonModule,
                        slider.MatSliderModule,
                        // ngx-lib modules
                        ngxLib.PepNgxLibModule,
                        fieldTitle.PepFieldTitleModule,
                    ],
                    exports: [PepSliderComponent],
                    declarations: [PepSliderComponent],
                },] }
    ];

    /*
     * Public API Surface of ngx-lib/slider
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.PepSliderComponent = PepSliderComponent;
    exports.PepSliderModule = PepSliderModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=pepperi-addons-ngx-lib-slider.umd.js.map
