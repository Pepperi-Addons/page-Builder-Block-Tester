(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/material/icon'), require('@angular/material/menu'), require('@pepperi-addons/ngx-lib/icon'), require('@pepperi-addons/ngx-lib')) :
    typeof define === 'function' && define.amd ? define('@pepperi-addons/ngx-lib/bread-crumbs', ['exports', '@angular/core', '@angular/common', '@angular/material/icon', '@angular/material/menu', '@pepperi-addons/ngx-lib/icon', '@pepperi-addons/ngx-lib'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['pepperi-addons'] = global['pepperi-addons'] || {}, global['pepperi-addons']['ngx-lib'] = global['pepperi-addons']['ngx-lib'] || {}, global['pepperi-addons']['ngx-lib']['bread-crumbs'] = {}), global.ng.core, global.ng.common, global.ng.material.icon, global.ng.material.menu, global['pepperi-addons']['ngx-lib'].icon, global['pepperi-addons']['ngx-lib']));
}(this, (function (exports, core, common, icon$1, menu, icon, ngxLib) { 'use strict';

    var PepBreadCrumbsComponent = /** @class */ (function () {
        function PepBreadCrumbsComponent(layoutService) {
            this.layoutService = layoutService;
            this._items = [];
            this._displayType = 'label';
            this.addSpacing = false;
            this.itemClick = new core.EventEmitter();
            this.charSeparator = ' / ';
            this.iconSeparator = icon.pepIconArrowRight.name;
            this.shrinkItems = false;
        }
        Object.defineProperty(PepBreadCrumbsComponent.prototype, "items", {
            get: function () {
                return this._items;
            },
            set: function (value) {
                this._items = value;
                this.setupShrinkItems();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PepBreadCrumbsComponent.prototype, "displayType", {
            get: function () {
                return this._displayType;
            },
            set: function (value) {
                this._displayType = value;
                this.setupShrinkItems();
            },
            enumerable: false,
            configurable: true
        });
        PepBreadCrumbsComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.layoutService.onResize$.pipe().subscribe(function (size) {
                _this.screenSize = size;
                _this.setupShrinkItems();
            });
            if (this.layoutService.isRtl()) {
                this.charSeparator = ' \\ ';
                this.iconSeparator = icon.pepIconArrowLeft.name;
            }
        };
        PepBreadCrumbsComponent.prototype.setupShrinkItems = function () {
            if (this.displayType === 'items' && this.items.length > 1) {
                this.shrinkItems = this.screenSize > ngxLib.PepScreenSizeType.SM;
            }
        };
        PepBreadCrumbsComponent.prototype.getLabelTitle = function () {
            var labelTitle = '';
            if (this.items && this.items.length > 0) {
                for (var index = 0; index < this.items.length; index++) {
                    if (index < this.items.length - 1) {
                        if (index > 0) {
                            labelTitle += this.charSeparator;
                        }
                        labelTitle += this.items[index].text;
                    }
                }
            }
            return labelTitle;
        };
        PepBreadCrumbsComponent.prototype.onBreadCrumbItemClick = function (item) {
            this.itemClick.emit({ source: item });
        };
        return PepBreadCrumbsComponent;
    }());
    PepBreadCrumbsComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'pep-bread-crumbs',
                    template: "<ng-container *ngIf=\"displayType === 'label'; then labelTemplate; else itemsTemplate\">\n</ng-container>\n<ng-template #labelTemplate>\n    <div *ngIf=\"items?.length > 0\" class=\"bread-crumbs-label ellipsis\" [ngClass]=\"{ 'pep-spacing-element': addSpacing }\"\n        [title]=\"getLabelTitle()\">\n        <div class=\"body-xs ellipsis\">\n            <ng-container *ngFor=\"let item of items; let isFirst = first; let isLast = last\">\n                <span *ngIf=\"!isFirst && !isLast\">&nbsp;{{ charSeparator }}&nbsp;</span>\n                <span *ngIf=\"!isLast\">{{ item.text }}</span>\n            </ng-container>\n        </div>\n        <div class=\" title-md ellipsis current\" title=\"{{ items[items.length - 1]?.text }}\">\n            <span>{{ items[items.length - 1]?.text }}</span>\n        </div>\n    </div>\n</ng-template>\n\n<ng-template #itemsTemplate>\n    <ul *ngIf=\"items?.length > 0\" class=\"bread-crumbs-items body-sm ellipsis\">\n        <ng-container *ngIf=\"shrinkItems; then shrinkTemplate; else regularTemplate\">\n        </ng-container>\n\n        <ng-template #shrinkTemplate>\n            <li>\n                <a class=\"color-link\" [matMenuTriggerFor]=\"menu\" href=\"javascript:void(0)\">...</a>\n                <mat-menu #menu=\"matMenu\">\n                    <ng-container *ngFor=\"let menuItem of items; let isLast = last\">\n                        <button mat-menu-item *ngIf=\"!isLast\" (click)=\"onBreadCrumbItemClick(menuItem)\"\n                            [title]=\"menuItem.title || menuItem.text\" [disabled]=\"menuItem.disabled\"\n                            [ngClass]=\"{ disabled: menuItem.disabled }\">\n                            <span>\n                                {{ menuItem.text }}\n                            </span>\n                        </button>\n                    </ng-container>\n                </mat-menu>\n            </li>\n            <li>\n                <mat-icon class=\"seperator pep-spacing-element\">\n                    <pep-icon [name]=\"iconSeparator\">\n                    </pep-icon>\n                </mat-icon>\n            </li>\n            <li>\n                <span [title]=\"items[items.length - 1]?.title || items[items.length - 1]?.text\">\n                    {{ items[items.length - 1]?.text }}\n                </span>\n            </li>\n        </ng-template>\n        <ng-template #regularTemplate>\n            <ng-container *ngFor=\"let item of items; let isFirst = first; let isLast = last\">\n                <li>\n                    <a *ngIf=\"!item.disabled\" [title]=\"item.title || item.text\" href=\"javascript:void(0)\"\n                        class=\" color-link\" (click)=\"onBreadCrumbItemClick(item)\">{{ item.text }}</a>\n                    <span *ngIf=\"item.disabled\" [title]=\"item.title || item.text\">{{ item.text }}</span>\n                </li>\n                <li *ngIf=\"!isLast\">\n                    <mat-icon class=\"seperator pep-spacing-element\">\n                        <pep-icon [name]=\"iconSeparator\">\n                        </pep-icon>\n                    </mat-icon>\n                </li>\n            </ng-container>\n        </ng-template>\n    </ul>\n</ng-template>",
                    styles: [":host{display:grid}.bread-crumbs-label{height:calc(.5rem + 2.5rem);height:calc(var(--pep-top-bar-spacing-bottom, .5rem) + var(--pep-top-bar-field-height, 2.5rem));display:flex;flex-flow:wrap;align-items:center}ul.bread-crumbs-items{padding:0;margin:0;list-style-type:none;display:flex;align-items:center}ul.bread-crumbs-items li{display:inline-flex}ul.bread-crumbs-items li .seperator{height:1rem;width:1rem}ul.bread-crumbs-items li a{text-decoration:unset}"]
                },] },
        { type: core.Injectable }
    ];
    PepBreadCrumbsComponent.ctorParameters = function () { return [
        { type: ngxLib.PepLayoutService }
    ]; };
    PepBreadCrumbsComponent.propDecorators = {
        items: [{ type: core.Input }],
        displayType: [{ type: core.Input }],
        addSpacing: [{ type: core.Input }],
        itemClick: [{ type: core.Output }]
    };

    var PepBreadCrumbsModule = /** @class */ (function () {
        function PepBreadCrumbsModule(pepIconRegistry) {
            this.pepIconRegistry = pepIconRegistry;
            this.pepIconRegistry.registerIcons([
                icon.pepIconArrowRight,
                icon.pepIconArrowLeft,
            ]);
        }
        return PepBreadCrumbsModule;
    }());
    PepBreadCrumbsModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        // Material modules
                        icon$1.MatIconModule,
                        menu.MatMenuModule,
                        // ngx-lib modules
                        icon.PepIconModule,
                        // PepMenuModule
                    ],
                    exports: [PepBreadCrumbsComponent],
                    declarations: [PepBreadCrumbsComponent],
                },] }
    ];
    PepBreadCrumbsModule.ctorParameters = function () { return [
        { type: icon.PepIconRegistry }
    ]; };

    var PepBreadCrumbItem = /** @class */ (function () {
        function PepBreadCrumbItem(data) {
            this.disabled = false;
            Object.assign(this, data);
        }
        return PepBreadCrumbItem;
    }());

    /*
     * Public API Surface of ngx-lib/bread-crumbs
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.PepBreadCrumbItem = PepBreadCrumbItem;
    exports.PepBreadCrumbsComponent = PepBreadCrumbsComponent;
    exports.PepBreadCrumbsModule = PepBreadCrumbsModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=pepperi-addons-ngx-lib-bread-crumbs.umd.js.map
