(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('@angular/material/core'), require('@angular/material/form-field'), require('@angular/material/button'), require('@angular/material/grid-list'), require('@angular/material/icon'), require('@angular/material/menu'), require('ngx-signaturepad'), require('@pepperi-addons/ngx-lib'), require('@pepperi-addons/ngx-lib/icon'), require('@pepperi-addons/ngx-lib/dialog'), require('@pepperi-addons/ngx-lib/address'), require('@pepperi-addons/ngx-lib/attachment'), require('@pepperi-addons/ngx-lib/button'), require('@pepperi-addons/ngx-lib/checkbox'), require('@pepperi-addons/ngx-lib/date'), require('@pepperi-addons/ngx-lib/image'), require('@pepperi-addons/ngx-lib/images-filmstrip'), require('@pepperi-addons/ngx-lib/quantity-selector'), require('@pepperi-addons/ngx-lib/rich-html-textarea'), require('@pepperi-addons/ngx-lib/select'), require('@pepperi-addons/ngx-lib/separator'), require('@pepperi-addons/ngx-lib/signature'), require('@pepperi-addons/ngx-lib/textarea'), require('@pepperi-addons/ngx-lib/textbox'), require('@pepperi-addons/ngx-lib/field-title'), require('@pepperi-addons/ngx-lib/group-buttons'), require('@ngx-translate/core'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@pepperi-addons/ngx-lib/form', ['exports', '@angular/core', '@angular/common', '@angular/forms', '@angular/material/core', '@angular/material/form-field', '@angular/material/button', '@angular/material/grid-list', '@angular/material/icon', '@angular/material/menu', 'ngx-signaturepad', '@pepperi-addons/ngx-lib', '@pepperi-addons/ngx-lib/icon', '@pepperi-addons/ngx-lib/dialog', '@pepperi-addons/ngx-lib/address', '@pepperi-addons/ngx-lib/attachment', '@pepperi-addons/ngx-lib/button', '@pepperi-addons/ngx-lib/checkbox', '@pepperi-addons/ngx-lib/date', '@pepperi-addons/ngx-lib/image', '@pepperi-addons/ngx-lib/images-filmstrip', '@pepperi-addons/ngx-lib/quantity-selector', '@pepperi-addons/ngx-lib/rich-html-textarea', '@pepperi-addons/ngx-lib/select', '@pepperi-addons/ngx-lib/separator', '@pepperi-addons/ngx-lib/signature', '@pepperi-addons/ngx-lib/textarea', '@pepperi-addons/ngx-lib/textbox', '@pepperi-addons/ngx-lib/field-title', '@pepperi-addons/ngx-lib/group-buttons', '@ngx-translate/core', 'rxjs', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['pepperi-addons'] = global['pepperi-addons'] || {}, global['pepperi-addons']['ngx-lib'] = global['pepperi-addons']['ngx-lib'] || {}, global['pepperi-addons']['ngx-lib'].form = {}), global.ng.core, global.ng.common, global.ng.forms, global.ng.material.core, global.ng.material.formField, global.ng.material.button, global.ng.material.gridList, global.ng.material.icon, global.ng.material.menu, global.ngxSignaturepad, global['pepperi-addons']['ngx-lib'], global['pepperi-addons']['ngx-lib'].icon, global['pepperi-addons']['ngx-lib'].dialog, global['pepperi-addons']['ngx-lib'].address, global['pepperi-addons']['ngx-lib'].attachment, global['pepperi-addons']['ngx-lib'].button, global['pepperi-addons']['ngx-lib'].checkbox, global['pepperi-addons']['ngx-lib'].date, global['pepperi-addons']['ngx-lib'].image, global['pepperi-addons']['ngx-lib']['images-filmstrip'], global['pepperi-addons']['ngx-lib']['quantity-selector'], global['pepperi-addons']['ngx-lib']['rich-html-textarea'], global['pepperi-addons']['ngx-lib'].select, global['pepperi-addons']['ngx-lib'].separator, global['pepperi-addons']['ngx-lib'].signature, global['pepperi-addons']['ngx-lib'].textarea, global['pepperi-addons']['ngx-lib'].textbox, global['pepperi-addons']['ngx-lib']['field-title'], global['pepperi-addons']['ngx-lib']['group-buttons'], global.translate, global.rxjs, global.rxjs.operators));
}(this, (function (exports, core, common, forms, core$2, formField, button$1, gridList, icon$1, menu, ngxSignaturepad, ngxLib, icon, dialog, address, attachment, button, checkbox, date, image, imagesFilmstrip, quantitySelector, richHtmlTextarea, select, separator, signature, textarea, textbox, fieldTitle, groupButtons, core$1, rxjs, operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var PepFormComponent = /** @class */ (function () {
        // eventServiceSub: Subscription;
        // public jsonLib = JSON;
        function PepFormComponent(dialogService, customizationService, layoutService, fb, differs, translate) {
            this.dialogService = dialogService;
            this.customizationService = customizationService;
            this.layoutService = layoutService;
            this.fb = fb;
            this.translate = translate;
            this.isReport = false;
            this.lockEvents = false;
            this.canEditObject = true;
            this._data = null;
            this.isActive = false;
            this.layoutType = 'card';
            // @Input() listType = '';
            this.objectId = '0';
            this.parentId = '0';
            this.searchCode = '0';
            this.showTitle = true;
            this.firstFieldAsLink = false;
            this.checkForChanges = null;
            this.valueChange = new core.EventEmitter();
            this.formValidationChange = new core.EventEmitter();
            this.childClick = new core.EventEmitter();
            this.childChange = new core.EventEmitter();
            this.fieldClick = new core.EventEmitter();
            this.isLocked = false;
            // payLoad = '';
            this.rows = [];
            this.fields = [];
            this.columns = 1;
            this.hasMenuFloatingOnOtherField = false;
            this.indicatorsDataField = null;
            this._shouldReloadForm = false;
            // store the initial value to compare with
            this.differ = differs.find({}).create();
        }
        Object.defineProperty(PepFormComponent.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (value) {
                var shouldReload = this.shouldReloadForm || !this._data;
                this._data = value;
                if (shouldReload) {
                    this._shouldReloadForm = false;
                    this.initForm();
                }
                else {
                    this.updateForm();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PepFormComponent.prototype, "shouldReloadForm", {
            get: function () {
                return this._shouldReloadForm;
            },
            enumerable: false,
            configurable: true
        });
        PepFormComponent.prototype.convertXAlignToHorizontalAlign = function (xAlign) {
            var res = ngxLib.DEFAULT_HORIZONTAL_ALIGNMENT;
            if (xAlign === ngxLib.X_ALIGNMENT_TYPE.None ||
                xAlign === ngxLib.X_ALIGNMENT_TYPE.Left) {
                res = 'left';
            }
            else if (xAlign === ngxLib.X_ALIGNMENT_TYPE.Right) {
                res = 'right';
            }
            else {
                res = 'center';
            }
            return res;
        };
        PepFormComponent.prototype.convertYAlignToVerticalAlign = function (yAlign) {
            var res = ngxLib.DEFAULT_VERTICAL_ALIGNMENT;
            if (yAlign === ngxLib.Y_ALIGNMENT_TYPE.None ||
                yAlign === ngxLib.Y_ALIGNMENT_TYPE.Top) {
                res = 'top';
            }
            else if (yAlign === ngxLib.Y_ALIGNMENT_TYPE.Bottom) {
                res = 'bottom';
            }
            else {
                res = 'middle';
            }
            return res;
        };
        PepFormComponent.prototype.convertOptionalValues = function (optionalValues) {
            if (optionalValues && optionalValues.length > 0) {
                return optionalValues.map(function (ov) {
                    return { key: ov.Key, value: ov.Value };
                });
            }
            else {
                return [];
            }
        };
        PepFormComponent.prototype.convertAddressFields = function (controlField, addressFields, canEditObject) {
            var _this = this;
            var fields = [];
            addressFields.forEach(function (field) {
                var customField;
                var placeholder = field.ApiName;
                if (field.ApiName.toLowerCase().indexOf('street') >= 0) {
                    customField = new ngxLib.PepTextboxField({
                        key: field.ApiName,
                        label: field.ApiName,
                        type: 'text',
                        placeholder: placeholder,
                        readonly: !canEditObject,
                        disabled: !field.Enabled || !canEditObject,
                        hidden: false,
                        mandatory: false,
                        value: field.Value,
                        formattedValue: field.FormattedValue,
                        row: 0,
                        rowSpan: 1,
                        col: 0,
                        colSpan: 2,
                        xAlignment: _this.convertXAlignToHorizontalAlign(controlField.Layout.XAlignment),
                        yAlignment: _this.convertYAlignToVerticalAlign(controlField.Layout.YAlignment),
                        order: 0,
                    });
                }
                else if (field.ApiName.toLowerCase().indexOf('city') >= 0) {
                    customField = new ngxLib.PepTextboxField({
                        key: field.ApiName,
                        label: field.ApiName,
                        type: 'text',
                        placeholder: placeholder,
                        readonly: !canEditObject,
                        disabled: !field.Enabled || !canEditObject,
                        hidden: false,
                        mandatory: false,
                        value: field.Value,
                        formattedValue: field.FormattedValue,
                        row: 0,
                        rowSpan: 1,
                        col: 2,
                        colSpan: 1,
                        xAlignment: _this.convertXAlignToHorizontalAlign(controlField.Layout.XAlignment),
                        yAlignment: _this.convertYAlignToVerticalAlign(controlField.Layout.YAlignment),
                        order: 1,
                    });
                }
                else if (field.ApiName.toLowerCase().indexOf('state') >= 0) {
                    customField = new ngxLib.PepSelectField({
                        key: field.ApiName,
                        label: field.ApiName,
                        placeholder: placeholder,
                        options: _this.convertOptionalValues(field.OptionalValues),
                        readonly: !canEditObject,
                        disabled: !field.Enabled || !canEditObject,
                        hidden: false,
                        mandatory: false,
                        value: field.Value,
                        formattedValue: field.FormattedValue,
                        row: 1,
                        rowSpan: 1,
                        col: 0,
                        colSpan: 1,
                        xAlignment: _this.convertXAlignToHorizontalAlign(controlField.Layout.XAlignment),
                        yAlignment: _this.convertYAlignToVerticalAlign(controlField.Layout.YAlignment),
                        order: 2,
                    });
                }
                else if (field.ApiName.toLowerCase().indexOf('zipcode') >= 0) {
                    customField = new ngxLib.PepTextboxField({
                        key: field.ApiName,
                        label: field.ApiName,
                        type: 'text',
                        placeholder: placeholder,
                        readonly: !canEditObject,
                        disabled: !field.Enabled || !canEditObject,
                        hidden: false,
                        mandatory: false,
                        value: field.Value,
                        formattedValue: field.FormattedValue,
                        row: 1,
                        rowSpan: 1,
                        col: 1,
                        colSpan: 1,
                        xAlignment: _this.convertXAlignToHorizontalAlign(controlField.Layout.XAlignment),
                        yAlignment: _this.convertYAlignToVerticalAlign(controlField.Layout.YAlignment),
                        order: 3,
                    });
                }
                else if (field.ApiName.toLowerCase().indexOf('country') >= 0) {
                    customField = new ngxLib.PepSelectField({
                        key: field.ApiName,
                        label: field.ApiName,
                        placeholder: placeholder,
                        options: _this.convertOptionalValues(field.OptionalValues),
                        readonly: !canEditObject,
                        disabled: !field.Enabled || !canEditObject,
                        hidden: false,
                        mandatory: false,
                        value: field.Value,
                        formattedValue: field.FormattedValue,
                        row: 2,
                        rowSpan: 1,
                        col: 2,
                        colSpan: 1,
                        xAlignment: _this.convertXAlignToHorizontalAlign(controlField.Layout.XAlignment),
                        yAlignment: _this.convertYAlignToVerticalAlign(controlField.Layout.YAlignment),
                        order: 4,
                    });
                }
                fields.push(customField);
            });
            return fields.sort(function (n1, n2) { return n1.order > n2.order ? 1 : n1.order < n2.order ? -1 : 0; });
        };
        PepFormComponent.prototype.isMatrixField = function (apiNameToCheck) {
            return apiNameToCheck.indexOf('Matrix') >= 0;
        };
        PepFormComponent.prototype.doesFieldHavaFloatingField = function (controlField, floatingField) {
            var hasFloatingField = false;
            if (floatingField.Layout.Y >= controlField.Layout.Y &&
                floatingField.Layout.Y <
                    controlField.Layout.Y + controlField.Layout.Height &&
                floatingField.Layout.X >= controlField.Layout.X &&
                floatingField.Layout.X <
                    controlField.Layout.X + controlField.Layout.Width) {
                hasFloatingField = true;
            }
            return hasFloatingField;
        };
        PepFormComponent.prototype.getOptionsForCustomField = function (controlField, dataField, canEditObject) {
            if (!controlField || !dataField) {
                return;
            }
            var placeholder = controlField.ReadOnly || !canEditObject ? '' : controlField.Title;
            return {
                key: controlField.ApiName,
                label: controlField.Title,
                accessory: dataField.Accessory,
                placeholder: placeholder,
                readonly: controlField.ReadOnly || !canEditObject,
                disabled: !dataField.Enabled || !canEditObject,
                hidden: controlField.Hidden,
                mandatory: controlField.Mandatory,
                value: dataField.Value,
                formattedValue: dataField.FormattedValue,
                additionalValue: dataField.AdditionalValue,
                row: controlField.Layout.Y,
                rowSpan: controlField.Layout.Height,
                col: controlField.Layout.X,
                colSpan: controlField.Layout.Width,
                xAlignment: this.convertXAlignToHorizontalAlign(controlField.Layout.XAlignment),
                yAlignment: this.convertYAlignToVerticalAlign(controlField.Layout.YAlignment),
                options: this.convertOptionalValues(dataField.OptionalValues),
                groupFields: undefined,
                maxFieldCharacters: controlField.MaxFieldCharacters,
                minValue: controlField.MinValue,
                maxValue: controlField.MaxValue,
                // hasMenu: hasMenu,
                // hasCampaign: hasCampaign,
                // hasIndicators: hasIndicators,
                textColor: dataField.TextColor,
                visible: dataField.Visible,
            };
        };
        PepFormComponent.prototype.convertToCustomField = function (controlField, dataField, canEditObject, menuField, hasCampaignField, indicatorsField, objectId, parentId, searchCode) {
            var customField;
            var options = this.getOptionsForCustomField(controlField, dataField, canEditObject);
            if (controlField.ApiName === 'ObjectMenu') {
                options.type = 'menu';
                customField = new ngxLib.PepInternalMenuField(options);
            }
            else if (controlField.FieldType === ngxLib.FIELD_TYPE.NumberRealQuantitySelector ||
                controlField.FieldType ===
                    ngxLib.FIELD_TYPE.NumberIntegerQuantitySelector ||
                controlField.ApiName === 'QuantitySelector' ||
                controlField.ApiName === 'UnitsQuantity' ||
                controlField.ApiName.indexOf('size_') === 0) {
                if (dataField.FieldType === ngxLib.FIELD_TYPE.InternalLink) {
                    options.type = 'button';
                }
                else if (dataField.FieldType === ngxLib.FIELD_TYPE.Package) {
                    options.type = 'packageButton';
                }
                else if (dataField.FieldType === ngxLib.FIELD_TYPE.NumberRealQuantitySelector ||
                    dataField.FieldType === ngxLib.FIELD_TYPE.NumberReal) {
                    options.type = 'qs';
                    options.allowDecimal = true;
                }
                else if (dataField.FieldType ===
                    ngxLib.FIELD_TYPE.NumberIntegerQuantitySelector ||
                    dataField.FieldType === ngxLib.FIELD_TYPE.NumberInteger) {
                    options.type = 'qs';
                    options.allowDecimal = false;
                }
                else if (dataField.FieldType === ngxLib.FIELD_TYPE.NumberIntegerForMatrix) {
                    options.type = 'qsForMatrix';
                    options.allowDecimal = false;
                }
                else if (dataField.FieldType === ngxLib.FIELD_TYPE.NumberRealForMatrix) {
                    options.type = 'qsForMatrix';
                    options.allowDecimal = true;
                }
                options.notificationInfo = dataField.NotificationInfo;
                customField = new ngxLib.PepQuantitySelectorField(options);
            }
            else {
                // HACK: need to remove this..
                if (dataField.FieldType === ngxLib.FIELD_TYPE.Indicators &&
                    this.isMatrixField(dataField.ApiName)) {
                    dataField.FieldType = ngxLib.FIELD_TYPE.InternalPage;
                }
                switch (dataField.FieldType) {
                    case ngxLib.FIELD_TYPE.Address: {
                        var canEditGroupObject = controlField.ReadOnly
                            ? false
                            : canEditObject;
                        options.groupFields = this.convertAddressFields(controlField, dataField.GroupFields, canEditGroupObject);
                        customField = new ngxLib.PepAddressField(options);
                        break;
                    }
                    case ngxLib.FIELD_TYPE.Indicators: {
                        // options['type'] = 'indicators'; // Not needed this is PepIndicatorsField.
                        customField = new ngxLib.PepIndicatorsField(options);
                        break;
                    }
                    case ngxLib.FIELD_TYPE.InternalPage: {
                        if (this.isMatrixField(controlField.ApiName)) {
                            options.rowSpan = controlField.Layout.Height;
                            options.objectId = objectId;
                            options.parentId = parentId;
                            options.searchCode = searchCode;
                            customField = new ngxLib.PepInternalPageField(options);
                        }
                        else {
                            // Not supported
                        }
                        break;
                    }
                    case ngxLib.FIELD_TYPE.Link: {
                        options.type = 'link';
                        customField = new ngxLib.PepTextboxField(options);
                        break;
                    }
                    case ngxLib.FIELD_TYPE.InternalLink:
                    case ngxLib.FIELD_TYPE.Button: {
                        options.type = 'button';
                        customField = new ngxLib.PepInternalButtonField(options);
                        break;
                    }
                    case ngxLib.FIELD_TYPE.Attachment: {
                        // options.type = 'attachment';
                        customField = new ngxLib.PepAttachmentField(options);
                        break;
                    }
                    case ngxLib.FIELD_TYPE.Signature: {
                        // options.type = 'signature';
                        customField = new ngxLib.PepSignatureField(options);
                        break;
                    }
                    case ngxLib.FIELD_TYPE.Image:
                    case ngxLib.FIELD_TYPE.ImageURL: {
                        // options.type = 'image';
                        options.menuField =
                            menuField &&
                                this.doesFieldHavaFloatingField(controlField, menuField)
                                ? menuField
                                : null;
                        options.hasCampaignField =
                            hasCampaignField &&
                                this.doesFieldHavaFloatingField(controlField, hasCampaignField)
                                ? hasCampaignField
                                : null;
                        options.indicatorsField =
                            indicatorsField &&
                                this.doesFieldHavaFloatingField(controlField, indicatorsField)
                                ? indicatorsField
                                : null;
                        customField = new ngxLib.PepImageField(options);
                        break;
                    }
                    case ngxLib.FIELD_TYPE.Images: {
                        // options.type = 'images';
                        customField = new ngxLib.PepImagesField(options);
                        break;
                    }
                    case ngxLib.FIELD_TYPE.Email: {
                        options.type = 'email';
                        customField = new ngxLib.PepTextboxField(options);
                        break;
                    }
                    case ngxLib.FIELD_TYPE.Phone: {
                        options.type = 'phone';
                        customField = new ngxLib.PepTextboxField(options);
                        break;
                    }
                    case ngxLib.FIELD_TYPE.Duration: {
                        options.type = 'duration';
                        customField = new ngxLib.PepTextboxField(options);
                        break;
                    }
                    case ngxLib.FIELD_TYPE.Default:
                    case ngxLib.FIELD_TYPE.TextBox:
                    case ngxLib.FIELD_TYPE.LimitedLengthTextBox:
                    case ngxLib.FIELD_TYPE.TextHeader:
                    case ngxLib.FIELD_TYPE.CalculatedString:
                    case ngxLib.FIELD_TYPE.MapDataString: {
                        customField = new ngxLib.PepTextboxField(options);
                        break;
                    }
                    case ngxLib.FIELD_TYPE.TextArea: {
                        customField = new ngxLib.PepTextareaField(options);
                        break;
                    }
                    case ngxLib.FIELD_TYPE.RichTextHTML: {
                        customField = new ngxLib.PepRichHtmlTextareaField(options);
                        break;
                    }
                    case ngxLib.FIELD_TYPE.Date:
                    case ngxLib.FIELD_TYPE.LimitedDate:
                    case ngxLib.FIELD_TYPE.CalculatedDate:
                    case ngxLib.FIELD_TYPE.DateAndTime: {
                        options.type =
                            dataField.FieldType === ngxLib.FIELD_TYPE.DateAndTime
                                ? 'datetime'
                                : 'date';
                        customField = new ngxLib.PepDateField(options);
                        break;
                    }
                    case ngxLib.FIELD_TYPE.NumberInteger:
                    case ngxLib.FIELD_TYPE.CalculatedInt:
                    case ngxLib.FIELD_TYPE.MapDataInt: {
                        options.type = 'int';
                        customField = new ngxLib.PepTextboxField(options);
                        break;
                    }
                    case ngxLib.FIELD_TYPE.Percentage: {
                        options.type = 'percentage';
                        customField = new ngxLib.PepTextboxField(options);
                        break;
                    }
                    case ngxLib.FIELD_TYPE.Currency: {
                        options.type = 'currency';
                        customField = new ngxLib.PepTextboxField(options);
                        break;
                    }
                    case ngxLib.FIELD_TYPE.NumberReal:
                    case ngxLib.FIELD_TYPE.CalculatedReal:
                    case ngxLib.FIELD_TYPE.MapDataReal:
                    case ngxLib.FIELD_TYPE.Sum:
                    case ngxLib.FIELD_TYPE.Totals: {
                        options.type = 'real';
                        customField = new ngxLib.PepTextboxField(options);
                        break;
                    }
                    case ngxLib.FIELD_TYPE.Boolean:
                    case ngxLib.FIELD_TYPE.CalculatedBool: {
                        customField = new ngxLib.PepCheckboxField(options);
                        break;
                    }
                    case ngxLib.FIELD_TYPE.BooleanText: {
                        options.type = 'booleanText';
                        customField = new ngxLib.PepCheckboxField(options);
                        break;
                    }
                    case ngxLib.FIELD_TYPE.ComboBox:
                    case ngxLib.FIELD_TYPE.EmptyComboBox:
                    case ngxLib.FIELD_TYPE.MapDataDropDown: {
                        // options.type = 'select';
                        customField = new ngxLib.PepSelectField(options);
                        break;
                    }
                    case ngxLib.FIELD_TYPE.MultiTickBox:
                    case ngxLib.FIELD_TYPE.MultiTickBoxToComboBox:
                    case ngxLib.FIELD_TYPE.EmptyMultiTickBox: {
                        options.type = 'multi';
                        customField = new ngxLib.PepSelectField(options);
                        break;
                    }
                    case ngxLib.FIELD_TYPE.GuidReferenceType: {
                        options.type = 'reference';
                        options.referenceObjectType = dataField.ReferenceObjectType;
                        options.referenceObjectSubType =
                            dataField.ReferenceObjectSubType;
                        options.referenceObjectInternalType =
                            dataField.ReferenceObjectInternalType;
                        customField = new ngxLib.PepInternalButtonField(options);
                        break;
                    }
                    case ngxLib.FIELD_TYPE.ListOfObjects: {
                        options.type = 'listofobjects';
                        customField = new ngxLib.PepInternalButtonField(options);
                        break;
                    }
                    case ngxLib.FIELD_TYPE.Separator: {
                        customField = new ngxLib.PepSeparatorField(options);
                        break;
                    }
                    /*
                        case FIELD_TYPE.Images: return that.field(value);
                    */
                    case ngxLib.FIELD_TYPE.NumberRealQuantitySelector:
                    case ngxLib.FIELD_TYPE.NumberIntegerQuantitySelector: {
                        options.type = 'qs';
                        options.allowDecimal =
                            dataField.FieldType ===
                                ngxLib.FIELD_TYPE.NumberRealQuantitySelector;
                        options.notificationInfo = dataField.NotificationInfo;
                        customField = new ngxLib.PepQuantitySelectorField(options);
                        break;
                    }
                    case ngxLib.FIELD_TYPE.Package: {
                        options.type = 'packageButton';
                        options.notificationInfo = dataField.NotificationInfo;
                        customField = new ngxLib.PepQuantitySelectorField(options);
                        break;
                    }
                }
            }
            if (!customField) {
                options.label = controlField.ApiName + ' is not supported!!!';
                customField = new ngxLib.PepSeparatorField(options);
            }
            return customField;
        };
        PepFormComponent.prototype.getFieldFormattedValue = function (field) {
            var fieldFormattedValue = field.formattedValue;
            // Fix for the custom check box component.
            if (field.controlType === 'checkbox') {
                fieldFormattedValue = fieldFormattedValue === 'true';
            }
            // Fix for the custom button component.
            if (field.controlType === 'button') {
                fieldFormattedValue =
                    fieldFormattedValue === '0' ? '' : fieldFormattedValue;
            }
            return fieldFormattedValue;
        };
        PepFormComponent.prototype.toControlGroup = function (fields) {
            var _this = this;
            var group = {};
            if (fields && fields.length > 0) {
                fields.forEach(function (field) {
                    if (field.groupFields && field.groupFields.length > 0) {
                        var subGroup_1 = {};
                        field.groupFields.forEach(function (groupField) {
                            if (groupField.mandatory &&
                                !field.readonly &&
                                !field.disabled) {
                                subGroup_1[groupField.key] = [
                                    {
                                        value: groupField.formattedValue || '',
                                        disabled: field.readonly ||
                                            field.disabled ||
                                            groupField.disabled,
                                    },
                                    [forms.Validators.required],
                                ];
                            }
                            else {
                                subGroup_1[groupField.key] = [
                                    {
                                        value: groupField.formattedValue || '',
                                        disabled: field.readonly ||
                                            field.disabled ||
                                            groupField.disabled,
                                    },
                                    [forms.Validators.nullValidator],
                                ];
                            }
                        });
                        group[field.key] = _this.fb.group(subGroup_1);
                    }
                    else {
                        var validators = field.getValidators();
                        var fieldFormattedValue = _this.getFieldFormattedValue(field);
                        group[field.key] = [
                            {
                                value: fieldFormattedValue || '',
                                disabled: field.disabled,
                            },
                            validators,
                        ];
                    }
                });
            }
            return this.fb.group(group);
        };
        PepFormComponent.prototype.showFormValidationMessage = function () {
            var e_1, _b;
            var fields = this.fields;
            var emptyMandatoryFieldsMsg = '';
            var notValidFieldsMsg = '';
            try {
                // for (let i: number = 0; i < fields.length; i++) {
                //     let field = fields[i];
                for (var fields_1 = __values(fields), fields_1_1 = fields_1.next(); !fields_1_1.done; fields_1_1 = fields_1.next()) {
                    var field = fields_1_1.value;
                    var formControl = this.form && this.form.get(field.key);
                    if (formControl) {
                        // Mandatory is empty.
                        if (field.mandatory &&
                            formControl.value.toString().trim().length === 0) {
                            emptyMandatoryFieldsMsg +=
                                '<li><small>' + field.label + '</small></li>';
                        }
                        else if (!field.disabled && !formControl.valid) {
                            notValidFieldsMsg +=
                                '<li><small>' + field.label + '</small></li>';
                        }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (fields_1_1 && !fields_1_1.done && (_b = fields_1.return)) _b.call(fields_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            // Add the header message of the empty mandatory fields
            if (emptyMandatoryFieldsMsg.length > 0) {
                emptyMandatoryFieldsMsg =
                    '<div>' +
                        this.translate.instant('MESSAGES.ERROR_MANDATORY_FIELDS') +
                        "</div><ul style='padding: 0 20px;'>" +
                        emptyMandatoryFieldsMsg +
                        '</ul><br/>';
            }
            // Add the header message of the empty mandatory fields
            if (notValidFieldsMsg.length > 0) {
                notValidFieldsMsg =
                    '<div>' +
                        this.translate.instant('MESSAGES.ERROR_INVALID_FIELDS') +
                        "</div><ul style='padding: 0 20px;'>" +
                        notValidFieldsMsg +
                        '</ul>';
            }
            var title = this.translate.instant('MESSAGES.TITLE_NOTICE');
            var data = new dialog.PepDialogData({
                title: title,
                content: emptyMandatoryFieldsMsg + notValidFieldsMsg,
            });
            this.dialogService.openDefaultDialog(data);
        };
        PepFormComponent.prototype.ngOnInit = function () {
            var themeVars = this.customizationService.getThemeVariables();
            // convert rem to pixel
            var RemToPixel = 16;
            this.formGutterSize =
                this.customizationService.getNumberThemeVariable(themeVars, ngxLib.PepCustomizationService.FORM_SPACEING_KEY) * RemToPixel;
            this.cardGutterSize =
                this.customizationService.getNumberThemeVariable(themeVars, ngxLib.PepCustomizationService.CARD_SPACEING_KEY) * RemToPixel;
        };
        PepFormComponent.prototype.ngDoCheck = function () {
            var changes = this.differ.diff(this.data); // check for changes
            if (changes) {
                this.updateForm();
                this.checkForChanges = new Date();
            }
        };
        PepFormComponent.prototype.ngOnChanges = function (changes) {
            // if (changes.data && changes.data.currentValue) {
            //     // Load changes
            //     if (!this.shouldReloadForm && changes.data.previousValue) {
            //         this.data = changes.data.currentValue;
            //         this.updateForm();
            //     } else {
            //         this._shouldReloadForm = false;
            //         this.initForm();
            //     }
            // }
            // if (this.shouldReloadForm || !changes?.data?.previousValue) {
            //     this._shouldReloadForm = false;
            //     this.initForm();
            //     this.checkForChanges = new Date();
            // }
        };
        PepFormComponent.prototype.ngOnDestroy = function () {
            // if (this.valueChange) {
            //     this.valueChange.unsubscribe();
            // }
            // if (this.formValidationChange) {
            //     this.formValidationChange.unsubscribe();
            // }
            // if (this.childClick) {
            //     this.childClick.unsubscribe();
            // }
            // if (this.childChange) {
            //     this.childChange.unsubscribe();
            // }
            // if (this.fieldClick) {
            //     this.fieldClick.unsubscribe();
            // }
        };
        PepFormComponent.prototype.getUiControlFields = function () {
            return this.layout ? this.layout.ControlFields : [];
        };
        PepFormComponent.prototype.initFieldsStructure = function (fields, maxRow) {
            var e_2, _b, e_3, _c;
            var themeVars = this.customizationService.getThemeVariables();
            // Set form row height.
            if (this.layoutType === 'card') {
                var cardFieldHeight = this.customizationService.getNumberThemeVariable(themeVars, ngxLib.PepCustomizationService.CARD_FIELD_HEIGHT_KEY);
                this.rowHeight = cardFieldHeight;
            }
            else {
                var rowFieldHeight = this.customizationService.getNumberThemeVariable(themeVars, ngxLib.PepCustomizationService.FORM_FIELD_HEIGHT_KEY);
                var rowFieldTitleHeight = this.customizationService.getNumberThemeVariable(themeVars, ngxLib.PepCustomizationService.FORM_FIELD_TITLE_HEIGHT_KEY);
                this.rowHeight = rowFieldHeight + rowFieldTitleHeight;
            }
            // Create the fields structure (the fields must be sorted!!!).
            if (fields.length > 0) {
                // Init the layout.
                if (
                // this.layoutType === 'form' ||
                this.layoutType === 'table') {
                    this.fields = fields;
                    this.rows = [];
                    for (var i = 0; i <= maxRow; i++) {
                        this.rows[i] = [];
                    }
                    try {
                        // for (let i = 0; i < fields.length; i++) {
                        // const field = fields[i]
                        for (var fields_2 = __values(fields), fields_2_1 = fields_2.next(); !fields_2_1.done; fields_2_1 = fields_2.next()) {
                            var field = fields_2_1.value;
                            this.rows[field.row].push(field);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (fields_2_1 && !fields_2_1.done && (_b = fields_2.return)) _b.call(fields_2);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
                else {
                    var doesfieldExistIn = new Array(maxRow);
                    for (var i = 0; i < doesfieldExistIn.length; i++) {
                        doesfieldExistIn[i] = new Array(this.columns);
                        for (var j = 0; j < doesfieldExistIn[i].length; j++) {
                            doesfieldExistIn[i][j] = false;
                        }
                    }
                    try {
                        // Run in squere (row - colspan, col - rowspan) and put true where it should.
                        // for (let index = 0; index < fields.length; index++) {
                        //     const currentField = fields[index];
                        for (var fields_3 = __values(fields), fields_3_1 = fields_3.next(); !fields_3_1.done; fields_3_1 = fields_3.next()) {
                            var currentField = fields_3_1.value;
                            if (currentField.rowSpan > 1) {
                                for (var row = currentField.row; row < currentField.row + currentField.rowSpan; row++) {
                                    if (currentField.colSpan > 1) {
                                        for (var col = currentField.col; col <
                                            currentField.col + currentField.colSpan; col++) {
                                            if (doesfieldExistIn.length > row &&
                                                doesfieldExistIn[0].length > col) {
                                                doesfieldExistIn[row][col] = true;
                                            }
                                        }
                                    }
                                    else {
                                        if (doesfieldExistIn.length > row &&
                                            doesfieldExistIn[0].length >
                                                currentField.col) {
                                            doesfieldExistIn[row][currentField.col] = true;
                                        }
                                    }
                                }
                            }
                            else if (currentField.colSpan > 1) {
                                for (var col = currentField.col; col < currentField.col + currentField.colSpan; col++) {
                                    if (doesfieldExistIn.length > currentField.row &&
                                        doesfieldExistIn[0].length > col) {
                                        doesfieldExistIn[currentField.row][col] = true;
                                    }
                                }
                            }
                            else {
                                if (doesfieldExistIn.length > currentField.row &&
                                    doesfieldExistIn[0].length > currentField.col) {
                                    doesfieldExistIn[currentField.row][currentField.col] = true;
                                }
                            }
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (fields_3_1 && !fields_3_1.done && (_c = fields_3.return)) _c.call(fields_3);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                    // Create empty fields where doesfieldExistIn is false (For the md-grid-list UI Component).
                    for (var i = 0; i < doesfieldExistIn.length; i++) {
                        for (var j = 0; j < doesfieldExistIn[i].length; j++) {
                            if (!doesfieldExistIn[i][j]) {
                                // Create empty field and add it to the fields list.
                                fields.push(new ngxLib.PepPlaceholderField({
                                    key: i + '_' + j,
                                    label: '',
                                    placeholder: '',
                                    readonly: false,
                                    disabled: false,
                                    hidden: false,
                                    mandatory: false,
                                    value: '',
                                    formattedValue: '',
                                    row: i,
                                    rowSpan: 1,
                                    col: j,
                                    colSpan: 1,
                                    order: 1,
                                }));
                            }
                        }
                    }
                    // Sort the fields again.
                    this.fields = fields.sort(function (f1, f2) { return f1.row > f2.row
                        ? 1
                        : f1.row < f2.row
                            ? -1
                            : f1.col > f2.col
                                ? 1
                                : f1.col < f2.col
                                    ? -1
                                    : 0; });
                }
            }
        };
        PepFormComponent.prototype.setForm = function (isForUpdate) {
            var e_4, _b, e_5, _c, e_6, _d;
            if (isForUpdate === void 0) { isForUpdate = false; }
            var _a;
            var allFieldsAreReadOnly = true;
            if (!isForUpdate) {
                var fields = [];
                try {
                    for (var _e = __values(this.fields), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var currentField = _f.value;
                        // Add all fields except 'internalPage' type (for children).
                        if (currentField.controlType !== 'internalPage') {
                            fields.push(currentField);
                        }
                        if (!currentField.readonly) {
                            allFieldsAreReadOnly = false;
                        }
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
                this.form = this.toControlGroup(fields);
            }
            else {
                try {
                    // Update form values if changed by calculated fields.
                    for (var _g = __values(this.fields), _h = _g.next(); !_h.done; _h = _g.next()) {
                        var currentField = _h.value;
                        if (currentField.controlType !== 'internalPage') {
                            if (currentField.groupFields &&
                                currentField.groupFields.length > 0) {
                                try {
                                    // for (let j = 0; j < currentField.groupFields.length; j++) {
                                    //     let currentGroupField = currentField.groupFields[j];
                                    for (var _j = (e_6 = void 0, __values(currentField.groupFields)), _k = _j.next(); !_k.done; _k = _j.next()) {
                                        var currentGroupField = _k.value;
                                        var fieldFormattedValue = this.getFieldFormattedValue(currentGroupField);
                                        this.customizationService.updateFormField(this.form, currentGroupField, fieldFormattedValue, currentField);
                                    }
                                }
                                catch (e_6_1) { e_6 = { error: e_6_1 }; }
                                finally {
                                    try {
                                        if (_k && !_k.done && (_d = _j.return)) _d.call(_j);
                                    }
                                    finally { if (e_6) throw e_6.error; }
                                }
                            }
                            else {
                                var fieldFormattedValue = this.getFieldFormattedValue(currentField);
                                // this.form.controls[currentField.key].setValue(fieldFormattedValue);
                                this.customizationService.updateFormField(this.form, currentField, fieldFormattedValue);
                            }
                        }
                        if (!currentField.readonly) {
                            allFieldsAreReadOnly = false;
                        }
                    }
                }
                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                finally {
                    try {
                        if (_h && !_h.done && (_c = _g.return)) _c.call(_g);
                    }
                    finally { if (e_5) throw e_5.error; }
                }
            }
            var isFormValid = (_a = this.form) === null || _a === void 0 ? void 0 : _a.valid;
            // Change validation to true if all fields are read only.
            if (!isFormValid && allFieldsAreReadOnly) {
                isFormValid = true;
            }
            this.onFormValidationChanged(isFormValid);
            // Set it to false to enable all fields.
            this.isLocked = false;
        };
        PepFormComponent.prototype.initForm = function () {
            if (this.data && this.data.Fields) {
                var fields = this.convertCustomFields(this.getUiControlFields(), this.data.Fields);
                var maxRow = Math.max.apply(Math, __spreadArray([], __read(fields.map(function (f) {
                    return f.row + f.rowSpan;
                }))));
                this.columns = Math.max.apply(Math, __spreadArray([], __read(fields.map(function (f) {
                    return f.col + f.colSpan;
                }))));
                this.initFieldsStructure(fields, maxRow);
                this.setForm();
            }
        };
        PepFormComponent.prototype.updateField = function (customField, updatedField) {
            var options = {
                disabled: !updatedField.Enabled || !this.canEditObject,
                readonly: !updatedField.Enabled || !this.canEditObject,
                visible: updatedField.Visible,
                value: updatedField.Value,
                additionalValue: updatedField.AdditionalValue,
                formattedValue: updatedField.FormattedValue,
                textColor: updatedField.TextColor,
            };
            if (customField instanceof ngxLib.PepQuantitySelectorField) {
                var notificationInfo = updatedField.NotificationInfo;
                options.notificationInfo = notificationInfo;
            }
            else if (customField instanceof ngxLib.PepSelectField) {
                options.options = this.convertOptionalValues(updatedField.OptionalValues);
                if (!options.options || options.options.length === 0) {
                    options.options.push({
                        key: options.value,
                        value: options.formattedValue,
                    });
                }
            }
            customField.update(options);
        };
        PepFormComponent.prototype.updateForm = function () {
            var e_7, _b;
            if (this.data && this.data.Fields) {
                var _loop_1 = function (currentField) {
                    var e_8, _e;
                    var customField = this_1.fields.filter(function (f) { return f.key === currentField.ApiName; })[0];
                    // Update all fields except 'internalPage' type (for children).
                    if (customField && customField.controlType !== 'internalPage') {
                        this_1.updateField(customField, currentField);
                        // Update the group fields.
                        if (customField.controlType === 'address' &&
                            currentField.GroupFields) {
                            var _loop_2 = function (currentGroupField) {
                                currentGroupField.Enabled = !currentField.Enabled
                                    ? false
                                    : currentGroupField.Enabled;
                                var customGroupField = customField.groupFields.filter(function (f) { return f.key === currentGroupField.ApiName; })[0];
                                this_1.updateField(customGroupField, currentGroupField);
                            };
                            try {
                                // for (let j = 0; j < currentField.GroupFields.length; j++) {
                                // let currentGroupField = currentField.GroupFields[j];
                                for (var _f = (e_8 = void 0, __values(currentField.GroupFields)), _g = _f.next(); !_g.done; _g = _f.next()) {
                                    var currentGroupField = _g.value;
                                    _loop_2(currentGroupField);
                                }
                            }
                            catch (e_8_1) { e_8 = { error: e_8_1 }; }
                            finally {
                                try {
                                    if (_g && !_g.done && (_e = _f.return)) _e.call(_f);
                                }
                                finally { if (e_8) throw e_8.error; }
                            }
                        }
                    }
                };
                var this_1 = this;
                try {
                    for (var _c = __values(this.data.Fields), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var currentField = _d.value;
                        _loop_1(currentField);
                    }
                }
                catch (e_7_1) { e_7 = { error: e_7_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                    }
                    finally { if (e_7) throw e_7.error; }
                }
                this.setForm(true);
            }
        };
        PepFormComponent.prototype.ReloadForm = function () {
            this._shouldReloadForm = true;
        };
        // onSubmit() {
        //     if (this.form.valid) {
        //         this.payLoad = JSON.stringify(this.form.value);
        //         //this.submitted.emit(this.form.value);
        //     }
        // }
        PepFormComponent.prototype.getFormControlById = function (key) {
            var _this = this;
            var formControl = null;
            this.fields.forEach(function (field) {
                if (field.key === key) {
                    formControl = _this.form.get(field.key);
                    return;
                }
                else if (field.groupFields && field.groupFields.length > 0) {
                    field.groupFields.forEach(function (groupField) {
                        if (groupField.key === key) {
                            formControl = _this.form.get(field.key + '.' + groupField.key);
                            return;
                        }
                    });
                }
            });
            return formControl;
        };
        PepFormComponent.prototype.setSpecialFields = function (controlFields, dataFields) {
            var e_9, _b, e_10, _c, e_11, _d;
            try {
                // let cf;
                // for (let index = 0; index < controlFields.length; index++) {
                //     cf = controlFields[index];
                for (var controlFields_1 = __values(controlFields), controlFields_1_1 = controlFields_1.next(); !controlFields_1_1.done; controlFields_1_1 = controlFields_1.next()) {
                    var cf = controlFields_1_1.value;
                    if (cf.ApiName === 'ObjectMenu') {
                        this.menuField = cf;
                    }
                    else if (cf.ApiName === 'ItemHasActiveCampaign') {
                        this.hasCampaignField = cf;
                    }
                    else if (cf.ApiName === 'ItemIndicatorsWithoutCampaign') {
                        this.indicatorsField = cf;
                    }
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (controlFields_1_1 && !controlFields_1_1.done && (_b = controlFields_1.return)) _b.call(controlFields_1);
                }
                finally { if (e_9) throw e_9.error; }
            }
            try {
                // let df;
                // for (let index = 0; index < dataFields.length; index++) {
                //     df = dataFields[index];
                for (var dataFields_1 = __values(dataFields), dataFields_1_1 = dataFields_1.next(); !dataFields_1_1.done; dataFields_1_1 = dataFields_1.next()) {
                    var df = dataFields_1_1.value;
                    if (df.ApiName === 'ObjectMenu') {
                        this.menuDataField = df;
                    }
                    else if (df.ApiName === 'ItemHasActiveCampaign') {
                        this.hasCampaignDataField = df;
                    }
                    else if (df.ApiName === 'ItemIndicatorsWithoutCampaign') {
                        this.indicatorsDataField = df;
                    }
                }
            }
            catch (e_10_1) { e_10 = { error: e_10_1 }; }
            finally {
                try {
                    if (dataFields_1_1 && !dataFields_1_1.done && (_c = dataFields_1.return)) _c.call(dataFields_1);
                }
                finally { if (e_10) throw e_10.error; }
            }
            if (this.menuField && this.menuDataField) {
                this.menuDataField.Layout = this.menuField.Layout;
            }
            if (this.hasCampaignField && this.hasCampaignDataField) {
                this.hasCampaignDataField.Layout = this.hasCampaignField.Layout;
            }
            if (this.indicatorsField && this.indicatorsDataField) {
                this.indicatorsDataField.Layout = this.indicatorsField.Layout;
            }
            try {
                // Check if menu is floating on other field.
                // for (let index = 0; index < controlFields.length; index++) {
                //     cf = controlFields[index];
                for (var controlFields_2 = __values(controlFields), controlFields_2_1 = controlFields_2.next(); !controlFields_2_1.done; controlFields_2_1 = controlFields_2.next()) {
                    var cf = controlFields_2_1.value;
                    if (this.menuField && cf.ApiName !== 'ObjectMenu') {
                        this.hasMenuFloatingOnOtherField = this.doesFieldHavaFloatingField(cf, this.menuField);
                        if (this.hasMenuFloatingOnOtherField) {
                            break;
                        }
                    }
                }
            }
            catch (e_11_1) { e_11 = { error: e_11_1 }; }
            finally {
                try {
                    if (controlFields_2_1 && !controlFields_2_1.done && (_d = controlFields_2.return)) _d.call(controlFields_2);
                }
                finally { if (e_11) throw e_11.error; }
            }
        };
        PepFormComponent.prototype.convertCustomFields = function (controlFields, dataFields) {
            var _this = this;
            if (this.layoutType !== 'table') {
                this.setSpecialFields(controlFields, dataFields);
            }
            else {
                // HACK: convert to center alignment if table view & special fields)
                controlFields.forEach(function (field, index) {
                    if (field.ApiName === 'UnitsQuantity' ||
                        field.ApiName === 'QuantitySelector' ||
                        field.ApiName === 'ObjectMenu' ||
                        field.FieldType === ngxLib.FIELD_TYPE.Image ||
                        field.FieldType === ngxLib.FIELD_TYPE.ImageURL ||
                        field.FieldType === ngxLib.FIELD_TYPE.Indicators ||
                        field.FieldType === ngxLib.FIELD_TYPE.Boolean ||
                        field.FieldType === ngxLib.FIELD_TYPE.CalculatedBool ||
                        field.FieldType === ngxLib.FIELD_TYPE.Signature ||
                        field.FieldType ===
                            ngxLib.FIELD_TYPE.NumberIntegerQuantitySelector ||
                        field.FieldType === ngxLib.FIELD_TYPE.NumberRealQuantitySelector ||
                        field.FieldType === ngxLib.FIELD_TYPE.Package ||
                        field.FieldType === ngxLib.FIELD_TYPE.NumberIntegerForMatrix ||
                        field.FieldType === ngxLib.FIELD_TYPE.NumberRealForMatrix) {
                        field.Layout.XAlignment = ngxLib.X_ALIGNMENT_TYPE.Center;
                    }
                    else {
                        // HACK: align the rest of the fields by the culture.
                        // field.Layout.XAlignment = this.layoutService.isRtl() ? X_ALIGNMENT_TYPE.Right : X_ALIGNMENT_TYPE.Left;
                    }
                });
            }
            var fields = [];
            // const matrixFields = controlFields.filter((cf) =>
            //     this.isMatrixField(cf.ApiName)
            // ).length;
            // let matrixAlreadyPlaced = false;
            controlFields.forEach(function (field, index) {
                var dataField = dataFields.filter(function (df) { return df.ApiName === field.ApiName; })[0];
                if (!dataField) {
                    return;
                }
                // If current view is not table view and those fields are special.
                if (_this.layoutType !== 'table' &&
                    ((_this.hasMenuFloatingOnOtherField &&
                        _this.menuField &&
                        _this.menuField.ApiName === field.ApiName) ||
                        (_this.indicatorsField &&
                            _this.indicatorsField.ApiName === field.ApiName) ||
                        (_this.hasCampaignField &&
                            _this.hasCampaignField.ApiName === field.ApiName))) {
                    return;
                }
                // Set type to link
                if (index === 0 && _this.firstFieldAsLink) {
                    dataField.FieldType = ngxLib.FIELD_TYPE.InternalLink;
                    // dataField.Value = this.getInternalLinkHref();
                }
                else if (dataField.Value.length > 0 &&
                    (field.FieldType === ngxLib.FIELD_TYPE.ReferenceType ||
                        field.FieldType === ngxLib.FIELD_TYPE.GuidReferenceType)) {
                    // const transactionUrl =
                    //     this.data.MainAction === '2'
                    //         ? 'transactions/scope_items/'
                    //         : 'transactions/cart/';
                    // dataField.Value = transactionUrl + dataField.Value;
                }
                if (field.ApiName === 'ObjectMenu') {
                    dataField.Enabled = true;
                    // HACK : Until "Enabled" returns from the server, we set PepMenu to be
                    //        Disabled in cart on regular items and not campign items.
                }
                var customField = _this.convertToCustomField(field, dataField, _this.canEditObject, _this.menuDataField, _this.hasCampaignDataField, _this.indicatorsDataField, _this.objectId, _this.parentId, _this.searchCode);
                fields.push(customField);
            });
            return fields.sort(function (f1, f2) { return f1.row > f2.row
                ? 1
                : f1.row < f2.row
                    ? -1
                    : f1.col > f2.col
                        ? 1
                        : f1.col < f2.col
                            ? -1
                            : 0; });
        };
        PepFormComponent.prototype.onValueChanged = function (event) {
            this.onFormValidationChanged(this.form.valid);
            var formControl = this.getFormControlById(event.key);
            var isValid = formControl ? formControl.valid : true;
            // const isValid = true;
            if (isValid) {
                // Set it to false to disable all fields.
                if (this.layoutType === 'form') {
                    this.isLocked = true;
                }
                // Update the current field value.
                var currentField = this.fields.find(function (f) { return f.key === event.key; });
                if (currentField) {
                    currentField.formattedValue = currentField.value = event.value;
                }
                this.valueChange.emit({
                    id: this.data.UID.toString(),
                    key: event.key,
                    value: event.value,
                    controlType: event.controlType,
                });
            }
        };
        PepFormComponent.prototype.onChildClicked = function (childClick) {
            this.childClick.emit(childClick);
        };
        PepFormComponent.prototype.onChildChanged = function (childChange) {
            this.childChange.emit(childChange);
        };
        PepFormComponent.prototype.onFormValidationChanged = function (formValidationChange) {
            this.formValidationChange.emit(formValidationChange);
        };
        PepFormComponent.prototype.onClick = function (fieldClickEvent) {
            var clickedUiControlField = this.data.Fields.filter(function (f) { return f.ApiName === fieldClickEvent.key; })[0];
            var idType = this.data.Type ? this.data.Type.toString() : '';
            if (clickedUiControlField) {
                if (clickedUiControlField.FieldType === ngxLib.FIELD_TYPE.GuidReferenceType) {
                    this.fieldClick.emit({
                        id: this.data.UID.toString(),
                        key: fieldClickEvent.key,
                        idType: idType,
                        which: fieldClickEvent.eventWhich,
                        value: fieldClickEvent.value,
                        controlType: fieldClickEvent.controlType,
                        fieldType: clickedUiControlField.FieldType,
                        otherData: fieldClickEvent.otherData,
                    });
                }
                else if (clickedUiControlField.FieldType === ngxLib.FIELD_TYPE.ListOfObjects) {
                    this.fieldClick.emit({
                        id: this.data.UID.toString(),
                        key: fieldClickEvent.key,
                        idType: idType,
                        which: fieldClickEvent.eventWhich,
                        value: fieldClickEvent.value,
                        controlType: fieldClickEvent.controlType,
                        fieldType: clickedUiControlField.FieldType,
                        otherData: fieldClickEvent.otherData,
                    });
                }
                else {
                    this.fieldClick.emit({
                        id: this.data.UID.toString(),
                        key: fieldClickEvent.key,
                        idType: idType,
                        which: fieldClickEvent.eventWhich,
                        value: fieldClickEvent.value,
                        controlType: fieldClickEvent.controlType,
                        fieldType: clickedUiControlField.FieldType,
                        otherData: fieldClickEvent.otherData,
                    });
                }
            }
            else {
                // For other api names (like enter children etc).
                this.fieldClick.emit({
                    id: this.data.UID.toString(),
                    key: fieldClickEvent.key,
                    idType: idType,
                    which: fieldClickEvent.eventWhich,
                    value: fieldClickEvent.value,
                    controlType: fieldClickEvent.controlType,
                    otherData: fieldClickEvent.otherData,
                });
            }
        };
        return PepFormComponent;
    }());
    PepFormComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'pep-form',
                    template: "<fieldset *ngIf=\"form\" [formGroup]=\"form\" [disabled]=\"isLocked\" class=\"pep-form\"\n    [ngStyle]=\"{ 'background-color': layoutType == 'card' && data?.BackgroundColor }\">\n    <!-- New Form -->\n    <mat-grid-list *ngIf=\"layoutType == 'form'\" [cols]=\"columns\" [rowHeight]=\"rowHeight + 'rem'\"\n        [gutterSize]=\"formGutterSize\">\n        <mat-grid-tile *ngFor=\"let field of fields\" [rowspan]=\"field.rowSpan\" [colspan]=\"field.colSpan\">\n            <pep-field-generator *ngIf=\"field.controlType != 'placeholder'\" [form]=\"form\" [layoutType]=\"layoutType\"\n                [checkForChanges]=\"checkForChanges\" [uid]=\"data?.UID\" [field]=\"field\" [showTitle]=\"showTitle\"\n                (valueChange)=\"onValueChanged($event)\" (childClick)=\"onChildClicked($event)\"\n                (childChange)=\"onChildChanged($event)\" (elementClick)=\"onClick($event)\"\n                (formValidationChange)=\"onFormValidationChanged($event)\">\n            </pep-field-generator>\n        </mat-grid-tile>\n    </mat-grid-list>\n\n    <!-- Thumbnails -->\n    <mat-grid-list *ngIf=\"layoutType == 'card'\" [cols]=\"columns\" [rowHeight]=\"rowHeight + 'rem'\"\n        [gutterSize]=\"cardGutterSize\" class=\"card-spacing\">\n        <mat-grid-tile *ngFor=\"let field of fields\" [rowspan]=\"field.rowSpan\" [colspan]=\"field.colSpan\"\n            [ngStyle]=\"{ overflow: field.type == 'qs' ? 'unset' : 'hidden' }\">\n            <pep-field-generator *ngIf=\"field.controlType != 'placeholder'\" [form]=\"form\" [layoutType]=\"layoutType\"\n                [ngClass]=\"{ 'lock-events': lockEvents }\" [isActive]=\"isActive\" [checkForChanges]=\"checkForChanges\"\n                [uid]=\"data?.UID\" [field]=\"field\" [showTitle]=\"showTitle\" (valueChange)=\"onValueChanged($event)\"\n                (childClick)=\"onChildClicked($event)\" (childChange)=\"onChildChanged($event)\"\n                (elementClick)=\"onClick($event)\">\n            </pep-field-generator>\n        </mat-grid-tile>\n    </mat-grid-list>\n\n    <ng-container *ngIf=\"layoutType == 'table'\">\n        <ng-container *ngIf=\"isReport; then reportBlock; else notReportBlock\"></ng-container>\n        <ng-template #reportBlock>\n            <ng-container *ngTemplateOutlet=\"report\"></ng-container>\n        </ng-template>\n        <ng-template #notReportBlock>\n            <div *ngFor=\"let field of fields; let j = index\" class=\"pull-left flip table-cell \"\n                [ngClass]=\"['text-align-' + field.xAlignment]\" style=\"height: 100%\"\n                [ngStyle]=\"{ width: (layout?.ControlFields)[j]?.calcColumnWidthString}\">\n                <pep-field-generator *ngIf=\"field.controlType != 'placeholder'\" [checkForChanges]=\"checkForChanges\"\n                    [uid]=\"data?.UID\" [field]=\"field\" (valueChange)=\"onValueChanged($event)\"\n                    (elementClick)=\"onClick($event)\" [form]=\"form\" [layoutType]=\"layoutType\" [showTitle]=\"false\"\n                    [isActive]=\"isActive\">\n                </pep-field-generator>\n            </div>\n        </ng-template>\n    </ng-container>\n\n    <!------- For testing ------------\n    {{ form.value | json }}\n    {{ form.valid }}\n    ---------------------------------->\n</fieldset>\n\n<ng-template #report>\n    <div *ngFor=\"let field of fields; let j = index\" class=\"pull-left flip pep-report-fields\"\n        [ngStyle]=\"{ width: (layout?.ControlFields)[j]?.calcColumnWidthString }\"\n        [ngClass]=\"['text-align-' + field.xAlignment]\">\n        <ng-container [ngSwitch]=\"field.controlType\">\n            <pep-image *ngSwitchCase=\"'image'\" [uid]=\"data?.UID\" [form]=\"form\" [key]=\"field.key\"\n                [src]=\"field.formattedValue\" [srcLarge]=\"field.value\" [options]=\"field.options\" [label]=\"field.label\"\n                [mandatory]=\"field.mandatory\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\n                [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\" [layoutType]=\"layoutType\"\n                (elementClick)=\"onClick($event)\">\n            </pep-image>\n\n            <pep-signature *ngSwitchCase=\"'signature'\" [form]=\"form\" [key]=\"field.key\" [src]=\"field.value\"\n                [label]=\"field.label\" [mandatory]=\"field.mandatory\" [disabled]=\"field.disabled\"\n                [readonly]=\"field.readonly\" [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\"\n                [layoutType]=\"layoutType\">\n            </pep-signature>\n\n            <pep-checkbox *ngSwitchCase=\"'checkbox'\" [form]=\"form\" [key]=\"field.key\"\n                [value]=\"(field.value | lowercase) == 'true' || field.value == '1' ? true : false\" [label]=\"field.label\"\n                [type]=\"field.type\" [mandatory]=\"field.mandatory\" [disabled]=\"field.disabled\"\n                [readonly]=\"field.readonly\" [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\"\n                [additionalValue]=\"field.additionalValue\" [layoutType]=\"layoutType\">\n            </pep-checkbox>\n\n            <pep-date *ngSwitchCase=\"'date'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\"\n                [formattedValue]=\"field.formattedValue\" [label]=\"field.label\" [type]=\"field.type\"\n                [mandatory]=\"field.mandatory\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\n                [textColor]=\"field.textColor\" [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\"\n                [minValue]=\"field.minValue\" [maxValue]=\"field.maxValue\" [layoutType]=\"layoutType\">\n            </pep-date>\n\n            <pep-internal-button *ngSwitchCase=\"'button'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\"\n                [formattedValue]=\"field.formattedValue\" [label]=\"field.label\" [type]=\"field.type\"\n                [disabled]=\"field.disabled\" [readonly]=\"field.readonly\" [xAlignment]=\"field.xAlignment\"\n                [layoutType]=\"layoutType\" (elementClick)=\"onClick($event)\">\n            </pep-internal-button>\n\n            <pep-textarea *ngSwitchCase=\"'textarea'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\"\n                [label]=\"field.label\" [mandatory]=\"field.mandatory\" [disabled]=\"field.disabled\"\n                [readonly]=\"field.readonly\" [maxFieldCharacters]=\"field.maxFieldCharacters\"\n                [textColor]=\"field.textColor\" [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\"\n                [layoutType]=\"layoutType\">\n            </pep-textarea>\n\n            <pep-quantity-selector *ngSwitchCase=\"'qs'\" [id]=\"field.key\" [form]=\"form\" [key]=\"field.key\"\n                [value]=\"field.value\" [formattedValue]=\"field.formattedValue\" [label]=\"field.label\" [type]=\"field.type\"\n                [mandatory]=\"field.mandatory\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\n                [textColor]=\"field.textColor\" [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\"\n                [layoutType]=\"layoutType\" (valueChange)=\"onValueChanged($event)\" (elementClick)=\"onClick($event)\">\n            </pep-quantity-selector>\n\n            <ng-container *ngSwitchDefault>\n                <ng-container *ngIf=\"field.formattedValue?.length > 0; then notEmptyBlock; else emptyBlock\">\n                </ng-container>\n                <ng-template #notEmptyBlock>\n                    <ng-container\n                        *ngIf=\"field.controlType === 'attachment' || field.type === 'link'; then linkBlock; else notLinkBlock\">\n                    </ng-container>\n                    <ng-template #linkBlock>\n                        <a [id]=\"field.key\" class=\"color-link body-sm pep-report-input readonly\"\n                            *ngIf=\"field.formattedValue != null\" title=\"{{ field.formattedValue }}\" target=\"_blank\"\n                            href=\"{{ field.value }}\">{{ field.formattedValue }}</a>\n                    </ng-template>\n                    <ng-template #notLinkBlock>\n                        <span [id]=\"field.key\" class=\"body-sm pep-report-input readonly\"\n                            title=\"{{ field.formattedValue }}\" [ngStyle]=\"{ color: field.textColor }\">{{\n                            field.formattedValue }}</span>\n                    </ng-template>\n                </ng-template>\n                <ng-template #emptyBlock>\n                    <span>&nbsp;</span>\n                </ng-template>\n            </ng-container>\n        </ng-container>\n    </div>\n</ng-template>",
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    styles: [":host{display:grid}"]
                },] }
    ];
    PepFormComponent.ctorParameters = function () { return [
        { type: dialog.PepDialogService },
        { type: ngxLib.PepCustomizationService },
        { type: ngxLib.PepLayoutService },
        { type: forms.FormBuilder },
        { type: core.KeyValueDiffers },
        { type: core$1.TranslateService }
    ]; };
    PepFormComponent.propDecorators = {
        isReport: [{ type: core.Input }],
        layout: [{ type: core.Input }],
        lockEvents: [{ type: core.Input }],
        canEditObject: [{ type: core.Input }],
        data: [{ type: core.Input }],
        isActive: [{ type: core.Input }],
        layoutType: [{ type: core.Input }],
        objectId: [{ type: core.Input }],
        parentId: [{ type: core.Input }],
        searchCode: [{ type: core.Input }],
        showTitle: [{ type: core.Input }],
        firstFieldAsLink: [{ type: core.Input }],
        checkForChanges: [{ type: core.Input }],
        valueChange: [{ type: core.Output }],
        formValidationChange: [{ type: core.Output }],
        childClick: [{ type: core.Output }],
        childChange: [{ type: core.Output }],
        fieldClick: [{ type: core.Output }]
    };

    var PepFieldGeneratorComponent = /** @class */ (function () {
        function PepFieldGeneratorComponent() {
            this.isActive = false;
            this.uid = null;
            this.layoutType = 'form';
            this.showTitle = true;
            this.checkForChanges = null;
            this.valueChange = new core.EventEmitter();
            this.childChange = new core.EventEmitter();
            this.formValidationChange = new core.EventEmitter();
            this.elementClick = new core.EventEmitter();
            this.childClick = new core.EventEmitter();
        }
        Object.defineProperty(PepFieldGeneratorComponent.prototype, "isValid", {
            get: function () {
                if (this.field.readonly || this.field.disabled) {
                    return true;
                }
                else {
                    var formControl = this.form && this.form.get(this.field.key);
                    if (formControl) {
                        return formControl.valid;
                    }
                    else {
                        return false;
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PepFieldGeneratorComponent.prototype, "isTouched", {
            get: function () {
                var formControl = this.form && this.form.get(this.field.key);
                return formControl ? formControl.touched : false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PepFieldGeneratorComponent.prototype, "isDirty", {
            get: function () {
                var formControl = this.form && this.form.get(this.field.key);
                return formControl ? formControl.dirty : false;
            },
            enumerable: false,
            configurable: true
        });
        PepFieldGeneratorComponent.prototype.ngOnDestroy = function () {
            //
        };
        PepFieldGeneratorComponent.prototype.onFileChanged = function (fileData, field) {
            var value = fileData ? JSON.stringify(fileData) : '';
            var fieldValueChange = {
                key: field.key,
                value: value,
                controlType: field.controlType,
            };
            this.valueChange.emit(fieldValueChange);
        };
        PepFieldGeneratorComponent.prototype.onAddressValueChanged = function (valueChange, field) {
            var fieldValueChange = {
                key: valueChange.key,
                value: valueChange.value,
                controlType: field.controlType,
            };
            this.valueChange.emit(fieldValueChange);
        };
        PepFieldGeneratorComponent.prototype.onValueChanged = function (value, field) {
            var fieldValueChange = {
                key: field.key,
                value: value.toString(),
                controlType: field.controlType,
            };
            this.valueChange.emit(fieldValueChange);
        };
        PepFieldGeneratorComponent.prototype.onChildChanged = function (childChange) {
            this.childChange.emit(childChange);
        };
        PepFieldGeneratorComponent.prototype.onFormValidationChanged = function (formValidationChange) {
            this.formValidationChange.emit(formValidationChange);
        };
        PepFieldGeneratorComponent.prototype.onClick = function (fieldClicked) {
            this.elementClick.emit(fieldClicked);
        };
        PepFieldGeneratorComponent.prototype.onChildClick = function (childClick) {
            this.childClick.emit(childClick);
        };
        PepFieldGeneratorComponent.prototype.ngOnChanges = function (changes) {
            // debugger;
            // For testing.
            // this.field.disabled = this.field.readonly = false;
        };
        return PepFieldGeneratorComponent;
    }());
    PepFieldGeneratorComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'pep-field-generator',
                    template: "<ng-container [ngSwitch]=\"field.controlType\" [formGroup]=\"form\">\n\n    <pep-address *ngSwitchCase=\"'address'\" [form]=\"form\" [key]=\"field.key\" [formattedValue]=\"field.formattedValue\"\n        [label]=\"field.label\" [mandatory]=\"field.mandatory\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\n        [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\" [groupFields]=\"field.groupFields\"\n        [layoutType]=\"layoutType\" [visible]=\"field.visible\" (addressValueChange)=\"onAddressValueChanged($event, field)\">\n    </pep-address>\n\n    <pep-attachment *ngSwitchCase=\"'attachment'\" [form]=\"form\" [key]=\"field.key\" [src]=\"field.value\"\n        [label]=\"field.label\" [mandatory]=\"field.mandatory\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\n        [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\" [isActive]=\"isActive\" [showTitle]=\"showTitle\"\n        [layoutType]=\"layoutType\" [visible]=\"field.visible\" (elementClick)=\"onClick($event)\"\n        (fileChange)=\"onFileChanged($event, field)\">\n    </pep-attachment>\n\n    <pep-checkbox *ngSwitchCase=\"'checkbox'\" [form]=\"form\" [key]=\"field.key\"\n        [value]=\"(field.value | lowercase) == 'true' || field.value == '1' ? true : false\" [label]=\"field.label\"\n        [type]=\"field.type\" [mandatory]=\"field.mandatory\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\n        [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\" [additionalValue]=\"field.additionalValue\"\n        [showTitle]=\"showTitle\" [layoutType]=\"layoutType\" [visible]=\"field.visible\"\n        (valueChange)=\"onValueChanged($event, field)\" [isActive]=\"isActive\">\n    </pep-checkbox>\n\n    <pep-date *ngSwitchCase=\"'date'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\"\n        [formattedValue]=\"field.formattedValue\" [label]=\"field.label\" [type]=\"field.type\" [mandatory]=\"field.mandatory\"\n        [disabled]=\"field.disabled\" [readonly]=\"field.readonly\" [textColor]=\"field.textColor\"\n        [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\" [minValue]=\"field.minValue\"\n        [maxValue]=\"field.maxValue\" [showTitle]=\"showTitle\" [layoutType]=\"layoutType\" [visible]=\"field.visible\"\n        (valueChange)=\"onValueChanged($event, field)\" [isActive]=\"isActive\">\n    </pep-date>\n\n    <pep-images-filmstrip *ngSwitchCase=\"'images'\" [uid]=\"uid\" [form]=\"form\" [key]=\"field.key\" [label]=\"field.label\"\n        [showTitle]=\"showTitle\" [rowSpan]=\"field.rowSpan\" [value]=\"field.value\" [layoutType]=\"layoutType\">\n    </pep-images-filmstrip>\n\n    <pep-image *ngSwitchCase=\"'image'\" [uid]=\"uid\" [form]=\"form\" [key]=\"field.key\" [src]=\"field.formattedValue\"\n        [srcLarge]=\"field.value\" [options]=\"field.options\" [label]=\"field.label\" [mandatory]=\"field.mandatory\"\n        [disabled]=\"field.disabled\" [readonly]=\"field.readonly\" [xAlignment]=\"field.xAlignment\"\n        [rowSpan]=\"field.rowSpan\" [indicatorsField]=\"field.indicatorsField\" [menuField]=\"field.menuField\"\n        [hasCampaignField]=\"field.hasCampaignField\" [sizeLimitMB]=\"field.sizeLimitMB\" [isActive]=\"isActive\"\n        [layoutType]=\"layoutType\" [visible]=\"field.visible\" (elementClick)=\"onClick($event)\"\n        (fileChange)=\"onFileChanged($event, field)\">\n    </pep-image>\n\n    <pep-quantity-selector *ngSwitchCase=\"'qs'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\"\n        [formattedValue]=\"field.formattedValue\" [label]=\"field.label\" [type]=\"field.type\" [mandatory]=\"field.mandatory\"\n        [disabled]=\"field.disabled\" [readonly]=\"field.readonly\" [textColor]=\"field.textColor\"\n        [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\" [allowDecimal]=\"field.allowDecimal\"\n        [additionalValue]=\"field.additionalValue\" [notificationInfo]=\"field.notificationInfo\" [isActive]=\"isActive\"\n        [layoutType]=\"layoutType\" [showTitle]=\"showTitle\" [visible]=\"field.visible\"\n        (valueChange)=\"onValueChanged($event, field)\" (formValidationChange)=\"onFormValidationChanged($event)\"\n        (elementClick)=\"onClick($event)\">\n    </pep-quantity-selector>\n\n    <pep-rich-html-textarea *ngSwitchCase=\"'richhtmltextarea'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\"\n        [label]=\"field.label\" [mandatory]=\"field.mandatory\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\n        [maxFieldCharacters]=\"field.maxFieldCharacters\" [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\"\n        [showTitle]=\"showTitle\" [layoutType]=\"layoutType\" [visible]=\"field.visible\"\n        (valueChange)=\"onValueChanged($event, field)\" [isActive]=\"isActive\">\n    </pep-rich-html-textarea>\n\n    <pep-select *ngSwitchCase=\"'select'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\" [label]=\"field.label\"\n        [type]=\"field.type\" [mandatory]=\"field.mandatory\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\n        [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\" [options]=\"field.options\" [showTitle]=\"showTitle\"\n        [layoutType]=\"layoutType\" [visible]=\"field.visible\" (valueChange)=\"onValueChanged($event, field)\"\n        (formValidationChange)=\"onFormValidationChanged($event)\" [isActive]=\"isActive\">\n    </pep-select>\n\n    <pep-separator *ngSwitchCase=\"'separator'\" [form]=\"form\" [key]=\"field.key\" [label]=\"field.label\"\n        [xAlignment]=\"field.xAlignment\" [layoutType]=\"layoutType\" [visible]=\"field.visible\">\n    </pep-separator>\n\n    <pep-signature *ngSwitchCase=\"'signature'\" [form]=\"form\" [key]=\"field.key\" [src]=\"field.value\" [label]=\"field.label\"\n        [mandatory]=\"field.mandatory\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\n        [xAlignment]=\"field.xAlignment\" [rowSpan]=\"field.rowSpan\" [isActive]=\"isActive\" [layoutType]=\"layoutType\"\n        [visible]=\"field.visible\" (fileChange)=\"onFileChanged($event, field)\">\n    </pep-signature>\n\n    <pep-textarea *ngSwitchCase=\"'textarea'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\" [label]=\"field.label\"\n        [mandatory]=\"field.mandatory\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\n        [maxFieldCharacters]=\"field.maxFieldCharacters\" [textColor]=\"field.textColor\" [xAlignment]=\"field.xAlignment\"\n        [rowSpan]=\"field.rowSpan\" [showTitle]=\"showTitle\" [layoutType]=\"layoutType\" [visible]=\"field.visible\"\n        (valueChange)=\"onValueChanged($event, field)\" [isActive]=\"isActive\">\n    </pep-textarea>\n\n    <pep-textbox *ngSwitchCase=\"'textbox'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\"\n        [formattedValue]=\"field.formattedValue\" [label]=\"field.label\" [placeholder]=\"field.placeholder\"\n        [type]=\"field.type\" [mandatory]=\"field.mandatory\" [disabled]=\"field.disabled\" [readonly]=\"field.readonly\"\n        [maxFieldCharacters]=\"field.maxFieldCharacters\" [textColor]=\"field.textColor\" [xAlignment]=\"field.xAlignment\"\n        [rowSpan]=\"field.rowSpan\" [showTitle]=\"showTitle\" [layoutType]=\"layoutType\"\n        (valueChange)=\"onValueChanged($event, field)\" (formValidationChange)=\"onFormValidationChanged($event)\"\n        [isActive]=\"isActive\" [visible]=\"field.visible\">\n    </pep-textbox>\n\n    <pep-indicators *ngSwitchCase=\"'indicators'\" [key]=\"field.key\" [value]=\"field.value\" [layoutType]=\"layoutType\">\n    </pep-indicators>\n    <pep-internal-button *ngSwitchCase=\"'button'\" [form]=\"form\" [key]=\"field.key\" [value]=\"field.value\"\n        [formattedValue]=\"field.formattedValue\" [label]=\"field.label\"\n        [referenceObjectInternalType]=\"field.referenceObjectInternalType\" [type]=\"field.type\"\n        [disabled]=\"field.disabled\" [readonly]=\"field.readonly\" [xAlignment]=\"field.xAlignment\"\n        [layoutType]=\"layoutType\" [visible]=\"field.visible\" (elementClick)=\"onClick($event)\"\n        (valueChange)=\"onValueChanged($event, field)\">\n    </pep-internal-button>\n    <pep-internal-menu *ngSwitchCase=\"'menu'\" [key]=\"field.key\" [label]=\"field.label\" [disabled]=\"field.disabled\"\n        [xAlignment]=\"field.xAlignment\" [options]=\"field.options\" [layoutType]=\"layoutType\"\n        (elementClick)=\"onClick($event)\">\n    </pep-internal-menu>\n    <pep-internal-page *ngSwitchCase=\"'internalPage'\" [field]=\"field\" [layoutType]=\"layoutType\"\n        (childClick)=\"onChildClick($event)\" (childChange)=\"onChildChanged($event)\">\n    </pep-internal-page>\n\n    <ng-container *ngSwitchCase=\"'placeholder'\">\n    </ng-container>\n</ng-container>",
                    encapsulation: core.ViewEncapsulation.Emulated,
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    styles: [":host{width:100%;height:100%}"]
                },] }
    ];
    PepFieldGeneratorComponent.propDecorators = {
        field: [{ type: core.Input }],
        isActive: [{ type: core.Input }],
        uid: [{ type: core.Input }],
        form: [{ type: core.Input }],
        layoutType: [{ type: core.Input }],
        showTitle: [{ type: core.Input }],
        checkForChanges: [{ type: core.Input }],
        valueChange: [{ type: core.Output }],
        childChange: [{ type: core.Output }],
        formValidationChange: [{ type: core.Output }],
        elementClick: [{ type: core.Output }],
        childClick: [{ type: core.Output }]
    };

    var PepIndicatorsComponent = /** @class */ (function () {
        function PepIndicatorsComponent() {
            this.controlType = 'indicators';
            this.layoutType = 'table';
        }
        return PepIndicatorsComponent;
    }());
    PepIndicatorsComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'pep-indicators',
                    template: "<div class=\"indicators-container\" [ngClass]=\"{ 'is-inside-table': layoutType === 'table' }\">\n    <ng-container *ngFor=\"let value of value?.split(';')\">\n        <pep-icon name=\"indicator_dot_placeholder\" class=\"pull-left flip\" [fill]=\"value\"></pep-icon>\n    </ng-container>\n    <ng-container *ngIf=\"key != 'ItemIndicatorsWithoutCampaign' && value?.split(';').length < 4\">\n        <pep-icon name=\"indicator_dot_placeholder\" class=\"pull-left flip\"></pep-icon>\n    </ng-container>\n</div>",
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    styles: [":host{height:inherit;display:grid}:host>*{align-self:center}.indicators-container{height:2.5rem}.indicators-container pep-icon{height:1rem;width:1rem;margin:.05rem}.indicators-container.is-inside-table{height:1rem;display:flex;justify-content:center;align-items:center}"]
                },] }
    ];
    PepIndicatorsComponent.propDecorators = {
        key: [{ type: core.Input }],
        value: [{ type: core.Input }],
        layoutType: [{ type: core.Input }]
    };

    var PepInternalButtonComponent = /** @class */ (function () {
        function PepInternalButtonComponent(customizationService, renderer, element) {
            var _this = this;
            this.customizationService = customizationService;
            this.renderer = renderer;
            this.element = element;
            this.key = '';
            this.value = '';
            this.formattedValue = '';
            this.label = '';
            this.type = 'button';
            this.mandatory = false;
            this.disabled = false;
            this.readonly = false;
            this.xAlignment = ngxLib.DEFAULT_HORIZONTAL_ALIGNMENT;
            this.rowSpan = 1;
            this._visible = true;
            this.controlType = 'button';
            this.form = null;
            this.showTitle = true;
            this.layoutType = 'form';
            this.elementClick = new core.EventEmitter();
            this.valueChange = new core.EventEmitter();
            this.standAlone = false;
            this.createNewReference = false;
            this.referenceButtons = [
                {
                    key: 'action',
                    callback: function (action) { return _this.onButtonClicked(action.event); },
                },
                {
                    key: 'delete',
                    callback: function (action) { return _this.remove(); },
                    classNames: 'caution',
                    iconName: icon.pepIconSystemBin.name,
                },
            ];
        }
        Object.defineProperty(PepInternalButtonComponent.prototype, "visible", {
            get: function () {
                return this._visible;
            },
            set: function (visible) {
                this._visible = visible;
                if (visible) {
                    this.renderer.removeClass(this.element.nativeElement, 'hidden-element');
                }
                else {
                    this.renderer.addClass(this.element.nativeElement, 'hidden-element');
                }
            },
            enumerable: false,
            configurable: true
        });
        PepInternalButtonComponent.prototype.ngOnInit = function () {
            if (this.form === null) {
                this.standAlone = true;
                // this.form = this.customizationService.getDefaultFromGroup(this.key, this.value, this.mandatory, this.readonly, this.disabled);
                var pepField = new ngxLib.PepInternalButtonField({
                    key: this.key,
                    value: this.value,
                    mandatory: this.mandatory,
                    readonly: this.readonly,
                    disabled: this.disabled,
                });
                this.form = this.customizationService.getDefaultFromGroup(pepField);
                this.formattedValue = this.formattedValue || this.value;
                this.renderer.addClass(this.element.nativeElement, ngxLib.PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME);
            }
        };
        PepInternalButtonComponent.prototype.ngOnChanges = function (changes) {
            if (this.type === 'reference') {
                this.createNewReference = this.value.length === 0;
                this.referenceButtons[0].value = this.formattedValue;
            }
        };
        PepInternalButtonComponent.prototype.ngOnDestroy = function () {
            //
        };
        // groupButtonClicked(action: IPepButtonClickEvent): void {
        //     if (action.source.key === 'action') {
        //         this.onButtonClicked(action.event);
        //     } else if (action.source.key === 'delete') {
        //         this.remove();
        //     }
        // }
        PepInternalButtonComponent.prototype.onButtonClicked = function (event) {
            if (this.type === 'reference') {
                var valueArr = this.value.split('/');
                this.elementClick.emit({
                    key: this.key,
                    value: valueArr[valueArr.length - 1],
                    controlType: this.controlType,
                    eventWhich: event.which,
                    otherData: this.referenceObjectInternalType,
                });
            }
            else if (this.type === 'button' && true) {
                this.elementClick.emit({
                    key: this.key,
                    value: this.value,
                    controlType: this.controlType,
                    eventWhich: event.which,
                });
            }
            else {
                this.elementClick.emit({
                    key: this.key,
                    controlType: this.controlType,
                    eventWhich: event.which,
                });
            }
        };
        PepInternalButtonComponent.prototype.hrefFunction = function (event) {
            if (event.which === 1 /*|| event.which === 2*/) {
                this.onButtonClicked(event);
            }
        };
        PepInternalButtonComponent.prototype.openReferenceObjectInternal = function (event) {
            this.elementClick.emit({
                key: this.key,
                value: this.value,
                controlType: this.controlType,
                eventWhich: event.which,
                otherData: this.referenceObjectInternalType,
            });
        };
        PepInternalButtonComponent.prototype.remove = function () {
            this.value = '';
            this.valueChange.emit(this.value);
        };
        return PepInternalButtonComponent;
    }());
    PepInternalButtonComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'pep-internal-button',
                    template: "<ng-container [ngSwitch]=\"type\">\n    <ng-container *ngSwitchCase=\"'reference'\">\n        <ng-container *ngIf=\"layoutType === 'form'; then formBlock; else notFormBlock\"></ng-container>\n        <ng-template #formBlock>\n            <div class=\"pep-button-container reference-button\">\n                <pep-field-title [label]=\"label\" [mandatory]=\"mandatory\" [disabled]=\"disabled\" [xAlignment]=\"xAlignment\"\n                    [showTitle]=\"showTitle\">\n                </pep-field-title>\n                <ng-container *ngIf=\"createNewReference; then newBlock; else existingBlock\"></ng-container>\n                <ng-template #newBlock>\n                    <button mat-button [id]=\"key\" title=\"{{ formattedValue }}\" class=\"pep-button md regular\"\n                        (click)=\"onButtonClicked($event)\" [ngClass]=\"{\n                            disabled: disabled,\n                            'pull-left': xAlignment == 'left',\n                            'pull-right': xAlignment == 'right',\n                            'center-alignment': xAlignment == 'center'\n                        }\">\n                        <span class=\"ellipsis pull-left flip button-title-with-icon\">{{ 'ACTIONS.CREATE_NEW' | translate\n                            }}</span>\n                        <mat-icon class=\"pull-right flip\" pepRtlClass>\n                            <pep-icon name=\"number_plus\" (click)=\"onButtonClicked($event)\">\n                            </pep-icon>\n                        </mat-icon>\n                    </button>\n                </ng-template>\n                <ng-template #existingBlock>\n                    <pep-group-buttons [buttons]=\"referenceButtons\" styleType=\"regular\" viewType=\"split\">\n                    </pep-group-buttons>\n                </ng-template>\n            </div>\n        </ng-template>\n        <ng-template #notFormBlock>\n            <ng-container *ngTemplateOutlet=\"linkTemplate\"></ng-container>\n        </ng-template>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"'listofobjects'\">\n        <ng-container *ngIf=\"layoutType === 'form'; then formBlock; else notFormBlock\"></ng-container>\n        <ng-template #formBlock>\n            <ng-container *ngTemplateOutlet=\"buttonTemplate; context: {internal: true}\"></ng-container>\n        </ng-template>\n        <ng-template #notFormBlock>\n            <ng-container *ngTemplateOutlet=\"linkTemplate\"></ng-container>\n        </ng-template>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"'button'\">\n        <ng-container [ngSwitch]=\"key\">\n            <ng-container *ngSwitchCase=\"'ObjectMenu'\">\n                <span (click)=\"onButtonClicked($event)\" title=\"{{ key }}\">\n                    <mat-icon>\n                        <pep-icon *ngIf=\"key == 'ObjectMenu'\" name=\"system_menu\">\n                        </pep-icon>\n                    </mat-icon>\n                </span>\n            </ng-container>\n\n            <ng-container *ngSwitchCase=\"'Agents' || 'ContactPersons' || 'Buyers'\">\n                <ng-container *ngIf=\"layoutType === 'table'; then tableBlock; else nonTableBlock\">\n                </ng-container>\n                <ng-template #nonTableBlock>\n                    <ng-container *ngTemplateOutlet=\"buttonTemplate; context: {internal: true}\"></ng-container>\n                </ng-template>\n                <ng-template #tableBlock>\n                    <span [id]=\"key\" title=\"{{ formattedValue }}\" class=\"pep-report-input readonly body-sm\">{{\n                        formattedValue }}</span>\n                </ng-template>\n            </ng-container>\n\n            <ng-container *ngSwitchDefault>\n                <ng-container *ngIf=\"layoutType === 'form'; then buttonBlock; else linkBlock\">\n                </ng-container>\n\n                <ng-template #buttonBlock>\n                    <ng-container *ngTemplateOutlet=\"buttonTemplate; context: {internal: false}\"></ng-container>\n                </ng-template>\n                <ng-template #linkBlock>\n                    <ng-container *ngTemplateOutlet=\"linkTemplate\"></ng-container>\n                </ng-template>\n            </ng-container>\n        </ng-container>\n    </ng-container>\n</ng-container>\n\n<ng-template #buttonTemplate let-internal=\"internal\">\n    <div class=\"pep-button-container\">\n        <pep-field-title [label]=\"label\" [mandatory]=\"mandatory\" [disabled]=\"disabled\" [xAlignment]=\"xAlignment\"\n            [showTitle]=\"showTitle\">\n        </pep-field-title>\n\n        <ng-container *ngIf=\"internal; then internalButtonTemplate; else regularButtonTemplate\"></ng-container>\n        <ng-template #regularButtonTemplate>\n            <button [id]=\"key\" title=\"{{ formattedValue }}\" mat-button class=\"pep-button md regular\"\n                dir=\"{{ xAlignment == 'right' ? 'rtl' : 'ltr' }}\" (click)=\"onButtonClicked($event)\"\n                [disabled]=\"disabled\"\n                [ngClass]=\"{disabled: disabled, 'pull-left': xAlignment == 'left', 'pull-right': xAlignment == 'right', 'center-alignment': xAlignment == 'center'}\">\n                {{ formattedValue }}\n            </button>\n        </ng-template>\n\n        <ng-template #internalButtonTemplate>\n            <button [id]=\"key\" title=\"{{ formattedValue }}\" mat-button class=\"pep-button md regular\"\n                dir=\"{{ xAlignment == 'right' ? 'rtl' : 'ltr' }}\" (click)=\"openReferenceObjectInternal($event)\"\n                [disabled]=\"disabled\"\n                [ngClass]=\"{disabled: disabled, 'pull-left': xAlignment == 'left', 'pull-right': xAlignment == 'right', 'center-alignment': xAlignment == 'center'}\">\n                <ng-container *ngIf=\"formattedValue == '0' || formattedValue == ''; then newBlock; else existingBlock\">\n                </ng-container>\n                <ng-template #newBlock>\n                    <span class=\"pull-left flip button-title-with-icon\">{{ 'LIST.SELECT' | translate }}&nbsp;</span>\n                    <mat-icon>\n                        <pep-icon name=\"number_plus\">\n                        </pep-icon>\n                    </mat-icon>\n                </ng-template>\n                <ng-template #existingBlock>\n                    <span class=\"pull-left flip button-title-with-icon\">{{ formattedValue }}&nbsp;{{ 'LIST.SELECTED' |\n                        translate\n                        }}&nbsp;</span>\n                    <mat-icon>\n                        <pep-icon name=\"system_edit\">\n                        </pep-icon>\n                    </mat-icon>\n                </ng-template>\n            </button>\n        </ng-template>\n    </div>\n</ng-template>\n\n<ng-template #linkTemplate>\n    <ng-container *ngIf=\"formattedValue?.length > 0; then notEmptyBlock; else emptyBlock\"></ng-container>\n    <ng-template #notEmptyBlock>\n        <a href=\"{{ value }}\" (mousedown)=\"hrefFunction($event)\" class=\"color-link\">\n            <span *ngIf=\"layoutType === 'table'\" [id]=\"key\" title=\"{{ formattedValue }}\"\n                class=\"body-sm pep-report-input readonly\">\n                {{ formattedValue }}\n            </span>\n            <span *ngIf=\"layoutType !== 'table'\" [id]=\"key\" title=\"{{ formattedValue }}\" class=\"body-sm pep-card-input\"\n                style=\"display: block;\">\n                {{ formattedValue }}\n            </span>\n        </a>\n    </ng-template>\n    <ng-template #emptyBlock>\n        <span>&nbsp;</span>\n    </ng-template>\n</ng-template>",
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    styles: [":host{height:inherit;display:grid}:host>*{align-self:center}.pep-button-container,.pepperi-button-container{height:-webkit-fit-content;height:-moz-fit-content;height:fit-content}.pep-button-container .center-alignment,.pepperi-button-container .center-alignment{position:absolute;left:50%;transform:translate(-50%)}.pep-button-container.reference-button .split-buttons,.pep-button-container.reference-button ::ng-deep.split-buttons,.pepperi-button-container.reference-button .split-buttons,.pepperi-button-container.reference-button ::ng-deep.split-buttons{float:left}.pep-button-container.reference-button .split-buttons button:last-of-type,.pep-button-container.reference-button ::ng-deep.split-buttons button:last-of-type,.pepperi-button-container.reference-button .split-buttons button:last-of-type,.pepperi-button-container.reference-button ::ng-deep.split-buttons button:last-of-type{width:1.5rem;padding:0}"]
                },] }
    ];
    PepInternalButtonComponent.ctorParameters = function () { return [
        { type: ngxLib.PepCustomizationService },
        { type: core.Renderer2 },
        { type: core.ElementRef }
    ]; };
    PepInternalButtonComponent.propDecorators = {
        key: [{ type: core.Input }],
        value: [{ type: core.Input }],
        formattedValue: [{ type: core.Input }],
        label: [{ type: core.Input }],
        referenceObjectInternalType: [{ type: core.Input }],
        type: [{ type: core.Input }],
        mandatory: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        readonly: [{ type: core.Input }],
        xAlignment: [{ type: core.Input }],
        rowSpan: [{ type: core.Input }],
        visible: [{ type: core.Input }],
        form: [{ type: core.Input }],
        showTitle: [{ type: core.Input }],
        layoutType: [{ type: core.Input }],
        elementClick: [{ type: core.Output }],
        valueChange: [{ type: core.Output }]
    };

    var PepInternalListComponent = /** @class */ (function () {
        function PepInternalListComponent(element, layoutService, cd, renderer) {
            var _this = this;
            this.element = element;
            this.layoutService = layoutService;
            this.cd = cd;
            this.renderer = renderer;
            this.noDataFoundMsg = 'Items not found';
            this.hideAllSelectionInMulti = false;
            this.top = -1;
            this.objectId = '0';
            this.parentId = '0';
            this.searchCode = '0';
            // @Input() showTopBorder = false;
            this.supportResizing = true;
            this.parentScroll = null;
            this.disabled = false;
            this.disableEvents = false;
            this.disableSelectionItems = false;
            this.totalsRow = [];
            // @Output()
            // itemClick: EventEmitter<IPepListItemClickEvent> = new EventEmitter<IPepListItemClickEvent>();
            this.fieldClick = new core.EventEmitter();
            this.valueChange = new core.EventEmitter();
            this.uiControl = null;
            this.totalRows = -1;
            this.isTable = false;
            this.hasColumnWidthOfTypePercentage = true;
            this._items = null;
            // isCardView = false;
            this.itemsCounter = 0;
            this.showItems = true;
            this.SEPARATOR = ',';
            this.nativeWindow = null;
            this.selectedItemId = '';
            this.hoveredItemId = '';
            this.lockEvents = false;
            this.containerWidth = 0;
            this.deviceHasMouse = false;
            // headerIsInFocus = false;
            // For resize
            this.pressedColumn = '';
            this.startX = 0;
            this.startWidth = 0;
            this.tableStartWidth = 0;
            this.isUserSelected = false;
            this.checkForChanges = null;
            this.useVirtualScroll = true;
            this.nativeWindow = window;
            this.deviceHasMouse = this.layoutService.getDeviceHasMouse();
            this.layoutService.onMouseOver$.subscribe(function (deviceHasMouse) {
                _this.deviceHasMouse = deviceHasMouse;
            });
        }
        Object.defineProperty(PepInternalListComponent.prototype, "items", {
            get: function () {
                return this._items;
            },
            enumerable: false,
            configurable: true
        });
        PepInternalListComponent.prototype.ngOnInit = function () {
            this.containerWidth = 0;
        };
        PepInternalListComponent.prototype.ngOnChanges = function (changes) {
            if (this.containerWidth <= 0) {
                this.setContainerWidth();
            }
        };
        PepInternalListComponent.prototype.ngOnDestroy = function () {
            // if (this.valueChange) {
            //     this.valueChange.unsubscribe();
            // }
            // if (this.itemClick) {
            //     this.itemClick.unsubscribe();
            // }
            // if (this.fieldClick) {
            //     this.fieldClick.unsubscribe();
            // }
        };
        PepInternalListComponent.prototype.setContainerWidth = function () {
            var selectionCheckBoxWidth = 0;
            var rowHeight = 40; // the table row height (2.5rem * 16font-size).
            var style = window.getComputedStyle(this.element.nativeElement.parentElement);
            // The container-fluid class padding left + right + border
            var containerFluidSpacing = parseInt(style.paddingLeft, 10) + parseInt(style.paddingRight, 10);
            var parentContainer = this.element.nativeElement.parentElement.parentElement > 0
                ? this.element.nativeElement.parentElement.parentElement
                : this.element.nativeElement.parentElement;
            // Calculate if vertical scroll should appear, if so set the scroll width. (this.totalRows + 1) + 1 is for the header row.
            var scrollWidth = parentContainer.clientHeight < rowHeight * (this.totalRows + 1)
                ? 18
                : 0; // 18 is the default scroll width.
            // The selectionCheckBoxWidth width + containerFluidSpacing + scrollWidth.
            var rowHeaderWidthToSub = containerFluidSpacing + selectionCheckBoxWidth + scrollWidth;
            this.containerWidth = parentContainer.offsetWidth - rowHeaderWidthToSub;
        };
        PepInternalListComponent.prototype.clear = function () {
            this.cleanItems();
            this.uiControl = null;
        };
        PepInternalListComponent.prototype.toggleItems = function (isVisible) {
            this.showItems = isVisible;
            this.lockEvents = !isVisible;
        };
        PepInternalListComponent.prototype.updateScrollItems = function (startIndex, endIndex, loadInChunks) {
            if (loadInChunks === void 0) { loadInChunks = true; }
            this.scrollItems = this.items.slice(startIndex, endIndex);
        };
        PepInternalListComponent.prototype.getUniqItemId = function (itemId, itemType) {
            if (itemType === void 0) { itemType = ''; }
            return itemId + this.SEPARATOR + itemType;
        };
        PepInternalListComponent.prototype.setLayout = function () {
            var _this = this;
            if (this.totalRows === 0 ||
                !this.uiControl ||
                !this.uiControl.ControlFields ||
                this.uiControl.ControlFields.length === 0) {
                return;
            }
            this.uiControl.ControlFields.forEach(function (cf) {
                if (cf.ColumnWidth === 0) {
                    cf.ColumnWidth = 10;
                }
                if (_this.isTable &&
                    (cf.FieldType === ngxLib.FIELD_TYPE.Image ||
                        // cf.FieldType === FIELD_TYPE.Indicators || ???
                        cf.FieldType === ngxLib.FIELD_TYPE.Signature ||
                        cf.FieldType === ngxLib.FIELD_TYPE.NumberIntegerQuantitySelector ||
                        cf.FieldType === ngxLib.FIELD_TYPE.NumberRealQuantitySelector ||
                        cf.FieldType === ngxLib.FIELD_TYPE.NumberIntegerForMatrix ||
                        cf.FieldType === ngxLib.FIELD_TYPE.NumberRealForMatrix ||
                        cf.FieldType === ngxLib.FIELD_TYPE.Package ||
                        cf.ApiName === 'UnitsQuantity' ||
                        cf.ApiName === 'QuantitySelector')) {
                    cf.Layout.XAlignment = 3;
                }
            });
            if (!this.cd['destroyed']) {
                this.cd.detectChanges();
            }
            // Set the columns width.
            if (this.containerWidth <= 0) {
                this.setContainerWidth();
            }
            this.calcColumnsWidth();
            this.checkForChanges = new Date().getTime();
        };
        PepInternalListComponent.prototype.calcColumnsWidth = function () {
            var fixedMultiple = 3.78; // for converting em to pixel.
            var length = this.uiControl.ControlFields.length;
            var selectionCheckBoxWidth = 0;
            // Is table AND there is at least one column of width type of percentage.
            if (this.isTable) {
                if (this.uiControl && this.uiControl.ControlFields) {
                    this.hasColumnWidthOfTypePercentage =
                        this.uiControl.ControlFields.filter(function (cf) { return cf.ColumnWidthType === 1; }).length === 0;
                }
            }
            // If the columns size is fixed and the total is small then the container change it to percentage.
            if (!this.hasColumnWidthOfTypePercentage) {
                var totalFixedColsWidth = this.uiControl.ControlFields.map(function (cf) { return cf.ColumnWidth * fixedMultiple; }).reduce(function (sum, current) { return sum + current; });
                if (window.innerWidth > totalFixedColsWidth) {
                    this.hasColumnWidthOfTypePercentage = true;
                }
            }
            var totalCalcColsWidth = 0;
            // Calc by percentage
            if (this.hasColumnWidthOfTypePercentage) {
                var totalColsWidth = this.uiControl.ControlFields.map(function (cf) { return cf.ColumnWidth; }).reduce(function (sum, current) { return sum + current; });
                for (var index = 0; index < length; index++) {
                    var uiControlField = this.uiControl
                        .ControlFields[index];
                    var calcColumnWidthPercentage = (100 / totalColsWidth) * uiControlField.ColumnWidth;
                    uiControlField.calcColumnWidth = Math.floor((this.containerWidth * calcColumnWidthPercentage) / 100);
                    if (index === length - 1) {
                        uiControlField.calcTitleColumnWidthString = uiControlField.calcColumnWidthString =
                            'calc(100% - ' + totalCalcColsWidth + 'px)'; // For 100%
                    }
                    else {
                        uiControlField.calcTitleColumnWidthString = uiControlField.calcColumnWidthString =
                            uiControlField.calcColumnWidth + 'px';
                        totalCalcColsWidth += uiControlField.calcColumnWidth;
                    }
                }
                this.renderer.setStyle(this.element.nativeElement, 'width', 'inherit');
            }
            else {
                for (var index = 0; index < length; index++) {
                    var uiControlField = this.uiControl
                        .ControlFields[index];
                    var currentFixedWidth = Math.floor(uiControlField.ColumnWidth * fixedMultiple);
                    if (index === length - 1) {
                        uiControlField.calcTitleColumnWidthString =
                            currentFixedWidth + 'px';
                        uiControlField.calcColumnWidthString =
                            currentFixedWidth - 4 + 'px'; // -4 for the row padding.
                    }
                    else {
                        uiControlField.calcTitleColumnWidthString = uiControlField.calcColumnWidthString =
                            currentFixedWidth + 'px';
                    }
                    totalCalcColsWidth += currentFixedWidth;
                }
                this.renderer.setStyle(this.element.nativeElement, 'width', totalCalcColsWidth + selectionCheckBoxWidth + 'px');
            }
        };
        PepInternalListComponent.prototype.initResizeData = function () {
            this.startX = 0;
            this.startWidth = 0;
            this.tableStartWidth = 0;
            this.pressedColumn = '';
        };
        PepInternalListComponent.prototype.onListResizeStart = function (event, columnKey) {
            this.pressedColumn = columnKey;
            this.startX = event.x;
            this.startWidth = event.target.closest('.header-column').offsetWidth;
            // Set the tableStartWidth to the container offsetWidth
            this.tableStartWidth = this.noVirtualScrollCont.nativeElement.offsetWidth;
        };
        PepInternalListComponent.prototype.onListResize = function (event) {
            if (this.pressedColumn.length > 0) {
                var widthToAdd = this.layoutService.isRtl()
                    ? this.startX - event.x
                    : event.x - this.startX;
                // Set the width of the column and the container of the whole columns.
                if (this.startWidth + widthToAdd >= 48 || widthToAdd > 0) {
                    var length = this.uiControl.ControlFields.length;
                    var totalCalcColsWidth = 0;
                    for (var index = 0; index < length; index++) {
                        var uiControlField = this.uiControl
                            .ControlFields[index];
                        if (index === length - 1) {
                            // Calc the last column only in percentage type.
                            if (this.hasColumnWidthOfTypePercentage) {
                                uiControlField.calcTitleColumnWidthString = uiControlField.calcColumnWidthString =
                                    'calc(100% - ' + totalCalcColsWidth + 'px)'; // For 100%
                            }
                            else {
                                if (uiControlField.ApiName === this.pressedColumn) {
                                    uiControlField.calcColumnWidth =
                                        this.startWidth + widthToAdd;
                                    uiControlField.calcTitleColumnWidthString =
                                        uiControlField.calcColumnWidth + 'px';
                                    uiControlField.calcColumnWidthString =
                                        uiControlField.calcColumnWidth - 4 + 'px';
                                }
                            }
                        }
                        else if (uiControlField.ApiName === this.pressedColumn) {
                            uiControlField.calcColumnWidth =
                                this.startWidth + widthToAdd;
                            uiControlField.calcTitleColumnWidthString = uiControlField.calcColumnWidthString =
                                uiControlField.calcColumnWidth + 'px';
                        }
                        totalCalcColsWidth += uiControlField.calcColumnWidth;
                    }
                    this.renderer.setStyle(this.element.nativeElement, 'width', this.tableStartWidth + widthToAdd + 'px');
                }
                this.checkForChanges = new Date().getTime();
            }
        };
        PepInternalListComponent.prototype.getParent = function (el, parentSelector) {
            // If no parentSelector defined will bubble up all the way to *document*
            if (parentSelector === undefined) {
                parentSelector = document;
            }
            var parent = [];
            var p = el.parentNode;
            while (p &&
                p.className !== '' &&
                p.className.indexOf(parentSelector) === -1 &&
                parentSelector !== document) {
                var o = p;
                p = o.parentNode;
            }
            if (p.className.indexOf(parentSelector) > -1) {
                parent.push(p); // Push that parentSelector you wanted to stop at
            }
            return parent;
        };
        PepInternalListComponent.prototype.onListResizeEnd = function (event) {
            var _this = this;
            if (this.pressedColumn.length > 0) {
                if (event &&
                    this.getParent(event.srcElement, 'resize-box').length > 0) {
                    this.initResizeData();
                }
                else {
                    setTimeout(function () {
                        _this.initResizeData();
                    }, 0);
                }
            }
        };
        PepInternalListComponent.prototype.onListHeaderMouseEnter = function (event) {
            // this.headerIsInFocus = true;
        };
        PepInternalListComponent.prototype.onListHeaderMouseLeave = function (event) {
            // this.headerIsInFocus = false;
            this.onListResizeEnd(event);
            this.initResizeData();
        };
        PepInternalListComponent.prototype.onListChange = function (event) {
            if (this.disableEvents) {
                return;
            }
            // For other events do nothing.
            if (typeof event.start === 'undefined' ||
                typeof event.end === 'undefined') {
                return;
            }
            this.calculatedObjectHeight = event.calculatedChildHeight + 'px';
            if (!this.lockEvents) {
                this.toggleItems(false);
                this.updateScrollItems(event.start, event.end, false);
                this.toggleItems(true);
            }
        };
        PepInternalListComponent.prototype.getParentContainer = function () {
            return this.parentScroll ? this.parentScroll : window;
        };
        PepInternalListComponent.prototype.onValueChanged = function (valueChange) {
            if (this.disabled) {
                return;
            }
            this.valueChange.emit(valueChange);
        };
        PepInternalListComponent.prototype.onCustomizeFieldClick = function (customizeFieldClickedData) {
            if (this.disabled) {
                return;
            }
            this.fieldClick.emit(customizeFieldClickedData);
        };
        PepInternalListComponent.prototype.getIsDisabled = function (item) {
            if (this.disableSelectionItems) {
                return true;
            }
            else {
                var IsNotSelectableForActions = item && !item.IsSelectableForActions;
                return IsNotSelectableForActions;
            }
        };
        PepInternalListComponent.prototype.getIsItemSelected = function (itemId, itemType) {
            if (itemType === void 0) { itemType = ''; }
            var isSelected = false;
            var uniqItemId = this.getUniqItemId(itemId, itemType);
            isSelected = uniqItemId === this.selectedItemId;
            return isSelected;
        };
        PepInternalListComponent.prototype.setItemClicked = function (itemId, isSelectableForActions, itemType, isChecked) {
            var uniqItemId = this.getUniqItemId(itemId, itemType);
            // select the selected item.
            if (isChecked) {
                // Set seleted item
                this.selectedItemId = uniqItemId;
            }
            else {
                if (this.selectedItemId === uniqItemId) {
                    this.selectedItemId = '';
                }
            }
        };
        PepInternalListComponent.prototype.itemClicked = function (e, item) {
            // Set seleted item
            var itemId = item.UID.toString();
            var itemType = item.Type.toString();
            var isChecked = false;
            if (item && item.IsSelectableForActions) {
                this.selectedItemId = this.getUniqItemId(itemId, itemType);
                isChecked = true;
            }
            if (this.isTable) {
                this.setItemClicked(itemId, item.IsSelectableForActions, itemType, true);
            }
            else {
                if (this.disabled) {
                    return;
                }
            }
            // this.itemClick.emit({ source: item, viewType: this.viewType });
        };
        PepInternalListComponent.prototype.onTableRowMouseEnter = function (event, itemId, itemType) {
            if (!this.deviceHasMouse) {
                return;
            }
            var uniqItemId = this.getUniqItemId(itemId, itemType);
            this.hoveredItemId = uniqItemId;
        };
        PepInternalListComponent.prototype.onTableRowMouseLeave = function (event, itemId, itemType) {
            this.hoveredItemId = '';
        };
        PepInternalListComponent.prototype.onCardMouseEnter = function (event, itemId, itemType) {
            if (!this.deviceHasMouse) {
                return;
            }
            var uniqItemId = this.getUniqItemId(itemId, itemType);
            this.hoveredItemId = uniqItemId;
        };
        PepInternalListComponent.prototype.onCardMouseLeave = function (event, itemId, itemType) {
            this.hoveredItemId = '';
        };
        // call this function after resize + animation end
        PepInternalListComponent.prototype.winResize = function (e) {
            this.containerWidth = 0;
            this.setLayout();
        };
        PepInternalListComponent.prototype.trackByFunc = function (index, item) {
            return item && item.UID ? item.UID : index;
        };
        PepInternalListComponent.prototype.cleanItems = function () {
            this.itemsCounter = 0;
            this._items =
                this.totalRows > 0 ? Array(this.totalRows) : [];
            this.scrollItems = [];
            this.calculatedObjectHeight = '';
        };
        PepInternalListComponent.prototype.getUIControl = function () {
            return this.uiControl;
        };
        PepInternalListComponent.prototype.initListData = function (uiControl, totalRows, items, viewType, itemClass) {
            if (viewType === void 0) { viewType = 'table'; }
            if (itemClass === void 0) { itemClass = ''; }
            this.viewType = viewType;
            this.isTable = viewType === 'table';
            // this.isCardView = viewType === 'cards';
            this.uiControl = uiControl;
            this.itemClass = itemClass;
            this.selectedItemId = '';
            this.totalRows = totalRows;
            // fix bug for the scrollTo that doesn't work on edge div , not window
            // const scrollingElement = this.getParentContainer();
            // scrollingElement.scrollTo(0, 0);
            this.cleanItems();
            this.updateItems(items);
            this.setLayout();
        };
        PepInternalListComponent.prototype.updateItems = function (items) {
            this.scrollItems = this._items = items;
            this.itemsCounter = items.length;
        };
        PepInternalListComponent.prototype.updateItem = function (data) {
            var index = 0;
            // Update items list
            index = this.items.findIndex(function (i) { return i && i.UID === data.UID; });
            if (index >= 0 && index < this.items.length) {
                this.items[index] = data;
            }
            // Update scrollItems list
            index = this.scrollItems.findIndex(function (i) { return i && i.UID === data.UID; });
            if (index >= 0 && index < this.scrollItems.length) {
                this.scrollItems[index] = data;
                this.checkForChanges = new Date().getTime();
            }
        };
        PepInternalListComponent.prototype.getIsItemEditable = function (uid) {
            var item = this.items.filter(function (x) { return x.UID.toString() === uid; });
            if (item.length > 0) {
                return item[0].IsEditable;
            }
            else {
                return false;
            }
        };
        PepInternalListComponent.prototype.getItemDataByID = function (uid) {
            return this.items.find(function (item) { return item.UID.toString() === uid; });
        };
        return PepInternalListComponent;
    }());
    PepInternalListComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'pep-internal-list',
                    template: "<ng-container *ngIf=\"totalRows == 0\">\n    <div class=\"pep-border-bottom\">\n        <p class=\"title-xl no-data\">\n            {{ (noDataFoundMsg ? noDataFoundMsg : 'LIST.NO_DATA_FOUND') | translate}}\n        </p>\n    </div>\n    <div class=\"no-data-suggestions\">\n        <p class=\"suggestions-title title-lg\">\n            {{ 'LIST.NO_DATA_FOUND_SUGGESTIONS_TITLE' | translate}}\n        </p>\n        <ul class=\"suggestions-list body-lg\" [innerHtml]=\"'LIST.NO_DATA_FOUND_SUGGESTIONS_LIST' | translate\"></ul>\n    </div>\n</ng-container>\n<ng-container *ngIf=\"totalRows > 0\">\n    <div *ngIf=\"isTable\" #tableHeader class=\"table-header\" (mouseup)=\"onListResizeEnd($event)\"\n        (mouseenter)=\"onListHeaderMouseEnter($event)\" (mouseleave)=\"onListHeaderMouseLeave($event)\"\n        (mousemove)=\"onListResize($event)\">\n\n        <div class=\"table-header-padding-top\"></div>\n        <fieldset class=\"table-header-fieldset\">\n            <fieldset>\n                <div *ngFor=\"let field of uiControl?.ControlFields; let j = index\" class=\"header-column pull-left flip\"\n                    [ngStyle]=\"{ width: field.calcTitleColumnWidthString }\" [ngClass]=\"{\n                            'is-resizing': field.ApiName === pressedColumn,\n                            'is-first': j === 0,\n                            'is-last': j === uiControl?.ControlFields?.length - 1\n                        }\">\n                    <label *ngIf=\"field.Title != ''\" id=\"{{ field.ApiName }}\"\n                        class=\"header-label body-sm pull-left flip text-align-{{ field.Layout.XAlignment }}\"\n                        title=\"{{ field.Title }}\">\n                        {{ field.Title }}\n                    </label>\n                    <label *ngIf=\"field.Title == ''\" id=\"{{ field.ApiName }}\"\n                        class=\"header-label body-sm pull-left flip\">&nbsp;</label>\n\n                    <div *ngIf=\"supportResizing\" class=\"resize-box pull-right flip\"\n                        (mousedown)=\"onListResizeStart($event, field.ApiName)\">\n                        <div class=\"splitter\"></div>\n                    </div>\n                </div>\n            </fieldset>\n        </fieldset>\n    </div>\n\n    <div #noVirtualScrollCont [ngClass]=\"{ 'table-body': isTable, 'cards-body': !isTable }\">\n        <ng-container *ngTemplateOutlet=\"listData\"></ng-container>\n    </div>\n    <ng-container *ngTemplateOutlet=\"listTotals\"></ng-container>\n</ng-container>\n\n<ng-template #listData>\n    <ng-container *ngFor=\"let item of scrollItems; let i = index; let isFirst = first; trackBy: trackByFunc\">\n        <ng-container *ngIf=\"isTable\">\n            <div class=\"table-row\" (mouseenter)=\"onTableRowMouseEnter($event, item?.UID, item?.Type)\"\n                (mouseleave)=\"onTableRowMouseLeave($event, item?.UID, item?.Type)\" [ngClass]=\"{\n                        selected: getIsItemSelected(item?.UID, item?.Type),\n                        highlighted: item?.UID + SEPARATOR + item?.Type === selectedItemId\n                    }\"\n                [ngStyle]=\"{ height: calculatedObjectHeight, visibility: showItems || item ? 'visible' : 'hidden' }\">\n                <fieldset class=\"table-row-fieldset\" [ngStyle]=\"{ 'background-color': item?.BackgroundColor }\">\n                    <!-- [canEditObject]=\"!disabled && item?.IsEditable\" -->\n                    <pep-form [checkForChanges]=\"checkForChanges\" [layout]=\"uiControl\" [data]=\"item\"\n                        [canEditObject]=\"!disabled\" [objectId]=\"objectId\" [parentId]=\"parentId\"\n                        [searchCode]=\"searchCode\" [lockEvents]=\"disableSelectionItems\" [layoutType]=\"'table'\"\n                        [isActive]=\"\n                                (item?.UID + SEPARATOR + item?.Type === selectedItemId ||\n                                item?.UID + SEPARATOR + item?.Type === hoveredItemId) && deviceHasMouse\n                            \" (valueChange)=\"onValueChanged($event)\" (fieldClick)=\"onCustomizeFieldClick($event)\"\n                        (click)=\"itemClicked($event, item)\">\n                    </pep-form>\n                </fieldset>\n            </div>\n        </ng-container>\n\n        <ng-container *ngIf=\"!isTable\">\n            <div [class]=\"itemClass\" (mouseenter)=\"onCardMouseEnter($event, item?.UID, item?.Type)\"\n                (mouseleave)=\"onCardMouseLeave($event, item?.UID, item?.Type)\" [ngClass]=\"{\n                        selected: getIsItemSelected(item?.UID, item?.Type),\n                        highlighted: item?.UID + SEPARATOR + item?.Type === selectedItemId,\n                        'card-view': viewType === 'cards',\n                        'line-view': viewType === 'lines'\n                    }\" class=\"pull-left flip\"\n                [ngStyle]=\"{ height: calculatedObjectHeight, visibility: showItems || item ? 'visible' : 'hidden' }\">\n                <!-- [canEditObject]=\"!disabled && item?.IsEditable\" -->\n                <pep-form [checkForChanges]=\"checkForChanges\" [layout]=\"uiControl\" [data]=\"item\"\n                    [canEditObject]=\"!disabled\" [objectId]=\" objectId\" [parentId]=\"parentId\" [searchCode]=\"searchCode\"\n                    [lockEvents]=\"disableSelectionItems\" [layoutType]=\"'card'\" [isActive]=\"\n                            (item?.UID + SEPARATOR + item?.Type === selectedItemId ||\n                            item?.UID + SEPARATOR + item?.Type === hoveredItemId) && deviceHasMouse\n                        \" (valueChange)=\"onValueChanged($event)\" (fieldClick)=\"onCustomizeFieldClick($event)\"\n                    (click)=\"itemClicked($event, item)\">\n                </pep-form>\n            </div>\n        </ng-container>\n    </ng-container>\n</ng-template>\n\n<ng-template #listTotals>\n    <div *ngIf=\"totalsRow?.length > 0 && totalsRow.length <= uiControl?.ControlFields.length\" class=\"table-total\">\n        <fieldset class=\"table-header-fieldset\">\n            <div *ngFor=\"let field of uiControl?.ControlFields; let j = index\" class=\"total-column pull-left flip\"\n                [ngStyle]=\"{ width: field.calcTitleColumnWidthString }\">\n                <label class=\"total-label body-sm text-align-{{ field.Layout.XAlignment }}\">\n                    {{ totalsRow[j] }}\n                </label>\n            </div>\n        </fieldset>\n    </div>\n</ng-template>",
                    host: {
                        '(window:resize)': 'winResize($event)',
                    },
                    styles: [":host{height:inherit;display:grid}.no-data{margin:2rem 0;margin:var(--pep-spacing-2xl,2rem) 0}.no-data-suggestions .suggestions-title{margin:1rem 0 .5rem;margin:var(--pep-spacing-lg,1rem) 0 var(--pep-spacing-sm,.5rem)}.no-data-suggestions .suggestions-list{margin:0;padding:0;-webkit-padding-start:2rem;padding-inline-start:2rem;-webkit-padding-start:var(--pep-spacing-2xl,2rem);padding-inline-start:var(--pep-spacing-2xl,2rem)}.table-header{top:0}"]
                },] }
    ];
    PepInternalListComponent.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: ngxLib.PepLayoutService },
        { type: core.ChangeDetectorRef },
        { type: core.Renderer2 }
    ]; };
    PepInternalListComponent.propDecorators = {
        noDataFoundMsg: [{ type: core.Input }],
        hideAllSelectionInMulti: [{ type: core.Input }],
        top: [{ type: core.Input }],
        objectId: [{ type: core.Input }],
        parentId: [{ type: core.Input }],
        searchCode: [{ type: core.Input }],
        supportResizing: [{ type: core.Input }],
        parentScroll: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        disableEvents: [{ type: core.Input }],
        disableSelectionItems: [{ type: core.Input }],
        totalsRow: [{ type: core.Input }],
        fieldClick: [{ type: core.Output }],
        valueChange: [{ type: core.Output }],
        noVirtualScrollCont: [{ type: core.ViewChild, args: ['noVirtualScrollCont',] }],
        tableHeader: [{ type: core.ViewChild, args: ['tableHeader',] }],
        selectAllCB: [{ type: core.ViewChild, args: ['selectAllCB',] }]
    };

    var PepInternalMenuComponent = /** @class */ (function () {
        function PepInternalMenuComponent() {
            this.key = '';
            this.label = '';
            this.disabled = false;
            this.xAlignment = ngxLib.DEFAULT_HORIZONTAL_ALIGNMENT;
            // @Input() hasSubMenu = false;
            this.options = [];
            this.invertClass = true;
            this.controlType = 'menu';
            this.layoutType = 'form';
            this.elementClick = new core.EventEmitter();
        }
        // @Output() menuItemClick: EventEmitter<IPepFieldClickEvent> = new EventEmitter<IPepFieldClickEvent>();
        PepInternalMenuComponent.prototype.ngOnDestroy = function () {
            // if (this.elementClick) {
            //     this.elementClick.unsubscribe();
            // }
            // if (this.menuItemClick) {
            //     this.menuItemClick.unsubscribe();
            // }
        };
        PepInternalMenuComponent.prototype.menuClicked = function (event) {
            this.elementClick.emit({
                key: this.key,
                controlType: this.controlType,
                eventWhich: event.which,
            });
        };
        PepInternalMenuComponent.prototype.menuItemClicked = function (itemKey) {
            // Not in use comment in version 16.55 for webapp.
            // this.menuItemClick.emit({ key: itemKey });
        };
        return PepInternalMenuComponent;
    }());
    PepInternalMenuComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'pep-internal-menu',
                    template: "<ng-container *ngIf=\"options?.length > 0; then subMenuBlock; else noSubMenuBlock\"></ng-container>\n<ng-template #noSubMenuBlock>\n    <button (click)=\"menuClicked($event)\" title=\"{{ label }}\" mat-button\n        class=\"pep-button icon-button weak {{ layoutType === 'table' ? 'sm' : 'md' }}\" [ngClass]=\"{\n            'lock-events': disabled,\n            'left-alignment': xAlignment == 'left',\n            'right-alignment': xAlignment == 'right',\n            'center-alignment': xAlignment == 'center',\n            'invert': invertClass\n        }\">\n        <mat-icon>\n            <pep-icon name=\"system_menu\">\n            </pep-icon>\n        </mat-icon>\n    </button>\n</ng-template>\n\n<ng-template #subMenuBlock>\n    <button mat-button [matMenuTriggerFor]=\"menu\" menu-blur\n        class=\"pep-button icon-button weak {{ layoutType === 'table' ? 'sm' : 'md' }}\" [ngClass]=\"{\n            'left-alignment': xAlignment == 'left',\n            'right-alignment': xAlignment == 'right',\n            'center-alignment': xAlignment == 'center',\n            'invert': invertClass\n        }\" title=\"{{ label }}\">\n        <mat-icon>\n            <pep-icon name=\"system_menu\">\n            </pep-icon>\n        </mat-icon>\n    </button>\n\n    <mat-menu #menu=\"matMenu\" xPosition=\"{{xAlignment == 'right' ? 'after' : 'before'}}\"\n        [ngClass]=\"{ rtlMenu: xAlignment == 'right' }\">\n        <button *ngFor=\"let option of options\" mat-menu-item (click)=\"menuItemClicked(option.key)\">\n            <span>{{ option.value | translate }}</span>\n        </button>\n    </mat-menu>\n\n</ng-template>",
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    styles: [":host{height:inherit;display:grid}:host>*{align-self:center}.pep-button,.pepperi-button{cursor:pointer}.pep-button.left-alignment,.pepperi-button.left-alignment{justify-self:flex-start}.pep-button.center-alignment,.pepperi-button.center-alignment{justify-self:center}.pep-button.right-alignment,.pepperi-button.right-alignment{justify-self:flex-end}"]
                },] }
    ];
    PepInternalMenuComponent.propDecorators = {
        key: [{ type: core.Input }],
        label: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        xAlignment: [{ type: core.Input }],
        options: [{ type: core.Input }],
        invertClass: [{ type: core.Input }],
        layoutType: [{ type: core.Input }],
        elementClick: [{ type: core.Output }]
    };

    var PepInternalPageService = /** @class */ (function () {
        function PepInternalPageService(httpService) {
            this.httpService = httpService;
            this.parentId = '0';
            this.additionalApiName = '';
            this.transactionUrl = 'Service1.svc/v1/OrderCenter/Transaction/';
        }
        PepInternalPageService.prototype.getBaseParentUrl = function () {
            var url = "" + this.transactionUrl + this.objectId + "/ParentLine/" + this.parentId + "/";
            return url;
        };
        PepInternalPageService.prototype.getChildren = function (callbackFunc) {
            var _a;
            var body = JSON.stringify({
                TransactionUID: this.objectId,
                SearchCode: this.searchCode,
                AdditionalApiName: this.additionalApiName,
                ParentTransactionLineID: this.parentId,
                ViewType: this.viewType,
            });
            // Set the additional api name with view type string.
            var moreParams = ((_a = this.additionalApiName) === null || _a === void 0 ? void 0 : _a.length) > 0
                ? this.additionalApiName + "/" + this.viewType
                : "''/" + this.viewType;
            var url = this.getBaseParentUrl() + "Items/" + moreParams;
            this.httpService.postWapiApiCall(url, body).subscribe(function (res) {
                callbackFunc(res);
            }
            // (error) => {},
            // () => {}
            );
        };
        PepInternalPageService.prototype.initDetails = function (objectId, parentId, searchCode, callbackFunc) {
            if (!objectId || !parentId) {
                return;
            }
            this.objectId = objectId;
            this.parentId = parentId;
            this.searchCode = searchCode;
            this.httpService
                .getWapiApiCall(this.getBaseParentUrl() + "ViewTypes")
                .subscribe(function (res) {
                callbackFunc(res);
            }
            // (error) => {},
            // () => {}
            );
        };
        PepInternalPageService.prototype.changeChildrenViewType = function (viewType, callbackFunc) {
            this.viewType = viewType;
            this.getChildren(callbackFunc);
        };
        PepInternalPageService.prototype.changeAdditionalApiName = function (additionalApiName, callbackFunc) {
            this.additionalApiName = additionalApiName;
            this.getChildren(callbackFunc);
        };
        PepInternalPageService.prototype.childPlusClick = function (itemId, fieldApiName, callbackFunc) {
            var body = JSON.stringify({
                TransactionUID: this.objectId,
                SearchCode: this.searchCode,
                ParentTransactionLineID: this.parentId,
                TransactionLineUID: itemId,
                FieldApiName: fieldApiName,
                ViewType: this.viewType,
            });
            this.httpService
                .postWapiApiCall(this.getBaseParentUrl() + "IncrementValue", body)
                .subscribe(function (res) {
                callbackFunc(res);
            }
            // (error) => {},
            // () => {}
            );
        };
        PepInternalPageService.prototype.childMinusClick = function (itemId, fieldApiName, callbackFunc) {
            var body = JSON.stringify({
                TransactionUID: this.objectId,
                SearchCode: this.searchCode,
                ParentTransactionLineID: this.parentId,
                TransactionLineUID: itemId,
                FieldApiName: fieldApiName,
                ViewType: this.viewType,
            });
            this.httpService
                .postWapiApiCall(this.getBaseParentUrl() + "DecrementValue", body)
                .subscribe(function (res) {
                callbackFunc(res);
            }
            // (error) => {},
            // () => {}
            );
        };
        PepInternalPageService.prototype.childValueChanged = function (itemId, fieldApiName, value, callbackFunc) {
            var body = JSON.stringify({
                TransactionUID: this.objectId,
                SearchCode: this.searchCode,
                ParentTransactionLineID: this.parentId,
                TransactionLineUID: itemId,
                FieldApiName: fieldApiName,
                FieldValue: value,
                ViewType: this.viewType,
            });
            this.httpService
                .postWapiApiCall(this.getBaseParentUrl() + "SetFieldValue", body)
                .subscribe(function (res) {
                callbackFunc(res);
            }
            // (error) => {},
            // () => {}
            );
        };
        return PepInternalPageService;
    }());
    PepInternalPageService.decorators = [
        { type: core.Injectable }
    ];
    PepInternalPageService.ctorParameters = function () { return [
        { type: ngxLib.PepHttpService }
    ]; };

    var PepInternalPageComponent = /** @class */ (function () {
        function PepInternalPageComponent(fb, dialogService, internalPageService, customizationService, elementRef, changeDetectorRef) {
            this.fb = fb;
            this.dialogService = dialogService;
            this.internalPageService = internalPageService;
            this.customizationService = customizationService;
            this.elementRef = elementRef;
            this.changeDetectorRef = changeDetectorRef;
            this.controlType = 'internalPage';
            this.layoutType = 'form';
            this.childChange = new core.EventEmitter();
            this.childClick = new core.EventEmitter();
            this.checkForChanges = null;
            this.childData = null;
            this.totalsRow = [];
            this.additionalApiNames = null;
            this.currentAdditionalApiName = null;
            this.focusedQS = false;
            this.fieldIdWithFocus = '';
            this.columnWidth = 100;
            this.coverChildTable = false;
            this.currentViewType = null;
            this.sumOfMinColWidth = 0;
            this.totalRowsWidth = 0;
            this.viewWidth = '100%';
            this.viewHeight = 'auto';
            this.displayQSbtns = true;
            this.selectedApiName = '';
            this.showSort = false;
            this.defaultRowSpan = -1;
        }
        PepInternalPageComponent.prototype.fillData = function (isInDialog) {
            var _this = this;
            if (isInDialog === void 0) { isInDialog = false; }
            var _a, _b, _c, _d, _e;
            var view = this.matrixTemplate.createEmbeddedView(null);
            (_a = this.customList) === null || _a === void 0 ? void 0 : _a.clear();
            (_b = this.orgCont) === null || _b === void 0 ? void 0 : _b.clear();
            if (isInDialog) {
                (_c = this.dialogCont) === null || _c === void 0 ? void 0 : _c.clear();
                (_d = this.dialogCont) === null || _d === void 0 ? void 0 : _d.insert(view);
            }
            else {
                (_e = this.orgCont) === null || _e === void 0 ? void 0 : _e.insert(view);
            }
            setTimeout(function () {
                // const buffer = [];
                // if (this.childData.Rows) {
                //     // for (let i = 0; i < this.childData.Rows.length; i++) {
                //     for (const childDataRow of this.childData.Rows) {
                //         const osd = new ObjectSingleData(
                //             this.uiControl,
                //             childDataRow
                //         );
                //         osd.IsEditable = true;
                //         buffer.push(osd);
                //     }
                // }
                var viewType = _this.isTableView()
                    ? 'table'
                    : 'lines';
                _this.customList.initListData(_this.uiControl, _this.childData.TotalRows, _this.childData.Rows, viewType);
                _this.setTotalsRow();
                // if (!this.childModal.isShown) {
                var childrenCount = _this.childData.Rows
                    ? _this.childData.Rows.length
                    : 0;
                var isEven = childrenCount % 2 === 0;
                // 3 for matrix & flat matrix because the header + total is 2 more rows.
                var rowsToAdd = _this.isMatrixView() || _this.isFlatMatrixView()
                    ? isEven
                        ? 3
                        : 4
                    : 1;
                var formRowHeight = _this.customizationService.calculateFormFieldHeight() * 16; // convert rem to pixel
                // Set the default only if not set yet.
                if (_this.defaultRowSpan === -1) {
                    _this.defaultRowSpan = _this.field.rowSpan;
                }
                _this.sumOfMinColWidth = 0;
                _this.totalRowsWidth = 0;
                _this.childData.UIControl.ControlFields.forEach(function (uiControlField) {
                    _this.totalRowsWidth += uiControlField.ColumnWidth;
                    uiControlField.minFieldWidth = _this.mmToPx(12); // NEED TO GET THIS PARAM FROM CUSTOMIZATION;
                    _this.sumOfMinColWidth += 12;
                });
                _this.setViewCover(_this.childData.Rows);
                if (_this.coverChildTable) {
                    _this.field.rowSpan = _this.defaultRowSpan;
                }
                else {
                    // For line view Add the height of the line (form height).
                    if (_this.currentViewType.Key === 'OrderCenterFlatMatrixLine') {
                        var maxRow = Math.max.apply(Math, __spreadArray([], __read(_this.uiControl.ControlFields.map(function (f) {
                            return f.Layout.Y + f.Layout.Height;
                        }))));
                        // * 16 convert rem to pixel
                        var cardRowsHeight = _this.customizationService.calculateCardRowsHeight(maxRow) * 16;
                        // maxRow * 24 + 60 - 24 for each row in card + 60 for the padding of each card.
                        // const rowSpanToAdd = Math.floor(childrenCount * ((cardRowsHeight + 56) / formRowHeight) + rowsToAdd);
                        // + 16 is the 1rem margin outside card.
                        var rowSpanToAdd = (childrenCount * (cardRowsHeight + 16)) /
                            formRowHeight +
                            rowsToAdd;
                        _this.field.rowSpan = rowSpanToAdd;
                    }
                    else {
                        // const tableRowsHeight = this.customizationService.calculateTableRowsHeight(childrenCount) * 16;
                        // this.field.rowSpan = Math.ceil((tableRowsHeight + (rowsToAdd * 40)) / formRowHeight);
                        // * 16 convert rem to pixel
                        var rowsToAddHeight = _this.customizationService.calculateTableRowsHeight(rowsToAdd, false) * 16;
                        var tableRowsHeight = _this.customizationService.calculateTableRowsHeight(childrenCount) * 16;
                        _this.field.rowSpan =
                            (rowsToAddHeight + tableRowsHeight) / formRowHeight;
                    }
                }
            }, 0);
            this.changeDetectorRef.markForCheck();
        };
        PepInternalPageComponent.prototype.fillChildData = function (res) {
            this.childData = res;
            this.uiControl = res.UIControl;
            this.additionalApiNames = res.AdditionalApiNames;
            this.fillData();
        };
        PepInternalPageComponent.prototype.mmToPx = function (mm) {
            var height = this.my1mm.nativeElement.clientHeight;
            return Math.floor(mm * height); // returns sizes in PX
        };
        PepInternalPageComponent.prototype.isMatrixView = function () {
            return (this.currentViewType &&
                this.currentViewType.Key === 'OrderCenterMatrix');
        };
        PepInternalPageComponent.prototype.isFlatMatrixView = function () {
            return (this.currentViewType &&
                this.currentViewType.Key === 'OrderCenterFlatMatrixGrid');
        };
        PepInternalPageComponent.prototype.isTableView = function () {
            return this.isMatrixView() || this.isFlatMatrixView();
        };
        // private getItemClass(): string {
        //     let res = '';
        //     if (!this.isTableView()) {
        //         res = 'line-view';
        //     }
        //     return res;
        // }
        PepInternalPageComponent.prototype.changeChildrenViewType = function (viewTypeKey) {
            var e_1, _f;
            var _this = this;
            this.rows = [];
            this.uiControl = null;
            try {
                for (var _g = __values(this.childViewTypes), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var vt = _h.value;
                    if (vt.Key === viewTypeKey) {
                        this.currentViewType = vt;
                        break;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_f = _g.return)) _f.call(_g);
                }
                finally { if (e_1) throw e_1.error; }
            }
            // check if view type changed
            // if (this.currentViewType.Key != viewTypeKey) {
            // window.scroll(0, 0); //or document.body.scrollTop = 0; or document.querySelector('body').scrollTo(0,0)
            this.currentViewTypeTitle = this.currentViewType.Value;
            this.internalPageService.changeChildrenViewType(this.currentViewType.Key, function (res) {
                if (res.Rows) {
                    _this.fillChildData(res);
                }
            });
        };
        PepInternalPageComponent.prototype.setViewCover = function (rows) {
            if (!rows) {
                return;
            }
            var matrixCont = this.mainViewCont.nativeElement;
            var viewWidth = matrixCont.clientWidth;
            this.viewWidth = viewWidth ? viewWidth.toString() : '100%';
            // if the matrix located on the bottom / there is nothing under the matrix we dont need to check the height
            if (parseInt(viewWidth, 10) < this.mmToPx(this.sumOfMinColWidth)) {
                this.coverChildTable = true;
            }
            else {
                this.coverChildTable = false;
            }
            this.changeDetectorRef.markForCheck();
        };
        PepInternalPageComponent.prototype.showMatrixDialog = function () {
            var _this = this;
            var config = this.dialogService.getDialogConfig({
                disableClose: false,
                // minWidth: '50vw',
                // maxWidth: '90vw',
                // maxHeight: '90vh',
            }, 'large');
            var dialogRef = this.dialogService.openDialog(this.matrixDialogTemplate, {}, config);
            dialogRef.afterOpened().subscribe(function () {
                _this.fillData(true);
            });
            dialogRef.afterClosed().subscribe(function (value) {
                _this.fillData(false);
            });
        };
        PepInternalPageComponent.prototype.ngOnInit = function () {
            var _this = this;
            // let field = this.field as PepInternalPageField;
            this.internalPageService.initDetails(this.field.objectId, this.field.parentId, this.field.searchCode, function (resViewTypes) {
                var e_2, _f;
                // my code DI-7134
                resViewTypes.Rows = resViewTypes.Rows.filter(function (item) { return item.Key !== 'OrderCenterView1'; });
                if (resViewTypes.Rows && resViewTypes.Rows.length > 0) {
                    if (!resViewTypes.Default) {
                        resViewTypes.Default = resViewTypes.Rows[0].Key;
                    }
                    _this.childViewTypes = resViewTypes.Rows;
                    _this.currentViewType = resViewTypes.Rows[0];
                    try {
                        // for (var i = 0; i < resViewTypes.Rows.length; i++) {
                        for (var _g = __values(resViewTypes.Rows), _h = _g.next(); !_h.done; _h = _g.next()) {
                            var viewTypeRow = _h.value;
                            if (viewTypeRow.Value === resViewTypes.Default) {
                                _this.currentViewType = viewTypeRow;
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_h && !_h.done && (_f = _g.return)) _f.call(_g);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    _this.loadLastAdditionalApiName();
                    _this.changeChildrenViewType(_this.currentViewType.Key);
                }
            });
            this.resize = rxjs.fromEvent(window, 'resize')
                .pipe(operators.debounceTime(10))
                .subscribe(function (event) {
                _this.setViewCover(_this.rows);
            });
        };
        PepInternalPageComponent.prototype.loadLastAdditionalApiName = function () {
            var daa = sessionStorage.getItem(PepInternalPageComponent.CURRENT_ADDITIONAL_API_NAME);
            if (daa && daa.length > 0) {
                var additionalApiName = JSON.parse(daa);
                this.currentAdditionalApiName = additionalApiName;
                this.internalPageService.additionalApiName = additionalApiName === null || additionalApiName === void 0 ? void 0 : additionalApiName.Key;
            }
        };
        PepInternalPageComponent.prototype.ngOnDestroy = function () {
            // if (this.childChange) {
            //     this.childChange.unsubscribe();
            // }
            // if (this.childClick) {
            //     this.childClick.unsubscribe();
            // }
            if (this.resize) {
                this.resize.unsubscribe();
            }
        };
        PepInternalPageComponent.prototype.changeAdditionalApiName = function (additionalApiName) {
            var _this = this;
            this.internalPageService.changeAdditionalApiName(additionalApiName ? additionalApiName.Key : '', function (res) {
                var e_3, _f;
                try {
                    // for (let index = 0; index < res.Rows.length; index++) {
                    for (var _g = __values(res.Rows), _h = _g.next(); !_h.done; _h = _g.next()) {
                        var row = _h.value;
                        _this.updateChanges(row);
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_h && !_h.done && (_f = _g.return)) _f.call(_g);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
                _this.changeDetectorRef.markForCheck();
            });
            sessionStorage.setItem(PepInternalPageComponent.CURRENT_ADDITIONAL_API_NAME, JSON.stringify(additionalApiName));
            setTimeout(function () {
                _this.currentAdditionalApiName = additionalApiName;
            }, 0);
        };
        PepInternalPageComponent.prototype.setTotalsRow = function () {
            var e_4, _f;
            this.totalsRow = [];
            if (this.isMatrixView() || this.isFlatMatrixView()) {
                var totalCol = 0;
                var items = this.customList.items;
                if (items) {
                    for (var col = 0; col < items[0].Fields.length; col++) {
                        var field = items[0].Fields[col];
                        if (field.FieldType === ngxLib.FIELD_TYPE.NumberIntegerForMatrix ||
                            field.FieldType ===
                                ngxLib.FIELD_TYPE.NumberIntegerQuantitySelector ||
                            field.FieldType === ngxLib.FIELD_TYPE.NumberRealForMatrix ||
                            field.FieldType ===
                                ngxLib.FIELD_TYPE.NumberRealQuantitySelector ||
                            field.FieldType === ngxLib.FIELD_TYPE.CalculatedInt ||
                            field.FieldType === ngxLib.FIELD_TYPE.NumberInteger ||
                            field.FieldType === ngxLib.FIELD_TYPE.CalculatedReal ||
                            field.FieldType === ngxLib.FIELD_TYPE.NumberReal) {
                            totalCol = 0;
                            try {
                                for (var items_1 = (e_4 = void 0, __values(items)), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                                    var listItem = items_1_1.value;
                                    if (listItem.Fields[col] &&
                                        listItem.Fields[col].Value) {
                                        var num = parseFloat(listItem.Fields[col].Value);
                                        totalCol += isNaN(num) ? 0 : num;
                                    }
                                }
                            }
                            catch (e_4_1) { e_4 = { error: e_4_1 }; }
                            finally {
                                try {
                                    if (items_1_1 && !items_1_1.done && (_f = items_1.return)) _f.call(items_1);
                                }
                                finally { if (e_4) throw e_4.error; }
                            }
                            this.totalsRow.push(totalCol);
                        }
                        else {
                            this.totalsRow.push('');
                        }
                    }
                }
            }
        };
        PepInternalPageComponent.prototype.updateChanges = function (elementToUpdate) {
            this.customList.updateItem(elementToUpdate);
            // Update memory data
            for (var index = 0; index < this.childData.Rows.length; index++) {
                if (this.childData.Rows[index].UID === elementToUpdate.UID) {
                    this.childData.Rows[index] = elementToUpdate;
                }
            }
        };
        PepInternalPageComponent.prototype.setValueCallback = function (id, res) {
            if (res.Rows.length === 1) {
                var field = res.Rows[0].Fields.find(function (f) { return f.ApiName === 'ObjectMenu'; });
                if (field) {
                    // HACK : Until "Enabled" returns from the server, we set PepMenu to be
                    //        Disabled in cart on regular items and not campign items.
                    field.Enabled = true;
                }
                this.updateChanges(res.Rows[0]);
            }
            this.setTotalsRow();
            this.checkForChanges = new Date();
            // DI-15985
            this.childChange.emit(res);
            this.changeDetectorRef.markForCheck();
        };
        PepInternalPageComponent.prototype.onCustomizeObjectChanged = function (customizeObjectChangedData) {
            var _this = this;
            this.internalPageService.childValueChanged(customizeObjectChangedData.id, customizeObjectChangedData.key, customizeObjectChangedData.value, function (res) {
                _this.setValueCallback(customizeObjectChangedData.id, res);
            });
        };
        PepInternalPageComponent.prototype.onCustomizeFieldClick = function (fieldClickEvent) {
            var _this = this;
            var handledEvent = false;
            // For the new custom form, the plus and minus events transform in the IPepFormFieldValueChangeEvent
            if (fieldClickEvent.controlType === 'qs') {
                if (fieldClickEvent.value === quantitySelector.PepQuantitySelectorComponent.PLUS) {
                    handledEvent = true;
                    this.internalPageService.childPlusClick(fieldClickEvent.id, fieldClickEvent.key, function (res) {
                        _this.setValueCallback(fieldClickEvent.id, res);
                    });
                }
                else if (fieldClickEvent.value === quantitySelector.PepQuantitySelectorComponent.MINUS) {
                    handledEvent = true;
                    this.internalPageService.childMinusClick(fieldClickEvent.id, fieldClickEvent.key, function (res) {
                        _this.setValueCallback(fieldClickEvent.id, res);
                    });
                }
            }
            if (!handledEvent) {
                this.childClick.emit(fieldClickEvent);
            }
        };
        return PepInternalPageComponent;
    }());
    PepInternalPageComponent.CURRENT_ADDITIONAL_API_NAME = 'item_details_currentAdditionalApiName';
    PepInternalPageComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'pep-internal-page',
                    template: "<ng-template #matrixHeaderTemplate>\n    <div class=\"matrix-title-container pep-border-bottom align-{{\n            field.xAlignment\n        }}\" title=\"{{ field.label }}\">\n        <span class=\"block-with-text body-md\">{{ field.label }}</span>\n\n        <div class=\"buttons-container pep-spacing-element-negative pull-right flip\">\n            <ng-container *ngIf=\"\n                    currentViewType?.Key == 'OrderCenterMatrix' &&\n                    additionalApiNames &&\n                    additionalApiNames.length > 0\n                \">\n                <button class=\"pep-spacing-element pep-button icon-button sm weak\" mat-button [matMenuTriggerFor]=\"menu\"\n                    menu-blur>\n                    <span class=\"pull-left flip\" *ngIf=\"currentAdditionalApiName\">&nbsp;{{\n                        currentAdditionalApiName?.Value }}&nbsp;</span>\n\n                    <mat-icon [ngClass]=\"{'pull-left flip': currentAdditionalApiName}\">\n                        <pep-icon name=\"system_info\"></pep-icon>\n                    </mat-icon>\n                </button>\n                <mat-menu #menu=\"matMenu\" xPosition=\"before\">\n                    <button mat-menu-item [ngClass]=\"{\n                            selected: currentAdditionalApiName === null\n                        }\" (click)=\"changeAdditionalApiName(null)\">\n                        <span>{{ \"LIST.NONE\" | translate }}</span>\n                    </button>\n                    <button mat-menu-item [ngClass]=\"{\n                            selected:\n                                currentAdditionalApiName?.Key ==\n                                additionalApiName?.Key\n                        }\" *ngFor=\"let additionalApiName of additionalApiNames\"\n                        (click)=\"changeAdditionalApiName(additionalApiName)\">\n                        <span>{{ additionalApiName.Value }}</span>\n                    </button>\n                </mat-menu>\n            </ng-container>\n            <ng-container *ngIf=\"childViewTypes && childViewTypes.length > 1\">\n                <button class=\"pep-spacing-element pep-button icon-button sm weak\" mat-button\n                    [matMenuTriggerFor]=\"viewsMenu\" menu-blur>\n                    <mat-icon>\n                        <pep-icon name=\"view_card_md\"></pep-icon>\n                    </mat-icon>\n                </button>\n\n                <mat-menu #viewsMenu=\"matMenu\" xPosition=\"before\">\n                    <button mat-menu-item [ngClass]=\"{\n                            selected: currentViewType?.Key == viewType?.Key\n                        }\" *ngFor=\"let viewType of childViewTypes\" (click)=\"changeChildrenViewType(viewType?.Key)\">\n                        <mat-icon [ngSwitch]=\"viewType?.Key\">\n                            <pep-icon *ngSwitchCase=\"'OrderCenterMatrix'\" name=\"view_matrix\"></pep-icon>\n                            <pep-icon *ngSwitchCase=\"'OrderCenterFlatMatrixGrid'\" name=\"view_table\"></pep-icon>\n                            <pep-icon *ngSwitchCase=\"'OrderCenterFlatMatrixLine'\" name=\"view_line\"></pep-icon>\n                        </mat-icon>\n                        <span>{{ viewType?.Value }}</span>\n                    </button>\n                </mat-menu>\n            </ng-container>\n        </div>\n    </div>\n\n</ng-template>\n\n<ng-template #matrixTemplate>\n    <div #matrixContainer class=\"matrix-container\">\n        <pep-internal-list (valueChange)=\"onCustomizeObjectChanged($event)\" [parentScroll]=\"matrixContainer\"\n            (fieldClick)=\"onCustomizeFieldClick($event)\" [totalsRow]=\"totalsRow\"></pep-internal-list>\n    </div>\n</ng-template>\n\n<div #mainViewCont id=\"mainViewCont\" [ngStyle]=\"{ 'max-width': viewWidth, 'max-height': viewHeight }\">\n    <div #my1mm id=\"my1_mm\" style=\"height:1mm;width:1mm;visibility: hidden;\"></div>\n    <ng-container *ngIf=\"coverChildTable && uiControl != null\">\n        <div class=\"table-cover\"></div>\n        <button (click)=\"showMatrixDialog()\" class=\"pep-button strong sm table-cover-button\"\n            [ngClass]=\"{ 'lineview-btn': currentViewType?.Key == 'OrderCenterFlatMatrixLine'}\">\n            {{ \"INTERNAL_PAGE.CLICK_TO_ORDER\" | translate }}\n        </button>\n    </ng-container>\n\n    <ng-container *ngTemplateOutlet=\"matrixHeaderTemplate\"></ng-container>\n    <ng-container #orgCont></ng-container>\n</div>\n\n<ng-template #matrixDialogTemplate>\n\n    <div mat-dialog-title>\n        <ng-container *ngTemplateOutlet=\"matrixHeaderTemplate\"></ng-container>\n    </div>\n\n    <div mat-dialog-content>\n        <ng-container #dialogCont></ng-container>\n    </div>\n</ng-template>\n\n<!-- <div id=\"childGridModal\" bsModal (onShown)=\"onShown()\" (onHidden)=\"onHidden()\" #childModal=\"bs-modal\" class=\"modal\"\n    tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"gridModalLabel\" aria-hidden=\"true\">\n    <div class=\"modal-dialog\" role=\"document\">\n        <div class=\"modal-content\">\n            <div class=\"modal-body matrix-dialog-body\">\n                <ng-container #modalCont></ng-container>\n            </div>\n        </div>\n    </div>\n</div> -->",
                    providers: [PepInternalPageService],
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    styles: [":host{display:grid;width:inherit;height:inherit}.matrix-title-container{padding:0;height:2.5rem;height:var(--pep-form-field-height,2.5rem);display:flex;align-items:flex-end}.matrix-title-container .block-with-text{width:100%;max-height:inherit;font-weight:600;font-weight:var(--pep-font-weight-bold,600);display:block;text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.matrix-title-container .buttons-container{display:flex;align-self:center}.matrix-title-container .buttons-container .pep-button,.matrix-title-container .buttons-container .pepperi-button{width:-webkit-max-content;width:-moz-max-content;width:max-content}#mainViewCont{width:100%;height:inherit;overflow:hidden;padding:0 .25rem;padding:0 var(--pep-spacing-xs,.25rem)}#mainViewCont .table-cover{background-color:#fff;z-index:98;position:absolute;top:0;width:100%;height:inherit;opacity:.5}#mainViewCont .table-cover-button{position:absolute;left:50%;transform:translate(-50%,-50%);top:calc(50% + 2.5rem);top:calc(50% + var(--pep-form-field-height, 2.5rem));z-index:99}#mainViewCont .table-cover-button.lineview-btn{top:calc(2 * 2.5rem);top:calc(2 * var(--pep-form-field-height, 2.5rem));transform:translate(-50%)}#mainViewCont .underCover{max-height:inherit;overflow:hidden}#mainViewCont ::ng-deep.table-header{top:unset!important}"]
                },] }
    ];
    PepInternalPageComponent.ctorParameters = function () { return [
        { type: forms.FormBuilder },
        { type: dialog.PepDialogService },
        { type: PepInternalPageService },
        { type: ngxLib.PepCustomizationService },
        { type: core.ElementRef },
        { type: core.ChangeDetectorRef }
    ]; };
    PepInternalPageComponent.propDecorators = {
        field: [{ type: core.Input }],
        layoutType: [{ type: core.Input }],
        childChange: [{ type: core.Output }],
        childClick: [{ type: core.Output }],
        my1mm: [{ type: core.ViewChild, args: ['my1mm',] }],
        mainViewCont: [{ type: core.ViewChild, args: ['mainViewCont',] }],
        orgCont: [{ type: core.ViewChild, args: ['orgCont', { read: core.ViewContainerRef },] }],
        dialogCont: [{ type: core.ViewChild, args: ['dialogCont', { read: core.ViewContainerRef },] }],
        matrixTemplate: [{ type: core.ViewChild, args: ['matrixTemplate',] }],
        matrixDialogTemplate: [{ type: core.ViewChild, args: ['matrixDialogTemplate', { read: core.TemplateRef },] }],
        customList: [{ type: core.ViewChild, args: [PepInternalListComponent,] }]
    };

    var pepComponentsModules = [
        address.PepAddressModule,
        attachment.PepAttachmentModule,
        button.PepButtonModule,
        checkbox.PepCheckboxModule,
        date.PepDateModule,
        image.PepImageModule,
        imagesFilmstrip.PepImagesFilmstripModule,
        quantitySelector.PepQuantitySelectorModule,
        richHtmlTextarea.PepRichHtmlTextareaModule,
        select.PepSelectModule,
        separator.PepSeparatorModule,
        signature.PepSignatureModule,
        textarea.PepTextareaModule,
        textbox.PepTextboxModule,
    ];
    var PepFormModule = /** @class */ (function () {
        function PepFormModule(pepIconRegistry) {
            this.pepIconRegistry = pepIconRegistry;
            this.pepIconRegistry.registerIcons([
                icon.pepIconSystemEdit,
                icon.pepIconSystemMenu,
                icon.pepIconNumberPlus,
                icon.pepIconSystemBin,
                icon.pepIconIndicatorDotPlaceholder,
            ]);
        }
        return PepFormModule;
    }());
    PepFormModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.ReactiveFormsModule,
                        // Material modules,
                        core$2.MatCommonModule,
                        formField.MatFormFieldModule,
                        button$1.MatButtonModule,
                        gridList.MatGridListModule,
                        icon$1.MatIconModule,
                        menu.MatMenuModule,
                        // External modules
                        ngxSignaturepad.SignaturePadModule,
                        // ngx-lib modules
                        ngxLib.PepNgxLibModule,
                        dialog.PepDialogModule,
                        icon.PepIconModule,
                        pepComponentsModules,
                        fieldTitle.PepFieldTitleModule,
                        groupButtons.PepGroupButtonsModule,
                    ],
                    exports: [PepFormComponent],
                    declarations: [
                        PepFormComponent,
                        PepFieldGeneratorComponent,
                        PepIndicatorsComponent,
                        PepInternalButtonComponent,
                        PepInternalListComponent,
                        PepInternalMenuComponent,
                        PepInternalPageComponent,
                    ],
                },] }
    ];
    PepFormModule.ctorParameters = function () { return [
        { type: icon.PepIconRegistry }
    ]; };

    /*
     * Public API Surface of ngx-lib/form
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.PepFormComponent = PepFormComponent;
    exports.PepFormModule = PepFormModule;
    exports.ɵa = PepFieldGeneratorComponent;
    exports.ɵb = PepIndicatorsComponent;
    exports.ɵc = PepInternalButtonComponent;
    exports.ɵd = PepInternalListComponent;
    exports.ɵe = PepInternalMenuComponent;
    exports.ɵf = PepInternalPageComponent;
    exports.ɵg = PepInternalPageService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=pepperi-addons-ngx-lib-form.umd.js.map
