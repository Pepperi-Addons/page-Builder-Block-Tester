(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/material/core'), require('@angular/material/icon'), require('@angular/material/form-field'), require('@pepperi-addons/ngx-lib/icon'), require('@pepperi-addons/ngx-lib')) :
    typeof define === 'function' && define.amd ? define('@pepperi-addons/ngx-lib/field-title', ['exports', '@angular/core', '@angular/common', '@angular/material/core', '@angular/material/icon', '@angular/material/form-field', '@pepperi-addons/ngx-lib/icon', '@pepperi-addons/ngx-lib'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['pepperi-addons'] = global['pepperi-addons'] || {}, global['pepperi-addons']['ngx-lib'] = global['pepperi-addons']['ngx-lib'] || {}, global['pepperi-addons']['ngx-lib']['field-title'] = {}), global.ng.core, global.ng.common, global.ng.material.core, global.ng.material.icon, global.ng.material.formField, global['pepperi-addons']['ngx-lib'].icon, global['pepperi-addons']['ngx-lib']));
}(this, (function (exports, core, common, core$1, icon$1, formField, icon, ngxLib) { 'use strict';

    var PepFieldTitleComponent = /** @class */ (function () {
        function PepFieldTitleComponent() {
            this.label = '';
            this.mandatory = false;
            this.disabled = false;
            this.maxFieldCharacters = 0;
            this.hint = '';
            this.xAlignment = ngxLib.DEFAULT_HORIZONTAL_ALIGNMENT;
            this.showTitle = true;
            this.inputLength = 0;
        }
        return PepFieldTitleComponent;
    }());
    PepFieldTitleComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'pep-field-title',
                    template: "<div class=\"mat-form-title\" [ngClass]=\"{disable: disabled}\" [ngStyle]=\"{'text-align': xAlignment }\">\n    <ng-container *ngIf=\"xAlignment == 'right' then rightTemplate else leftTemplate\">\n    </ng-container>\n    <ng-template #rightTemplate>\n        <ng-container *ngTemplateOutlet=\"hintTemplate\"></ng-container>\n        <ng-container *ngTemplateOutlet=\"titleTemplate\"></ng-container>\n        <ng-container *ngTemplateOutlet=\"requiredTemplate\"></ng-container>\n    </ng-template>\n    <ng-template #leftTemplate>\n        <ng-container *ngTemplateOutlet=\"requiredTemplate\"></ng-container>\n        <ng-container *ngTemplateOutlet=\"titleTemplate\"></ng-container>\n        <ng-container *ngTemplateOutlet=\"hintTemplate\"></ng-container>\n    </ng-template>\n\n    <ng-template #requiredTemplate>\n        <mat-icon *ngIf=\"mandatory\" class=\"pep-spacing-element\">\n            <pep-icon name=\"system_must\"></pep-icon>\n        </mat-icon>\n        <!-- For the grid template () -->\n        <span *ngIf=\"!mandatory\"></span>\n    </ng-template>\n    <ng-template #titleTemplate>\n        <mat-label *ngIf=\"showTitle\" [title]=\"label\" class=\"body-xs\">\n            {{ label }}\n        </mat-label>\n        <!-- For the grid template () -->\n        <span *ngIf=\"!showTitle\"></span>\n    </ng-template>\n    <ng-template #hintTemplate>\n        <ng-container *ngIf=\"hint?.length > 0 then hintTextTemplate else maxCharactersTemplate\">\n        </ng-container>\n        <ng-template #hintTextTemplate>\n            <span class=\"body-xs\">\n                &nbsp;{{ hint }}\n            </span>\n        </ng-template>\n        <ng-template #maxCharactersTemplate>\n            <span *ngIf=\"maxFieldCharacters > 0\" class=\"body-xs\">\n                &nbsp;{{ inputLength || 0 }}/{{ maxFieldCharacters }}\n            </span>\n            <!-- For the grid template () -->\n            <span *ngIf=\"maxFieldCharacters === 0\"></span>\n        </ng-template>\n    </ng-template>\n</div>",
                    styles: [":host{display:grid;width:inherit}"]
                },] }
    ];
    PepFieldTitleComponent.propDecorators = {
        label: [{ type: core.Input }],
        mandatory: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        maxFieldCharacters: [{ type: core.Input }],
        hint: [{ type: core.Input }],
        xAlignment: [{ type: core.Input }],
        showTitle: [{ type: core.Input }],
        inputLength: [{ type: core.Input }]
    };

    var PepFieldTitleModule = /** @class */ (function () {
        function PepFieldTitleModule(pepIconRegistry) {
            this.pepIconRegistry = pepIconRegistry;
            this.pepIconRegistry.registerIcons([icon.pepIconSystemMust]);
        }
        return PepFieldTitleModule;
    }());
    PepFieldTitleModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        // Material modules,
                        core$1.MatCommonModule,
                        icon$1.MatIconModule,
                        formField.MatFormFieldModule,
                        // ngx-lib modules
                        icon.PepIconModule,
                    ],
                    exports: [PepFieldTitleComponent],
                    declarations: [PepFieldTitleComponent],
                },] }
    ];
    PepFieldTitleModule.ctorParameters = function () { return [
        { type: icon.PepIconRegistry }
    ]; };

    /*
     * Public API Surface of ngx-lib/field-title
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.PepFieldTitleComponent = PepFieldTitleComponent;
    exports.PepFieldTitleModule = PepFieldTitleModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=pepperi-addons-ngx-lib-field-title.umd.js.map
