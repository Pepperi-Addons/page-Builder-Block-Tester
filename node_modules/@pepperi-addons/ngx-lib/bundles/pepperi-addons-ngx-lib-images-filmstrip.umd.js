(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('@angular/material/core'), require('@angular/material/form-field'), require('@angular/material/dialog'), require('@angular/material/icon'), require('@pepperi-addons/ngx-lib'), require('@pepperi-addons/ngx-lib/field-title'), require('@pepperi-addons/ngx-lib/icon'), require('@pepperi-addons/ngx-lib/dialog'), require('ng-gallery'), require('@hallysonh/ngx-imageviewer'), require('@ngx-translate/core'), require('hammerjs')) :
    typeof define === 'function' && define.amd ? define('@pepperi-addons/ngx-lib/images-filmstrip', ['exports', '@angular/core', '@angular/common', '@angular/forms', '@angular/material/core', '@angular/material/form-field', '@angular/material/dialog', '@angular/material/icon', '@pepperi-addons/ngx-lib', '@pepperi-addons/ngx-lib/field-title', '@pepperi-addons/ngx-lib/icon', '@pepperi-addons/ngx-lib/dialog', 'ng-gallery', '@hallysonh/ngx-imageviewer', '@ngx-translate/core', 'hammerjs'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['pepperi-addons'] = global['pepperi-addons'] || {}, global['pepperi-addons']['ngx-lib'] = global['pepperi-addons']['ngx-lib'] || {}, global['pepperi-addons']['ngx-lib']['images-filmstrip'] = {}), global.ng.core, global.ng.common, global.ng.forms, global.ng.material.core, global.ng.material.formField, global.ng.material.dialog, global.ng.material.icon, global['pepperi-addons']['ngx-lib'], global['pepperi-addons']['ngx-lib']['field-title'], global['pepperi-addons']['ngx-lib'].icon, global['pepperi-addons']['ngx-lib'].dialog, global.gallery, global['image-viewer'], global.translate));
}(this, (function (exports, core, common, forms, core$2, formField, dialog$1, icon$1, ngxLib, fieldTitle, icon, dialog, ngGallery, ngxImageviewer, core$1) { 'use strict';

    function createViewerConfig(translate) {
        return {
            // width: 850,
            // height: 150,
            bgStyle: '#FFF',
            // scaleStep: 0.1, // zoom scale step (using the zoom in/out buttons)
            // rotateStepper: false, // touch rotate should rotate only 90 to 90 degrees
            loadingMessage: translate.instant('MESSAGES.INFO_LOADING_FILE'),
            // buttonStyle: {
            //     iconFontFamily: 'Material Icons', // font used to render the button icons
            //     alpha: 0.5, // buttons' transparence value
            //     hoverAlpha: 0.7, // buttons' transparence value when mouse is over
            //     bgStyle: '#000000', //  buttons' background style
            //     iconStyle: '#ffffff', // buttons' icon colors
            //     borderStyle: '#000000', // buttons' border style
            //     borderWidth: 0, // buttons' border width (0 == disabled)
            // },
            // tooltips: {
            //     enabled: true, // enable or disable tooltips for buttons
            //     bgStyle: '#000000', // tooltip background style
            //     bgAlpha: 0.5, // tooltip background transparence
            //     textStyle: '#ffffff', // tooltip's text style
            //     textAlpha: 0.9, // tooltip's text transparence
            //     padding: 15, // tooltip padding
            //     radius: 20, // tooltip border radius
            // },
            // shorter button configuration style
            nextPageButton: ngxImageviewer.createButtonConfig('navigate_next', 'Next page', 0, false),
            beforePageButton: ngxImageviewer.createButtonConfig('navigate_before', 'Previous page', 1, false),
            zoomOutButton: ngxImageviewer.createButtonConfig('zoom_out', 'Zoom out', 0, false),
            zoomInButton: ngxImageviewer.createButtonConfig('zoom_in', 'Zoom in', 1, false),
            rotateLeftButton: ngxImageviewer.createButtonConfig('rotate_left', 'Rotate left', 2, false),
            rotateRightButton: ngxImageviewer.createButtonConfig('rotate_right', 'Rotate right', 3, false),
            resetButton: ngxImageviewer.createButtonConfig('autorenew', 'Reset', 4, false),
        };
    }
    var PepImagesFilmstripComponent = /** @class */ (function () {
        function PepImagesFilmstripComponent(customizationService, dialogService, layoutService, fileService, gallery, renderer, element, cd, dialogRef, data) {
            var _this = this;
            this.customizationService = customizationService;
            this.dialogService = dialogService;
            this.layoutService = layoutService;
            this.fileService = fileService;
            this.gallery = gallery;
            this.renderer = renderer;
            this.element = element;
            this.cd = cd;
            this.dialogRef = dialogRef;
            this.data = data;
            // @ViewChild('ngxViewerImage') ngxViewerImage: any; // TODO: Check if we need to use this??
            this.key = '';
            this.value = '';
            this.label = '';
            this.xAlignment = ngxLib.DEFAULT_HORIZONTAL_ALIGNMENT;
            this._rowSpan = 1;
            this.controlType = 'images';
            this.form = null;
            this.uid = '0';
            this.showTitle = false;
            this._layoutType = 'form';
            this.currIndex = 0;
            this.showThumbnails = false;
            this.items = null;
            this.inDialog = false;
            this.mandatory = false;
            this.readonly = false;
            this.disabled = false;
            this.fieldHeight = '';
            this.standAlone = false;
            this.galleryWidth = 0;
            this.isVertical = false;
            // If data exist copy all data properties into this.
            if (dialogRef && data) {
                this.inDialog = true;
                Object.keys(data).forEach(function (key) {
                    if (key in _this) {
                        _this[key] = data[key];
                    }
                });
            }
            this.config = {
                // nav: false, // Show navigation buttons
                navIcon: icon.pepIconArrowRightAlt.data,
                // loop: true,
                // zoomOut: 0,
                // dots: false,
                // dotsPosition: 'bottom',
                // counterPosition: 'top',
                // thumb: true,
                counter: false,
                gestures: true,
                // autoPlay: false,
                // thumbWidth: 120,
                // thumbHeight: 90,
                imageSize: 'contain',
                // panSensitivity: 25,
                // disableThumb: false,
                // playerInterval: 3000,
                // thumbMode: ThumbnailsMode.Free,
                // thumbPosition: ThumbnailsPosition.Bottom,
                loadingStrategy: ngGallery.LoadingStrategy.Default,
                // slidingDirection: SlidingDirection.Horizontal,
            };
        }
        Object.defineProperty(PepImagesFilmstripComponent.prototype, "rowSpan", {
            get: function () {
                return this._rowSpan;
            },
            set: function (value) {
                this._rowSpan = value;
                this.setFieldHeight();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PepImagesFilmstripComponent.prototype, "layoutType", {
            get: function () {
                return this._layoutType;
            },
            set: function (value) {
                this._layoutType = value;
                this.setFieldHeight();
            },
            enumerable: false,
            configurable: true
        });
        PepImagesFilmstripComponent.prototype.setFieldHeight = function () {
            this.fieldHeight = this.customizationService.calculateFieldHeight(this.layoutType, this.rowSpan, this.standAlone);
        };
        PepImagesFilmstripComponent.prototype.setDefaultForm = function () {
            var pepField = new ngxLib.PepImagesField({
                key: this.key,
                value: this.value,
                mandatory: this.mandatory,
                readonly: this.readonly,
                disabled: this.disabled,
            });
            this.form = this.customizationService.getDefaultFromGroup(pepField);
        };
        PepImagesFilmstripComponent.prototype.ngOnInit = function () {
            if (!this.inDialog) {
                if (this.form === null) {
                    this.standAlone = true;
                    this.setFieldHeight();
                    this.setDefaultForm();
                    this.renderer.addClass(this.element.nativeElement, ngxLib.PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME);
                }
            }
            if (this.items === null) {
                var imgArr = this.value ? this.value.split(';') : [];
                // add No image image when there is no images
                if (imgArr.length === 0) {
                    var noImageSrc = this.fileService.getSvgAsImageSrc(icon.pepIconNoImage2.data);
                    imgArr.push(noImageSrc);
                }
                this.items = imgArr.map(function (img) { return new ngGallery.ImageItem({ src: img, thumb: img }); });
            }
            this.config.dots = this.config.nav = this.items.length > 1;
            this.config.thumb =
                (this.key === 'ItemFilmstripImages' || this.showThumbnails) &&
                    this.items.length > 1
                    ? true
                    : false;
            this.currIndex =
                this.key === 'ItemFilmstripImages' &&
                    this.currIndex === 0 &&
                    this.items.length > 1
                    ? Math.floor(this.items.length / 2) - 1
                    : this.currIndex;
        };
        PepImagesFilmstripComponent.prototype.ngAfterViewInit = function () {
            if (this.inDialog) {
                this.afterDialogOpened();
            }
            else {
                this.galleryRef = this.gallery.ref(this.key + "-" + this.uid + "-gallery");
                this.initGalleryStyle(this.galleryCont, this.galleryRef);
            }
        };
        PepImagesFilmstripComponent.prototype.ngOnChanges = function () {
            if (this.standAlone) {
                this.setDefaultForm();
            }
        };
        PepImagesFilmstripComponent.prototype.ngOnDestroy = function () {
            if (this.galleryRef) {
                this.galleryRef.destroy();
            }
            if (this.dialogGalleryRef) {
                this.dialogGalleryRef.destroy();
            }
            // if (this.myPinch) { this.myPinch.destroy(); }
        };
        PepImagesFilmstripComponent.prototype.initGalleryStyle = function (galleryContainer, galleryRef) {
            var _this = this;
            setTimeout(function () {
                // Set thumbnails position and sliding direction
                _this.setThumbnailDimension(galleryContainer);
                galleryRef.setConfig(_this.config);
            }, 0);
            var currentIndex = this.currIndex;
            if (currentIndex > 0) {
                setTimeout(function () {
                    galleryRef.load(_this.items);
                    galleryRef.set(currentIndex);
                }, 0);
                // galleryRef.set(currentIndex);
            }
            else {
                galleryRef.load(this.items);
            }
        };
        PepImagesFilmstripComponent.prototype.onError = function (e) {
            var noImageSrc = this.fileService.getSvgAsImageSrc(icon.pepIconNoImage2.data);
            var noimg = new ngGallery.ImageItem({ src: noImageSrc, thumb: noImageSrc });
            this.items.splice(e.itemIndex, 1, noimg);
        };
        PepImagesFilmstripComponent.prototype.enlargeImage = function (event) {
            var _this = this;
            var config = this.dialogService.getDialogConfig({}, 'inline');
            config.maxWidth = '75vw';
            config.height = '95vh';
            var dialogRef = this.dialogService.openDialog(this.galleryDialogTemplate, {
                currIndex: this.currIndex,
            }, config);
            dialogRef.afterOpened().subscribe(function () {
                _this.afterDialogOpened();
            });
            // Update currentIndex in galleryRef
            // dialogRef.afterClosed().subscribe(value => {
            //     this.galleryRef.set(this.currIndex);
            // });
        };
        PepImagesFilmstripComponent.prototype.afterDialogOpened = function () {
            this.dialogGalleryRef = this.gallery.ref(this.key + "-" + this.uid + "-dlgGallery");
            this.initGalleryStyle(this.galleryDialogCont, this.dialogGalleryRef);
        };
        PepImagesFilmstripComponent.prototype.setThumbnailDimension = function (galleryContainer) {
            this.galleryWidth = galleryContainer.nativeElement.clientWidth;
            // this.galleryHeight = galleryContainer.nativeElement.clientHeight - 32; // TODO - TALK WITH TOMER
            this.galleryHeight = this.inDialog
                ? galleryContainer.nativeElement.clientHeight - 32
                : galleryContainer.nativeElement.clientHeight;
            // this.galleryHeight = galleryContainer.nativeElement.clientHeight - 32;
            this.cd.detectChanges();
            this.isVertical = this.galleryWidth < this.galleryHeight;
            this.cd.detectChanges();
            if (this.isVertical) {
                var width = (this.galleryWidth - (this.items.length - 1) * 16) /
                    this.items.length;
                width = Math.min(Math.max(width, 24), 96);
                this.config.thumbHeight = width;
                this.config.thumbWidth = width + 16;
            }
            else {
                var height = (this.galleryHeight - (this.items.length - 1) * 16) /
                    this.items.length;
                height = Math.min(Math.max(height, 24), 96);
                this.config.thumbHeight = height + 16;
                this.config.thumbWidth = height;
            }
            this.config.thumbPosition = this.isVertical
                ? ngGallery.ThumbnailsPosition.Bottom
                : this.layoutService.isRtl()
                    ? ngGallery.ThumbnailsPosition.Right
                    : ngGallery.ThumbnailsPosition.Left;
            this.config.slidingDirection =
                this.key !== 'ItemFilmstripImages'
                    ? ngGallery.SlidingDirection.Horizontal
                    : this.isVertical
                        ? ngGallery.SlidingDirection.Horizontal
                        : ngGallery.SlidingDirection.Vertical;
            this.config.imageSize = 'contain';
        };
        PepImagesFilmstripComponent.prototype.indexChange = function (item) {
            this.currIndex = item.currIndex;
            // if (this.ngxViewerImage && this.ngxViewerImage.scale) {
            //     this.ngxViewerImage.scale = 1;
            //     this.updateStyle();
            // }
        };
        return PepImagesFilmstripComponent;
    }());
    PepImagesFilmstripComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'pep-images-filmstrip',
                    template: "<ng-container *ngIf=\"inDialog; then galleryDialogTemplate; else regularTemplate\"></ng-container>\n<ng-template #regularTemplate>\n    <ng-container [formGroup]=\"form\">\n        <div class=\"images-filmstrip-container\">\n            <pep-field-title [label]=\"label\" [xAlignment]=\"xAlignment\" [showTitle]=\"showTitle\">\n            </pep-field-title>\n            <div #galleryCont class=\"img-wrapper\" [ngClass]=\"isVertical ? 'vertical-gallery' : 'horizontal-gallery'\"\n                [style.height]=\"fieldHeight\">\n                <gallery id=\"{{key}}-{{uid}}-gallery\" (itemClick)=\"enlargeImage($event);\" [imageSize]=\"'contain'\"\n                    (indexChange)=\"indexChange($event)\" (error)=\"onError($event)\">\n                </gallery>\n            </div>\n        </div>\n    </ng-container>\n</ng-template>\n\n<ng-template #galleryDialogTemplate>\n    <div class=\"gallery-dialog\">\n        <pep-dialog [title]=\"label\" [showFooter]=\"false\">\n            <div pep-dialog-content #galleryDialogCont class=\"gallery-dialog-content\"\n                [ngClass]=\"isVertical ? 'vertical-gallery' : 'horizontal-gallery'\">\n                <gallery id=\"{{key}}-{{uid}}-dlgGallery\" [imageSize]=\"'contain'\" (indexChange)=\"indexChange($event)\"\n                    (error)=\"onError($event)\">\n                </gallery>\n            </div>\n        </pep-dialog>\n    </div>\n</ng-template>\n\n<!-- Add custom template to image items -->\n<ng-template #itemTemplate let-index=\"index\" let-type=\"type\" let-data=\"data\" let-currIndex=\"currIndex\">\n    <ng-container *ngIf=\"index === currIndex\">\n        <ngx-imageviewer [src]=\"data.src\">\n        </ngx-imageviewer>\n    </ng-container>\n</ng-template>",
                    // animations: [slideInAnimation],
                    providers: [
                        {
                            provide: ngxImageviewer.IMAGEVIEWER_CONFIG,
                            // useValue: IMAGEVIEWER_CONFIG_DEFAULT,
                            useFactory: createViewerConfig,
                            deps: [core$1.TranslateService],
                        },
                    ],
                    styles: [":host{width:100%;height:inherit;display:block}:host>*{align-self:center}.gallery-dialog{height:inherit}.images-filmstrip-container,.images-filmstrip-container .img-wrapper,gallery{height:100%}gallery{direction:ltr;min-height:100%}.gallery-dialog-content gallery{min-width:65vw}.gallery-dialog-content ::ng-deep gallery-item gallery-image .g-image-item{background-size:content!important}.gallery-dialog-content ::ng-deep gallery-item .g-item-template ngx-imageviewer canvas{max-width:100%!important;max-height:100%!important}::ng-deep gallery-thumbs{margin:0 1rem 0 .5rem;margin:0 var(--pep-spacing-lg,1rem) 0 var(--pep-spacing-sm,.5rem)}::ng-deep gallery-thumbs gallery-thumb{padding:0!important;border-radius:.25rem;border-radius:var(--pep-border-radius-md,.25rem);margin:.5rem 0;margin:var(--pep-spacing-sm,.5rem) 0}::ng-deep gallery-thumbs gallery-thumb .g-image-item{background-size:cover!important}::ng-deep gallery-item gallery-image .g-image-item{border-radius:.5rem;border-radius:var(--pep-border-radius-lg,.5rem)}::ng-deep gallery-item:hover{cursor:pointer}::ng-deep gallery-dots{position:absolute!important;border-radius:.25rem;border-radius:var(--pep-border-radius-md,.25rem)}::ng-deep gallery-dots.pep-button,::ng-deep gallery-dots.pepperi-button{display:flex!important}::ng-deep .img-container{display:flex;align-items:center}::ng-deep .g-nav-next,::ng-deep .g-nav-prev{width:2rem!important;height:2rem!important;padding:.25rem;border-radius:.25rem;border-radius:var(--pep-border-radius-md,.25rem)}::ng-deep .g-nav-next .mat-icon,::ng-deep .g-nav-prev .mat-icon{display:inline-block!important}::ng-deep .g-nav-prev{transform:translateY(-50%) perspective(1px) scaleX(-1)!important}.vertical-gallery ::ng-deep gallery-thumbs{margin:1rem 0 .5rem;margin:var(--pep-spacing-lg,1rem) 0 var(--pep-spacing-sm,.5rem) 0}.vertical-gallery ::ng-deep gallery-thumbs gallery-thumb{margin:0 .5rem;margin:0 var(--pep-spacing-sm,.5rem)}"]
                },] }
    ];
    PepImagesFilmstripComponent.ctorParameters = function () { return [
        { type: ngxLib.PepCustomizationService },
        { type: dialog.PepDialogService },
        { type: ngxLib.PepLayoutService },
        { type: ngxLib.PepFileService },
        { type: ngGallery.Gallery },
        { type: core.Renderer2 },
        { type: core.ElementRef },
        { type: core.ChangeDetectorRef },
        { type: dialog$1.MatDialogRef, decorators: [{ type: core.Optional }] },
        { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [dialog$1.MAT_DIALOG_DATA,] }] }
    ]; };
    PepImagesFilmstripComponent.propDecorators = {
        key: [{ type: core.Input }],
        value: [{ type: core.Input }],
        label: [{ type: core.Input }],
        xAlignment: [{ type: core.Input }],
        rowSpan: [{ type: core.Input }],
        form: [{ type: core.Input }],
        uid: [{ type: core.Input }],
        showTitle: [{ type: core.Input }],
        layoutType: [{ type: core.Input }],
        currIndex: [{ type: core.Input }],
        showThumbnails: [{ type: core.Input }],
        galleryCont: [{ type: core.ViewChild, args: ['galleryCont',] }],
        galleryDialogTemplate: [{ type: core.ViewChild, args: ['galleryDialogTemplate', { read: core.TemplateRef },] }],
        galleryDialogCont: [{ type: core.ViewChild, args: ['galleryDialogCont',] }]
    };

    var PepImagesFilmstripModule = /** @class */ (function () {
        function PepImagesFilmstripModule(pepIconRegistry) {
            this.pepIconRegistry = pepIconRegistry;
            this.pepIconRegistry.registerIcons([
                icon.pepIconSystemEdit,
                icon.pepIconSystemClose,
                icon.pepIconArrowRightAlt,
                icon.pepIconArrowLeftAlt,
            ]);
        }
        return PepImagesFilmstripModule;
    }());
    PepImagesFilmstripModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.ReactiveFormsModule,
                        // Material modules,
                        core$2.MatCommonModule,
                        formField.MatFormFieldModule,
                        dialog$1.MatDialogModule,
                        icon$1.MatIconModule,
                        // External modules
                        ngGallery.GalleryModule,
                        ngxImageviewer.ImageViewerModule,
                        // ImageViewerModule.forRoot({
                        //     btnClass: 'default', // The CSS class(es) that will apply to the buttons
                        //     zoomFactor: 0.1, // The amount that the scale will be increased by
                        //     containerBackgroundColor: 'transparent', // The color to use for the background. This can provided in hex, or rgb(a).
                        //     wheelZoom: true, // If true, the mouse wheel can be used to zoom in
                        //     allowFullscreen: false, // If true, the fullscreen button will be shown, allowing the user to entr fullscreen mode
                        //     btnIcons: {
                        //         // The icon classes that will apply to the buttons. By default, font-awesome is used.
                        //         zoomIn: 'fa fa-plus',
                        //         zoomOut: 'fa fa-minus',
                        //         rotateClockwise: 'fa fa-repeat',
                        //         rotateCounterClockwise: 'fa fa-undo',
                        //         next: 'fa fa-arrow-right',
                        //         prev: 'fa fa-arrow-left',
                        //         fullscreen: 'fa fa-arrows-alt'
                        //     }
                        // }),
                        // ngx-lib modules
                        ngxLib.PepNgxLibModule,
                        icon.PepIconModule,
                        fieldTitle.PepFieldTitleModule,
                        dialog.PepDialogModule,
                    ],
                    exports: [PepImagesFilmstripComponent],
                    declarations: [PepImagesFilmstripComponent],
                },] }
    ];
    PepImagesFilmstripModule.ctorParameters = function () { return [
        { type: icon.PepIconRegistry }
    ]; };

    /*
     * Public API Surface of ngx-lib/images-filmstrip
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.PepImagesFilmstripComponent = PepImagesFilmstripComponent;
    exports.PepImagesFilmstripModule = PepImagesFilmstripModule;
    exports.createViewerConfig = createViewerConfig;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=pepperi-addons-ngx-lib-images-filmstrip.umd.js.map
