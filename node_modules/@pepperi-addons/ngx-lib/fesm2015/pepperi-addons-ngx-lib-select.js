import { EventEmitter, Component, ChangeDetectionStrategy, Renderer2, ElementRef, Input, Output, ViewChild, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { MatCommonModule } from '@angular/material/core';
import { MatButtonModule } from '@angular/material/button';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatSelectModule } from '@angular/material/select';
import { MatIconModule } from '@angular/material/icon';
import { DEFAULT_HORIZONTAL_ALIGNMENT, PepSelectField, PepCustomizationService, PepNgxLibModule } from '@pepperi-addons/ngx-lib';
import { pepIconSystemEdit, PepIconModule, PepIconRegistry } from '@pepperi-addons/ngx-lib/icon';
import { PepFieldTitleModule } from '@pepperi-addons/ngx-lib/field-title';

class PepSelectComponent {
    constructor(customizationService, renderer, element) {
        this.customizationService = customizationService;
        this.renderer = renderer;
        this.element = element;
        this.key = '';
        this.value = '';
        this.label = '';
        this.type = 'select';
        this.mandatory = false;
        this.disabled = false;
        this.readonly = false;
        this.xAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;
        this.rowSpan = 1;
        this.options = [];
        this._visible = true;
        this.controlType = 'select';
        // @Input() field: PepFieldBase;
        this.form = null;
        this.layoutType = 'form';
        this.parentFieldKey = null;
        this.isActive = false;
        this.showTitle = true;
        this.emptyOption = true;
        this.valueChange = new EventEmitter();
        this.formValidationChange = new EventEmitter();
        this.standAlone = false;
        this.isInEditMode = false;
        this.isMulti = false;
        this.fieldFormattedValue = '';
    }
    set visible(visible) {
        this._visible = visible;
        if (visible) {
            this.renderer.removeClass(this.element.nativeElement, 'hidden-element');
        }
        else {
            this.renderer.addClass(this.element.nativeElement, 'hidden-element');
        }
    }
    get visible() {
        return this._visible;
    }
    addOptionsIfNeeded() {
        if (this.isMulti) {
            // Go gor all selected and add to options if not exist
            // for (let i = 0; i < this.selectedValuesModel.length; i++) {
            for (const selectedValue of this.selectedValuesModel) {
                let valueNotExist = false;
                if (this.options &&
                    !this.options.find((opt) => opt.key === selectedValue)) {
                    valueNotExist = true;
                }
                // Add it to options.
                if (valueNotExist) {
                    this.options.push({
                        key: selectedValue,
                        value: selectedValue,
                    });
                }
            }
        }
        else {
            if (this.value &&
                this.value !== '' &&
                this.options &&
                !this.options.find((opt) => opt.key === this.value)) {
                this.options.push({ key: this.value, value: this.value });
            }
        }
    }
    setFieldFormattedValue(value) {
        if (this.isMulti) {
            if (this.selectedValuesModel.length > 0) {
                this.fieldFormattedValue = this.selectedValuesModel
                    .map((value) => {
                    var _a;
                    return (_a = this.options.find((opt) => opt.key === value)) === null || _a === void 0 ? void 0 : _a.value;
                })
                    .join(', ');
            }
            else {
                this.fieldFormattedValue = '';
            }
            // this.fieldFormattedValue = typeof value === 'string' ? value.replace(new RegExp(';', 'g'), ', ') : '';
        }
        else {
            const selectedOpt = this.options.find((opt) => opt.key === value);
            if (selectedOpt) {
                this.fieldFormattedValue = selectedOpt.value;
            }
        }
    }
    setDefaultForm() {
        const pepField = new PepSelectField({
            key: this.key,
            value: this.value,
            mandatory: this.mandatory,
            readonly: this.readonly,
            disabled: this.disabled,
        });
        this.form = this.customizationService.getDefaultFromGroup(pepField);
    }
    ngOnInit() {
        if (this.form === null) {
            this.standAlone = true;
            this.setDefaultForm();
            this.renderer.addClass(this.element.nativeElement, PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME);
        }
    }
    ngOnChanges(changes) {
        if (this.standAlone) {
            this.setDefaultForm();
        }
        this.isMulti = this.type === 'multi';
        if (this.isMulti) {
            this.selectedValuesModel =
                this.value.length > 0 ? this.value.split(';') : [];
        }
        else {
            this.selectedValueModel = this.value;
        }
        this.addOptionsIfNeeded();
        this.setFieldFormattedValue(this.value);
    }
    ngOnDestroy() {
        //
    }
    selectionChange(event) {
        if (!this.isMulti) {
            this.changeValue(this.selectedValueModel);
        }
    }
    openedChange(event) {
        // Only on close.
        if (!event) {
            if (this.isMulti) {
                this.changeValue(this.selectedValuesModel.join(';'));
            }
            if (this.isInEditMode) {
                this.isInEditMode = false;
            }
        }
    }
    changeValue(value) {
        this.setFieldFormattedValue(value);
        this.customizationService.updateFormFieldValue(this.form, this.key, 
        // value,
        this.fieldFormattedValue, this.parentFieldKey);
        if (this.mandatory) {
            const fieldControl = this.form.controls[this.key];
            if (value) {
                fieldControl.setErrors(null);
            }
            else {
                fieldControl.setErrors({
                    serverError: 'Required',
                });
            }
            this.formValidationChange.emit(this.form.valid);
        }
        this.valueChange.emit(value);
    }
    cardTemplateClicked(event) {
        this.isInEditMode = true;
        setTimeout(() => {
            this.select.open();
        }, 0);
    }
}
PepSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'pep-select',
                template: "<ng-container [formGroup]=\"form\">\n    <ng-template #pepTemplate>\n        <ng-container *ngIf=\"type == 'multi'; then multiSelectBlock; else regularSelectBlock\"></ng-container>\n        <ng-template #regularSelectBlock>\n            <mat-form-field appearance=\"outline\" dir=\"{{ xAlignment === 'right' ? 'rtl' : 'ltr' }}\">\n                <mat-select #select [required]=\"mandatory ? mandatory : undefined\" matInput disableOptionCentering\n                    class=\"body-sm text-align-{{ xAlignment }}\" [id]=\"key\"\n                    [ngClass]=\"{'right-alignment': xAlignment === 'right'}\"\n                    [placeholder]=\"disabled || readonly ? '' : ('SELECT.HINT' | translate)\"\n                    [(ngModel)]=\"selectedValueModel\" [ngModelOptions]=\"{standalone: true}\" [disabled]=\"disabled\"\n                    (selectionChange)=\"selectionChange($event)\" (openedChange)=\"openedChange($event)\"\n                    title=\"{{ fieldFormattedValue }}\">\n                    <mat-option *ngIf=\"emptyOption\" value=\"\" [title]=\"'LIST.NONE' | translate\">{{ 'LIST.NONE' |\n                        translate }}</mat-option>\n                    <mat-option *ngFor=\"let option of options\" [value]=\"option.key\" [title]=\"option.value\">{{\n                        option.value }}</mat-option>\n                </mat-select>\n                <mat-error>\n                    <span class=\"body-xs\" [title]=\"'MESSAGES.ERROR_IS_REQUIRED' | translate: {field: label}\"\n                        [innerText]=\"'MESSAGES.ERROR_IS_REQUIRED' | translate: {field: label}\"></span>\n                </mat-error>\n            </mat-form-field>\n        </ng-template>\n        <ng-template #multiSelectBlock>\n            <mat-form-field appearance=\"outline\" dir=\"{{ xAlignment === 'right' ? 'rtl' : 'ltr' }}\">\n                <mat-select #select multiple [required]=\"mandatory ? mandatory : undefined\" matInput\n                    disableOptionCentering class=\"body-sm text-align-{{ xAlignment }}\" [id]=\"key\"\n                    [ngClass]=\"{'right-alignment': xAlignment === 'right'}\"\n                    [placeholder]=\"disabled || readonly ? '' : ('SELECT.HINT' | translate)\"\n                    [(ngModel)]=\"selectedValuesModel\" [ngModelOptions]=\"{standalone: true}\" [disabled]=\"disabled\"\n                    (openedChange)=\"openedChange($event)\" title=\"{{ fieldFormattedValue }}\">\n                    <mat-option *ngFor=\"let option of options\" [value]=\"option.key\" [title]=\"option.value\">{{\n                        option.value }}</mat-option>\n                </mat-select>\n                <mat-error><span class=\"body-xs\" [title]=\"'MESSAGES.ERROR_IS_REQUIRED' | translate: {field: label}\"\n                        [innerText]=\"'MESSAGES.ERROR_IS_REQUIRED' | translate: {field: label}\"> </span>\n                </mat-error>\n            </mat-form-field>\n        </ng-template>\n    </ng-template>\n\n    <ng-container *ngIf=\"layoutType === 'form'\">\n        <pep-field-title *ngIf=\"!parentFieldKey\" [label]=\"label\" [mandatory]=\"mandatory\" [disabled]=\"disabled\"\n            [xAlignment]=\"xAlignment\" [showTitle]=\"showTitle\">\n        </pep-field-title>\n        <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'card'\">\n        <ng-container *ngIf=\"isInEditMode; then editBlock; else readOnlyBlock\"></ng-container>\n        <ng-template #editBlock>\n            <div [ngClass]=\"{'one-row': rowSpan === 1}\">\n                <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n            </div>\n        </ng-template>\n        <ng-template #readOnlyBlock>\n            <div class=\"pep-card-input card-flex-container\"\n                [ngClass]=\"{'one-row': rowSpan === 1, 'pep-button weak': isActive && !disabled}\"\n                [class]=\"'text-align-' + xAlignment\" (click)=\"!disabled ? cardTemplateClicked($event) : ''\">\n                <span *ngIf=\"showTitle && label != ''\" class=\"body-xs title\" title=\"{{ label }}\">{{ label\n                    }}&nbsp;</span>\n                <span [id]=\"key\" title=\"{{ fieldFormattedValue }}\" class=\"body-sm value\">{{ fieldFormattedValue\n                    }}</span>\n                <button *ngIf=\"isActive && !disabled\" class=\"pep-button weak card-edit-button\" mat-button>\n                    <mat-icon>\n                        <pep-icon name=\"system_edit\">\n                        </pep-icon>\n                    </mat-icon>\n                </button>\n            </div>\n        </ng-template>\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'table'\">\n        <ng-container *ngIf=\"isActive && !disabled; then selectedBlock; else notSelectedBlock\"></ng-container>\n        <ng-template #selectedBlock>\n            <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n        </ng-template>\n        <ng-template #notSelectedBlock>\n            <span [id]=\"key\" class=\"body-sm pep-report-input\" [ngClass]=\"{readonly: disabled}\"\n                title=\"{{ fieldFormattedValue }}\">{{ fieldFormattedValue }}</span>\n        </ng-template>\n    </ng-container>\n</ng-container>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{height:inherit;display:grid}:host>*{align-self:center}"]
            },] }
];
PepSelectComponent.ctorParameters = () => [
    { type: PepCustomizationService },
    { type: Renderer2 },
    { type: ElementRef }
];
PepSelectComponent.propDecorators = {
    key: [{ type: Input }],
    value: [{ type: Input }],
    label: [{ type: Input }],
    type: [{ type: Input }],
    mandatory: [{ type: Input }],
    disabled: [{ type: Input }],
    readonly: [{ type: Input }],
    xAlignment: [{ type: Input }],
    rowSpan: [{ type: Input }],
    options: [{ type: Input }],
    visible: [{ type: Input }],
    form: [{ type: Input }],
    layoutType: [{ type: Input }],
    parentFieldKey: [{ type: Input }],
    isActive: [{ type: Input }],
    showTitle: [{ type: Input }],
    emptyOption: [{ type: Input }],
    valueChange: [{ type: Output }],
    formValidationChange: [{ type: Output }],
    select: [{ type: ViewChild, args: ['select',] }]
};

class PepSelectModule {
    constructor(pepIconRegistry) {
        this.pepIconRegistry = pepIconRegistry;
        this.pepIconRegistry.registerIcons([pepIconSystemEdit]);
    }
}
PepSelectModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    FormsModule,
                    // Material modules
                    MatCommonModule,
                    MatButtonModule,
                    MatFormFieldModule,
                    MatSelectModule,
                    MatIconModule,
                    // ngx-lib modules
                    PepNgxLibModule,
                    PepIconModule,
                    PepFieldTitleModule,
                ],
                exports: [PepSelectComponent],
                declarations: [PepSelectComponent],
            },] }
];
PepSelectModule.ctorParameters = () => [
    { type: PepIconRegistry }
];

/*
 * Public API Surface of ngx-lib/select
 */

/**
 * Generated bundle index. Do not edit.
 */

export { PepSelectComponent, PepSelectModule };
//# sourceMappingURL=pepperi-addons-ngx-lib-select.js.map
