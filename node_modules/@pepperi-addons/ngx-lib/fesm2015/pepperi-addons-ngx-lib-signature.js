import { EventEmitter, Component, ChangeDetectionStrategy, ChangeDetectorRef, Renderer2, ElementRef, Input, Output, ViewChild, TemplateRef, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { MatCommonModule } from '@angular/material/core';
import { MatButtonModule } from '@angular/material/button';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatIconModule } from '@angular/material/icon';
import { MatDialogModule } from '@angular/material/dialog';
import { SignaturePadModule } from 'ngx-signaturepad';
import { DEFAULT_HORIZONTAL_ALIGNMENT, PepSignatureField, PepCustomizationService, PepFileService, PepNgxLibModule } from '@pepperi-addons/ngx-lib';
import { pepIconSystemBin, pepIconSystemSignature, pepIconSystemClose, PepIconModule, PepIconRegistry } from '@pepperi-addons/ngx-lib/icon';
import { PepFieldTitleModule } from '@pepperi-addons/ngx-lib/field-title';
import { PepFilesUploaderModule } from '@pepperi-addons/ngx-lib/files-uploader';
import { PepDialogService, PepDialogModule } from '@pepperi-addons/ngx-lib/dialog';

class PepSignatureComponent {
    constructor(dialogService, customizationService, fileService, cd, renderer, element) {
        this.dialogService = dialogService;
        this.customizationService = customizationService;
        this.fileService = fileService;
        this.cd = cd;
        this.renderer = renderer;
        this.element = element;
        this.key = '';
        this.src = '';
        this.label = '';
        this.mandatory = false;
        this.disabled = false;
        this.readonly = false;
        this.xAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;
        this._rowSpan = 1;
        this.signatureURL = '';
        // @Input() inDialog = false;
        this._visible = true;
        this.controlType = 'signature';
        this.form = null;
        this.showTitle = true;
        this._layoutType = 'form';
        this.isActive = false;
        this.fileChange = new EventEmitter();
        this.fieldHeight = '';
        this.standAlone = false;
        this.dataURI = null;
        this.showActionBtn = true;
        this.isVisibleModal = false;
        this.acceptSignatureType = 'png';
        this.signaturePadOptions = {
            // passed through to szimek/signature_pad constructor
            minWidth: 2,
            canvasWidth: 500,
            canvasHeight: 300,
            penColor: 'rgb(151, 151, 151)',
        };
    }
    set rowSpan(value) {
        this._rowSpan = value;
        this.setFieldHeight();
    }
    get rowSpan() {
        return this._rowSpan;
    }
    set visible(visible) {
        this._visible = visible;
        if (visible) {
            this.renderer.removeClass(this.element.nativeElement, 'hidden-element');
        }
        else {
            this.renderer.addClass(this.element.nativeElement, 'hidden-element');
        }
    }
    get visible() {
        return this._visible;
    }
    set layoutType(value) {
        this._layoutType = value;
        this.setFieldHeight();
    }
    get layoutType() {
        return this._layoutType;
    }
    setFieldHeight() {
        this.fieldHeight = this.customizationService.calculateFieldHeight(this.layoutType, this.rowSpan, this.standAlone);
    }
    setDefaultForm() {
        const pepField = new PepSignatureField({
            key: this.key,
            value: this.src,
            mandatory: this.mandatory,
            readonly: this.readonly,
            disabled: this.disabled,
        });
        this.form = this.customizationService.getDefaultFromGroup(pepField);
    }
    ngOnInit() {
        if (this.form === null) {
            this.standAlone = true;
            this.setFieldHeight();
            this.setDefaultForm();
            this.renderer.addClass(this.element.nativeElement, PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME);
        }
    }
    ngOnChanges(changes) {
        if (this.standAlone) {
            this.setDefaultForm();
        }
        if (changes.src && changes.src.currentValue.length > 0) {
            // Empty dataURI if there is change in the src.
            this.dataURI = null;
            // For clean the cache.
            // this.src = this.src ? this.src + '?t=' + new Date().toTimeString() : '';
        }
    }
    ngOnDestroy() {
        //
    }
    drawComplete() {
        // will be notified of szimek/signature_pad's onEnd event
    }
    drawStart() {
        // will be notified of szimek/signature_pad's onBegin event
    }
    openSignModal() {
        // If the signature is not empty open it in image viewer.
        if (this.standAlone && this.dataURI) {
            const fileStrArr = this.dataURI.fileStr.split(';');
            if (fileStrArr.length === 2) {
                const win = window.open('', '_blank');
                const contentType = fileStrArr[0].split(':')[1];
                const base64 = fileStrArr[1].split(',')[1];
                const blob = this.fileService.convertFromb64toBlob(base64, contentType);
                const url = URL.createObjectURL(blob);
                win.location.href = url;
            }
            // signature allready exits
        }
        else {
            this.signatureURL = this.src;
            this.openSignatoreDlg(this.signatureURL);
        }
    }
    openSignatoreDlg(src = '') {
        this.showActionBtn =
            this.signatureURL && this.signatureURL !== '' ? false : true;
        this.dialogRef = this.dialogService.openDialog(this.signaturePopupPad);
        this.dialogRef.afterOpened().subscribe(() => {
            this.afterDialogOpened();
        });
    }
    afterDialogOpened() {
        if (this.signatureURL && this.signatureURL !== '') {
            this.signaturePad.fromDataURL(this.signatureURL);
            this.signaturePad.off();
        }
    }
    clearSignModal() {
        this.signatureURL = '';
        this.signaturePad.clear();
        this.signaturePad.on();
    }
    deleteSignature(event) {
        this.signatureURL = '';
        this.changeValue(this.signatureURL);
        this.cd.detectChanges();
    }
    saveSignModal(event) {
        if (!this.signaturePad.isEmpty()) {
            this.signatureURL = this.signaturePad.toDataURL('image/png');
            const fileValue = {
                acceptedExtensions: this.acceptSignatureType,
                fileStr: this.signatureURL,
                fileExt: this.acceptSignatureType,
            };
            this.changeValue(fileValue);
        }
        else {
            this.signatureURL = '';
            this.changeValue(this.signatureURL);
        }
        this.dialogRef.close(this.signatureURL);
    }
    errorHandler(event) {
        this.signatureURL = this.src = ''; // this.blankImage;
    }
    changeValue(fileData) {
        this.dataURI = fileData;
        this.src = this.standAlone && this.dataURI ? this.dataURI.fileStr : '';
        this.customizationService.updateFormFieldValue(this.form, this.key, this.dataURI ? this.dataURI.fileExt : '');
        // this.valueChange.emit({
        //     key: this.key,
        //     value,
        // });
        this.fileChange.emit(fileData);
        // this.fileChange.emit(value.length > 0 ? JSON.parse(value) : value);
    }
    onKeyPress_OpenSignModal(event) {
        const e = event;
        if ([13, 32].indexOf(e.which) !== -1) {
            this.openSignModal();
        }
        e.preventDefault();
    }
}
PepSignatureComponent.decorators = [
    { type: Component, args: [{
                selector: 'pep-signature',
                template: "<ng-container [formGroup]=\"form\">\n    <ng-container>\n        <ng-template #pepTemplate>\n            <mat-form-field [formGroup]=\"form\" appearance=\"outline\">\n                <div class=\"pep-file-wrapper\">\n                    <div class=\"pep-file body-sm\" [ngClass]=\"{ disable: disabled }\" [style.height]=\"fieldHeight\">\n                        <ng-container *ngIf=\"src != ''; then withImg; else noImg\"></ng-container>\n                        <ng-template #withImg>\n                            <button *ngIf=\"!disabled\" mat-button (click)=\"deleteSignature($event)\"\n                                class=\"pep-button icon-button weak md delete\" tabindex=\"-1\"\n                                [ngClass]=\"{ 'right-alignment': xAlignment == 'right' }\">\n                                <mat-icon>\n                                    <pep-icon name=\"system_bin\"></pep-icon>\n                                </mat-icon>\n                            </button>\n                            <div class=\"pep-file-preview\" (click)=\"openSignModal()\">\n                                <img [src]=\"src\" [style.max-height]=\"fieldHeight\" class=\"pep-file-preview-img\"\n                                    (error)=\"errorHandler($event)\" [alt]=\"label\"\n                                    [ngClass]=\"['text-align-' + xAlignment]\" />\n                            </div>\n                        </ng-template>\n                        <ng-template #noImg>\n                            <div class=\"ellipsis pep-file-message\">\n                                <mat-icon class=\"pep-spacing-element\">\n                                    <pep-icon name=\"system_signature\"></pep-icon>\n                                </mat-icon>\n                                <span class=\"body-sm ellipsis\">\n                                    {{ (disabled ? 'MESSAGES.INFO_MISSING_SIGNATURE' : 'SIGNATURE.HINT') | translate }}\n                                </span>\n                            </div>\n                        </ng-template>\n                    </div>\n                    <input [id]=\"key\" matInput [formControlName]=\"key\" class=\"hidden-input signature\" type=\"text\"\n                        [value]=\"src\" (click)=\"openSignModal()\" (keypress)=\"onKeyPress_OpenSignModal($event)\"\n                        autocomplete=\"off\" readonly />\n                </div>\n\n                <mat-error><span class=\"body-xs\"\n                        [title]=\"mandatory && src.length == 0 ? ('MESSAGES.ERROR_IS_REQUIRED' | translate: { field: label }) : ('MESSAGES.ERROR_IS_NOT_VALID' | translate: { field: label })\"\n                        [innerText]=\"mandatory && src.length == 0 ? ('MESSAGES.ERROR_IS_REQUIRED' | translate: { field: label }) : ('MESSAGES.ERROR_IS_NOT_VALID' | translate: { field: label })\"></span>\n                </mat-error>\n            </mat-form-field>\n        </ng-template>\n\n        <ng-container *ngIf=\"layoutType === 'form'\">\n            <div class=\"pep-file-container\" [ngClass]=\"{ 'one-row': rowSpan == 1, 'stand-alone': standAlone}\">\n                <pep-field-title [label]=\"label\" [mandatory]=\"mandatory\" [disabled]=\"disabled\" [xAlignment]=\"xAlignment\"\n                    [showTitle]=\"showTitle\">\n                </pep-field-title>\n                <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n            </div>\n        </ng-container>\n\n        <ng-container *ngIf=\"layoutType === 'card'\">\n            <ng-container *ngIf=\"false && isActive && !disabled; then selectedBlock; else notSelectedBlock\">\n            </ng-container>\n            <ng-template #selectedBlock>\n                <div class=\"pep-file-container\" [ngClass]=\"{ 'one-row': rowSpan == 1}\">\n                    <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n                </div>\n            </ng-template>\n            <ng-template #notSelectedBlock>\n                <div class=\"pep-file-container\" [ngClass]=\"{ 'one-row': rowSpan == 1 }\">\n                    <ng-container *ngTemplateOutlet=\"pepReadonlyTemplate; context: { isTableView: false}\">\n                    </ng-container>\n                </div>\n            </ng-template>\n        </ng-container>\n\n        <ng-container *ngIf=\"layoutType === 'table'\">\n            <ng-container *ngIf=\"false && isActive && !disabled; then selectedBlock; else notSelectedBlock\">\n            </ng-container>\n            <ng-template #selectedBlock>\n                <div class=\"pep-file-container one-row\">\n                    <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n                </div>\n            </ng-template>\n            <ng-template #notSelectedBlock>\n                <div class=\"pep-file-container one-row\">\n                    <ng-container *ngTemplateOutlet=\"pepReadonlyTemplate; context: { isTableView: true}\">\n                    </ng-container>\n                </div>\n            </ng-template>\n        </ng-container>\n    </ng-container>\n\n    <!-- <ng-container *ngIf=\"inDialog === true\">\n        <ng-container *ngTemplateOutlet=\"signaturePopupPad\"></ng-container>\n    </ng-container> -->\n\n    <!-- <div *ngIf=\"inDialog === false\" class=\"signature-backdrop modal\" [ngClass]=\"{ fade: !isVisibleModal }\" tabindex=\"-1\"\n        role=\"dialog\" aria-labelledby=\"gridModalLabel\" aria-hidden=\"true\"\n        [ngStyle]=\"{ display: isVisibleModal ? 'block' : 'none' }\">\n        <div class=\"signature-modal modal-dialog\" role=\"document\">\n            <div class=\"modal-content\">\n                <ng-container *ngTemplateOutlet=\"signaturePopupPad\"></ng-container>\n            </div>\n        </div>\n    </div> -->\n\n    <ng-template #pepReadonlyTemplate let-isTableView=\"isTableView\">\n        <div class=\"pep-file-container\">\n            <div class=\"pep-file-wrapper\">\n                <div class=\"pep-file body-sm disable\">\n                    <ng-container *ngIf=\"src != ''; then withImg; else noImg\"></ng-container>\n                    <ng-template #withImg>\n                        <div class=\"pep-file-preview\" (click)=\"openSignModal()\">\n                            <img *ngIf=\"!isTableView\" [src]=\"src\" [style.max-height]=\"fieldHeight\"\n                                class=\"pep-file-preview-img\" (error)=\"errorHandler($event)\" [alt]=\"label\"\n                                [ngClass]=\"['text-align-' + xAlignment]\" />\n                            <img *ngIf=\"isTableView\" [src]=\"src\" [style.max-height]=\"fieldHeight\"\n                                class=\"pep-report-file pep-file-preview-img\" (error)=\"errorHandler($event)\"\n                                [alt]=\"label\" [ngClass]=\"['text-align-' + xAlignment]\" />\n                        </div>\n                    </ng-template>\n                    <ng-template #noImg></ng-template>\n                </div>\n            </div>\n        </div>\n    </ng-template>\n\n    <ng-template #signaturePopupPad>\n        <pep-dialog [title]=\"'SIGNATURE.DIALOG_TITLE' | translate\" [showFooter]=\"showActionBtn\">\n            <ng-container pep-dialog-content>\n                <signature-pad #signaturePad [options]=\"signaturePadOptions\" (onBeginEvent)=\"drawStart()\"\n                    (onEndEvent)=\"drawComplete()\">\n                </signature-pad>\n            </ng-container>\n            <div pep-dialog-actions class=\"pep-spacing-element-negative\">\n                <button mat-button class=\"pep-spacing-element pep-button md weak\" [disabled]=\"readonly || disabled\"\n                    (click)=\"clearSignModal()\">\n                    {{ 'ACTIONS.CLEAR' | translate }}\n                </button>\n                <button mat-button class=\"pep-spacing-element pep-button md strong\" [disabled]=\"readonly || disabled\"\n                    (click)=\"saveSignModal($event)\">\n                    {{ 'ACTIONS.DONE' | translate }}\n                </button>\n            </div>\n        </pep-dialog>\n    </ng-template>\n\n</ng-container>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{display:block}signature-pad{display:grid;width:inherit;height:inherit}"]
            },] }
];
PepSignatureComponent.ctorParameters = () => [
    { type: PepDialogService },
    { type: PepCustomizationService },
    { type: PepFileService },
    { type: ChangeDetectorRef },
    { type: Renderer2 },
    { type: ElementRef }
];
PepSignatureComponent.propDecorators = {
    key: [{ type: Input }],
    src: [{ type: Input }],
    label: [{ type: Input }],
    mandatory: [{ type: Input }],
    disabled: [{ type: Input }],
    readonly: [{ type: Input }],
    xAlignment: [{ type: Input }],
    rowSpan: [{ type: Input }],
    signatureURL: [{ type: Input }],
    visible: [{ type: Input }],
    form: [{ type: Input }],
    showTitle: [{ type: Input }],
    layoutType: [{ type: Input }],
    isActive: [{ type: Input }],
    fileChange: [{ type: Output }],
    signaturePad: [{ type: ViewChild, args: ['signaturePad',] }],
    signaturePopupPad: [{ type: ViewChild, args: ['signaturePopupPad', { read: TemplateRef },] }]
};

class PepSignatureModule {
    constructor(pepIconRegistry) {
        this.pepIconRegistry = pepIconRegistry;
        this.pepIconRegistry.registerIcons([
            pepIconSystemBin,
            pepIconSystemSignature,
            pepIconSystemClose,
        ]);
    }
}
PepSignatureModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    // Material modules
                    MatCommonModule,
                    MatButtonModule,
                    MatFormFieldModule,
                    MatInputModule,
                    MatIconModule,
                    MatDialogModule,
                    // External modules
                    SignaturePadModule,
                    // ngx-lib modules
                    PepNgxLibModule,
                    PepIconModule,
                    PepFieldTitleModule,
                    PepFilesUploaderModule,
                    PepDialogModule,
                ],
                exports: [PepSignatureComponent],
                declarations: [PepSignatureComponent],
            },] }
];
PepSignatureModule.ctorParameters = () => [
    { type: PepIconRegistry }
];

/*
 * Public API Surface of ngx-lib/signature
 */

/**
 * Generated bundle index. Do not edit.
 */

export { PepSignatureComponent, PepSignatureModule };
//# sourceMappingURL=pepperi-addons-ngx-lib-signature.js.map
