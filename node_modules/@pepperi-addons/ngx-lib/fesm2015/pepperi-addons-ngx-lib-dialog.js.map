{"version":3,"file":"pepperi-addons-ngx-lib-dialog.js","sources":["../../../projects/ngx-lib/dialog/dialog.model.ts","../../../projects/ngx-lib/dialog/default-dialog.component.ts","../../../projects/ngx-lib/dialog/dialog.component.ts","../../../projects/ngx-lib/dialog/dialog.module.ts","../../../projects/ngx-lib/dialog/dialog.service.ts","../../../projects/ngx-lib/dialog/public-api.ts","../../../projects/ngx-lib/dialog/pepperi-addons-ngx-lib-dialog.ts"],"sourcesContent":["export type PepDialogSizeType =\n    | 'inline'\n    | 'small'\n    | 'regular'\n    | 'large'\n    | 'full-screen';\n\nexport type PepDialogActionsType =\n    | 'close'\n    | 'cancel-continue'\n    | 'cancel-ok'\n    | 'cancel-delete'\n    | 'custom';\n\nexport class PepDialogActionButton {\n    title = '';\n    className = '';\n    callback: () => void;\n\n    constructor(title = '', className = '', callback: () => void = null) {\n        this.title = title;\n        this.className = className;\n        this.callback = callback;\n    }\n}\n\nexport class PepDialogData {\n    title: string;\n    actionsType: PepDialogActionsType;\n    content: any;\n    showClose: boolean;\n    showHeader: boolean;\n    showFooter: boolean;\n    actionButtons: Array<PepDialogActionButton>;\n\n    constructor(options: {\n        title?: string;\n        actionsType?: PepDialogActionsType;\n        content?: any;\n        contentDisabled?: boolean;\n        showClose?: boolean;\n        showHeader?: boolean;\n        showFooter?: boolean;\n        actionButtons?: Array<PepDialogActionButton>;\n    }) {\n        this.title = options.title || '';\n        this.actionsType = options.actionsType || 'close';\n        this.content = options.content || '';\n        this.showClose = options.showClose ?? true;\n        this.showHeader = options.showHeader ?? true;\n        this.showFooter = options.showFooter ?? true;\n        this.actionButtons = options.actionButtons ?? null;\n    }\n}\n","import { Component, Inject, ViewEncapsulation } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { PepDialogData, PepDialogActionButton } from './dialog.model';\n\n@Component({\n    templateUrl: './default-dialog.component.html',\n    styleUrls: ['./default-dialog.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class PepDefaultDialogComponent {\n    constructor(\n        @Inject(MAT_DIALOG_DATA) public data: PepDialogData,\n        public dialogRef: MatDialogRef<any>\n    ) {}\n\n    onActionButtonClicked(button: PepDialogActionButton): void {\n        this.dialogRef.close(true);\n        this.dialogRef.afterClosed().subscribe((isActionButtonClicked) => {\n            if (isActionButtonClicked && button?.callback) {\n                button.callback();\n            }\n        });\n    }\n}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'pep-dialog',\n    styleUrls: ['./dialog.component.scss'],\n    templateUrl: './dialog.component.html',\n})\nexport class PepDialogComponent {\n    @Input() title: string;\n    @Input() showClose = true;\n    @Input() showHeader = true;\n    @Input() showFooter = true;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatDialogModule } from '@angular/material/dialog';\n\nimport { PepNgxLibModule } from '@pepperi-addons/ngx-lib';\nimport {\n    PepIconModule,\n    PepIconRegistry,\n    pepIconSystemClose,\n} from '@pepperi-addons/ngx-lib/icon';\n\nimport { PepDefaultDialogComponent } from './default-dialog.component';\nimport { PepDialogComponent } from './dialog.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        // Material modules,\n        MatCommonModule,\n        MatButtonModule,\n        MatIconModule,\n        MatDialogModule,\n        // ngx-lib modules\n        PepNgxLibModule,\n        PepIconModule,\n    ],\n    exports: [PepDialogComponent],\n    declarations: [PepDefaultDialogComponent, PepDialogComponent],\n    entryComponents: [PepDefaultDialogComponent],\n})\nexport class PepDialogModule {\n    constructor(private pepIconRegistry: PepIconRegistry) {\n        this.pepIconRegistry.registerIcons([pepIconSystemClose]);\n    }\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport {\n    MatDialog,\n    MatDialogConfig,\n    MatDialogRef,\n} from '@angular/material/dialog';\nimport { PepLayoutService } from '@pepperi-addons/ngx-lib';\nimport { Overlay } from '@angular/cdk/overlay';\nimport { ComponentType } from '@angular/cdk/portal';\nimport { PepDialogSizeType, PepDialogData } from './dialog.model';\nimport { PepDefaultDialogComponent } from './default-dialog.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PepDialogService {\n    constructor(\n        private dialog: MatDialog,\n        private layoutService: PepLayoutService,\n        private overlay: Overlay\n    ) { }\n\n    private fixConfigIfNeeded(data: PepDialogData, config: MatDialogConfig) {\n        if (config.disableClose) {\n            if (\n                ((!data.showClose || !data.showHeader) && !data.showFooter) ||\n                (data.actionsType === 'custom' &&\n                    (data.actionButtons === null ||\n                        data.actionButtons.length === 0))\n            ) {\n                config.disableClose = false;\n            }\n        }\n    }\n\n    getDialogConfig(\n        options: {\n            disableClose?: boolean;\n            height?: string;\n            minWidth?: string;\n            maxWidth?: string;\n            maxHeight?: string;\n            panelClass?: string;\n        } = {},\n        size: PepDialogSizeType = 'regular'\n    ): MatDialogConfig {\n        const dialogConfig = new MatDialogConfig();\n\n        dialogConfig.autoFocus = false;\n        dialogConfig.direction = this.layoutService.isRtl() ? 'rtl' : 'ltr';\n        dialogConfig.disableClose = options.disableClose ?? true;\n        dialogConfig.panelClass = ['pep-dialog', options.panelClass || ''];\n\n        if (size === 'inline') {\n            dialogConfig.height = options.height || 'auto';\n            dialogConfig.maxWidth = options.maxWidth || '100vw';\n            dialogConfig.maxHeight = options.maxHeight || '100vh';\n            dialogConfig.minWidth = options.minWidth || '300px';\n        }\n\n        dialogConfig.panelClass.push(size);\n\n        dialogConfig.scrollStrategy = this.overlay.scrollStrategies.noop();\n        // dialogConfig.scrollStrategy = this.overlay.scrollStrategies.block();\n\n        return dialogConfig;\n    }\n\n    openDefaultDialog(\n        data: PepDialogData,\n        config: MatDialogConfig = null\n    ): MatDialogRef<PepDefaultDialogComponent> {\n        if (!config) {\n            config = this.getDialogConfig();\n        }\n        this.fixConfigIfNeeded(data, config);\n\n        config.data = data;\n        const dialogRef = this.dialog.open(PepDefaultDialogComponent, config);\n        return dialogRef;\n    }\n\n    openDialog<T>(\n        componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n        data: any = {},\n        config: MatDialogConfig = null\n    ): MatDialogRef<T> {\n        if (!config) {\n            config = this.getDialogConfig();\n        }\n        this.fixConfigIfNeeded(data, config);\n\n        config.data = data;\n        const dialogRef = this.dialog.open(componentOrTemplateRef, config);\n        return dialogRef;\n    }\n}\n","/*\n * Public API Surface of ngx-lib/dialog\n */\nexport * from './dialog.module';\nexport * from './dialog.model';\nexport * from './dialog.component';\nexport * from './dialog.service';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {PepDefaultDialogComponent as Éµa} from './default-dialog.component';"],"names":[],"mappings":"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"}