import * as i0 from '@angular/core';
import { Component, ViewEncapsulation, Inject, Input, NgModule, Injectable } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatCommonModule } from '@angular/material/core';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import * as i1 from '@angular/material/dialog';
import { MAT_DIALOG_DATA, MatDialogRef, MatDialogModule, MatDialogConfig, MatDialog } from '@angular/material/dialog';
import * as i2 from '@pepperi-addons/ngx-lib';
import { PepNgxLibModule, PepLayoutService } from '@pepperi-addons/ngx-lib';
import { pepIconSystemClose, PepIconModule, PepIconRegistry } from '@pepperi-addons/ngx-lib/icon';
import * as i3 from '@angular/cdk/overlay';
import { Overlay } from '@angular/cdk/overlay';

class PepDialogActionButton {
    constructor(title = '', className = '', callback = null) {
        this.title = '';
        this.className = '';
        this.title = title;
        this.className = className;
        this.callback = callback;
    }
}
class PepDialogData {
    constructor(options) {
        var _a, _b, _c, _d;
        this.title = options.title || '';
        this.actionsType = options.actionsType || 'close';
        this.content = options.content || '';
        this.showClose = (_a = options.showClose) !== null && _a !== void 0 ? _a : true;
        this.showHeader = (_b = options.showHeader) !== null && _b !== void 0 ? _b : true;
        this.showFooter = (_c = options.showFooter) !== null && _c !== void 0 ? _c : true;
        this.actionButtons = (_d = options.actionButtons) !== null && _d !== void 0 ? _d : null;
    }
}

class PepDefaultDialogComponent {
    constructor(data, dialogRef) {
        this.data = data;
        this.dialogRef = dialogRef;
    }
    onActionButtonClicked(button) {
        this.dialogRef.close(true);
        this.dialogRef.afterClosed().subscribe((isActionButtonClicked) => {
            if (isActionButtonClicked && (button === null || button === void 0 ? void 0 : button.callback)) {
                button.callback();
            }
        });
    }
}
PepDefaultDialogComponent.decorators = [
    { type: Component, args: [{
                template: "<pep-dialog [showClose]=\"data?.showClose\" [showHeader]=\"data?.showHeader\" [showFooter]=\"data?.showFooter\"\n    [title]=\"data?.title\">\n    <div pep-dialog-content [innerHtml]=\"data?.content | pepSafeHtml\"></div>\n    <div pep-dialog-actions class=\"pep-spacing-element-negative\">\n        <ng-container [ngSwitch]=\"data?.actionsType\">\n            <ng-container *ngSwitchCase=\"'close'\">\n                <button mat-button [mat-dialog-close]=\"true\" class=\"pep-spacing-element pep-button md weak\">\n                    {{ 'ACTIONS.CLOSE' | translate }}\n                </button>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'cancel-continue'\">\n                <button mat-button [mat-dialog-close]=\"false\" class=\"pep-spacing-element pep-button md weak\">\n                    {{ 'ACTIONS.CANCEL' | translate }}\n                </button>\n                <button mat-button [mat-dialog-close]=\"true\" class=\"pep-spacing-element pep-button md strong\">\n                    {{ 'ACTIONS.CONTINUE' | translate }}\n                </button>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'cancel-ok'\">\n                <button mat-button [mat-dialog-close]=\"false\" class=\"pep-spacing-element pep-button md weak\">\n                    {{ 'ACTIONS.CANCEL' | translate }}\n                </button>\n                <button mat-button [mat-dialog-close]=\"true\" class=\"pep-spacing-element pep-button md strong\">\n                    {{ 'ACTIONS.OK' | translate }}\n                </button>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'cancel-delete'\">\n                <button mat-button [mat-dialog-close]=\"false\" class=\"pep-spacing-element pep-button md weak\">\n                    {{ 'ACTIONS.CANCEL' | translate }}\n                </button>\n                <button mat-button [mat-dialog-close]=\"true\" class=\"pep-spacing-element pep-button md strong caution\">\n                    {{ 'ACTIONS.DELETE' | translate }}\n                </button>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'custom'\">\n                <ng-container *ngFor=\"let btn of data?.actionButtons\">\n                    <!-- [mat-dialog-close]=\"btn?.callback ? btn.callback : null\" -->\n                    <button mat-button (click)=\"onActionButtonClicked(btn)\" class=\"pep-spacing-element pep-button md\"\n                        [ngClass]=\"btn?.className != '' ? btn?.className : 'weak'\">\n                        {{ btn?.title }}\n                    </button>\n                </ng-container>\n            </ng-container>\n        </ng-container>\n    </div>\n</pep-dialog>",
                encapsulation: ViewEncapsulation.None,
                styles: [""]
            },] }
];
PepDefaultDialogComponent.ctorParameters = () => [
    { type: PepDialogData, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] },
    { type: MatDialogRef }
];

class PepDialogComponent {
    constructor() {
        this.showClose = true;
        this.showHeader = true;
        this.showFooter = true;
    }
}
PepDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'pep-dialog',
                template: "<div mat-dialog-title *ngIf=\"showHeader\" class=\"dialog-header-container\">\n    <span class=\"dialog-title\" *ngIf=\"title?.length\">\n        {{ title }}\n    </span>\n    <button mat-button *ngIf=\"showClose\" [mat-dialog-close]=\"null\" class=\"pep-button icon-button md weak dialog-close\">\n        <mat-icon>\n            <pep-icon name=\"system_close\">\n            </pep-icon>\n        </mat-icon>\n    </button>\n</div>\n<div mat-dialog-content>\n    <ng-content select=\"[pep-dialog-content]\"></ng-content>\n</div>\n<div mat-dialog-actions *ngIf=\"showFooter\" class=\"pep-border-top\">\n    <ng-content select=\"[pep-dialog-actions]\"></ng-content>\n</div>",
                styles: [""]
            },] }
];
PepDialogComponent.propDecorators = {
    title: [{ type: Input }],
    showClose: [{ type: Input }],
    showHeader: [{ type: Input }],
    showFooter: [{ type: Input }]
};

class PepDialogModule {
    constructor(pepIconRegistry) {
        this.pepIconRegistry = pepIconRegistry;
        this.pepIconRegistry.registerIcons([pepIconSystemClose]);
    }
}
PepDialogModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    // Material modules,
                    MatCommonModule,
                    MatButtonModule,
                    MatIconModule,
                    MatDialogModule,
                    // ngx-lib modules
                    PepNgxLibModule,
                    PepIconModule,
                ],
                exports: [PepDialogComponent],
                declarations: [PepDefaultDialogComponent, PepDialogComponent],
                entryComponents: [PepDefaultDialogComponent],
            },] }
];
PepDialogModule.ctorParameters = () => [
    { type: PepIconRegistry }
];

class PepDialogService {
    constructor(dialog, layoutService, overlay) {
        this.dialog = dialog;
        this.layoutService = layoutService;
        this.overlay = overlay;
    }
    fixConfigIfNeeded(data, config) {
        if (config.disableClose) {
            if (((!data.showClose || !data.showHeader) && !data.showFooter) ||
                (data.actionsType === 'custom' &&
                    (data.actionButtons === null ||
                        data.actionButtons.length === 0))) {
                config.disableClose = false;
            }
        }
    }
    getDialogConfig(options = {}, size = 'regular') {
        var _a;
        const dialogConfig = new MatDialogConfig();
        dialogConfig.autoFocus = false;
        dialogConfig.direction = this.layoutService.isRtl() ? 'rtl' : 'ltr';
        dialogConfig.disableClose = (_a = options.disableClose) !== null && _a !== void 0 ? _a : true;
        dialogConfig.panelClass = ['pep-dialog', options.panelClass || ''];
        if (size === 'inline') {
            dialogConfig.height = options.height || 'auto';
            dialogConfig.maxWidth = options.maxWidth || '100vw';
            dialogConfig.maxHeight = options.maxHeight || '100vh';
            dialogConfig.minWidth = options.minWidth || '300px';
        }
        dialogConfig.panelClass.push(size);
        dialogConfig.scrollStrategy = this.overlay.scrollStrategies.noop();
        // dialogConfig.scrollStrategy = this.overlay.scrollStrategies.block();
        return dialogConfig;
    }
    openDefaultDialog(data, config = null) {
        if (!config) {
            config = this.getDialogConfig();
        }
        this.fixConfigIfNeeded(data, config);
        config.data = data;
        const dialogRef = this.dialog.open(PepDefaultDialogComponent, config);
        return dialogRef;
    }
    openDialog(componentOrTemplateRef, data = {}, config = null) {
        if (!config) {
            config = this.getDialogConfig();
        }
        this.fixConfigIfNeeded(data, config);
        config.data = data;
        const dialogRef = this.dialog.open(componentOrTemplateRef, config);
        return dialogRef;
    }
}
PepDialogService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PepDialogService_Factory() { return new PepDialogService(i0.ɵɵinject(i1.MatDialog), i0.ɵɵinject(i2.PepLayoutService), i0.ɵɵinject(i3.Overlay)); }, token: PepDialogService, providedIn: "root" });
PepDialogService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
PepDialogService.ctorParameters = () => [
    { type: MatDialog },
    { type: PepLayoutService },
    { type: Overlay }
];

/*
 * Public API Surface of ngx-lib/dialog
 */

/**
 * Generated bundle index. Do not edit.
 */

export { PepDialogActionButton, PepDialogComponent, PepDialogData, PepDialogModule, PepDialogService, PepDefaultDialogComponent as ɵa };
//# sourceMappingURL=pepperi-addons-ngx-lib-dialog.js.map
