import { EventEmitter, Component, ChangeDetectionStrategy, ChangeDetectorRef, Renderer2, ElementRef, Input, Output, ViewChild, Directive, HostListener, Pipe, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { MatCommonModule } from '@angular/material/core';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatBadgeModule } from '@angular/material/badge';
import { MatIconModule } from '@angular/material/icon';
import { DEFAULT_HORIZONTAL_ALIGNMENT, PepCustomizationService, PepQuantitySelectorField, PepUtilitiesService, PepValidatorService, PepNgxLibModule } from '@pepperi-addons/ngx-lib';
import { pepIconNumberMinus, pepIconNumberPlus, PepIconModule, PepIconRegistry } from '@pepperi-addons/ngx-lib/icon';
import { PepFieldTitleModule } from '@pepperi-addons/ngx-lib/field-title';
import { trigger, state, style, transition, animate } from '@angular/animations';
import { Subject, BehaviorSubject } from 'rxjs';
import { takeUntil, distinctUntilChanged } from 'rxjs/operators';
import { TranslateService } from '@ngx-translate/core';

class PepQuantitySelectorComponent {
    constructor(cd, customizationService, renderer, element, translate, utilitiesService) {
        this.cd = cd;
        this.customizationService = customizationService;
        this.renderer = renderer;
        this.element = element;
        this.translate = translate;
        this.utilitiesService = utilitiesService;
        this.key = '';
        this._value = null;
        this._formattedValue = null;
        this.label = '';
        this.type = 'qs';
        this.mandatory = false;
        this.disabled = false;
        this.readonly = false;
        this._textColor = '';
        this.xAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;
        this.rowSpan = 1;
        this.allowDecimal = false;
        this.additionalValue = '';
        this._visible = true;
        this.controlType = 'qs';
        this.form = null;
        this.showTitle = true;
        this.layoutType = 'form';
        this.isActive = false;
        // Get default style from theme.
        this.styleType = document.documentElement.style.getPropertyValue(PepCustomizationService.STYLE_QS_KEY); //'strong';
        this.valueChange = new EventEmitter();
        this.elementClick = new EventEmitter();
        this._calculateFormattedValue = true;
        this.lastQsContClientWidth = 0;
        this.showQsBtn = true;
        this.standAlone = false;
        this.isInFocus = false;
        this.isMatrixFocus = false;
        this.isCaution = false;
        this.messages = null;
        this.sameElementInTheWantedRow = null;
        this.isEmptyKey = false;
        this._destroyed = new Subject();
        this.qsWidthSubject = new BehaviorSubject(0);
    }
    set value(value) {
        if (!value) {
            value = '';
        }
        this._value = value;
        if (this._calculateFormattedValue) {
            this.setFormattedValue(value);
        }
    }
    get value() {
        return this._value;
    }
    set formattedValue(value) {
        if (!value) {
            value = '';
        }
        if (this._calculateFormattedValue) {
            this._calculateFormattedValue = false;
        }
        this.setFormattedValue(value);
    }
    get formattedValue() {
        return this._formattedValue;
    }
    set textColor(value) {
        this._textColor = value;
        this.isCaution = value === '#FF0000';
    }
    get textColor() {
        return this._textColor;
    }
    set notificationInfo(value) {
        this._notificationInfo = value;
        const messages = value && value > 0 ? JSON.parse(value).Messages : '';
        if (messages && messages.length > 0) {
            // Replace the msg keys.
            for (const msg of messages) {
                if (msg.Key === 'Inventory_Limit_Msg') {
                    msg.Key = 'MESSAGES.ERROR_INVENTORY_LIMIT';
                }
                else if (msg.Key === 'Case_Quantity_Limit_Msg') {
                    msg.Key = 'MESSAGES.ERROR_CASE_QUANTITY_LIMIT';
                }
                else if (msg.Key === 'Min_Quantity_Limit_Msg') {
                    msg.Key = 'MESSAGES.ERROR_MIN_QUANTITY_LIMIT';
                }
                else if (msg.Key === 'Max_Quantity_Limit_Msg') {
                    msg.Key = 'MESSAGES.ERROR_MAX_QUANTITY_LIMIT';
                }
            }
            this.messages = messages;
            const fieldControl = this.form.controls[this.key];
            fieldControl.setErrors({
                serverError: 'Error',
            });
            this.sameElementInTheWantedRow = null;
            setTimeout(() => {
                if (this.QSInput && this.QSInput.nativeElement) {
                    this.QSInput.nativeElement.focus();
                }
            }, 150);
        }
    }
    get notificationInfo() {
        return this._notificationInfo;
    }
    set visible(visible) {
        this._visible = visible;
        if (visible) {
            this.renderer.removeClass(this.element.nativeElement, 'hidden-element');
        }
        else {
            this.renderer.addClass(this.element.nativeElement, 'hidden-element');
        }
    }
    get visible() {
        return this._visible;
    }
    get calculateFormattedValue() {
        return this._calculateFormattedValue;
    }
    setForm() {
        const pepField = new PepQuantitySelectorField({
            key: this.key,
            value: this.value,
            mandatory: this.mandatory,
            readonly: this.readonly,
            disabled: this.disabled,
        });
        this.form = this.customizationService.getDefaultFromGroup(pepField);
    }
    setFormattedValue(value) {
        if (this._calculateFormattedValue) {
            this._formattedValue = this.utilitiesService.formatNumber(value);
        }
        else {
            this._formattedValue = value;
        }
        this.updateFormFieldValue();
    }
    updateFormFieldValue() {
        this.customizationService.updateFormFieldValue(this.form, this.key, this.formattedValue);
    }
    get displayValue() {
        const res = this.isInFocus
            ? parseFloat(this.value).toString()
            : this.formattedValue;
        return res;
    }
    getDestroyer() {
        return takeUntil(this._destroyed);
    }
    ngOnInit() {
        if (this.form === null) {
            if (this.key === '') {
                this.isEmptyKey = true;
            }
            this.standAlone = true;
            this.setForm();
            this.renderer.addClass(this.element.nativeElement, PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME);
        }
        this.qsWidthSubject
            .asObservable()
            .pipe(this.getDestroyer(), distinctUntilChanged())
            .subscribe((qsWidth) => {
            this.setupQsButtons(qsWidth);
        });
        this.updateFormFieldValue();
    }
    ngAfterViewInit() {
        //
    }
    ngAfterViewChecked() {
        this.setQsView();
    }
    ngOnChanges(changes) {
        // Bug fix for addons when the key is '' in the ngOnInit for some reson
        if (this.isEmptyKey && this.key !== '') {
            this.setForm();
        }
        setTimeout(() => {
            this.focusToTheSameElementInTheWantedRow();
        }, 150);
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
    get getAdditionalValue() {
        return this.additionalValue.length > 0 ? 'show' : 'hide';
    }
    getParentByClass(el, parentSelector /* optional */) {
        var _a;
        // If no parentSelector defined will bubble up all the way to *document*
        if (parentSelector === undefined) {
            parentSelector = document;
        }
        let p = el.parentNode;
        while (p &&
            !((_a = p === null || p === void 0 ? void 0 : p.classList) === null || _a === void 0 ? void 0 : _a.contains(parentSelector)) &&
            parentSelector !== document) {
            const o = p;
            p = (o === null || o === void 0 ? void 0 : o.parentNode) || null;
        }
        return (p === null || p === void 0 ? void 0 : p.className.indexOf(parentSelector)) > -1 ? p : null;
    }
    getSameElementInTheWantedRowByClassName(event, isNext = true) {
        const eventTarget = event.target || event.srcElement;
        let sameElementInTheWantedRowByClassName;
        let parentSelector;
        if (this.layoutType === 'table') {
            parentSelector = this.getParentByClass(eventTarget, 'table-row');
        }
        else if (this.layoutType === 'card') {
            parentSelector = this.getParentByClass(eventTarget, 'card-view');
            if (!parentSelector) {
                parentSelector = this.getParentByClass(eventTarget, 'line-view');
            }
        }
        if (parentSelector.nextElementSibling === null &&
            parentSelector.previousElementSibling === null) {
            sameElementInTheWantedRowByClassName = null;
        }
        else {
            if (isNext) {
                if (parentSelector.nextElementSibling === null) {
                    sameElementInTheWantedRowByClassName = parentSelector.parentElement.querySelectorAll('[name=' + this.key + ']')[0];
                }
                else {
                    sameElementInTheWantedRowByClassName = parentSelector.nextElementSibling.querySelectorAll('[name=' + this.key + ']')[0];
                }
            }
            else {
                if (parentSelector.previousElementSibling === null) {
                    const elementsList = parentSelector.parentElement.querySelectorAll('[name=' + this.key + ']');
                    sameElementInTheWantedRowByClassName =
                        elementsList[elementsList.length - 1];
                }
                else {
                    sameElementInTheWantedRowByClassName = parentSelector.previousElementSibling.querySelectorAll('[name=' + this.key + ']')[0];
                }
            }
        }
        return sameElementInTheWantedRowByClassName;
    }
    setSameElementInTheWantedRow(event, isNext = true) {
        // Navigate to the QS in the next row.
        if (this.layoutType === 'card' || this.layoutType === 'table') {
            this.sameElementInTheWantedRow = this.getSameElementInTheWantedRowByClassName(event, isNext);
        }
        this.QSInput.nativeElement.blur();
    }
    focusToTheSameElementInTheWantedRow() {
        if (this.sameElementInTheWantedRow) {
            const elem = this.sameElementInTheWantedRow;
            // If this is regular item (qs and not button) .
            if (elem instanceof HTMLInputElement && elem.type === 'text') {
                elem.click();
                elem.select();
            }
            else {
                const parentElem = elem.parentNode;
                parentElem.click();
                elem.focus();
            }
            this.sameElementInTheWantedRow = null;
        }
    }
    cleanError() {
        const fieldControl = this.form.controls[this.key];
        // Clean the error message
        if (this.messages && this.messages.length > 0) {
            this.messages = this.notificationInfo = null;
            fieldControl.setErrors(null);
        }
    }
    onMatrixMouseEnter(event) {
        this.isMatrixFocus = true;
    }
    onMatrixMouseleave(event) {
        this.isMatrixFocus = false;
    }
    onMatrixClick(event) {
        this.isInFocus = true;
        if (this.QSInput && this.QSInput.nativeElement) {
            this.QSInput.nativeElement.focus();
        }
    }
    onMatrixBlur(event) {
        if (!event.relatedTarget ||
            event.relatedTarget.className.indexOf('qs') < 0) {
            this.isMatrixFocus = false;
        }
        this.onBlur(event);
    }
    onFocus(event) {
        this.isInFocus = true;
    }
    isDifferentValue(value) {
        let res = false;
        const currentValue = this.utilitiesService.coerceNumberProperty(this.value);
        const newValue = this.utilitiesService.coerceNumberProperty(value);
        res = currentValue !== newValue;
        return res;
    }
    onBlur(event) {
        this.isInFocus = false;
        this.cleanError();
        const value = event.target ? event.target.value : event;
        if (value !== this.value && this.isDifferentValue(value)) {
            this.value = value;
            // If the user is setting the formatted value then set the value till the user format it and return it back.
            if (!this._calculateFormattedValue) {
                this._formattedValue = value;
            }
            this.valueChange.emit(this.value);
        }
        else {
            this.focusToTheSameElementInTheWantedRow();
        }
    }
    onKeydown(event) {
        const keyboardEvent = event;
        if (keyboardEvent.key === 'Enter') {
            this.setSameElementInTheWantedRow(keyboardEvent, !keyboardEvent.shiftKey);
            return true;
        }
    }
    increment(event) {
        if (this.standAlone) {
            this.value = this.utilitiesService.incrementNumber(this.value);
        }
        this.elementClick.emit({
            key: this.key,
            value: PepQuantitySelectorComponent.PLUS,
            controlType: this.controlType,
            eventWhich: event.which,
        });
        event.stopPropagation();
    }
    decrement(event) {
        if (this.standAlone) {
            this.value = this.utilitiesService.decrementNumber(this.value);
        }
        this.elementClick.emit({
            key: this.key,
            value: PepQuantitySelectorComponent.MINUS,
            controlType: this.controlType,
            eventWhich: event.which,
        });
        event.stopPropagation();
    }
    enterChildren(event) {
        this.elementClick.emit({
            key: this.key,
            value: PepQuantitySelectorComponent.ENTER_CHILDREN,
            controlType: this.controlType,
            eventWhich: event.which,
        });
    }
    enterPackage(event) {
        this.elementClick.emit({
            key: this.key,
            value: PepQuantitySelectorComponent.ENTER_PACKAGE,
            controlType: this.controlType,
            eventWhich: event.which,
            otherData: this.notificationInfo,
        });
    }
    setupQsButtons(qsWidth) {
        this.showQsBtn = qsWidth > 120;
        if (!this.cd['destroyed']) {
            this.cd.detectChanges();
        }
    }
    setQsView() {
        if (this.QSCont &&
            this.QSCont.nativeElement &&
            this.QSCont.nativeElement.clientWidth > 0) {
            setTimeout(() => {
                this.qsWidthSubject.next(this.QSCont.nativeElement.clientWidth);
            }, 0);
        }
    }
}
PepQuantitySelectorComponent.ENTER_CHILDREN = '[EnterChildren]';
PepQuantitySelectorComponent.ENTER_PACKAGE = '[EnterPackage]';
PepQuantitySelectorComponent.PLUS = '[+]';
PepQuantitySelectorComponent.MINUS = '[-]';
PepQuantitySelectorComponent.decorators = [
    { type: Component, args: [{
                selector: 'pep-quantity-selector',
                template: "<ng-container [formGroup]=\"form\">\n    <ng-template #pepTemplate>\n        <div #QSCont class=\"pep-quantity-selector-container {{ styleType }}\" [ngClass]=\"{\n                'hide-qs-actions' : layoutType === 'card' && rowSpan <= 1,\n                'pep-table-quantity-selector': layoutType === 'table',\n                'one-row': rowSpan === 1,\n                caution: isCaution,\n                'matrix-qs': type === 'qsForMatrix',\n                'zero-quantity': formattedValue === '0'\n            }\">\n            <pep-field-title *ngIf=\"layoutType !== 'table' && layoutType !== 'card'\" [label]=\"label\"\n                [mandatory]=\"mandatory\" [disabled]=\"disabled\" [showTitle]=\"showTitle\" [xAlignment]=\"xAlignment\">\n            </pep-field-title>\n\n            <ng-container *ngIf=\"type == 'qs'\">\n                <ng-container *ngIf=\"readonly; then readonlyBlock; else editableQSBlock\"></ng-container>\n                <ng-template #readonlyBlock>\n                    <button [id]=\"key\" mat-button class=\"pep-button {{ styleType }} disable \"\n                        [ngClass]=\"{caution: isCaution, md: rowSpan !== 1, xs: rowSpan === 1}\"\n                        title=\"{{ formattedValue }}\" disabled=\"true\">\n                        <span class=\"ellipsis\">\n                            {{ formattedValue }}\n                        </span>\n                    </button>\n                </ng-template>\n                <ng-template #editableQSBlock>\n                    <mat-form-field appearance=\"outline\">\n                        <input pepQsValidation [allowDecimal]=\"allowDecimal\" type=\"decimalNumber\" inputmode=\"decimal\"\n                            matInput #QSInput name=\"{{ key }}\" class=\"body-lg ellipsis\" title=\"{{ formattedValue }}\"\n                            autocomplete=\"off\" [id]=\"key\" [formControlName]=\"key\" [value]=\"displayValue\"\n                            (click)=\"$event.target.setSelectionRange(0, 999)\" (keydown)=\"onKeydown($event)\"\n                            (blur)=\"onBlur($event)\" (focus)=\"onFocus($event)\" />\n                        <button *ngIf=\"showQsBtn\" mat-button matPrefix (click)=\"decrement($event)\"\n                            class=\"pep-button icon-button sm weak qs-action\" [disabled]=\"disabled\" [ngClass]=\"{ disable: disabled, caution: isCaution && styleType !== 'strong',\n                                'keep-background-on-focus': styleType === 'strong'}\">\n                            <mat-icon>\n                                <pep-icon name=\"number_minus\">\n                                </pep-icon>\n                            </mat-icon>\n                        </button>\n                        <button *ngIf=\"showQsBtn\" mat-button matSuffix (click)=\"increment($event)\"\n                            class=\"pep-button icon-button sm weak qs-action\" [disabled]=\"disabled\" [ngClass]=\"{ disable: disabled, caution: isCaution && styleType !== 'strong',\n                                'keep-background-on-focus': styleType === 'strong'}\">\n                            <mat-icon>\n                                <pep-icon name=\"number_plus\">\n                                </pep-icon>\n                            </mat-icon>\n                        </button>\n                        <mat-error *ngIf=\"messages?.length > 0\">\n                            <span class=\"qs-error body-xs\" *ngFor=\"let msg of messages\"> {{ msg.Key | translate }} :\n                                {{ msg.Value }} </span>\n                        </mat-error>\n                    </mat-form-field>\n                </ng-template>\n            </ng-container>\n\n            <ng-container *ngIf=\"type == 'qsForMatrix'\">\n                <ng-container *ngIf=\"readonly; then readonlyBlock; else editableQSBlock\"></ng-container>\n                <ng-template #readonlyBlock>\n                    <button [id]=\"key\" mat-button class=\"pep-button {{ styleType }} disable\" disabled=\"true\"\n                        [ngClass]=\"{caution: isCaution, md: rowSpan !== 1, xs: rowSpan === 1}\">\n                        X\n                    </button>\n                </ng-template>\n                <ng-template #editableQSBlock>\n                    <span *ngIf=\" xAlignment=='right'\" class=\" body-sm additional-value prefix\"\n                        matBadge=\"{{ additionalValue }}\" matBadgePosition=\"before\"\n                        matBadgeSize=\"rowSpan === 1 ? small : medium\" [@showHide]=\"getAdditionalValue\"></span>\n\n                    <mat-form-field appearance=\"outline\" (mouseleave)=\"!isInFocus ? onMatrixMouseleave($event) : null\">\n                        <input pepQsValidation [allowDecimal]=\"allowDecimal\" type=\"decimalNumber\" inputmode=\"decimal\"\n                            matInput #QSInput name=\"{{ key }}\" title=\"{{ formattedValue }}\" class=\"body-sm ellipsis\"\n                            autocomplete=\"off\" [id]=\"key\" [formControlName]=\"key\" [value]=\"displayValue\"\n                            (click)=\"onMatrixClick($event); $event.target.setSelectionRange(0, 999)\"\n                            (keydown)=\"onKeydown($event)\" (blur)=\"onMatrixBlur($event)\"\n                            (focus)=\"onMatrixMouseEnter($event); onFocus($event)\"\n                            (mouseenter)=\"onMatrixMouseEnter($event)\" />\n\n                        <mat-error *ngIf=\"messages?.length > 0\">\n                            <span class=\"qs-error body-xs\" *ngFor=\"let msg of messages\"> {{ msg.Key | translate }} :\n                                {{ msg.Value }} </span>\n                        </mat-error>\n                    </mat-form-field>\n\n                    <span *ngIf=\"xAlignment != 'right'\" class=\"body-sm additional-value suffix\"\n                        matBadge=\"{{ additionalValue }}\" matBadgePosition=\"before\"\n                        matBadgeSize=\"rowSpan === 1 ? small : medium\" [@showHide]=\"getAdditionalValue\"></span>\n                </ng-template>\n            </ng-container>\n\n            <ng-container *ngIf=\"type == 'button'\">\n                <ng-container *ngIf=\"(value | pepToNumber) == 0; then regularBlock; else withBadgeBlock\">\n                </ng-container>\n                <ng-template #regularBlock>\n                    <button mat-button [disabled]=\"disabled\" class=\"pep-button {{ styleType }} \" [id]=\"key\"\n                        name=\"{{ key }}\"\n                        [ngClass]=\"{ disable: disabled, caution: isCaution, md: rowSpan !== 1, xs: rowSpan === 1}\"\n                        [title]=\"'QS.ORDER' | translate\" (click)=\"enterChildren($event)\">\n                        <span class=\"ellipsis\">\n                            {{ 'QS.ORDER' | translate }}\n                        </span>\n                    </button>\n                </ng-template>\n                <ng-template #withBadgeBlock>\n                    <button mat-button matBadge=\"{{ formattedValue }}\"\n                        matBadgePosition=\"{{xAlignment == 'right' ? 'before' : 'after'}}\"\n                        [matBadgeSize]=\"layoutType === 'card' && rowSpan === 1 ? 'small' : 'medium'\"\n                        class=\"pep-button {{ styleType }} \" [id]=\"key\" name=\"{{ key }}\" [ngClass]=\"{ disable: disabled, caution: isCaution, md: rowSpan !== 1, xs: rowSpan === 1,\n                            'right-alignment': xAlignment == 'right', 'left-alignment': xAlignment != 'right'}\"\n                        [title]=\"'QS.ORDER' | translate\" (click)=\"enterChildren($event)\" [disabled]=\"disabled\">\n                        <span class=\"ellipsis\">\n                            {{ 'QS.ORDER' | translate }}\n                        </span>\n                    </button>\n                </ng-template>\n            </ng-container>\n            <ng-container *ngIf=\"type == 'packageButton'\">\n                <button mat-button class=\"pep-button {{ styleType }} \" [id]=\"key\" name=\"{{ key }}\"\n                    [ngClass]=\"{ disable: disabled, caution: isCaution, md: rowSpan !== 1, xs: rowSpan === 1}\"\n                    [title]=\"'QS.ORDER' | translate\" (click)=\"enterPackage($event)\" [disabled]=\"disabled\">\n                    <span class=\"ellipsis\">\n                        {{ 'QS.ORDER' | translate }} &#40;{{ formattedValue }}&#41;\n                    </span>\n                </button>\n            </ng-container>\n        </div>\n    </ng-template>\n\n    <ng-container *ngIf=\"layoutType === 'form'\">\n        <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'card'\">\n        <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'table'\">\n        <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n    </ng-container>\n</ng-container>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                animations: [
                    trigger('showHide', [
                        state('show', style({
                            opacity: 1,
                            transform: 'scale(1)',
                        })),
                        state('hide', style({
                            opacity: 0,
                            transform: 'scale(0)',
                        })),
                        transition('show => hide', animate('250ms ease-out')),
                        transition('hide => show', animate('250ms ease-in')),
                    ]),
                ],
                styles: [":host{height:inherit;display:grid}.pep-quantity-selector-container,.pepperi-quantity-selector-container{display:flex;flex-flow:wrap;align-items:center;min-width:2rem;width:100%;height:inherit}.pep-quantity-selector-container input::-webkit-inner-spin-button,.pep-quantity-selector-container input::-webkit-outer-spin-button,.pepperi-quantity-selector-container input::-webkit-inner-spin-button,.pepperi-quantity-selector-container input::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}.pep-quantity-selector-container input[type=number],.pepperi-quantity-selector-container input[type=number]{-moz-appearance:textfield}.pep-quantity-selector-container .mat-input-element,.pepperi-quantity-selector-container .mat-input-element{padding:0 .25rem;text-align:center;font-weight:600;font-weight:var(--pep-font-weight-bold,600);width:100%}.pep-quantity-selector-container .mat-form-field .mat-form-field-wrapper .mat-form-field-subscript-wrapper,.pepperi-quantity-selector-container .mat-form-field .mat-form-field-wrapper .mat-form-field-subscript-wrapper{height:unset}.pep-quantity-selector-container .pep-button,.pep-quantity-selector-container .pepperi-button,.pepperi-quantity-selector-container .pep-button,.pepperi-quantity-selector-container .pepperi-button{width:100%}.pep-quantity-selector-container .pep-button.qs-action,.pep-quantity-selector-container .pepperi-button.qs-action,.pepperi-quantity-selector-container .pep-button.qs-action,.pepperi-quantity-selector-container .pepperi-button.qs-action{min-width:2rem;line-height:2rem;width:2rem!important;height:2rem!important}.pep-quantity-selector-container .pep-button.qs-action .mat-icon,.pep-quantity-selector-container .pepperi-button.qs-action .mat-icon,.pepperi-quantity-selector-container .pep-button.qs-action .mat-icon,.pepperi-quantity-selector-container .pepperi-button.qs-action .mat-icon{height:inherit;width:inherit}.pep-quantity-selector-container .qs-error,.pepperi-quantity-selector-container .qs-error{display:block}.pep-quantity-selector-container.hide-qs-actions .pep-button.qs-action,.pep-quantity-selector-container.hide-qs-actions .pepperi-button.qs-action,.pepperi-quantity-selector-container.hide-qs-actions .pep-button.qs-action,.pepperi-quantity-selector-container.hide-qs-actions .pepperi-button.qs-action{display:none}.pep-quantity-selector-container.matrix-qs .additional-value,.pepperi-quantity-selector-container.matrix-qs .additional-value{height:1.25rem;top:calc(.25rem * -1);top:calc(var(--pep-spacing-xs, .25rem) * -1);transform:unset!important;display:flex;align-self:flex-start;justify-content:flex-end}.pep-quantity-selector-container.matrix-qs .additional-value.prefix,.pepperi-quantity-selector-container.matrix-qs .additional-value.prefix{left:calc(.5rem * -1)!important;left:calc(var(--pep-spacing-sm, .5rem) * -1)!important}.pep-quantity-selector-container.matrix-qs .additional-value.suffix,.pepperi-quantity-selector-container.matrix-qs .additional-value.suffix{right:calc(.5rem * -1)!important;right:calc(var(--pep-spacing-sm, .5rem) * -1)!important}.pep-quantity-selector-container.matrix-qs .additional-value .mat-badge-content,.pepperi-quantity-selector-container.matrix-qs .additional-value .mat-badge-content{z-index:97;min-width:1.5rem;width:-webkit-fit-content!important;width:-moz-fit-content!important;width:fit-content!important;border-radius:.625rem;padding:0 .5rem;top:calc(.5rem * -1)!important;top:calc(var(--pep-spacing-sm, .5rem) * -1)!important;text-overflow:ellipsis;overflow:hidden;white-space:nowrap;max-width:inherit}.pep-quantity-selector-container.matrix-qs .disable,.pepperi-quantity-selector-container.matrix-qs .disable{min-width:.5rem;padding:0 .25rem}.pep-quantity-selector-container.pep-table-quantity-selector .pep-button:not(.qs-action),.pep-quantity-selector-container.pep-table-quantity-selector .pepperi-button:not(.qs-action),.pep-quantity-selector-container.pepperi-table-quantity-selector .pep-button:not(.qs-action),.pep-quantity-selector-container.pepperi-table-quantity-selector .pepperi-button:not(.qs-action),.pepperi-quantity-selector-container.pep-table-quantity-selector .pep-button:not(.qs-action),.pepperi-quantity-selector-container.pep-table-quantity-selector .pepperi-button:not(.qs-action),.pepperi-quantity-selector-container.pepperi-table-quantity-selector .pep-button:not(.qs-action),.pepperi-quantity-selector-container.pepperi-table-quantity-selector .pepperi-button:not(.qs-action){height:2rem;line-height:2rem}.pep-quantity-selector-container.pep-table-quantity-selector .pep-button.qs-action,.pep-quantity-selector-container.pep-table-quantity-selector .pepperi-button.qs-action,.pep-quantity-selector-container.pepperi-table-quantity-selector .pep-button.qs-action,.pep-quantity-selector-container.pepperi-table-quantity-selector .pepperi-button.qs-action,.pepperi-quantity-selector-container.pep-table-quantity-selector .pep-button.qs-action,.pepperi-quantity-selector-container.pep-table-quantity-selector .pepperi-button.qs-action,.pepperi-quantity-selector-container.pepperi-table-quantity-selector .pep-button.qs-action,.pepperi-quantity-selector-container.pepperi-table-quantity-selector .pepperi-button.qs-action{min-width:1.5rem;line-height:1.5rem;width:1.5rem!important;height:1.5rem!important}"]
            },] }
];
PepQuantitySelectorComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: PepCustomizationService },
    { type: Renderer2 },
    { type: ElementRef },
    { type: TranslateService },
    { type: PepUtilitiesService }
];
PepQuantitySelectorComponent.propDecorators = {
    key: [{ type: Input }],
    value: [{ type: Input }],
    formattedValue: [{ type: Input }],
    label: [{ type: Input }],
    type: [{ type: Input }],
    mandatory: [{ type: Input }],
    disabled: [{ type: Input }],
    readonly: [{ type: Input }],
    textColor: [{ type: Input }],
    xAlignment: [{ type: Input }],
    rowSpan: [{ type: Input }],
    allowDecimal: [{ type: Input }],
    additionalValue: [{ type: Input }],
    notificationInfo: [{ type: Input }],
    visible: [{ type: Input }],
    form: [{ type: Input }],
    showTitle: [{ type: Input }],
    layoutType: [{ type: Input }],
    isActive: [{ type: Input }],
    styleType: [{ type: Input }],
    valueChange: [{ type: Output }],
    elementClick: [{ type: Output }],
    QSCont: [{ type: ViewChild, args: ['QSCont',] }],
    QSInput: [{ type: ViewChild, args: ['QSInput',] }]
};

class PepQuantitySelectorValidationDirective {
    constructor(hostElement, validatorService) {
        this.hostElement = hostElement;
        this.validatorService = validatorService;
        this.previousValue = '';
    }
    ngOnInit() {
        //
    }
    onChange(e) {
        this.validateValue(this.hostElement.nativeElement.value);
    }
    onKeyDown(e) {
        const originalValue = e.target['value'];
        // save value before keydown event
        this.previousValue = originalValue;
        const isNumber = this.validatorService.isNumber(e, this.allowDecimal);
        if (isNumber)
            return;
        else
            e.preventDefault();
    }
    validateValue(value) {
        const newValue = this.validatorService.validateNumber(value, this.allowDecimal);
        this.hostElement.nativeElement['value'] = newValue ? newValue : 0;
    }
}
PepQuantitySelectorValidationDirective.decorators = [
    { type: Directive, args: [{
                selector: '[pepQsValidation]',
            },] }
];
PepQuantitySelectorValidationDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: PepValidatorService }
];
PepQuantitySelectorValidationDirective.propDecorators = {
    allowDecimal: [{ type: Input }],
    onChange: [{ type: HostListener, args: ['change', ['$event'],] }],
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};

class PepQuantitySelectorNumberPipe {
    transform(value, allowDecimal) {
        const tmpValue = parseFloat(value);
        if (tmpValue === 0) {
            return '0';
        }
        else if (allowDecimal) {
            return tmpValue.toString();
        }
        else {
            return parseInt(value).toString();
        }
    }
}
PepQuantitySelectorNumberPipe.decorators = [
    { type: Pipe, args: [{ name: 'pepQuantitySelectorNumber' },] }
];

class PepQuantitySelectorModule {
    constructor(pepIconRegistry) {
        this.pepIconRegistry = pepIconRegistry;
        this.pepIconRegistry.registerIcons([
            pepIconNumberMinus,
            pepIconNumberPlus,
        ]);
    }
}
PepQuantitySelectorModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    // Material modules
                    MatCommonModule,
                    MatFormFieldModule,
                    MatInputModule,
                    MatButtonModule,
                    MatBadgeModule,
                    MatIconModule,
                    // ngx-lib modules
                    PepNgxLibModule,
                    PepIconModule,
                    PepFieldTitleModule,
                ],
                exports: [PepQuantitySelectorComponent],
                declarations: [
                    PepQuantitySelectorComponent,
                    PepQuantitySelectorNumberPipe,
                    PepQuantitySelectorValidationDirective,
                ],
            },] }
];
PepQuantitySelectorModule.ctorParameters = () => [
    { type: PepIconRegistry }
];

/*
 * Public API Surface of ngx-lib/quantity-selector
 */

/**
 * Generated bundle index. Do not edit.
 */

export { PepQuantitySelectorComponent, PepQuantitySelectorModule, PepQuantitySelectorNumberPipe as ɵa, PepQuantitySelectorValidationDirective as ɵb };
//# sourceMappingURL=pepperi-addons-ngx-lib-quantity-selector.js.map
