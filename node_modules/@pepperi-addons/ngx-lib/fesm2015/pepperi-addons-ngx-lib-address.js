import { EventEmitter, Component, ChangeDetectionStrategy, ElementRef, Renderer2, Input, Output, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { MatCommonModule } from '@angular/material/core';
import { MatFormFieldModule } from '@angular/material/form-field';
import { DEFAULT_HORIZONTAL_ALIGNMENT, PepNgxLibModule } from '@pepperi-addons/ngx-lib';
import { PepTextboxModule } from '@pepperi-addons/ngx-lib/textbox';
import { PepSelectModule } from '@pepperi-addons/ngx-lib/select';
import { PepFieldTitleModule } from '@pepperi-addons/ngx-lib/field-title';

class PepAddressComponent {
    constructor(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.key = '';
        // @Input() value = '';
        this.formattedValue = '';
        this.label = '';
        this.mandatory = false;
        this.disabled = false;
        this.readonly = false;
        this.xAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;
        this.rowSpan = 1;
        this.form = null;
        this.layoutType = 'form';
        this._visible = true;
        this.addressValueChange = new EventEmitter();
    }
    set visible(visible) {
        this._visible = visible;
        if (visible) {
            this.renderer.removeClass(this.element.nativeElement, 'hidden-element');
        }
        else {
            this.renderer.addClass(this.element.nativeElement, 'hidden-element');
        }
    }
    get visible() {
        return this._visible;
    }
    ngOnInit() {
        this.renderer.addClass(this.element.nativeElement, 'pep-grouped-field');
    }
    ngOnChanges(changes) {
        //
    }
    ngOnDestroy() {
        //
    }
    // Not in use anymore comment in 16.55.
    // onBlur(e: any, key: string): void {
    //     const value = e.target ? e.target.value : e;
    //     this.changeValue({ key, value }, e.relatedTarget);
    // }
    onValueChange(value, key) {
        // if (e.target) {
        //     const input = e.target ? e.target.value : e;
        //     this.changeValue({ key, value: input.value });
        // } else {
        //     this.changeValue(e);
        // }
        const currentGroupField = this.groupFields.find((gf) => gf.key === key);
        if (currentGroupField && currentGroupField.value !== value) {
            // Set the value in the form controls
            if (this.form) {
                const formCtrl = this.form.get(this.key);
                if (formCtrl) {
                    formCtrl.get(key).setValue(value);
                }
            }
            this.addressValueChange.emit({
                key: key,
                value: value,
            });
        }
    }
}
PepAddressComponent.decorators = [
    { type: Component, args: [{
                selector: 'pep-address',
                template: "<ng-container [formGroup]=\"form\">\n    <ng-container *ngIf=\"layoutType === 'form'\">\n        <pep-field-title [label]=\"label\" [mandatory]=\"mandatory\" [disabled]=\"disabled\" class=\"header\">\n        </pep-field-title>\n        <div [formGroupName]=\"key\" [id]=\"key\" class=\"pep-address-container\"\n            dir=\"{{ xAlignment === 'right' ? 'rtl' : 'ltr' }}\">\n            <div [ngSwitch]=\"groupField.controlType\" *ngFor=\"let groupField of groupFields; let i = index\"\n                class=\"pep-address-field columns-{{ groupField.colSpan }}\">\n                <pep-textbox *ngSwitchCase=\"'textbox'\" [layoutType]=\"layoutType\" title=\"{{ groupField.formattedValue }}\"\n                    [form]=\"form\" [key]=\"groupField.key\" [value]=\"groupField.value\"\n                    [formattedValue]=\"groupField.formattedValue\" [label]=\"groupField.label\"\n                    [placeholder]=\"groupField.placeholder\" [type]=\"groupField.type\" [mandatory]=\"groupField.mandatory\"\n                    [disabled]=\"groupField.disabled\" [readonly]=\"groupField.readonly\"\n                    [xAlignment]=\"groupField.xAlignment\" [rowSpan]=\"groupField.rowSpan\" [parentFieldKey]=\"key\"\n                    (valueChange)=\"onValueChange($event, groupField.key)\">\n                </pep-textbox>\n\n                <pep-select *ngSwitchCase=\"'select'\" [layoutType]=\"layoutType\" title=\"{{ groupField.formattedValue }}\"\n                    [form]=\"form\" [key]=\"groupField.key\" [value]=\"groupField.value\" [label]=\"groupField.label\"\n                    [type]=\"groupField.type\" [mandatory]=\"groupField.mandatory\" [disabled]=\"groupField.disabled\"\n                    [readonly]=\"groupField.readonly\" [xAlignment]=\"groupField.xAlignment\" [rowSpan]=\"groupField.rowSpan\"\n                    [options]=\"groupField.options\" [parentFieldKey]=\"key\"\n                    (valueChange)=\"onValueChange($event, groupField.key)\">\n                </pep-select>\n            </div>\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'card'\">\n        <div class=\"pep-card-input \" title=\"{{ label }}&nbsp;{{ formattedValue }}\"\n            [ngClass]=\"['text-align-' + xAlignment]\">\n            <span *ngIf=\"label != ''\" class=\"body-xs title\">{{ label }}&nbsp;</span>\n            <ng-container *ngFor=\"let groupField of groupFields; let i = index\">\n                <span *ngIf=\"groupField?.formattedValue != ''\" class=\"body-sm\">{{ groupField.formattedValue\n                    }},&nbsp;</span>\n            </ng-container>\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'table'\">\n        <div class=\"pep-card-input \" title=\"{{ formattedValue }}\" [ngClass]=\"['text-align-' + xAlignment]\">\n            <ng-container *ngFor=\"let groupField of groupFields; let i = index\">\n                <span *ngIf=\"groupField?.formattedValue != ''\" class=\"body-sm\">{{ groupField.formattedValue\n                    }},&nbsp;</span>\n            </ng-container>\n        </div>\n    </ng-container>\n</ng-container>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".header{grid-column:1/span 3}.pep-address-container{padding:.875rem .75rem;padding:.875rem var(--pep-spacing-md,.75rem);border-radius:.25rem;border-radius:var(--pep-border-radius-md,.25rem);display:-ms-grid;display:grid;grid-template-columns:repeat(3,1fr);grid-column-gap:.75rem;grid-column-gap:var(--pep-spacing-md,.75rem);grid-row-gap:.75rem;grid-row-gap:var(--pep-spacing-md,.75rem)}.pep-address-container .columns-2{grid-column:1/span 2}.pep-address-container .columns-3{grid-column:1/span 3}"]
            },] }
];
PepAddressComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
PepAddressComponent.propDecorators = {
    key: [{ type: Input }],
    formattedValue: [{ type: Input }],
    label: [{ type: Input }],
    mandatory: [{ type: Input }],
    disabled: [{ type: Input }],
    readonly: [{ type: Input }],
    xAlignment: [{ type: Input }],
    rowSpan: [{ type: Input }],
    groupFields: [{ type: Input }],
    form: [{ type: Input }],
    layoutType: [{ type: Input }],
    visible: [{ type: Input }],
    addressValueChange: [{ type: Output }]
};

class PepAddressModule {
}
PepAddressModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    // Material modules
                    MatCommonModule,
                    MatFormFieldModule,
                    // ngx-lib modules
                    PepNgxLibModule,
                    PepTextboxModule,
                    PepSelectModule,
                    PepFieldTitleModule,
                ],
                exports: [PepAddressComponent],
                declarations: [PepAddressComponent],
            },] }
];

/*
 * Public API Surface of ngx-lib/address
 */

/**
 * Generated bundle index. Do not edit.
 */

export { PepAddressComponent, PepAddressModule };
//# sourceMappingURL=pepperi-addons-ngx-lib-address.js.map
