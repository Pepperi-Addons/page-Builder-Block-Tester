import { EventEmitter, Component, ChangeDetectionStrategy, Renderer2, ElementRef, Input, Output, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { MatCommonModule } from '@angular/material/core';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatIconModule } from '@angular/material/icon';
import { DEFAULT_HORIZONTAL_ALIGNMENT, PepCheckboxField, PepCustomizationService, PepNgxLibModule } from '@pepperi-addons/ngx-lib';
import { pepIconSystemBolt, PepIconModule, PepIconRegistry } from '@pepperi-addons/ngx-lib/icon';
import { PepFieldTitleModule } from '@pepperi-addons/ngx-lib/field-title';
import { TranslateService } from '@ngx-translate/core';

class PepCheckboxComponent {
    constructor(renderer, customizationService, element, translate) {
        this.renderer = renderer;
        this.customizationService = customizationService;
        this.element = element;
        this.translate = translate;
        this.key = '';
        this.value = false;
        this.label = '';
        this._type = 'checkbox'; // || 'booleanText'
        this.mandatory = false;
        this.disabled = false;
        this.readonly = false;
        this.xAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;
        this.rowSpan = 1;
        this._additionalValue = undefined;
        this.controlType = 'checkbox';
        this.form = null;
        this.isActive = false;
        this.showTitle = true;
        this.renderTitle = true;
        this.layoutType = 'form';
        this._visible = true;
        this.valueChange = new EventEmitter();
        this.standAlone = false;
        this.jsonLib = JSON;
    }
    set type(value) {
        this._type = value;
        this.setAdditionalValueObject();
    }
    get type() {
        return this._type;
    }
    set additionalValue(value) {
        this._additionalValue = value;
        this.setAdditionalValueObject();
    }
    get additionalValue() {
        return this._additionalValue;
    }
    set visible(visible) {
        this._visible = visible;
        if (visible) {
            this.renderer.removeClass(this.element.nativeElement, 'hidden-element');
        }
        else {
            this.renderer.addClass(this.element.nativeElement, 'hidden-element');
        }
    }
    get visible() {
        return this._visible;
    }
    setAdditionalValueObject() {
        if (this.additionalValue && this.type === 'booleanText') {
            try {
                if (typeof this.additionalValue === 'string') {
                    this.additionalValueObject = JSON.parse(this.additionalValue);
                }
                else {
                    this.additionalValueObject = this.additionalValue;
                }
            }
            catch (_a) {
                this.additionalValueObject = {
                    CheckedText: this.translate.instant('CHECKBOX.TRUE'),
                    UncheckedText: this.translate.instant('CHECKBOX.FALSE'),
                };
            }
        }
    }
    setDefaultForm() {
        const pepField = new PepCheckboxField({
            key: this.key,
            value: this.value,
            mandatory: this.mandatory,
            readonly: this.readonly,
            disabled: this.disabled,
        });
        this.form = this.customizationService.getDefaultFromGroup(pepField);
    }
    ngOnInit() {
        if (this.form === null) {
            this.standAlone = true;
            this.setDefaultForm();
            this.renderer.addClass(this.element.nativeElement, PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME);
        }
    }
    ngOnChanges(changes) {
        if (this.standAlone) {
            this.setDefaultForm();
        }
    }
    ngOnDestroy() {
        //
    }
    onMaterialChange(e) {
        this.changeValue(e.checked);
    }
    toggleChecked(event) {
        if (!this.disabled) {
            const isChecked = this.value ? true : false;
            const newValue = !isChecked;
            this.value = newValue;
            this.changeValue(newValue);
        }
    }
    changeValue(value) {
        this.customizationService.updateFormFieldValue(this.form, this.key, value);
        this.valueChange.emit(value);
    }
}
PepCheckboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'pep-checkbox',
                template: "<ng-container [formGroup]=\"form\">\n    <ng-template #pepTemplate>\n        <div class=\"pep-checkbox-container pep-input\" [ngClass]=\"{\n                'disable': disabled,\n                'pep-report-checkbox': layoutType === 'table' && !isActive,\n                'pep-card-checkbox': layoutType === 'card',\n                'one-row': rowSpan === 1,\n                'no-title': label.length == 0,\n                'right-alignment pull-right flip': xAlignment == 'right',\n                'center-alignment': xAlignment == 'center'\n            }\" dir=\"{{ xAlignment == 'right' ? 'rtl' : 'ltr' }}\">\n            <!--\n                This is cause a bug that when click on the pep-input area and after on the checkbox\n                the value is updated only for the second time.\n                (click)=\"toggleChecked($event)\" \n            -->\n            <ng-container *ngIf=\"type == 'booleanText'; then booleanTextTemplate; else regularTemplate\"></ng-container>\n            <ng-template #booleanTextTemplate>\n                <div class=\"mat-checkbox-layout body-sm\" (click)=\"toggleChecked($event)\"\n                    [title]=\"(label.length > 0 ? label + ': ' : '') + (value ? ('CHECKBOX.TRUE' | translate) : ('CHECKBOX.FALSE' | translate))\">\n                    <button [id]=\"key\" class=\"emoji-icon pull-left flip\">\n                        {{ value ? additionalValueObject?.CheckedText : additionalValueObject?.UncheckedText }}\n                    </button>\n                    <span *ngIf=\"label.length > 0 && layoutType !== 'table'\" class=\"mat-checkbox-label emoji-title\">{{\n                        label }}</span>\n                </div>\n            </ng-template>\n            <ng-template #regularTemplate>\n                <mat-checkbox [name]=\"key\" class=\"body-sm\" type=\"checkbox\" (change)=\"onMaterialChange($event)\"\n                    [title]=\"(label.length > 0 ? label + ': ' : '') + (value ? ('CHECKBOX.TRUE' | translate) : ('CHECKBOX.FALSE' | translate))\"\n                    [checked]=\"value\" [disabled]=\"disabled\">\n                    <span *ngIf=\"label.length > 0 && layoutType !== 'table'\">{{ label }}</span>\n                </mat-checkbox>\n            </ng-template>\n        </div>\n    </ng-template>\n\n    <ng-container *ngIf=\"layoutType === 'form'\">\n        <pep-field-title *ngIf=\"renderTitle\" [label]=\"label\" [mandatory]=\"mandatory\" [disabled]=\"disabled\"\n            [xAlignment]=\"xAlignment\" [showTitle]=\"false\">\n        </pep-field-title>\n        <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'card'\">\n        <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n    </ng-container>\n\n    <ng-container *ngIf=\"layoutType === 'table'\">\n        <ng-container *ngIf=\"key === 'ItemHasActiveCampaign'; then itemCampaignBlock; else checkboxBlock\">\n        </ng-container>\n        <ng-template #itemCampaignBlock>\n            <ng-container *ngIf=\"value; then trueTemplate; else falseTemplate\">\n            </ng-container>\n            <ng-template #trueTemplate>\n                <mat-icon class=\"has-active-campaign\" title=\"{{ 'CHECKBOX.TRUE' | translate }}\">\n                    <pep-icon name=\"system_bolt\">\n                    </pep-icon>\n                </mat-icon>\n            </ng-template>\n            <ng-template #falseTemplate>\n                <span>&nbsp;</span>\n            </ng-template>\n        </ng-template>\n        <ng-template #checkboxBlock>\n            <ng-container *ngTemplateOutlet=\"pepTemplate\"></ng-container>\n        </ng-template>\n    </ng-container>\n</ng-container>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{height:inherit;display:grid}:host>*{align-self:center}"]
            },] }
];
PepCheckboxComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: PepCustomizationService },
    { type: ElementRef },
    { type: TranslateService }
];
PepCheckboxComponent.propDecorators = {
    key: [{ type: Input }],
    value: [{ type: Input }],
    label: [{ type: Input }],
    type: [{ type: Input }],
    mandatory: [{ type: Input }],
    disabled: [{ type: Input }],
    readonly: [{ type: Input }],
    xAlignment: [{ type: Input }],
    rowSpan: [{ type: Input }],
    additionalValue: [{ type: Input }],
    form: [{ type: Input }],
    isActive: [{ type: Input }],
    showTitle: [{ type: Input }],
    renderTitle: [{ type: Input }],
    layoutType: [{ type: Input }],
    visible: [{ type: Input }],
    valueChange: [{ type: Output }]
};

class PepCheckboxModule {
    constructor(pepIconRegistry) {
        this.pepIconRegistry = pepIconRegistry;
        this.pepIconRegistry.registerIcons([pepIconSystemBolt]);
    }
}
PepCheckboxModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    // Material modules
                    MatCommonModule,
                    MatFormFieldModule,
                    MatCheckboxModule,
                    MatIconModule,
                    // ngx-lib modules
                    PepNgxLibModule,
                    PepIconModule,
                    PepFieldTitleModule,
                ],
                exports: [PepCheckboxComponent],
                declarations: [PepCheckboxComponent],
            },] }
];
PepCheckboxModule.ctorParameters = () => [
    { type: PepIconRegistry }
];

/*
 * Public API Surface of ngx-lib/checkbox
 */

/**
 * Generated bundle index. Do not edit.
 */

export { PepCheckboxComponent, PepCheckboxModule };
//# sourceMappingURL=pepperi-addons-ngx-lib-checkbox.js.map
