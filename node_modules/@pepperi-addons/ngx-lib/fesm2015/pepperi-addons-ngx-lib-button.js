import { EventEmitter, Component, Renderer2, ElementRef, Input, Output, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatCommonModule } from '@angular/material/core';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { PepIconModule } from '@pepperi-addons/ngx-lib/icon';
import { PepNgxLibModule } from '@pepperi-addons/ngx-lib';

class PepButton {
    constructor(data) {
        Object.assign(this, data);
    }
}

/**
 * This is a button component that support pepperi theme
 * style & state & sizes
 *
 * @export
 * @class PepButtonComponent
 * @implements {OnDestroy}
 */
class PepButtonComponent {
    constructor(renderer, element) {
        this.renderer = renderer;
        this.element = element;
        /**
         * The style of the button.
         *
         * @type {PepStyleType}
         * @memberof PepButtonComponent
         */
        this.styleType = 'weak';
        /**
         * The style state of the button.
         *
         * @type {PepStyleStateType}
         * @memberof PepButtonComponent
         */
        this.styleStateType = 'system';
        /**
         * The size of the button.
         *
         * @type {PepSizeType}
         * @memberof PepButtonComponent
         */
        this.sizeType = 'md';
        /**
         * Class names that should be on the button element tag like classNames="class1 class2"
         *
         * @memberof PepButtonComponent
         */
        this.classNames = '';
        /**
         * If the button is disable or not.
         *
         * @type {boolean}
         * @memberof PepButtonComponent
         */
        this.disabled = false;
        /**
         * The icon position.
         *
         * @type {('start' | 'end')}
         * @memberof PepButtonComponent
         */
        this.iconPosition = 'end';
        this._visible = true;
        /**
         * The button click event.
         *
         * @type {EventEmitter<IPepButtonClickEvent>}
         * @memberof PepButtonComponent
         */
        this.buttonClick = new EventEmitter();
    }
    /**
     * If the button is visible or not.
     *
     * @memberof PepButtonComponent
     */
    set visible(visible) {
        if (visible !== undefined) {
            this._visible = !!visible;
            if (visible) {
                this.renderer.removeClass(this.element.nativeElement, 'hidden-element');
            }
            else {
                this.renderer.addClass(this.element.nativeElement, 'hidden-element');
            }
        }
    }
    get visible() {
        return this._visible;
    }
    ngOnDestroy() {
        // if (this.buttonClick) {
        //     this.buttonClick.unsubscribe();
        // }
    }
    /**
     * The button click
     */
    onButtonClicked(event) {
        const button = new PepButton({
            key: this.key,
            value: this.value,
        });
        const buttonClick = {
            source: button,
            event,
        };
        this.buttonClick.emit(buttonClick);
    }
}
PepButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'pep-button',
                template: "<button mat-button [pepDataQa]=\"key ? key : value\"\n    class=\"pep-button {{ sizeType }} {{ styleType }} {{ styleStateType }} {{ classNames }}\"\n    [ngClass]=\"{ 'icon-button': iconName && !value }\" [disabled]=\"disabled\" (click)=\"onButtonClicked($event)\">\n    <ng-container *ngTemplateOutlet=\"contentTemplate\">\n    </ng-container>\n</button>\n\n<ng-template #contentTemplate>\n    <mat-icon *ngIf=\"iconName && iconPosition === 'start'\" [ngClass]=\"{ 'pull-left flip': value }\">\n        <pep-icon name=\"{{iconName}}\"></pep-icon>\n    </mat-icon>\n    <span *ngIf=\"value\" class=\"ellipsis pull-left flip\"\n        [ngClass]=\"{ 'button-title-with-icon': iconName, 'icon-before': iconPosition === 'start' }\" [title]=\"value\">\n        {{value}}\n    </span>\n    <mat-icon *ngIf=\"iconName && iconPosition === 'end'\" [ngClass]=\"{ 'pull-left flip': value }\">\n        <pep-icon name=\"{{iconName}}\"></pep-icon>\n    </mat-icon>\n</ng-template>",
                styles: [":host{display:grid}"]
            },] }
];
PepButtonComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
PepButtonComponent.propDecorators = {
    key: [{ type: Input }],
    value: [{ type: Input }],
    styleType: [{ type: Input }],
    styleStateType: [{ type: Input }],
    sizeType: [{ type: Input }],
    classNames: [{ type: Input }],
    disabled: [{ type: Input }],
    iconName: [{ type: Input }],
    iconPosition: [{ type: Input }],
    visible: [{ type: Input }],
    buttonClick: [{ type: Output }]
};

class PepButtonModule {
}
PepButtonModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    // Material modules
                    MatCommonModule,
                    MatButtonModule,
                    MatIconModule,
                    // ngx-lib modules
                    PepNgxLibModule,
                    PepIconModule,
                ],
                exports: [PepButtonComponent],
                declarations: [PepButtonComponent],
            },] }
];

/*
 * Public API Surface of ngx-lib/button
 */

/**
 * Generated bundle index. Do not edit.
 */

export { PepButton, PepButtonComponent, PepButtonModule };
//# sourceMappingURL=pepperi-addons-ngx-lib-button.js.map
