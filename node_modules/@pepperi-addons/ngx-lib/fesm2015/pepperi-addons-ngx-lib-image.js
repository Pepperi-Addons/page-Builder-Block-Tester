import { EventEmitter, Component, ChangeDetectionStrategy, Renderer2, ElementRef, Input, Output, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { MatCommonModule } from '@angular/material/core';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatIconModule } from '@angular/material/icon';
import { DEFAULT_HORIZONTAL_ALIGNMENT, PepCustomizationService, PepImageField, PepFileService, PepNgxLibModule } from '@pepperi-addons/ngx-lib';
import { pepIconNoImage2, pepIconSystemMenu, pepIconSystemBolt, pepIconIndicatorDotPlaceholder, PepIconModule, PepIconRegistry } from '@pepperi-addons/ngx-lib/icon';
import { PepFieldTitleModule } from '@pepperi-addons/ngx-lib/field-title';
import { PepFilesUploaderModule } from '@pepperi-addons/ngx-lib/files-uploader';
import { PepImagesFilmstripComponent, PepImagesFilmstripModule } from '@pepperi-addons/ngx-lib/images-filmstrip';
import { TranslateService } from '@ngx-translate/core';
import { PepDialogService } from '@pepperi-addons/ngx-lib/dialog';

class PepImageComponent {
    constructor(dialogService, customizationService, fileService, renderer, element, translate) {
        this.dialogService = dialogService;
        this.customizationService = customizationService;
        this.fileService = fileService;
        this.renderer = renderer;
        this.element = element;
        this.translate = translate;
        this.key = '';
        this.srcLarge = '';
        this.src = '';
        this.options = [];
        this.label = '';
        // @Input() type = 'image';
        this.mandatory = false;
        this.disabled = false;
        this.readonly = false;
        this.xAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;
        this._rowSpan = 1;
        this.indicatorsField = null;
        this.menuField = null;
        this.hasCampaignField = null;
        this._visible = true;
        this.controlType = 'image';
        this.form = null;
        this.uid = '';
        this.showTitle = true;
        this._layoutType = 'form';
        this.isActive = false;
        this.sizeLimitMB = 5;
        this.acceptImagesType = 'bmp,jpg,jpeg,png,gif'; // "image/bmp, image/jpg, image/jpeg, image/png, image/tif, image/tiff";
        this.fileChange = new EventEmitter();
        this.elementClick = new EventEmitter();
        this.fieldHeight = '';
        this.standAlone = false;
        this.dataURI = null;
    }
    set rowSpan(value) {
        this._rowSpan = value;
        this.setFieldHeight();
    }
    get rowSpan() {
        return this._rowSpan;
    }
    set visible(visible) {
        this._visible = visible;
        if (visible) {
            this.renderer.removeClass(this.element.nativeElement, 'hidden-element');
        }
        else {
            this.renderer.addClass(this.element.nativeElement, 'hidden-element');
        }
    }
    get visible() {
        return this._visible;
    }
    set layoutType(value) {
        this._layoutType = value;
        this.setFieldHeight();
    }
    get layoutType() {
        return this._layoutType;
    }
    ngOnInit() {
        if (this.form === null) {
            this.standAlone = true;
            this.setFieldHeight();
            this.setDefaultForm();
            this.renderer.addClass(this.element.nativeElement, PepCustomizationService.STAND_ALONE_FIELD_CLASS_NAME);
        }
    }
    setFieldHeight() {
        this.fieldHeight = this.customizationService.calculateFieldHeight(this.layoutType, this.rowSpan, this.standAlone);
    }
    setDefaultForm() {
        const pepField = new PepImageField({
            key: this.key,
            value: this.src,
            mandatory: this.mandatory,
            readonly: this.readonly,
            disabled: this.disabled,
        });
        this.form = this.customizationService.getDefaultFromGroup(pepField);
    }
    ngOnChanges(changes) {
        var _a, _b;
        if (this.standAlone) {
            this.setDefaultForm();
        }
        if (((_b = (_a = changes.src) === null || _a === void 0 ? void 0 : _a.currentValue) === null || _b === void 0 ? void 0 : _b.length) > 0) {
            // Empty dataURI if there is change in the src.
            this.dataURI = null;
        }
    }
    ngOnDestroy() {
        //
    }
    errorHandler(event) {
        event.target.src = this.fileService.getSvgAsImageSrc(pepIconNoImage2.data);
        event.target.title = this.translate.instant('IMAGE.NO_IMAGE');
    }
    onImageLoad(event) {
        event.target.style.visibility = 'visible';
        event.target.title =
            event.target.title.length === 0
                ? this.translate.instant('IMAGE.CLICK_TO_ENLARGE')
                : event.target.title;
    }
    onMenuClick(event) {
        this.elementClick.emit({
            key: this.key,
            value: PepImageComponent.MENU_CLICKED,
            controlType: this.controlType,
            eventWhich: event.which,
        });
    }
    onFileChanged(fileData) {
        this.dataURI = fileData;
        this.src = this.srcLarge =
            this.standAlone && this.dataURI ? this.dataURI.fileStr : '';
        this.customizationService.updateFormFieldValue(this.form, this.key, this.dataURI ? this.dataURI.fileExt : '');
        // this.valueChange.emit({
        //     key: this.key,
        //     value,
        // });
        this.fileChange.emit(fileData);
        // this.fileChange.emit(value.length > 0 ? JSON.parse(value) : value);
    }
    objectIdIsNotEmpty() {
        var _a;
        return ((_a = this.uid) === null || _a === void 0 ? void 0 : _a.length) > 0 && this.uid !== '0';
    }
    onFileClicked(event) {
        let hasParentImage = true;
        if (
        // this.objectIdIsNotEmpty() &&
        this.src &&
            this.src.indexOf('no-image') > -1) {
            hasParentImage = false;
        }
        this.openImageModal(hasParentImage);
        this.elementClick.emit(event);
    }
    itemImageClick(event) {
        let hasParentImage = true;
        const elemTarget = event.target || event.srcElement;
        const nextElement = elemTarget.nextElementSibling || null;
        const imageSRC = elemTarget.src || null;
        const nextElementSRC = nextElement && nextElement.src ? nextElement.src : null;
        if ((imageSRC && imageSRC.indexOf('no-image') > -1) ||
            (nextElementSRC && nextElementSRC.src.indexOf('no-image') > -1)) {
            hasParentImage = false;
        }
        this.openImageModal(hasParentImage);
    }
    openImageModal(hasParentImage) {
        if (this.dataURI) {
            const fileStrArr = this.dataURI.fileStr.split(';');
            if (fileStrArr.length === 2) {
                const win = window.open('', '_blank');
                const contentType = fileStrArr[0].split(':')[1];
                const base64 = fileStrArr[1].split(',')[1];
                const blob = this.fileService.convertFromb64toBlob(base64, contentType);
                const url = URL.createObjectURL(blob);
                win.location.href = url;
            }
        }
        else {
            const arr = [this.srcLarge || this.src].concat((this.options || []).map((opt) => opt.value));
            const imagesValue = arr.join(';');
            // Show image in modal.
            const config = this.dialogService.getDialogConfig({}, 'inline');
            config.maxWidth = '75vw';
            config.height = '95vh';
            this.dialogService.openDialog(PepImagesFilmstripComponent, {
                currIndex: 0,
                key: this.key,
                value: imagesValue,
                label: this.label,
                uid: this.uid,
                showThumbnails: arr.length > 1,
            }, config);
        }
    }
}
PepImageComponent.MENU_CLICKED = '[MenuClicked]';
PepImageComponent.decorators = [
    { type: Component, args: [{
                selector: 'pep-image',
                template: "<ng-container [formGroup]=\"form\">\n    <ng-container>\n        <ng-template #readonlyTemplate>\n            <div class=\"img-wrapper\" [ngClass]=\"{\n                'left-alignment': xAlignment == 'left',\n                'right-alignment': xAlignment == 'right',\n                'center-alignment': xAlignment == 'center'\n            }\">\n                <img [id]=\"key\" [style.max-height]=\"fieldHeight\" class=\"pep-report-file\" [alt]=\"label\" [src]=\"src\"\n                    (click)=\"itemImageClick($event)\" (error)=\"errorHandler($event)\" (load)=\"onImageLoad($event)\" />\n            </div>\n        </ng-template>\n\n        <ng-container *ngIf=\"layoutType === 'form'\">\n            <pep-field-title [label]=\"label\" [mandatory]=\"mandatory\" [disabled]=\"disabled\" [xAlignment]=\"xAlignment\"\n                [showTitle]=\"showTitle\">\n            </pep-field-title>\n            <ng-container *ngIf=\"disabled || readonly; then disabledTemplate; else editableTemplate\"></ng-container>\n            <ng-template #disabledTemplate>\n                <div class=\"pep-file body-sm\" [style.height]=\"fieldHeight\" [ngClass]=\"{'one-row': rowSpan == 1}\">\n                    <ng-container *ngTemplateOutlet=\"readonlyTemplate\"></ng-container>\n                </div>\n            </ng-template>\n            <ng-template #editableTemplate>\n                <div class=\"pep-file-container image-container\" [ngClass]=\"{ 'one-row': rowSpan == 1}\">\n                    <pep-files-uploader [id]=\"key\" [key]=\"key\" [fieldHeight]=\"fieldHeight\" [layoutType]=\"layoutType\"\n                        [standAlone]=\"standAlone\" [src]=\"srcLarge || src\" [label]=\"label\" [mandatory]=\"mandatory\"\n                        [disabled]=\"disabled\" [xAlignment]=\"xAlignment\" [rowSpan]=\"rowSpan\" [controlType]=\"controlType\"\n                        [form]=\"form\" [acceptedExtensions]=\"acceptImagesType\" (fileChange)=\"onFileChanged($event)\"\n                        (elementClick)=\"onFileClicked($event)\" [sizeLimitMB]=\"sizeLimitMB\">\n                    </pep-files-uploader>\n                </div>\n            </ng-template>\n        </ng-container>\n\n        <ng-container *ngIf=\"layoutType === 'card'\">\n            <ng-container *ngTemplateOutlet=\"readonlyTemplate\"></ng-container>\n            <!-- <div class=\"img-wrapper\"\n                [ngClass]=\"{\n                    'left-alignment': xAlignment == 'left',\n                    'right-alignment': xAlignment == 'right',\n                    'center-alignment': xAlignment == 'center'\n                }\">\n                <img [id]=\"key\" [style.max-height]=\"fieldHeight\" class=\"pep-report-file\" [alt]=\"label\" [src]=\"src\"\n                    (click)=\"itemImageClick($event)\" (error)=\"errorHandler($event)\" />\n            </div> -->\n        </ng-container>\n\n        <ng-container *ngIf=\"layoutType === 'table'\">\n            <ng-container *ngTemplateOutlet=\"readonlyTemplate\"></ng-container>\n            <!-- <div class=\"img-wrapper\" [ngClass]=\"{\n                    'left-alignment': xAlignment == 'left',\n                    'right-alignment': xAlignment == 'right',\n                    'center-alignment': xAlignment == 'center'\n                }\">\n                <img [id]=\"key\" [style.max-height]=\"fieldHeight\" class=\"pep-report-file pep-report-img\"\n                    [ngClass]=\"['text-align-' + xAlignment]\" [alt]=\"label\" [src]=\"src\" (click)=\"itemImageClick($event)\"\n                    (error)=\"errorHandler($event)\" (load)=\"onImageLoad($event)\" />\n            </div> -->\n        </ng-container>\n    </ng-container>\n\n    <!-- Menu -->\n    <ng-container *ngIf=\"menuField\">\n        <button [id]=\"key\" (click)=\"onMenuClick($event)\" class=\"floating-field pep-button icon-button weak invert\"\n            [ngClass]=\"{\n                bottom: menuField?.Layout?.YAlignment == '2',\n                top: menuField?.Layout?.YAlignment == '1',\n                left: menuField?.Layout?.XAlignment == '1',\n                right: menuField?.Layout?.XAlignment == '2'\n            }\">\n            <mat-icon>\n                <pep-icon name=\"system_menu\"></pep-icon>\n            </mat-icon>\n        </button>\n    </ng-container>\n\n    <!-- Campaign -->\n    <ng-container *ngIf=\"hasCampaignField && hasCampaignField?.FormattedValue\">\n        <span [id]=\"key\" class=\"campaign floating-field\" title=\"{{ hasCampaignField?.FormattedValue }}\" [ngClass]=\"{\n                bottom: hasCampaignField?.Layout?.YAlignment == '2',\n                top: hasCampaignField?.Layout?.YAlignment == '1',\n                left: hasCampaignField?.Layout?.XAlignment == '1',\n                right: hasCampaignField?.Layout?.XAlignment == '2'\n            }\">\n            <mat-icon class=\"has-active-campaign\">\n                <pep-icon name=\"system_bolt\"></pep-icon>\n            </mat-icon>\n        </span>\n    </ng-container>\n\n    <!-- Indicators -->\n    <ng-container *ngIf=\"indicatorsField && indicatorsField?.FormattedValue != ''\">\n        <span [id]=\"key\" class=\"indicators-container floating-field\" [ngClass]=\"{\n                bottom: indicatorsField?.Layout?.YAlignment == '2',\n                top: indicatorsField?.Layout?.YAlignment == '1',\n                left: indicatorsField?.Layout?.XAlignment == '1',\n                right: indicatorsField?.Layout?.XAlignment == '2'\n            }\">\n            <mat-icon>\n                <ng-container *ngFor=\"let value of indicatorsField?.FormattedValue?.split(';')\">\n                    <pep-icon class=\"pull-left flip\" name=\"indicator_dot_placeholder\" [fill]=\"value\"></pep-icon>\n                </ng-container>\n                <ng-container *ngIf=\"indicatorsField?.FormattedValue?.split(';').length < 4\">\n                    <pep-icon class=\"pull-left flip\" name=\"indicator_dot_placeholder\"></pep-icon>\n                </ng-container>\n            </mat-icon>\n        </span>\n    </ng-container>\n</ng-container>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{width:100%;height:inherit;display:grid}:host>*{align-self:center}.img-wrapper{display:flex;align-items:center;height:100%;max-width:100%}.img-wrapper.left-alignment{justify-content:flex-start}.img-wrapper.center-alignment{justify-content:center}.img-wrapper.right-alignment{justify-content:flex-end}.img-wrapper img{max-width:100%;height:100%;-o-object-fit:contain;object-fit:contain}.pep-file-container,.pepperi-file-container{height:100%}.pep-file-container .img-wrapper,.pepperi-file-container .img-wrapper{height:calc(100% - 1.5rem)}.pep-file-container img,.pepperi-file-container img{cursor:pointer}.indicators-container{padding:0!important}.indicators-container mat-icon{height:100%;width:100%;padding:.4rem}.indicators-container mat-icon pep-icon{height:.75rem!important;width:.75rem!important;margin:.05rem}.floating-field{width:2.5rem;height:2.5rem;border-radius:.25rem;border-radius:var(--pep-border-radius-md,.25rem);padding:.5rem;cursor:pointer;position:absolute!important}.top{top:0}.bottom{bottom:0}.left{left:0}.right{right:0}"]
            },] }
];
PepImageComponent.ctorParameters = () => [
    { type: PepDialogService },
    { type: PepCustomizationService },
    { type: PepFileService },
    { type: Renderer2 },
    { type: ElementRef },
    { type: TranslateService }
];
PepImageComponent.propDecorators = {
    key: [{ type: Input }],
    srcLarge: [{ type: Input }],
    src: [{ type: Input }],
    options: [{ type: Input }],
    label: [{ type: Input }],
    mandatory: [{ type: Input }],
    disabled: [{ type: Input }],
    readonly: [{ type: Input }],
    xAlignment: [{ type: Input }],
    rowSpan: [{ type: Input }],
    indicatorsField: [{ type: Input }],
    menuField: [{ type: Input }],
    hasCampaignField: [{ type: Input }],
    visible: [{ type: Input }],
    form: [{ type: Input }],
    uid: [{ type: Input }],
    showTitle: [{ type: Input }],
    layoutType: [{ type: Input }],
    isActive: [{ type: Input }],
    sizeLimitMB: [{ type: Input }],
    acceptImagesType: [{ type: Input }],
    fileChange: [{ type: Output }],
    elementClick: [{ type: Output }]
};

class PepImageModule {
    constructor(pepIconRegistry) {
        this.pepIconRegistry = pepIconRegistry;
        this.pepIconRegistry.registerIcons([
            pepIconSystemMenu,
            pepIconSystemBolt,
            pepIconIndicatorDotPlaceholder,
        ]);
    }
}
PepImageModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    // Material modules,
                    MatCommonModule,
                    MatFormFieldModule,
                    MatIconModule,
                    // ngx-lib modules
                    PepNgxLibModule,
                    PepIconModule,
                    PepFieldTitleModule,
                    PepImagesFilmstripModule,
                    PepFilesUploaderModule,
                ],
                exports: [PepImageComponent],
                declarations: [PepImageComponent],
                entryComponents: [PepImagesFilmstripComponent],
            },] }
];
PepImageModule.ctorParameters = () => [
    { type: PepIconRegistry }
];

/*
 * Public API Surface of ngx-lib/image
 */

/**
 * Generated bundle index. Do not edit.
 */

export { PepImageComponent, PepImageModule };
//# sourceMappingURL=pepperi-addons-ngx-lib-image.js.map
