import { ResourceType } from '@pepperi-addons/papi-sdk/dist/entities';
import { CPIDBObject } from '../../wrappers';
declare const FieldDataTypes: {
    Bool: number;
    Integer: number;
    Double: number;
    String: number;
    DateTime: number;
    Date: number;
    MultipleStringValues: number;
    SingleStringValue: number;
    None: number;
    ObjectRef: number;
    Guid: number;
    JsonBool: number;
};
export declare type FieldDataType = keyof typeof FieldDataTypes;
export interface FieldTypeAndValue {
    value: any;
    dataType: FieldDataType;
}
export declare class DataObjectFactory {
    static Create(dbObject: CPIDBObject): DataObject;
    static Create(dbObject: CPIDBObject | undefined): DataObject | undefined;
}
/**
 * Represents a DataObject within the CPI
 */
export declare class DataObject {
    static Get(resource: 'accounts', uuid: string): Promise<Account | undefined>;
    static Get(resource: 'contacts', uuid: string): Promise<Contact | undefined>;
    static Get(resource: 'activities', uuid: string): Promise<GeneralActivity | undefined>;
    static Get(resource: 'transactions', uuid: string): Promise<Transaction | undefined>;
    static Get(resource: 'transaction_lines', uuid: string): Promise<TransactionLine | undefined>;
    static Get(resource: 'users', uuid: string): Promise<User | undefined>;
    static Get(resource: 'items', uuid: string): Promise<Item | undefined>;
    static Get(resource: string, uuid: string): Promise<DataObject | undefined>;
    /**
     * The DataObject UUID
     */
    get uuid(): string;
    /**
     * The DataObject InternalID
     */
    get internalID(): number;
    /**
     * Is the DataObject Hidden
     */
    get hidden(): boolean;
    /**
     * The DataObject type definition if exists
     */
    get typeDefinition(): TypeDefinition | undefined;
    get resource(): ResourceType;
    /**
     * Set a field value by FieldID
     * throws an exception if there is an error
     * @param fieldID The Field ID
     * @param value The value to set
     * @param doCalculations Any TSA's that depend on this Field will be recalculated
     */
    setFieldValue(fieldID: string, value: any, doCalculations?: boolean): Promise<void>;
    /**
     * Get a field value by FieldID
     * @param fieldID The field ID
     * @returns undefined if no such field exists
     */
    getFieldValue(fieldID: string): Promise<any>;
    toJSON(): any;
}
export declare class TypeDefinition extends DataObject {
    get name(): string;
    toJSON(): any;
    get type(): ResourceType;
}
export declare class Account extends DataObject {
    /**
     * The Account Name
     */
    get name(): string;
    /**
     * The Account Parent Account if it exists
     */
    get parent(): Account | undefined;
    /**
     * The Accounts Contacts if they exist
     */
    get contacts(): Contact[];
    toJSON(): any;
}
export declare class Contact extends DataObject {
    /**
     * The contact's account
     */
    get account(): Account;
    toJSON(): any;
}
/**
 * An Activity DataObject
 * Inhertied by Transaction & GeneralActivity
 */
export declare class Activity extends DataObject {
    get externalID(): string;
    get actionDateTime(): string;
    get status(): number;
    get account(): Account;
    get assignee(): User | undefined;
    get creator(): User | undefined;
    setAssignee(value: DataObject | undefined): Promise<void>;
    toJSON(): any;
}
/**
 * A GeneralActivity {@link DataObject}
 */
export declare class GeneralActivity extends Activity {
    toJSON(): any;
}
export declare class Transaction extends Activity {
    /**
     * The transaction lines
     */
    get lines(): TransactionLine[];
    get catalog(): DataObject;
    toJSON(): any;
}
export declare class TransactionLine extends DataObject {
    get item(): DataObject;
    get transaction(): Transaction;
    get parent(): TransactionLine | undefined;
    get children(): TransactionLine[];
    toJSON(): any;
}
export declare class User extends DataObject {
    get externalID(): string;
    get email(): string;
    get firstName(): string;
    get lastName(): string;
    toJSON(): any;
}
export declare class Item extends DataObject {
    get externalID(): string;
    setFieldValue(fieldID: string, value: any, doCalculations?: boolean): Promise<void>;
    toJSON(): any;
}
export {};
