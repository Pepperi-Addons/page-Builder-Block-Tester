/// <reference types="node" />
import { EventEmitter } from 'events';
import { Interceptor } from './interceptor';
export declare const EventKeys: readonly ["RecalculateUIObject", "SetFieldValue", "IncrementFieldValue", "DecrementFieldValue", "TSAButtonPressed"];
export declare type EventKey = typeof EventKeys[number];
export declare class AppEventsEmitter extends EventEmitter {
    private events;
    constructor();
    /**
     * Add an Interceptor to an event
     * @param event The event key
     * @param filter A filter object to intercept certain events
     * @param interceptor The interceptor
     */
    intercept(event: EventKey, filter: any, interceptor: Interceptor): void;
    /**
     * setup the event listeners for every event
     * */
    private setupEvents;
    /**
     * Setup the default handlers for events
     */
    private setupDefaultHandlers;
    private getEventData;
    /**
     * Filter the interceptors
     * @param o1 the interceptor filter
     * @param o2 the context
     */
    private filter;
}
