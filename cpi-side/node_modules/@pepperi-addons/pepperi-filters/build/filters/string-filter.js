"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StringFilter = void 0;
const filter_1 = __importDefault(require("./filter"));
class StringFilter extends filter_1.default {
    constructor(apiName, operation, filterValues, caseSensitive = true) {
        super(apiName);
        this.operation = operation;
        this.filterValues = filterValues;
        this.caseSensitive = caseSensitive;
    }
    apply(value) {
        // anything that isn't a string is considered to be an empty value
        const stringVal = typeof value === 'string' ? value : '';
        switch (this.operation) {
            case 'IsEmpty':
                return stringVal === '';
            case 'IsNotEmpty':
                return stringVal !== '';
            case 'IsEqual':
                return this.compare(stringVal);
            case 'IsNotEqual':
                return !this.compare(stringVal);
            case 'Contains':
                return stringVal.toLocaleLowerCase().includes(this.filterValues[0].toLocaleLowerCase());
            case 'StartWith':
                return stringVal.toLocaleLowerCase().startsWith(this.filterValues[0].toLocaleLowerCase());
            case 'EndWith':
                return stringVal.toLocaleLowerCase().endsWith(this.filterValues[0].toLocaleLowerCase());
            case 'IsLoggedInUser':
                throw new Error("IsLoggedInUser isn't a supported filter");
        }
    }
    toSQLWhereClause() {
        switch (this.operation) {
            case 'IsEmpty':
                return `${this.apiName} IS NULL OR ${this.apiName} = ''`;
            case 'IsNotEmpty':
                return `${this.apiName} IS NOT NULL AND ${this.apiName} != ''`;
            case 'IsEqual':
                return `${this.apiName} IN (${this.filterValues.map((str) => `'${str}'`).join(', ')})`;
            case 'IsNotEqual':
                return `${this.apiName} NOT IN (${this.filterValues.map((str) => `'${str}'`).join(', ')})`;
            case 'Contains':
                return `${this.apiName} LIKE '%${this.filterValues[0]}%'`;
            case 'StartWith':
                return `${this.apiName} LIKE '${this.filterValues[0]}%'`;
            case 'EndWith':
                return `${this.apiName} LIKE '%${this.filterValues[0]}'`;
            case 'IsLoggedInUser':
                throw new Error("IsLoggedInUser isn't a supported filter");
        }
    }
    compare(value) {
        if (typeof value !== 'string') {
            return false;
        }
        const first = this.filterValues.find((str) => {
            return (str.localeCompare(value, undefined, {
                sensitivity: this.caseSensitive ? 'case' : 'base',
            }) === 0);
        });
        return first != undefined;
    }
}
exports.StringFilter = StringFilter;
